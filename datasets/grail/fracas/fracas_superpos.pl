:- dynamic sent/2.

sent(1, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('Italien', npp-nam, 'Italien', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(ténor, nc-nom, ténor, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('Italien', nc-nam, 'Italien', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(ténor, nc-nom, ténor, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(3, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Italien', npp-nam, 'Italien', [n-1]), si(veut, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(ténor, nc-nom, ténor, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(4, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si('Italiens', nc-nam, 'Italiens', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(5, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Italiens', nc-nam, 'Italiens', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(veulent, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(6, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Italiens', nc-nam, 'Italiens', [n-1]), si(veulent, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(7, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si('Italiens', npp-nam, 'Italiens', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(8, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('Italiens', nc-nam, 'Italiens', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(veulent, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1])], Result).
sent(9, Result) :-
      prob_parse([ si('Chaque', det-pro:ind, 'Chaque', [dr(0,np,n)-1]), si(ténor, nc-nom, ténor, [n-1]), si(italien, adj-adj, italien, [dl(0,n,n)-1]), si(veut, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(excellent, adj-adj, excellent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(10, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(italiens, adj-adj, italien, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(excellents, adj-adj, excellent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(11, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(italiens, adj-adj, italien, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(veulent, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(excellent, adj-adj, excellent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(12, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(vraiment, adv-adv, vraiment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(ambitieux, adj-adj, ambitieux, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(italiens, adj-adj, italien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(13, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(vraiment, adv-adv, vraiment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(ambitieux, adj-adj, ambitieux, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(italiens, adj-adj, italien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(14, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(ténor, nc-nom, ténor, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(modeste, adj-adj, modeste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(15, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(modestes, adj-adj, modeste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(16, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(17, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(18, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(allemands, adj-adj, allemand, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(19, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(allemands, adj-adj, allemand, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(20, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(21, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(22, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(italiens, adj-adj, italien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(23, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(italiens, adj-adj, italien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(24, Result) :-
      prob_parse([ si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(chantent, v-ver:pres, chanter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(chansons, nc-nom, chanson, [n-1]), si(populaires, adj-adj, populaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(25, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(aiment, v-ver:pres, aimer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chansons, nc-nom, chanson, [n-1]), si(populaires, adj-adj, populaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(26, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(chantent, v-ver:pres, chanter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(chansons, nc-nom, chanson, [n-1]), si(populaires, adj-adj, populaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(27, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pauvres, adj-adj, pauvre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(28, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pauvres, adj-adj, pauvre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(29, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(principaux, adj-adj, principal, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(excellents, adj-adj, excellent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(30, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(principaux, adj-adj, principal, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(excellents, adj-adj, excellent, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(indispensables, adj-adj, indispensable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(31, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(principaux, adj-adj, principal, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(indispensables, adj-adj, indispensable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(32, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(principal, adj-adj, principal, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bon, adj-adj, bon, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(33, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(principal, adj-adj, principal, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Pavarotti', npp-nam, 'Pavarotti', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(34, Result) :-
      prob_parse([ si('Pavarotti', npp-nam, 'Pavarotti', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ténor, nc-nom, ténor, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(principal, adj-adj, principal, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bon, adj-adj, bon, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(35, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(prendront, v-ver:futu, prendre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(part, nc-nom, part, [np-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(concert, nc-nom, concert, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(36, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(prendront, v-ver:futu, prendre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(part, nc-nom, part, [np-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(concert, nc-nom, concert, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(37, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(donneront, v-ver:futu, donner, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(cachet, nc-nom, cachet, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(caritative, adj-adj, caritatif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(38, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(ténors, nc-nom, ténor, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(donneront, v-ver:futu, donner, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(cachet, nc-nom, cachet, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(caritative, adj-adj, caritatif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(39, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('Irlandais', nc-nam, 'Irlandais', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(littérature, nc-nom, littérature, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(40, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('Irlandais', nc-nam, 'Irlandais', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(41, Result) :-
      prob_parse([ si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), si('Européen', adj-nam, 'Européen', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(42, Result) :-
      prob_parse([ si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Européen', npp-nam, 'Européen', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(43, Result) :-
      prob_parse([ si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(44, Result) :-
      prob_parse([ si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Européen', npp-nam, 'Européen', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(45, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(46, Result) :-
      prob_parse([ si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Européen', npp-nam, 'Européen', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(47, Result) :-
      prob_parse([ si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(48, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(49, Result) :-
      prob_parse([ si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), si('Européen', adj-nam, 'Européen', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(50, Result) :-
      prob_parse([ si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Européen', npp-nam, 'Européen', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(51, Result) :-
      prob_parse([ si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(52, Result) :-
      prob_parse([ si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Européen', adj-nam, 'Européen', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(53, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(états, nc-nom, état, [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(54, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(états, nc-nom, état, [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(individus, nc-nom, individu, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(55, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(individu, nc-nom, individu, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(56, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(états, nc-nom, état, [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(57, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(délégué, nc-nom, délégué, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(58, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(délégué, nc-nom, délégué, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(59, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(60, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(61, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(intéressants, adj-adj, intéressant, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(62, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(63, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(quotidiens, nc-nom, quotidien, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(64, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(65, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(résident, v-ver:pres, résider, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(66, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(67, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(résident, v-ver:pres, résider, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(68, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(69, Result) :-
      prob_parse([ si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Suède', npp-nam, 'Suède', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(70, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(71, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Suède', npp-nam, 'Suède', [n-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(72, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(73, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(membre, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Portugal', npp-nam, 'Portugal', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(74, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(75, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Portugal', npp-nam, 'Portugal', [n-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(76, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(77, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(premier, det-num, premier, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(78, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaire, nc-nom, affaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(79, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(passe, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(80, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(passe, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(81, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(moins, adv-adv, moins, [n-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(82, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(moins, adv-adv, moins, [n-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(83, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(84, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(85, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('Irlandais', nc-nam, 'Irlandais', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(86, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(irlandais, nc-nom, irlandais, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(littérature, nc-nom, littérature, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(87, Result) :-
      prob_parse([ si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Européen', npp-nam, 'Européen', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(88, Result) :-
      prob_parse([ si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Européen', npp-nam, 'Européen', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(89, Result) :-
      prob_parse([ si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(90, Result) :-
      prob_parse([ si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), si('Européen', adj-nam, 'Européen', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(91, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(92, Result) :-
      prob_parse([ si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Européen', npp-nam, 'Européen', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(93, Result) :-
      prob_parse([ si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(habiter, vinf-ver:infi, habiter, [dl(0,np,s_inf)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(94, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(habiter, vinf-ver:infi, habiter, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(95, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si('Européen', adj-nam, 'Européen', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(96, Result) :-
      prob_parse([ si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), si('Européen', npp-nam, 'Européen', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(97, Result) :-
      prob_parse([ si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(habiter, vinf-ver:infi, habiter, [dl(0,np,s_inf)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(98, Result) :-
      prob_parse([ si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), si('Européen', npp-nam, 'Européen', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(habiter, vinf-ver:infi, habiter, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(99, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(100, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(101, Result) :-
      prob_parse([ si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dl(0,np,s_inf)-1]), si('n\'', adv-adv, 'n\'', [np-1]), si(importe, v-ver:pres, importer, [dl(0,np,s)-1]), si(où, prorel-pro:rel, où, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(102, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États', nc-nom, 'États', [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dl(0,np,s_inf)-1]), si('n\'', adv-adv, 'n\'', [dl(0,np,s)-1]), si(importe, v-ver:pres, importer, [dl(0,np,s)-1]), si(où, prorel-pro:rel, où, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(103, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(délégué, nc-nom, délégué, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(104, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(délégué, nc-nom, délégué, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(105, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(106, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(107, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(108, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(intéressants, adj-adj, intéressant, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(109, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(110, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(quotidiens, nc-nom, quotidien, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(111, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(112, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(113, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(habitent, v-ver:pres, habiter, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(114, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(habitent, v-ver:pres, habiter, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(115, Result) :-
      prob_parse([ si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(116, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(117, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(originaires, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Suède', npp-nam, 'Suède', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, adj-adj, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(118, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Suède', npp-nam, 'Suède', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(119, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(120, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(121, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(originaires, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Portugal', npp-nam, 'Portugal', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(122, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(originaires, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Portugal', npp-nam, 'Portugal', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(123, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(124, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(premier, det-num, premier, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(125, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(passe, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(126, Result) :-
      prob_parse([ si('Un', pro-num, 'Un', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passe, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(127, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(moins, adv-adv, moins, [n-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(128, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(moins, adv-adv, moins, [n-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(129, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(130, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(131, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('Suédois', nc-nam, 'Suédois', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(132, Result) :-
      prob_parse([ si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), si('Suédois', npp-nam, 'Suédois', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('Scandinave', nc-nam, 'Scandinave', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(133, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('Scandinave', npp-nam, 'Scandinave', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(134, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(135, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(136, Result) :-
      prob_parse([ si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(137, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(138, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(139, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(140, Result) :-
      prob_parse([ si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(résident, nc-nom, résident, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(141, Result) :-
      prob_parse([ si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(142, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(143, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(habitants, nc-nom, habitant, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(pays, nc-nom, pays, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(144, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(habiter, vinf-ver:infi, habiter, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(145, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(délégué, nc-nom, délégué, [n-1]), si(scandinave, adj-adj, scandinave, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(146, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(délégué, nc-nom, délégué, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(147, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(irlandais, adj-adj, irlandais, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(148, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(149, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(intéressants, adj-adj, intéressant, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(150, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(intéressants, adj-adj, intéressant, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(151, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(portugais, adj-adj, portugais, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(quotidiens, nc-nom, quotidien, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(152, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(quotidiens, nc-nom, quotidien, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(153, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(habitent, v-ver:pres, habiter, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(154, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(155, Result) :-
      prob_parse([ si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(féminins, adj-adj, féminin, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(156, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-adj, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(157, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(membres, nc-nom, membre, [n-1]), si(féminins, adj-adj, féminin, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(158, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(159, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(femmes, nc-nom, femme, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(affaires, nc-nom, affaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(160, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(affaires, nc-nom, affaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(161, Result) :-
      prob_parse([ si('Aucune', pro-pro:ind, 'Aucune', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(commissaires, nc-nom, commissaire, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(passe, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(162, Result) :-
      prob_parse([ si('Une', pro-num, 'Une', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passe, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(163, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(164, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(moins, adv-adv, moins, [n-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(165, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(166, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(167, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('Scandinave', npp-nam, 'Scandinave', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(168, Result) :-
      prob_parse([ si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), si('Suédois', npp-nam, 'Suédois', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('Scandinave', nc-nam, 'Scandinave', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(169, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si('Suédois', nc-nam, 'Suédois', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(170, Result) :-
      prob_parse([ si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(171, Result) :-
      prob_parse([ si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(172, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(173, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(174, Result) :-
      prob_parse([ si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(175, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(176, Result) :-
      prob_parse([ si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(177, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(continent, nc-nom, continent, [n-1]), si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(178, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(179, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(180, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(181, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(occidentaux, adj-adj, occidental, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(182, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(délégué, nc-nom, délégué, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fini, vpp-ver:pper, finir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(183, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(scandinaves, adj-adj, scandinave, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fini, vpp-ver:pper, finir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(184, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fini, vpp-ver:pper, finir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(185, Result) :-
      prob_parse([ si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(irlandais, adj-adj, irlandais, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(186, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(intéressants, adj-adj, intéressant, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(187, Result) :-
      prob_parse([ si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(intéressants, adj-adj, intéressant, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(188, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(quotidiens, nc-nom, quotidien, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(189, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(délégués, nc-nom, délégué, [n-1]), si(portugais, adj-adj, portugais, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(quotidiens, nc-nom, quotidien, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(190, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(191, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Européens', nc-nam, 'Européens', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(habitent, v-ver:pres, habiter, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(192, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(193, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(féminins, adj-adj, féminin, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-adj, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(194, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(195, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(membres, nc-nom, membre, [n-1]), si(féminins, adj-adj, féminin, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaires, vpp-ver:pper, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(196, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(proviennent, v-ver:pres, provenir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(monde, nc-nom, monde, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(197, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(femmes, nc-nom, femme, [dr(0,n,n)-1]), si(commissaires, nc-adj, commissaire, [n-1]), si(proviennent, v-ver:pres, provenir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(monde, nc-nom, monde, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(198, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(passe, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(199, Result) :-
      prob_parse([ si('Une', pro-num, 'Une', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(femmes, nc-nom, femme, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passe, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(200, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(moins, adv-adv, moins, [n-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(201, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(moins, adv-adv, moins, [n-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(masculins, adj-adj, masculin, [dl(0,n,n)-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(202, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(203, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(plus, adv-adv, plus, [n-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [dr(0,n,n)-1]), si(commissaires, nc-nom, commissaire, [n-1]), si(passent, v-ver:pres, passer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(204, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(205, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(206, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(juristes, nc-nom, juriste, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(207, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(208, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(209, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(210, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(211, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(212, Result) :-
      prob_parse([ si('Exactement', cs-kon, 'Exactement', [dr(0,s,s)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(juristes, nc-nom, juriste, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(comptables, nc-nom, comptable, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(213, Result) :-
      prob_parse([ si('Six', det-num, 'Six', [dr(0,np,n)-1]), si(juristes, nc-nom, juriste, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(214, Result) :-
      prob_parse([ si('Exactement', cs-kon, 'Exactement', [dr(0,s,s)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(juristes, nc-nom, juriste, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(comptables, nc-nom, comptable, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(215, Result) :-
      prob_parse([ si('Six', det-num, 'Six', [dr(0,np,n)-1]), si(comptables, nc-nom, comptable, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(216, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(clients, nc-nom, client, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(217, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(218, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(clients, nc-nom, client, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(219, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(220, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(clients, nc-nom, client, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(221, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(clients, nc-nom, client, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(222, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(lecture, nc-nom, lecture, [np-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(points, nc-nom, point, [n-1]), si(inscrits, vpp-ver:pper, inscrire, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jour, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(223, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lu, vpp-ver:pper, lire, [dr(0,dl(0,np,s_ppart),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(points, nc-nom, point, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jour, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(224, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(225, Result) :-
      prob_parse([ si('Chacun', pro-pro:ind, 'Chacun', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(226, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(227, Result) :-
      prob_parse([ si('Chacun', pro-pro:ind, 'Chacun', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(228, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toutes, adv-adv, tout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(229, Result) :-
      prob_parse([ si('Chacun', pro-pro:ind, 'Chacun', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(230, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Cambridge', npp-nam, 'Cambridge', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(candidat, nc-nom, candidat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(231, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Cambridge', npp-nam, 'Cambridge', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(candidat, nc-nom, candidat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(232, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(grecs, nc-nom, grec, [n-1]), si(anciens, adj-adj, ancien, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(philosophes, nc-nom, philosophe, [n-1]), si(réputés, vpp-ver:pper, réputé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(233, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grecs, nc-nom, grec, [n-1]), si(anciens, adj-adj, ancien, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(philosophes, nc-nom, philosophe, [n-1]), si(réputés, vpp-ver:pper, réputé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(234, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(grecs, nc-nom, grec, [n-1]), si(anciens, adj-adj, ancien, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(tous, adv-adv, tout, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(philosophes, nc-nom, philosophe, [n-1]), si(réputés, vpp-ver:pper, réputé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(235, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grecs, nc-nom, grec, [n-1]), si(anciens, adj-adj, ancien, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(philosophes, nc-nom, philosophe, [n-1]), si(réputés, vpp-ver:pper, réputé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(236, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(panne, nc-nom, panne, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(erreurs, nc-nom, erreur, [n-1]), si(logicielles, adj-adj, logiciel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(237, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(panne, nc-nom, panne, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(erreurs, nc-nom, erreur, [n-1]), si(logicielles, adj-adj, logiciel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(238, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(panne, nc-nom, panne, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(erreurs, nc-nom, erreur, [n-1]), si(logicielles, adj-adj, logiciel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(239, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(bug, nc-nom, bug, [n-1]), si(numéro, nc-nom, numéro, [dr(0,dl(0,n,n),np)-1]), si('32-985', adj-num, '32-985', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(erreur, nc-nom, erreur, [n-1]), si(logicielle, adj-adj, logiciel, [dl(0,n,n)-1]), si(connue, vpp-ver:pper, connaître, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(240, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(panne, nc-nom, panne, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(bug, nc-nom, bug, [n-1]), si(numéro, nc-nom, numéro, [dl(0,n,n)-1]), si('32-985', adj-num, '32-985', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(241, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(clients, nc-nom, client, [n-1]), si(présents, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(démonstration, nc-nom, démonstration, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tous, adv-adv, tout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(impressionnés, vpp-ver:pper, impressionner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(performances, nc-nom, performance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(242, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, pro-num, un, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(clients, nc-nom, client, [n-1]), si(présents, adj-adj, présent, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(démonstration, nc-nom, démonstration, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(243, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(impressionnée, vpp-ver:pper, impressionner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(performances, nc-nom, performance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(244, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(clients, nc-nom, client, [n-1]), si(présents, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(démonstration, nc-nom, démonstration, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(impressionné, vpp-ver:pper, impressionner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(performances, nc-nom, performance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(245, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(clients, nc-nom, client, [n-1]), si(présents, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(démonstration, nc-nom, démonstration, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(impressionnées, vpp-ver:pper, impressionner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(performances, nc-nom, performance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(246, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(diplômés, nc-nom, diplômé, [n-1]), si(universitaires, adj-adj, universitaire, [dl(0,n,n)-1]), si(font, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(médiocres, adj-adj, médiocre, [dr(0,n,n)-1]), si(agents, nc-nom, agent, [n-1]), si(boursiers, adj-adj, boursier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(247, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diplômé, nc-nom, diplômé, [n-1]), si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(248, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(probable, adj-adj, probable, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(fasse, vs-ver:subp, faire, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(médiocre, adj-adj, médiocre, [dr(0,n,n)-1]), si(agent, nc-nom, agent, [n-1]), si(boursier, adj-adj, boursier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(249, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(diplômés, nc-nom, diplômé, [n-1]), si(universitaires, adj-adj, universitaire, [dl(0,n,n)-1]), si(font, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(médiocres, adj-adj, médiocre, [dr(0,n,n)-1]), si(agents, nc-nom, agent, [n-1]), si(boursiers, adj-adj, boursier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(250, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diplômé, nc-nom, diplômé, [n-1]), si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(251, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(fera, v-ver:futu, faire, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(médiocre, adj-adj, médiocre, [dr(0,n,n)-1]), si(agent, nc-nom, agent, [n-1]), si(boursier, adj-adj, boursier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(252, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gestionnaires, nc-nom, gestionnaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('APCOM', npp-abr, 'APCOM', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonction, nc-nom, fonction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(253, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(gestionnaire, nc-nom, gestionnaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('APCOM', npp-abr, 'APCOM', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(254, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonction, nc-nom, fonction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(255, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cadres, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(voitures, nc-nom, voiture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonctions, nc-nom, fonction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(256, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(257, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonction, nc-nom, fonction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(258, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(comptable, nc-nom, comptable, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(259, Result) :-
      prob_parse([ si('Aucun', pro-pro:ind, 'Aucun', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(comptables, nc-nom, comptable, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(260, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(comptable, nc-nom, comptable, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(261, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(comptable, nc-nom, comptable, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(262, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(comptable, nc-nom, comptable, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(263, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(comptables, nc-nom, comptable, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(264, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(comptable, nc-nom, comptable, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(265, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(comptable, nc-nom, comptable, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(266, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(comptable, nc-nom, comptable, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(267, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(comptables, nc-nom, comptable, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(268, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(comptable, nc-nom, comptable, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(269, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(comptable, nc-nom, comptable, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(270, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(271, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(272, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(273, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(274, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(275, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(276, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(277, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signés, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(278, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(279, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(280, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(utilisé, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(281, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(282, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(283, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(284, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(285, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(286, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étudiante, nc-nom, étudiant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(287, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(288, Result) :-
      prob_parse([ si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), si(étudiante, nc-nom, étudiant, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(289, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(étudiante, adj-adj, étudiant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(290, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(291, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(étudiante, nc-nom, étudiant, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(292, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(étudiante, adj-adj, étudiant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(293, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(294, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(295, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(présidée, vpp-ver:pper, présider, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(296, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(présidé, vpp-ver:pper, présider, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(297, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remis, vpp-ver:pper, remettre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(298, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(leur, clo-pro:per, son, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(remis, vpp-ver:pper, remettre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(facture, nc-nom, facture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(299, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(leur, clo-pro:per, son, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remis, vpp-ver:pper, remettre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(projet, nc-nom, projet, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(300, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remis, vpp-ver:pper, remettre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(facture, nc-nom, facture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(projet, nc-nom, projet, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(301, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(comité, nc-nom, comité, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(302, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(désigné, vpp-ver:pper, désigner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(303, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(comité, nc-nom, comité, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(désigné, vpp-ver:pper, désigner, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comité, nc-nom, comité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(304, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_de))))-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(besoin, nc-nom, besoin, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(305, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(bureau, nc-nom, bureau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(306, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('ITEL', npp-abr, 'ITEL', [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bureau, nc-nom, bureau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(307, Result) :-
      prob_parse([ si('Deux', pro-num, 'Deux', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(dix, adj-num, dix, [dr(0,n,n)-1]), si(machines, nc-nom, machine, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(manquantes, adj-adj, manquante, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(308, Result) :-
      prob_parse([ si('Elles', cls-pro:per, 'Elles', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retirées, vpp-ver:pper, retirer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(309, Result) :-
      prob_parse([ si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), si(machines, nc-nom, machine, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retirées, vpp-ver:pper, retirer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(310, Result) :-
      prob_parse([ si('Deux', pro-num, 'Deux', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(dix, adj-num, dix, [dr(0,n,n)-1]), si(machines, nc-nom, machine, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(manquantes, adj-adj, manquante, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(311, Result) :-
      prob_parse([ si('Elles', cls-pro:per, 'Elles', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retirées, vpp-ver:pper, retirer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(312, Result) :-
      prob_parse([ si('Huit', det-num, 'Huit', [dr(0,np,n)-1]), si(machines, nc-nom, machine, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retirées, vpp-ver:pper, retirer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(313, Result) :-
      prob_parse([ si('Deux', pro-num, 'Deux', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(dix, adj-num, dix, [dr(0,n,n)-1]), si(machines, nc-nom, machine, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(manquantes, adj-adj, manquante, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(314, Result) :-
      prob_parse([ si('Elles', cls-pro:per, 'Elles', [np-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(toutes, adv-adv, tout, [dl(1,s,s)-1]), si(là, adv-adv, là, [np-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(315, Result) :-
      prob_parse([ si('Dix', det-num, 'Dix', [dr(0,np,n)-1]), si(machines, nc-nom, machine, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(là, adv-adv, là, [np-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(316, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(machine, nc-nom, machine, [n-1]), si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(machine, nc-nom, machine, [n-1]), si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(317, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mises, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(hall, nc-nom, hall, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(318, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(machines, nc-nom, machine, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(hall, nc-nom, hall, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(319, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(collègues, nc-nom, collègue, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allés, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(320, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(détesté, vpp-ver:pper, détester, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(321, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(collègues, nc-nom, collègue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jean', npp-nam, 'Jean', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(détesté, vpp-ver:pper, détester, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(322, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(collègues, nc-nom, collègue, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allés, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(323, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(détestée, vpp-ver:pper, détester, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(324, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(détesté, vpp-ver:pper, détester, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(325, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(collègues, nc-nom, collègue, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allés, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(326, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(détestée, vpp-ver:pper, détester, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(327, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(détesté, vpp-ver:pper, détester, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(328, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(département, nc-nom, département, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(dédiée, vpp-ver:pper, dédier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(329, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(louent, v-ver:pres, louer, [dr(0,dl(0,np,s),np)-1]), si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), si('BT', npp-abr, 'BT', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(330, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(département, nc-nom, département, [n-1]), si(loue, v-ver:pres, louer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), si('BT', npp-abr, 'BT', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(331, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(département, nc-nom, département, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ligné, nc-nom, ligné, [n-1]), si(dédiée, vpp-ver:pper, dédier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(332, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(la, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(loue, v-ver:pres, louer, [dr(0,dl(0,np,s),np)-1]), si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), si('BT', npp-abr, 'BT', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(333, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(loue, v-ver:pres, louer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si('BT', npp-abr, 'BT', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(334, Result) :-
      prob_parse([ si('GFI', npp-abr, 'GFI', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(335, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(entretient, v-ver:pres, entretenir, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(336, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(entretient, v-ver:pres, entretenir, [dr(0,dl(0,np,s),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('GFI', npp-abr, 'GFI', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(337, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(client, nc-nom, client, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintenance, nc-nom, maintenance, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(338, Result) :-
      prob_parse([ si('MFI', npp-abr, 'MFI', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(client, nc-nom, client, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(exactement, adv-adv, exactement, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(339, Result) :-
      prob_parse([ si('MFI', npp-abr, 'MFI', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintenance, nc-nom, maintenance, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(340, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(client, nc-nom, client, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintenance, nc-nom, maintenance, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(341, Result) :-
      prob_parse([ si('MFI', npp-abr, 'MFI', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(client, nc-nom, client, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(342, Result) :-
      prob_parse([ si('MFI', npp-abr, 'MFI', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintenance, nc-nom, maintenance, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(343, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(exécutif, adj-adj, exécutif, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(portable, adj-adj, portable, [dl(0,n,n)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(amené, vpp-ver:pper, amener, [dr(0,dl(0,np,s_ppart),np)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(notes, nc-nom, note, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(344, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(exécutive, adj-adj, exécutif, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si(portables, adj-adj, portable, [dl(0,n,n)-1]), si(différents, adj-adj, différent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(345, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(amené, vpp-ver:pper, amener, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si(portables, adj-adj, portable, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(346, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(347, Result) :-
      prob_parse([ si('ICM', npp-abr, 'ICM', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(150, det-num, 150, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(348, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintenance, nc-nom, maintenance, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(aucun, pro-pro:ind, aucun, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(349, Result) :-
      prob_parse([ si('Chacune', pro-pro:ind, 'Chacune', [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(99, adj-num, 99, [dr(0,n,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(350, Result) :-
      prob_parse([ si('Elles', cls-pro:per, 'Elles', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintenance, nc-nom, maintenance, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(351, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(possèdent, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintenance, nc-nom, maintenance, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(352, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(couverture, nc-nom, couverture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(353, Result) :-
      prob_parse([ si('R-95-103', npp-nam, 'R-95-103', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(354, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(couverture, nc-nom, couverture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(355, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(couverture, nc-nom, couverture, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('R-95-103', npp-num, 'R-95-103', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(356, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(accordé, vpp-ver:pper, accorder, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(forte, adj-adj, fort, [dr(0,n,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(357, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accordé, vpp-ver:pper, accorder, [dr(0,dl(0,np,s_ppart),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(accordé, vpp-ver:pper, accorder, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(358, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(était, v-ver:impf, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(blessé, vpp-ver:pper, blesser, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(359, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(blessé, vpp-ver:pper, blesser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(360, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(était, v-ver:impf, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(blessé, vpp-ver:pper, blesser, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(361, Result) :-
      prob_parse([ si('Quelqu\'un', pro-pro:rel, 'Quelqu\'un', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Jean', npp-nam, 'Jean', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(blessé, vpp-ver:pper, blesser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(362, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(363, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(364, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(365, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(366, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(367, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(368, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(369, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(370, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(371, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(372, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(373, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,np,np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(374, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(375, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(376, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(377, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(parlera, v-ver:futu, parler, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(378, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(379, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(380, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(381, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), si('-t-il', cls-pro:per, '-t-il', [dl(1,s,s)-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('?', ponct-pun, '?', [dl(0,s,txt)-1])], Result).
sent(382, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(383, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(384, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(385, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(étudiants, nc-nom, étudiant, [n-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(386, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(étudiants, nc-nom, étudiant, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(387, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allé, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(train, nc-nom, train, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(388, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allé, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(train, nc-nom, train, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(389, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allé, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(train, nc-nom, train, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(390, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allé, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(train, nc-nom, train, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(391, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allé, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(392, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allé, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(393, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(étudiants, nc-nom, étudiant, [n-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(394, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(étudiants, nc-nom, étudiant, [n-1]), si(vont, v-ver:pres, aller, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(train, nc-nom, train, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(395, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allé, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(396, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si(train, nc-nom, train, [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(397, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(allé, vpp-ver:pper, aller, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(train, nc-nom, train, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(398, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(399, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(400, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(401, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(402, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(403, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('Jean', npp-nam, 'Jean', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(possèdent, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(404, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(405, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bleue, nc-nom, bleu, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(406, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(bleue, adj-adj, bleu, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(407, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(408, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bleue, nc-nom, bleu, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(409, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(410, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(411, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(rapide, nc-adj, rapide, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(412, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(413, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(414, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(rapide, nc-adj, rapide, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(415, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(416, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(417, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(rapide, nc-adj, rapide, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(418, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(419, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(420, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lente, nc-adj, lent, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(421, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(lente, adj-adj, lent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(422, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(papier, nc-nom, papier, [n-1]), si(accepté, vpp-ver:pper, accepter, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(423, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sait, v-ver:pres, savoir, [dr(0,dl(0,np,s),s_whq)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(pourquoi, advwh-adv, pourquoi, [s_whq-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(424, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(sait, v-ver:pres, savoir, [dr(0,dl(0,np,s),s_whq)-1]), si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(papier, nc-nom, papier, [n-1]), si(accepté, vpp-ver:pper, accepter, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(425, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(426, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si('Suzanne', npp-nam, 'Suzanne', [np-1]), si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(427, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Suzanne', npp-nam, 'Suzanne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(428, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(429, Result) :-
      prob_parse([ si('Vendredi', nc-nom, 'Vendredi', [n-1]), si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(430, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(431, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(432, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(vendredi, nc-nom, vendredi, [dr(0,s,s)-1]), si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(433, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(434, Result) :-
      prob_parse([ si('Vingt', det-num, 'Vingt', [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(travaillent, v-ver:pres, travailler, [dl(0,np,s)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(service, nc-nom, service, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(435, Result) :-
      prob_parse([ si('Mais', cc-kon, 'Mais', [dr(0,np,np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(436, Result) :-
      prob_parse([ si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(travaillent, v-ver:pres, travailler, [dl(0,np,s)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(service, nc-nom, service, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(437, Result) :-
      prob_parse([ si('Cinq', det-num, 'Cinq', [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(travaillent, v-ver:pres, travailler, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(438, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,np,np)-1]), si('quarante-cinq', det-num, 'quarante-cinq', [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(439, Result) :-
      prob_parse([ si('Quarante-cinq', det-num, 'Quarante-cinq', [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(travaillent, v-ver:pres, travailler, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(440, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(441, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(442, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(443, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Jean', npp-nam, 'Jean', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(444, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(veut, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(combien, advwh-adv, combien, [dr(0,dr(0,s_whq,dl(0,np,s)),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(travaillent, v-ver:pres, travailler, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(445, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(femmes, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(446, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(veut, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(combien, advwh-adv, combien, [dr(0,dr(0,s_whq,dl(0,np,s)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(travaillent, v-ver:pres, travailler, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(447, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(veut, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(combien, advwh-adv, combien, [dr(0,dr(0,s_whq,dl(0,np,s)),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(travaillent, v-ver:pres, travailler, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(lesquels, prorel-pro:rel, lequel, [dr(0,s_whq,dr(0,s,dia(1,box(1,dl(0,n,n)))))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(448, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(veut, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(quels, detwh-pro:rel, quel, [dr(0,dr(0,s_whq,dr(0,s,dia(1,box(1,np)))),n)-1]), si(hommes, nc-nom, homme, [n-1]), si(travaillent, v-ver:pres, travailler, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(449, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(450, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(451, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(452, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(453, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(454, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(455, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(456, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(457, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(458, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(459, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(460, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(461, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Pierre', npp-nam, 'Pierre', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(462, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Pierre', npp-nam, 'Pierre', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(463, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(alors, adv-adv, alors, [dl(1,s,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(464, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(465, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(466, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(voulait, v-ver:impf, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(467, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(468, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(devait, v-ver:impf, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(469, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(470, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(471, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(472, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(473, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(474, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(475, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(476, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prétendu, vpp-ver:pper, prétendre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(chiffré, vpp-ver:pper, chiffrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dl(0,np,s)))),dr(0,s,box(1,dia(1,dl(0,np,s))))),dr(0,s,dia(1,box(1,dl(0,np,s)))))-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(également, adv-adv, également, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(477, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prétendu, vpp-ver:pper, prétendre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(chiffré, vpp-ver:pper, chiffrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(478, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prétendu, vpp-ver:pper, prétendre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(chiffré, vpp-ver:pper, chiffrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dl(0,np,s)))),dr(0,s,box(1,dia(1,dl(0,np,s))))),dr(0,s,dia(1,box(1,dl(0,np,s)))))-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(également, adv-adv, également, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(479, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prétendu, vpp-ver:pper, prétendre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(chiffré, vpp-ver:pper, chiffrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(480, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prétendu, vpp-ver:pper, prétendre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(chiffré, vpp-ver:pper, chiffrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dl(0,np,s)))),dr(0,s,box(1,dia(1,dl(0,np,s))))),dr(0,s,dia(1,box(1,dl(0,np,s)))))-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(également, adv-adv, également, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(481, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prétendu, vpp-ver:pper, prétendre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(chiffré, vpp-ver:pper, chiffrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(482, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prétendu, vpp-ver:pper, prétendre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(chiffré, vpp-ver:pper, chiffrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dl(0,np,s)))),dr(0,s,box(1,dia(1,dl(0,np,s))))),dr(0,s,dia(1,box(1,dl(0,np,s)))))-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(également, adv-adv, également, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(483, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prétendu, vpp-ver:pper, prétendre, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(chiffré, vpp-ver:pper, chiffrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(484, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(485, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(486, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(487, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(488, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(489, Result) :-
      prob_parse([ si('Marie', npp-nam, 'Marie', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jean', npp-nam, 'Jean', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(490, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Charles', npp-nam, 'Charles', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_ppart),np)-1]), si(')', ponct-pun, ')', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(491, Result) :-
      prob_parse([ si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_pass),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Charles', npp-nam, 'Charles', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(ensemble, adv-adv, ensemble, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(492, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Charles', npp-nam, 'Charles', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_ppart),np)-1]), si(')', ponct-pun, ')', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(493, Result) :-
      prob_parse([ si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_pass),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Charles', npp-nam, 'Charles', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(494, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Charles', npp-nam, 'Charles', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_ppart),np)-1]), si(')', ponct-pun, ')', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(495, Result) :-
      prob_parse([ si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_pass),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Charles', npp-nam, 'Charles', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(496, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Charles', npp-nam, 'Charles', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_ppart),np)-1]), si(')', ponct-pun, ')', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(497, Result) :-
      prob_parse([ si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_pass),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Charles', npp-nam, 'Charles', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(498, Result) :-
      prob_parse([ si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('Charles', npp-nam, 'Charles', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_ppart),np)-1]), si(')', ponct-pun, ')', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(499, Result) :-
      prob_parse([ si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_pass),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(patron, nc-nom, patron, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Franck', npp-nam, 'Franck', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(suggéré, vpp-ver:pper, suggérer, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Charles', npp-nam, 'Charles', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alain', npp-nam, 'Alain', [np-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(500, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(avocat, nc-nom, avocat, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vérificateur, nc-nom, vérificateur, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(comptes, nc-nom, compte, [n-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(501, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,np,np),n)-1]), si(fait, nc-nom, fait, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(avocat, nc-nom, avocat, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(502, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(vérificateur, nc-nom, vérificateur, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(comptes, nc-nom, compte, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(503, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), si(diamant, nc-nom, diamant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(504, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diamant, nc-nom, diamant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(505, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(506, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(507, Result) :-
      prob_parse([ si('(for', et-pun, '(for', [let-1]), si(a, et-ver:pres, avoir, [dr(0,dr(0,s,s),np)-1]), si(former, vinf-ver:infi, former, [dr(0,np,n)-1]), si(university, et-adj, university, [dr(0,n,n)-1]), si(student, et-nom, student, [dr(0,n,n)-1]), si(')', ponct-pun, ')', [n-1]), si('Jean', npp-nam, 'Jean', [let-1]), si(est, v-ver:pres, être, [np-1]), si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(remarquable, adj-adj, remarquable, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(étudiant, nc-nom, étudiant, [dr(0,n,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(508, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(remarquable, adj-adj, remarquable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(509, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(remarquable, adj-adj, remarquable, [dr(0,n,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(510, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(remarquable, adj-adj, remarquable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(511, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(remarquable, adj-adj, remarquable, [dr(0,n,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(512, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(étudiant, adj-adj, étudiant, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(513, Result) :-
      prob_parse([ si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), si(mammifère, nc-nom, mammifère, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(514, Result) :-
      prob_parse([ si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), si(mammifère, nc-nom, mammifère, [n-1]), si(quadrupède, adj-adj, quadrupède, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(animal, nc-nom, animal, [n-1]), si(quadrupède, adj-adj, quadrupède, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(515, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(animal, nc-nom, animal, [n-1]), si(quadrupède, adj-adj, quadrupède, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(516, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(quadrupède, adj-adj, quadrupède, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(517, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(518, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(519, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(520, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(521, Result) :-
      prob_parse([ si('Fido', npp-nam, 'Fido', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(522, Result) :-
      prob_parse([ si('Fido', npp-nam, 'Fido', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(523, Result) :-
      prob_parse([ si('Fido', npp-nam, 'Fido', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(524, Result) :-
      prob_parse([ si('Fido', npp-nam, 'Fido', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(525, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(526, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(527, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(petit, adj-adj, petit, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Dumbo', npp-nam, 'Dumbo', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(528, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(529, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(530, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(grand, adj-adj, grand, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Dumbo', npp-nam, 'Dumbo', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(531, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(souris, nc-nom, souris, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(petits, adj-adj, petit, [dr(0,n,n)-1]), si(animaux, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(532, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(souris, nc-nom, souris, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(533, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(534, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(éléphants, nc-nom, éléphant, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(animaux, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(535, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(éléphant, nc-nom, éléphant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(536, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(animal, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(537, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(souris, nc-nom, souris, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(petits, adj-adj, petit, [dr(0,n,n)-1]), si(animaux, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(538, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(éléphants, nc-nom, éléphant, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(animaux, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(539, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(souris, nc-nom, souris, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(540, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(éléphant, nc-nom, éléphant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(541, Result) :-
      prob_parse([ si('Dumbo', npp-nam, 'Dumbo', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(grand, adj-adj, grand, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Mickey', npp-nam, 'Mickey', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(542, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(souris, nc-nom, souris, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(petits, adj-adj, petit, [dr(0,n,n)-1]), si(animaux, nc-nom, animal, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(543, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(souris, nc-nom, souris, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(544, Result) :-
      prob_parse([ si('Mickey', npp-nam, 'Mickey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(petit, adj-adj, petit, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(545, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(judiciaires, adj-adj, judiciaire, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(professeurs, nc-nom, professeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(546, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(professeurs, nc-nom, professeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(judiciaires, adj-adj, judiciaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(547, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(judiciaires, adj-adj, judiciaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(surpoids, nc-nom, surpoids, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(professeurs, nc-nom, professeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(surpoids, nc-nom, surpoids, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(548, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(judiciaires, adj-adj, judiciaire, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(professeurs, nc-nom, professeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(549, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(professeurs, nc-nom, professeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(judiciaires, adj-adj, judiciaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(550, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(judiciaires, adj-adj, judiciaire, [dl(0,n,n)-1]), si(compétentes, adj-adj, compétent, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(professeurs, nc-nom, professeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(compétents, adj-adj, compétent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(551, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(politicien, nc-nom, politicien, [n-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(gros, adj-adj, gros, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(552, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(gros, adj-adj, gros, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(553, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(politicien, nc-nom, politicien, [n-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(astucieux, adj-adj, astucieux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(554, Result) :-
      prob_parse([ si('Jean', npp-nam, 'Jean', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(astucieux, adj-adj, astucieux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Guillaume', npp-nam, 'Guillaume', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(555, Result) :-
      prob_parse([ si('Kim', npp-nam, 'Kim', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(astucieuse, adj-adj, astucieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(556, Result) :-
      prob_parse([ si('Kim', npp-nam, 'Kim', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(astucieuse, adj-adj, astucieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(557, Result) :-
      prob_parse([ si('Kim', npp-nam, 'Kim', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(politicienne, nc-nom, politicien, [n-1]), si(astucieuse, adj-adj, astucieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(558, Result) :-
      prob_parse([ si('Kim', npp-nam, 'Kim', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(astucieuse, adj-adj, astucieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(559, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(560, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(561, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(562, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(563, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(564, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(565, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(566, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(567, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(568, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(lent, adj-adj, lent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(569, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(570, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(571, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(572, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(573, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(574, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(575, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(576, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(577, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(578, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(579, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(lent, adj-adj, lent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(580, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(581, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(582, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(583, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(584, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(lent, adj-adj, lent, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(585, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(586, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(587, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(588, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(589, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(590, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(591, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(onze, det-num, onze, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(592, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(593, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(594, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(595, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(596, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(597, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(598, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(onze, det-num, onze, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(599, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(600, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(601, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(602, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(commande, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(603, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,dr(0,np,np),n)-1]), si(fois, nc-nom, fois, [n-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(604, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(605, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(vingt, det-num, vingt, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(606, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(607, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(608, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(609, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(610, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(611, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(612, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(onze, det-num, onze, [dr(0,np,n)-1]), si(commandes, nc-nom, commande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(613, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(500, adj-num, 500, [dr(0,n,n)-1]), si('MIPS', npp-abr, 'MIPS', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(614, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('ITEL-ZX', npp-abr, 'ITEL-ZX', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(lent, adj-adj, lent, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(500, adj-num, 500, [dr(0,n,n)-1]), si('MIPS', npp-abr, 'MIPS', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(615, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(616, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vendu, vpp-ver:pper, vendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(3000, det-num, 3000, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(617, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vendu, vpp-ver:pper, vendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(exactement, adv-adv, exactement, [dr(0,np,np)-1]), si(2500, det-num, 2500, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(618, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vendu, vpp-ver:pper, vendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(5500, det-num, 5500, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(619, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(gros, adj-adj, gros, [dr(0,dr(0,n,s_q),n)-1]), si(client, nc-nom, client, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(620, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(client, nc-nom, client, [n-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(gros, adj-adj, gros, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ne, adv-adv, ne, [dr(0,s,s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,s)-1]), si(est, v-ver:pres, être, [dr(0,dr(0,s,np),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(621, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(gros, adj-adj, gros, [dr(0,dr(0,n,s_q),n)-1]), si(client, nc-nom, client, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(622, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(gros, adj-adj, gros, [dr(0,dr(0,n,s_q),n)-1]), si(client, nc-nom, client, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('n\'', adv-adv, 'n\'', [dr(0,s,s)-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(623, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(624, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('ITEL-ZX', npp-abr, 'ITEL-ZX', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(625, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(626, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si(un, pro-num, un, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(627, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('ITEL-ZX', npp-abr, 'ITEL-ZX', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(628, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(629, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-nam, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('n\'', adv-adv, 'n\'', [np-1]), si(importe, v-ver:pres, importer, [dr(0,dl(0,np,s),np)-1]), si(quel, detwh-pro:rel, quel, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(630, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('ITEL-ZX', npp-abr, 'ITEL-ZX', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(631, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(632, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZY', npp-nam, 'ITEL-ZY', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(633, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(634, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZY', npp-nam, 'ITEL-ZY', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(635, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PC-6082', npp-abr, 'PC-6082', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(636, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(637, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(638, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(installée, vpp-ver:pper, installer, [dr(0,dl(0,np,s_pass),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(639, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si(sommes, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(640, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(641, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(développe, v-ver:pres, développer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouvel, adj-adj, nouveau, [dr(0,n,n)-1]), si(éditeur, nc-nom, éditeur, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(642, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si(sommes, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(643, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouvel, adj-adj, nouveau, [dr(0,n,n)-1]), si(éditeur, nc-nom, éditeur, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(644, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(grossi, vpp-ver:pper, grossir, [dl(0,np,s_ppart)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(645, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si(sommes, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(646, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(grossi, vpp-ver:pper, grossir, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(647, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(648, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si(sommes, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(649, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(650, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(651, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si(sommes, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(652, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(653, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(654, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si(sommes, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(655, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(656, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(mars, nc-nom, mars, [n-1]), si(1993, adj-num, 1993, [dl(0,n,n)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_ppart),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(657, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(existait, v-ver:impf, exister, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(658, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(débuté, vpp-ver:pper, débuter, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si('Juillet', nc-nom, 'Juillet', [n-1]), si(1994, adj-num, 1994, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(659, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(duré, vpp-ver:pper, durer, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(660, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(terminée, vpp-ver:pper, terminer, [dl(0,np,s_pass)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(1994, adj-num, 1994, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(661, Result) :-
      prob_parse([ si('Hier', adv-adv, 'Hier', [dr(0,s,s)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(662, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(on, cls-pro:per, on, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(samedi, nc-nom, samedi, [dr(0,n,n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(663, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), si(vendredi, nc-nom, vendredi, [n-1]), si(13, adj-num, 13, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(664, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-nom, partir, [dl(0,np,s_ppart)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(665, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(666, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(667, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(668, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(669, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(670, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(671, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(672, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(673, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(674, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(675, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(676, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(677, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(678, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(679, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(680, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(681, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(682, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(683, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(684, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parti, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, vpp-ver:pper, partir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(685, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(modifié, vpp-ver:pper, modifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(686, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(modifié, vpp-ver:pper, modifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(687, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(modifié, vpp-ver:pper, modifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(688, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(modifié, vpp-ver:pper, modifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(689, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(modifié, vpp-ver:pper, modifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(690, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(modifié, vpp-ver:pper, modifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(691, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(modifié, vpp-ver:pper, modifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(692, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(modifié, vpp-ver:pper, modifier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(eut, v-ver:simp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(693, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(nageait, v-ver:impf, nager, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(694, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(nageait, v-ver:impf, nager, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(695, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(nageait, v-ver:impf, nager, [dl(0,np,s)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(nageât, v-ver:impf, nager, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(696, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(nageait, v-ver:impf, nager, [dl(0,np,s)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(nageait, v-ver:impf, nager, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(697, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(nagé, vpp-ver:pper, nager, [dl(0,np,s_ppart)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rive, nc-nom, rive, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(698, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(nagé, vpp-ver:pper, nager, [dl(0,np,s_ppart)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rive, nc-nom, rive, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(699, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(nagé, vpp-ver:pper, nager, [dl(0,np,s_ppart)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rive, nc-nom, rive, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(nagé, vpp-ver:pper, nager, [dl(0,np,s_ppart)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rive, nc-nom, rive, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(700, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(nagé, vpp-ver:pper, nager, [dl(0,np,s_ppart)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rive, nc-nom, rive, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(nagé, vpp-ver:pper, nager, [dl(0,np,s_ppart)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rive, nc-nom, rive, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(701, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(702, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(703, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(704, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(fût, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(705, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(706, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(707, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(fût, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(708, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(709, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(710, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(711, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(fût, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(712, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(713, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(714, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(715, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(716, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(fût, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(717, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(perdre, vinf-ver:infi, perdre, [dr(0,dl(0,np,s_inf),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si('sang-froid', nc-nom, 'sang-froid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(718, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si('sang-froid', nc-nom, 'sang-froid', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(719, Result) :-
      prob_parse([ si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ouvert, vpp-ver:pper, ouvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('M25', nc-abr, 'M25', [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(circulation, nc-nom, circulation, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(720, Result) :-
      prob_parse([ si('None', et-nam, 'None', [np-1])], Result).
sent(721, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(habitait, v-ver:impf, habiter, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(722, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(habité, vpp-ver:pper, habiter, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(723, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(roman, nc-nom, roman, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(724, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(roman, nc-nom, roman, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(725, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(roman, nc-nom, roman, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(726, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(727, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(roman, nc-nom, roman, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(728, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(roman, nc-nom, roman, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(729, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(dirigeait, v-ver:impf, diriger, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(730, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(la, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(dirigeait, v-ver:impf, diriger, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(731, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(732, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découverte, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(733, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(734, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(735, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(736, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(8, det-num, 8, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(matin, nc-nom, matin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(737, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fini, vpp-ver:pper, finir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(11, det-num, 11, [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(matin, nc-nom, matin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(738, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(739, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(740, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(741, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(742, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(743, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(744, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(745, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(746, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(747, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(découvrir, vinf-ver:infi, découvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(748, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(749, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(750, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèces, nc-nom, espèce, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(751, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(découvrir, vinf-ver:infi, découvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèces, nc-nom, espèce, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(752, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(dirigeait, v-ver:impf, diriger, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(753, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(diriger, vinf-ver:infi, diriger, [dr(0,dl(0,np,s_inf),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(754, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(dirigeait, v-ver:impf, diriger, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(755, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(diriger, vinf-ver:infi, diriger, [dr(0,dl(0,np,s_inf),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(756, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(dirigeait, v-ver:impf, diriger, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(757, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dirigé, vpp-ver:pper, diriger, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(758, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(possédait, v-ver:impf, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(759, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(possédé, vpp-ver:pper, posséder, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(760, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(possédait, v-ver:impf, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(761, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(possédé, vpp-ver:pper, posséder, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(762, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(possédait, v-ver:impf, posséder, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(763, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(possédé, vpp-ver:pper, posséder, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaine, nc-nom, chaine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(764, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(habité, vpp-ver:pper, habiter, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(765, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(habité, vpp-ver:pper, habiter, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(766, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(habité, vpp-ver:pper, habiter, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(767, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(habité, vpp-ver:pper, habiter, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si(exactement, adv-adv, exactement, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(768, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(habité, vpp-ver:pper, habiter, [dr(0,dl(0,np,s_ppart),np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(769, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(habité, vpp-ver:pper, habiter, [dr(0,dl(0,np,s_ppart),np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(770, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dirigé, vpp-ver:pper, diriger, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(771, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dirigé, vpp-ver:pper, diriger, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(772, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dirigé, vpp-ver:pper, diriger, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(773, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dirigé, vpp-ver:pper, diriger, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(774, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(775, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(776, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(777, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(778, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(779, Result) :-
      prob_parse([ si('None', et-nom, 'None', [np-1])], Result).
sent(780, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèces, nc-nom, espèce, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(781, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(espèces, nc-nom, espèce, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(782, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1994, pro-num, 1994, [np-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(avancement, nc-nom, avancement, [n-1]), si(tous, adv-adv, tout, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mois, nc-nom, mois, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(783, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(avancement, nc-nom, avancement, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(1994, adj-num, 1994, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(784, Result) :-
      prob_parse([ si(on, cls-pro:per, on, [dr(0,dr(0,s,s),np)-1]), si(one, et-ver:pres, one, [dr(0,np,n)-1]), si(scoping, et-nom, scoping, [n-1]), si(';', ponct-pun, ';', [let-1]), si(unknown, et-nom, unknown, [dl(0,n,n)-1]), si(on, et-pro:per, on, [dr(0,dl(0,n,n),np)-1]), si(another, et-det:art, another, [dr(0,np,n)-1]), si(scoping, et-nom, scoping, [dr(0,n,n)-1]), si('Dupont', npp-nam, 'Dupont', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(représentant, nc-nom, représentant, [n-1]), si(toutes, adv-adv, tout, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(785, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(représentant, nc-nom, représentant, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(toutes, adv-adv, tout, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(786, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partie, nc-nom, partir, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(quart, nc-nom, quart, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(787, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taxi, nc-nom, taxi, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gare, nc-nom, gare, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(attrapé, vpp-ver:pper, attraper, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(train, nc-nom, train, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(788, Result) :-
      prob_parse([ si('None', et-nom, 'None', [np-1])], Result).
sent(789, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fichiers, nc-nom, fichier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(790, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(détruits, vpp-ver:pper, détruire, [dl(0,np,s_pass)-1]), si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(disque, nc-nom, disque, [n-1]), si(dur, adj-adj, dur, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(planté, vpp-ver:pper, planter, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(791, Result) :-
      prob_parse([ si('None', et-nam, 'None', [np-1])], Result).
sent(792, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, à, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(a, v-ver:pres, à, [dr(0,dl(1,s,s),np)-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(quart, nc-nom, quart, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(793, Result) :-
      prob_parse([ si('Ensuite', adv-adv, 'Ensuite', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taxi, nc-nom, taxi, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gare, nc-nom, gare, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(794, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taxi, nc-nom, taxi, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gare, nc-nom, gare, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(795, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(rend, v-ver:pres, rendre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(retard, nc-nom, retard, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(796, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si(',', ponct-pun, ',', [let-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(797, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(retard, nc-nom, retard, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(798, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rend, v-ver:pres, rendre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(retard, nc-nom, retard, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(799, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si(',', ponct-pun, ',', [let-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(800, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(retard, nc-nom, retard, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(801, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrivée, vpp-ver:pper, arriver, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(802, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(nous, cls-pro:per, nous, [np-1]), si(sommes, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(803, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1])], Result).
sent(804, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(805, Result) :-
      prob_parse([ si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrivée, vpp-ver:pper, arriver, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Katmandou', npp-nam, 'Katmandou', [np-1]), si(',', ponct-pun, ',', [let-1]), si(elle, cls-pro:per, lui, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voyagé, vpp-ver:pper, voyager, [dl(0,np,s_ppart)-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(806, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voyagé, vpp-ver:pper, voyager, [dl(0,np,s_ppart)-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(veille, nc-nom, veille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(arrivée, nc-nom, arrivée, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Katmandou', npp-nam, 'Katmandou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(807, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(diplôme, nc-nom, diplôme, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(mars, nc-nom, mars, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(employé, vpp-ver:pper, employer, [dl(0,np,s_pass)-1]), si(depuis, adv-adv, depuis, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(808, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sans, p-prp, sans, [dr(0,pp,n)-1]), si(emploi, nc-nom, emploi, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passé, nc-nom, passé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(809, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sans, p-prp, sans, [dr(0,pp,n)-1]), si(emploi, nc-nom, emploi, [n-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), si(temps, nc-nom, temps, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(diplôme, nc-nom, diplôme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(810, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lu, vpp-ver:pper, lire, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(811, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lu, vpp-ver:pper, lire, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(812, Result) :-
      prob_parse([ si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), si(représentant, nc-nom, représentant, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('demi-journée', nc-nom, 'demi-journée', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(lire, vinf-ver:infi, lire, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(813, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(814, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(semaine, nc-nom, semaine, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(lire, vinf-ver:infi, lire, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(815, Result) :-
      prob_parse([ si('Pendant', p-prp, 'Pendant', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(mettait, v-ver:impf, mettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(jour, nc-nom, jour, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entrée, vpp-ver:pper, entrer, [dl(0,np,s_ppart)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conseil, nc-nom, conseil, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(administration, nc-nom, administration, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(816, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fini, vpp-ver:pper, finir, [dl(0,np,s_ppart)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(lui, pro-pro:per, luire, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(817, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(récit, nc-nom, récit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Marie', npp-nam, 'Marie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(duré, vpp-ver:pper, durer, [dr(0,dl(0,np,s_ppart),np)-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), si(longtemps, adv-adv, longtemps, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(jour, nc-nom, jour, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(programme, nc-nom, programme, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(818, Result) :-
      prob_parse([ si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(achète, v-ver:subp, acheter, [dr(0,dl(0,np,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(actuels, adj-adj, actuel, [dr(0,n,n)-1]), si(bureaux, nc-nom, bureau, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(payé, vpp-ver:pper, payer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(frais, nc-nom, frais, [n-1]), si(hypothécaires, adj-adj, hypothécaire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(précédents, nc-nom, précédent, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(8, det-num, 8, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(819, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(actuels, adj-adj, actuel, [dr(0,n,n)-1]), si(bureaux, nc-nom, bureau, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(payé, vpp-ver:pper, payer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(intérêts, nc-nom, intérêt, [n-1]), si(hypothécaires, adj-adj, hypothécaire, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(820, Result) :-
      prob_parse([ si('APCOM', npp-abr, 'APCOM', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(payé, vpp-ver:pper, payer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(frais, nc-nom, frais, [n-1]), si(hypothécaires, adj-adj, hypothécaire, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(total, nc-nom, total, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(plus, adv-adv, plus, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(821, Result) :-
      prob_parse([ si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(emploi, nc-nom, emploi, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CIA', npp-abr, 'CIA', [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(savait, v-ver:impf, savoir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), si(autorisé, vpp-ver:pper, autoriser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(mémoires, nc-nom, mémoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(822, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fait, nc-nom, fait, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('Durand', npp-nam, 'Durand', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(autorisé, vpp-ver:pper, autoriser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(mémoires, nc-nom, mémoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(823, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),pp)-1]), si(deux, det-num, deux, [dr(0,dr(0,pp,pp),n)-1]), si(fois, nc-nom, fois, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Florence', npp-nam, 'Florence', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(passé, nc-nom, passé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(824, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(ira, v-ver:pres, aller, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Florence', npp-nam, 'Florence', [np-1]), si(deux, det-num, deux, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(fois, nc-nom, fois, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(vient, v-ver:pres, venir, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(825, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(aura, v-ver:futu, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),pp)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(4, det-num, 4, [dr(0,dr(0,pp,pp),n)-1]), si(fois, nc-nom, fois, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Florence', npp-nam, 'Florence', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(826, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,dr(0,s,s),n)-1]), si(semaine, nc-nom, semaine, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(je, cls-pro:per, je, [np-1]), si(savais, v-ver:impf, savoir, [dr(0,dl(0,np,s),s_q)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,dr(0,s,s),n)-1]), si(mois, nc-nom, mois, [n-1]), si(après, adv-adv, après, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(aura, v-ver:futu, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(dupée, vpp-ver:pper, duper, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(elle, cls-pro:per, lui, [np-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(furieuse, adj-adj, furieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(827, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(vrai, adj-adj, vrai, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(semaines, nc-nom, semaine, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Dupont', npp-nam, 'Dupont', [np-1]), si(découvrira, v-ver:pres, découvrir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(trompée, vpp-ver:pper, tromper, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(furieuse, adj-adj, furieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(828, Result) :-
      prob_parse([ si('Personne', pro-pro:ind, 'Personne', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(joue, v-ver:pres, joue, [dl(0,np,s)-1]), si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(arrête, v-ver:pres, arrêter, [dl(0,cl_r,dl(0,np,s))-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(ruiné, vpp-ver:pper, ruiner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(829, Result) :-
      prob_parse([ si('Personne', pro-pro:ind, 'Personne', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(ruiné, vpp-ver:pper, ruiner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(830, Result) :-
      prob_parse([ si('Quelqu\'un', pro-pro:rel, 'Quelqu\'un', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(commence, v-ver:pres, commencer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(arrête, v-ver:pres, arrêter, [dl(0,cl_r,dl(0,np,s))-1]), si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(ruiné, vpp-ver:pper, ruiner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(831, Result) :-
      prob_parse([ si('Personne', pro-pro:ind, 'Personne', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(commence, v-ver:pres, commencer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(arrête, v-ver:pres, arrêter, [dl(0,cl_r,dl(0,np,s))-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(ruiné, vpp-ver:pper, ruiner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(832, Result) :-
      prob_parse([ si('Quelqu\'un', pro-pro:rel, 'Quelqu\'un', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(commence, v-ver:pres, commencer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), si(continue, v-ver:pres, continuer, [dl(0,np,s)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,np),s)-1]), si(il, cls-pro:per, il, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(ruiné, vpp-ver:pper, ruiner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(833, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(dort, v-ver:pres, dormir, [dl(0,np,s)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sait, v-ver:pres, savoir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(dort, v-ver:pres, dormir, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(834, Result) :-
      prob_parse([ si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(savent, v-ver:pres, savoir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(endormies, vpp-ver:pper, endormir, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(dormi, vpp-ver:pper, dormir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(835, Result) :-
      prob_parse([ si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(découvrent, v-ver:pres, découvrir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(dormi, vpp-ver:pper, dormir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(836, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(construit, vpp-ver:pper, construire, [dr(0,dl(0,np,s_ppart),np)-1]), si('MTALK', npp-abr, 'MTALK', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(837, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si('MTALK', npp-abr, 'MTALK', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(838, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(construisait, v-ver:impf, construire, [dr(0,dl(0,np,s),np)-1]), si('MTALK', npp-abr, 'MTALK', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(839, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si('MTALK', npp-abr, 'MTALK', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(840, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(841, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(842, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(843, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(844, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(détenait, v-ver:impf, détenir, [dr(0,dl(0,np,s),np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(1988, pro-num, 1988, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(845, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(détenait, v-ver:impf, détenir, [dr(0,dl(0,np,s),np)-1]), si('APCOM', npp-abr, 'APCOM', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1990, pro-num, 1990, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(846, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(847, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(848, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(849, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(850, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Dubois', npp-nam, 'Dubois', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rencontrés, vpp-ver:pper, rencontrer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(851, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rencontré, vpp-ver:pper, rencontrer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(852, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(savait, v-ver:impf, savoir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(853, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(854, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(croyait, v-ver:impf, croire, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(855, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(856, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réussi, vpp-ver:pper, réussir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(857, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(858, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(essayé, vpp-ver:pper, essayer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(859, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(860, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(vrai, adj-adj, vrai, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(861, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(862, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(faux, adj-adj, faux, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(863, Result) :-
      prob_parse([ si('ITEL', npp-abr, 'ITEL', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(864, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(865, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-adv, alors, [dr(0,s,s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(mains, nc-nom, main, [n-1]), si(tremblaient, v-ver:impf, trembler, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(866, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mains, nc-nom, main, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(trembler, vinf-ver:infi, trembler, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(867, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(868, Result) :-
      prob_parse([ si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(mains, nc-nom, main, [n-1]), si(tremblaient, v-ver:impf, trembler, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(869, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mains, nc-nom, main, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(trembler, vinf-ver:infi, trembler, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(870, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(871, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(872, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(873, Result) :-
      prob_parse([ si('Durand', npp-nam, 'Durand', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(874, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('ITEL', npp-abr, 'ITEL', [np-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(875, Result) :-
      prob_parse([ si('Hélène', npp-nam, 'Hélène', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(département, nc-nom, département, [n-1]), si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(téléphone, nc-nom, téléphone, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(876, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(département, nc-nom, département, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(877, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si('quelqu\'un', pro-pro:ind, 'quelqu\'un', [np-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si('Hélène', npp-nam, 'Hélène', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(téléphone, nc-nom, téléphone, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(878, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(copie, nc-nom, copie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(879, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(880, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(rayer, vinf-ver:infi, rayer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(clause, nc-nom, clause, [n-1]), si(cruciale, adj-adj, crucial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(881, Result) :-
      prob_parse([ si('Dupont', npp-nam, 'Dupont', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(soit, cc-kon, être, [dr(0,np,np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, être, [dr(0,dl(0,np,np),np)-1]), si('Durand', npp-nam, 'Durand', [np-1]), si(rayer, vinf-ver:infi, rayer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(clause, nc-nom, clause, [n-1]), si(principale, adj-adj, principal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
