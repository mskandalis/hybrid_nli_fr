sent(1, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('Italien', npp-nam, 'Italien', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(ténor, nc-nom, ténor, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Italien', nc-nam, 'Italien', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(ténor, nc-nom, ténor, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(3, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Italien', npp-nam, 'Italien', [n-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(ténor, nc-nom, ténor, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(4, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si('Italiens', nc-nam, 'Italiens', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(5, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Italiens', nc-nam, 'Italiens', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(veulent, v-ver:pres, veulent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(6, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Italiens', nc-nam, 'Italiens', [n-1]), ex_si(veulent, v-ver:pres, veulent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(7, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si('Italiens', npp-nam, 'Italiens', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(8, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Italiens', nc-nam, 'Italiens', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(veulent, v-ver:pres, veulent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1])], Result).
sent(9, Result) :-
      prob_parse([ ex_si('Chaque', det-pro:ind, 'Chaque', [dr(0,np,n)-1]), ex_si(ténor, nc-nom, ténor, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(excellent, adj-adj, excellent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(10, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(italiens, adj-adj, italiens, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(excellents, adj-adj, excellents, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(11, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(italiens, adj-adj, italiens, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(veulent, v-ver:pres, veulent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(excellent, adj-adj, excellent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(12, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(vraiment, adv-adv, vraiment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(ambitieux, adj-adj, ambitieux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(italiens, adj-adj, italiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(13, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(vraiment, adv-adv, vraiment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(ambitieux, adj-adj, ambitieux, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(italiens, adj-adj, italiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(14, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(ténor, nc-nom, ténor, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(modeste, adj-adj, modeste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(15, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(modestes, adj-adj, modestes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(16, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(17, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(18, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(allemands, adj-adj, allemands, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(19, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(allemands, adj-adj, allemands, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(20, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(21, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(22, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(italiens, adj-adj, italiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(23, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(italiens, adj-adj, italiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(24, Result) :-
      prob_parse([ ex_si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(chantent, v-ver:pres, chantent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(chansons, nc-nom, chansons, [n-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(25, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(aiment, v-ver:pres, aiment, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chansons, nc-nom, chansons, [n-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(26, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(chantent, v-ver:pres, chantent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(chansons, nc-nom, chansons, [n-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(27, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pauvres, adj-adj, pauvres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(28, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pauvres, adj-adj, pauvres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(29, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(principaux, adj-adj, principaux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(excellents, adj-adj, excellents, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(30, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(principaux, adj-adj, principaux, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(excellents, adj-adj, excellents, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(indispensables, adj-adj, indispensables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(31, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(principaux, adj-adj, principaux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(indispensables, adj-adj, indispensables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(32, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(principal, adj-adj, principal, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bon, adj-adj, bon, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(33, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(principal, adj-adj, principal, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Pavarotti', npp-nam, 'Pavarotti', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(34, Result) :-
      prob_parse([ ex_si('Pavarotti', npp-nam, 'Pavarotti', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ténor, nc-nom, ténor, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(principal, adj-adj, principal, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bon, adj-adj, bon, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(35, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(prendront, v-ver:futu, prendront, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(part, nc-nom, part, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(concert, nc-nom, concert, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(36, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(prendront, v-ver:futu, prendront, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(part, nc-nom, part, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(concert, nc-nom, concert, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(37, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(donneront, v-ver:futu, donneront, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(cachet, nc-nom, cachet, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(caritative, adj-adj, caritative, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(38, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(ténors, nc-nom, ténors, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(donneront, v-ver:futu, donneront, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(cachet, nc-nom, cachet, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(caritative, adj-adj, caritative, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(39, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('Irlandais', nc-nam, 'Irlandais', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(40, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('Irlandais', nc-nam, 'Irlandais', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(41, Result) :-
      prob_parse([ ex_si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', adj-nam, 'Européen', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(42, Result) :-
      prob_parse([ ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', npp-nam, 'Européen', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(43, Result) :-
      prob_parse([ ex_si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(44, Result) :-
      prob_parse([ ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', npp-nam, 'Européen', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(45, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(46, Result) :-
      prob_parse([ ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', npp-nam, 'Européen', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(47, Result) :-
      prob_parse([ ex_si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(48, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(49, Result) :-
      prob_parse([ ex_si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', adj-nam, 'Européen', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(50, Result) :-
      prob_parse([ ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', npp-nam, 'Européen', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(51, Result) :-
      prob_parse([ ex_si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(52, Result) :-
      prob_parse([ ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', adj-nam, 'Européen', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(53, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(états, nc-nom, états, [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(54, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(états, nc-nom, états, [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(individus, nc-nom, individus, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(55, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(individu, nc-nom, individu, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(56, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(états, nc-nom, états, [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(57, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(délégué, nc-nom, délégué, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(58, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(délégué, nc-nom, délégué, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(59, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(60, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(61, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(intéressants, adj-adj, intéressants, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(62, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(63, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(quotidiens, nc-nom, quotidiens, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(64, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(65, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(résident, v-ver:pres, résident, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(66, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(67, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(résident, v-ver:pres, résident, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(68, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(69, Result) :-
      prob_parse([ ex_si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Suède', npp-nam, 'Suède', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(70, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(71, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Suède', npp-nam, 'Suède', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(72, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(73, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Portugal', npp-nam, 'Portugal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(74, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(75, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Portugal', npp-nam, 'Portugal', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(76, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(77, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(78, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(79, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(80, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(81, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(82, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(83, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(84, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(85, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('Irlandais', nc-nam, 'Irlandais', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(86, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(irlandais, nc-nom, irlandais, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(87, Result) :-
      prob_parse([ ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', npp-nam, 'Européen', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(88, Result) :-
      prob_parse([ ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', npp-nam, 'Européen', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(89, Result) :-
      prob_parse([ ex_si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(90, Result) :-
      prob_parse([ ex_si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', adj-nam, 'Européen', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(91, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(92, Result) :-
      prob_parse([ ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', npp-nam, 'Européen', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(93, Result) :-
      prob_parse([ ex_si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(habiter, vinf-ver:infi, habiter, [dl(0,np,s_inf)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(94, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(habiter, vinf-ver:infi, habiter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(95, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', adj-nam, 'Européen', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(96, Result) :-
      prob_parse([ ex_si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', npp-nam, 'Européen', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(97, Result) :-
      prob_parse([ ex_si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(habiter, vinf-ver:infi, habiter, [dl(0,np,s_inf)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(98, Result) :-
      prob_parse([ ex_si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), ex_si('Européen', npp-nam, 'Européen', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(habiter, vinf-ver:infi, habiter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(99, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(100, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(101, Result) :-
      prob_parse([ ex_si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dl(0,np,s_inf)-1]), ex_si('n\'', adv-adv, 'n\'', [np-1]), ex_si(importe, v-ver:pres, importe, [dl(0,np,s)-1]), ex_si(où, prorel-pro:rel, où, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(102, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dl(0,np,s_inf)-1]), ex_si('n\'', adv-adv, 'n\'', [dl(0,np,s)-1]), ex_si(importe, v-ver:pres, importe, [dl(0,np,s)-1]), ex_si(où, prorel-pro:rel, où, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(103, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(délégué, nc-nom, délégué, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(104, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(délégué, nc-nom, délégué, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(105, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(106, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(107, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(108, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(intéressants, adj-adj, intéressants, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(109, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(110, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(quotidiens, nc-nom, quotidiens, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(111, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(112, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(113, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(habitent, v-ver:pres, habitent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(114, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(habitent, v-ver:pres, habitent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(115, Result) :-
      prob_parse([ ex_si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(116, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(117, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(originaires, adj-adj, originaires, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Suède', npp-nam, 'Suède', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, adj-adj, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(118, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Suède', npp-nam, 'Suède', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(119, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(120, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(121, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(originaires, adj-adj, originaires, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Portugal', npp-nam, 'Portugal', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(122, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(originaires, adj-adj, originaires, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Portugal', npp-nam, 'Portugal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(123, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(124, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(125, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(126, Result) :-
      prob_parse([ ex_si('Un', pro-num, 'Un', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(127, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(128, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(129, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(130, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(131, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('Suédois', nc-nam, 'Suédois', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(132, Result) :-
      prob_parse([ ex_si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), ex_si('Suédois', npp-nam, 'Suédois', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Scandinave', nc-nam, 'Scandinave', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(133, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('Scandinave', npp-nam, 'Scandinave', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(134, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(135, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(136, Result) :-
      prob_parse([ ex_si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(137, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(138, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(139, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(140, Result) :-
      prob_parse([ ex_si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(résident, nc-nom, résident, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(141, Result) :-
      prob_parse([ ex_si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(142, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(143, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(habitants, nc-nom, habitants, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(144, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(habiter, vinf-ver:infi, habiter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(145, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(délégué, nc-nom, délégué, [n-1]), ex_si(scandinave, adj-adj, scandinave, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(146, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(délégué, nc-nom, délégué, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(147, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(irlandais, adj-adj, irlandais, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(148, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(149, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(intéressants, adj-adj, intéressants, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(150, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(intéressants, adj-adj, intéressants, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(151, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(portugais, adj-adj, portugais, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(quotidiens, nc-nom, quotidiens, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(152, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(quotidiens, nc-nom, quotidiens, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(153, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(habitent, v-ver:pres, habitent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(154, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(155, Result) :-
      prob_parse([ ex_si('Quelques', det-pro:ind, 'Quelques', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(féminins, adj-adj, féminins, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(156, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-adj, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(157, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(féminins, adj-adj, féminins, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(158, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(159, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(femmes, nc-nom, femmes, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(160, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(161, Result) :-
      prob_parse([ ex_si('Aucune', pro-pro:ind, 'Aucune', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(commissaires, nc-nom, commissaires, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(162, Result) :-
      prob_parse([ ex_si('Une', pro-num, 'Une', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(163, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(164, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(165, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(166, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(167, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('Scandinave', npp-nam, 'Scandinave', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(168, Result) :-
      prob_parse([ ex_si('Tout', adv-adv, 'Tout', [dr(0,np,n)-1]), ex_si('Suédois', npp-nam, 'Suédois', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Scandinave', nc-nam, 'Scandinave', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(169, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('Suédois', nc-nam, 'Suédois', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(170, Result) :-
      prob_parse([ ex_si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(171, Result) :-
      prob_parse([ ex_si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(172, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(173, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(174, Result) :-
      prob_parse([ ex_si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(175, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(176, Result) :-
      prob_parse([ ex_si('Tout', pro-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(177, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('nord-américain', adj-adj, 'nord-américain', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(178, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(179, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(180, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(181, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(182, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(délégué, nc-nom, délégué, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fini, vpp-ver:pper, fini, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(183, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(scandinaves, adj-adj, scandinaves, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fini, vpp-ver:pper, fini, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(184, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fini, vpp-ver:pper, fini, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(185, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(irlandais, adj-adj, irlandais, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(186, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(intéressants, adj-adj, intéressants, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(187, Result) :-
      prob_parse([ ex_si('Beaucoup', adv-adv, 'Beaucoup', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(intéressants, adj-adj, intéressants, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(188, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(quotidiens, nc-nom, quotidiens, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(189, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(portugais, adj-adj, portugais, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(quotidiens, nc-nom, quotidiens, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(190, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(191, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Européens', nc-nam, 'Européens', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(habitent, v-ver:pres, habitent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(192, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(193, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(féminins, adj-adj, féminins, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-adj, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Scandinavie', npp-nam, 'Scandinavie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(194, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(195, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(féminins, adj-adj, féminins, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaires, vpp-ver:pper, originaires, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(196, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(proviennent, v-ver:pres, proviennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(197, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(femmes, nc-nom, femmes, [dr(0,n,n)-1]), ex_si(commissaires, nc-adj, commissaires, [n-1]), ex_si(proviennent, v-ver:pres, proviennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(198, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(199, Result) :-
      prob_parse([ ex_si('Une', pro-num, 'Une', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(femmes, nc-nom, femmes, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(200, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(201, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(masculins, adj-adj, masculins, [dl(0,n,n)-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(202, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(203, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [dr(0,n,n)-1]), ex_si(commissaires, nc-nom, commissaires, [n-1]), ex_si(passent, v-ver:pres, passent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(204, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(205, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(206, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(juristes, nc-nom, juristes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(207, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(208, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(209, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(210, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(211, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(212, Result) :-
      prob_parse([ ex_si('Exactement', cs-kon, 'Exactement', [dr(0,s,s)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(juristes, nc-nom, juristes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(comptables, nc-nom, comptables, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(213, Result) :-
      prob_parse([ ex_si('Six', det-num, 'Six', [dr(0,np,n)-1]), ex_si(juristes, nc-nom, juristes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(214, Result) :-
      prob_parse([ ex_si('Exactement', cs-kon, 'Exactement', [dr(0,s,s)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(juristes, nc-nom, juristes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(comptables, nc-nom, comptables, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(215, Result) :-
      prob_parse([ ex_si('Six', det-num, 'Six', [dr(0,np,n)-1]), ex_si(comptables, nc-nom, comptables, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(216, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(217, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(218, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(219, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(220, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(221, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(222, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(lecture, nc-nom, lecture, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(points, nc-nom, points, [n-1]), ex_si(inscrits, vpp-ver:pper, inscrits, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(223, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lu, vpp-ver:pper, lu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(points, nc-nom, points, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(224, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(225, Result) :-
      prob_parse([ ex_si('Chacun', pro-pro:ind, 'Chacun', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(226, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(227, Result) :-
      prob_parse([ ex_si('Chacun', pro-pro:ind, 'Chacun', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(228, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toutes, adv-adv, toutes, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(229, Result) :-
      prob_parse([ ex_si('Chacun', pro-pro:ind, 'Chacun', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(230, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cambridge', npp-nam, 'Cambridge', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(231, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cambridge', npp-nam, 'Cambridge', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(232, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(grecs, nc-nom, grecs, [n-1]), ex_si(anciens, adj-adj, anciens, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(philosophes, nc-nom, philosophes, [n-1]), ex_si(réputés, vpp-ver:pper, réputés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(233, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grecs, nc-nom, grecs, [n-1]), ex_si(anciens, adj-adj, anciens, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(philosophes, nc-nom, philosophes, [n-1]), ex_si(réputés, vpp-ver:pper, réputés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(234, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(grecs, nc-nom, grecs, [n-1]), ex_si(anciens, adj-adj, anciens, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(tous, adv-adv, tous, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(philosophes, nc-nom, philosophes, [n-1]), ex_si(réputés, vpp-ver:pper, réputés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(235, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grecs, nc-nom, grecs, [n-1]), ex_si(anciens, adj-adj, anciens, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(philosophes, nc-nom, philosophes, [n-1]), ex_si(réputés, vpp-ver:pper, réputés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(236, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(panne, nc-nom, panne, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(erreurs, nc-nom, erreurs, [n-1]), ex_si(logicielles, adj-adj, logicielles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(237, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(panne, nc-nom, panne, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(erreurs, nc-nom, erreurs, [n-1]), ex_si(logicielles, adj-adj, logicielles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(238, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(panne, nc-nom, panne, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(erreurs, nc-nom, erreurs, [n-1]), ex_si(logicielles, adj-adj, logicielles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(239, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bug, nc-nom, bug, [n-1]), ex_si(numéro, nc-nom, numéro, [dr(0,dl(0,n,n),np)-1]), ex_si('32-985', adj-num, '32-985', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(erreur, nc-nom, erreur, [n-1]), ex_si(logicielle, adj-adj, logicielle, [dl(0,n,n)-1]), ex_si(connue, vpp-ver:pper, connue, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(240, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(panne, nc-nom, panne, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(bug, nc-nom, bug, [n-1]), ex_si(numéro, nc-nom, numéro, [dl(0,n,n)-1]), ex_si('32-985', adj-num, '32-985', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(241, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(présents, adj-adj, présents, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(démonstration, nc-nom, démonstration, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(impressionnés, vpp-ver:pper, impressionnés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(performances, nc-nom, performances, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(242, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(présents, adj-adj, présents, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(démonstration, nc-nom, démonstration, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(243, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(impressionnée, vpp-ver:pper, impressionnée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(performances, nc-nom, performances, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(244, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(présents, adj-adj, présents, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(démonstration, nc-nom, démonstration, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(impressionné, vpp-ver:pper, impressionné, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(performances, nc-nom, performances, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(245, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(présents, adj-adj, présents, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(démonstration, nc-nom, démonstration, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(impressionnées, vpp-ver:pper, impressionnées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(performances, nc-nom, performances, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(246, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(diplômés, nc-nom, diplômés, [n-1]), ex_si(universitaires, adj-adj, universitaires, [dl(0,n,n)-1]), ex_si(font, v-ver:pres, font, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(médiocres, adj-adj, médiocres, [dr(0,n,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si(boursiers, adj-adj, boursiers, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(247, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diplômé, nc-nom, diplômé, [n-1]), ex_si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(248, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(probable, adj-adj, probable, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(fasse, vs-ver:subp, fasse, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médiocre, adj-adj, médiocre, [dr(0,n,n)-1]), ex_si(agent, nc-nom, agent, [n-1]), ex_si(boursier, adj-adj, boursier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(249, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(diplômés, nc-nom, diplômés, [n-1]), ex_si(universitaires, adj-adj, universitaires, [dl(0,n,n)-1]), ex_si(font, v-ver:pres, font, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(médiocres, adj-adj, médiocres, [dr(0,n,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si(boursiers, adj-adj, boursiers, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(250, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diplômé, nc-nom, diplômé, [n-1]), ex_si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(251, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(fera, v-ver:futu, fera, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médiocre, adj-adj, médiocre, [dr(0,n,n)-1]), ex_si(agent, nc-nom, agent, [n-1]), ex_si(boursier, adj-adj, boursier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(252, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gestionnaires, nc-nom, gestionnaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('APCOM', npp-abr, 'APCOM', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(253, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gestionnaire, nc-nom, gestionnaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('APCOM', npp-abr, 'APCOM', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(254, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(255, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cadres, nc-nom, cadres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonctions, nc-nom, fonctions, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(256, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(257, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(258, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(comptable, nc-nom, comptable, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(259, Result) :-
      prob_parse([ ex_si('Aucun', pro-pro:ind, 'Aucun', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(comptables, nc-nom, comptables, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(260, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(comptable, nc-nom, comptable, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(261, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(comptable, nc-nom, comptable, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(262, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(comptable, nc-nom, comptable, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(263, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(comptables, nc-nom, comptables, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(264, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(comptable, nc-nom, comptable, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(265, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(comptable, nc-nom, comptable, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(266, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(comptable, nc-nom, comptable, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(267, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(comptables, nc-nom, comptables, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(268, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(comptable, nc-nom, comptable, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(269, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(comptable, nc-nom, comptable, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(270, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(271, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(272, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(273, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(274, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(275, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(276, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(277, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signés, vpp-ver:pper, signés, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(278, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(279, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(280, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(281, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(282, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(283, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(284, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(285, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(286, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étudiante, nc-nom, étudiante, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(287, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(288, Result) :-
      prob_parse([ ex_si('Toute', det-pro:ind, 'Toute', [dr(0,np,n)-1]), ex_si(étudiante, nc-nom, étudiante, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(289, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(étudiante, adj-adj, étudiante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(290, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(291, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(étudiante, nc-nom, étudiante, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(292, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(étudiante, adj-adj, étudiante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(293, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(294, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(295, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(présidée, vpp-ver:pper, présidée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(296, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(présidé, vpp-ver:pper, présidé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(297, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remis, vpp-ver:pper, remis, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(298, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(leur, clo-pro:per, leur, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remis, vpp-ver:pper, remis, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(facture, nc-nom, facture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(299, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(leur, clo-pro:per, leur, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remis, vpp-ver:pper, remis, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(300, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remis, vpp-ver:pper, remis, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(facture, nc-nom, facture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(301, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(302, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(désigné, vpp-ver:pper, désigné, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(303, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(désigné, vpp-ver:pper, désigné, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(304, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_de))))-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(305, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(306, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('ITEL', npp-abr, 'ITEL', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(307, Result) :-
      prob_parse([ ex_si('Deux', pro-num, 'Deux', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(dix, adj-num, dix, [dr(0,n,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(manquantes, adj-adj, manquantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(308, Result) :-
      prob_parse([ ex_si('Elles', cls-pro:per, 'Elles', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retirées, vpp-ver:pper, retirées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(309, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retirées, vpp-ver:pper, retirées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(310, Result) :-
      prob_parse([ ex_si('Deux', pro-num, 'Deux', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(dix, adj-num, dix, [dr(0,n,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(manquantes, adj-adj, manquantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(311, Result) :-
      prob_parse([ ex_si('Elles', cls-pro:per, 'Elles', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retirées, vpp-ver:pper, retirées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(312, Result) :-
      prob_parse([ ex_si('Huit', det-num, 'Huit', [dr(0,np,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retirées, vpp-ver:pper, retirées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(313, Result) :-
      prob_parse([ ex_si('Deux', pro-num, 'Deux', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(dix, adj-num, dix, [dr(0,n,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(manquantes, adj-adj, manquantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(314, Result) :-
      prob_parse([ ex_si('Elles', cls-pro:per, 'Elles', [np-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(toutes, adv-adv, toutes, [dl(1,s,s)-1]), ex_si(là, adv-adv, là, [np-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(315, Result) :-
      prob_parse([ ex_si('Dix', det-num, 'Dix', [dr(0,np,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(là, adv-adv, là, [np-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(316, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(machine, nc-nom, machine, [n-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(machine, nc-nom, machine, [n-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(317, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mises, vpp-ver:pper, mises, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(hall, nc-nom, hall, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(318, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(hall, nc-nom, hall, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(319, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(collègues, nc-nom, collègues, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allés, vpp-ver:pper, allés, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(320, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(détesté, vpp-ver:pper, détesté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(321, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(collègues, nc-nom, collègues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(détesté, vpp-ver:pper, détesté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(322, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(collègues, nc-nom, collègues, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allés, vpp-ver:pper, allés, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(323, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(détestée, vpp-ver:pper, détestée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(324, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(détesté, vpp-ver:pper, détesté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(325, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(collègues, nc-nom, collègues, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allés, vpp-ver:pper, allés, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(326, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(détestée, vpp-ver:pper, détestée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(327, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(détesté, vpp-ver:pper, détesté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(328, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(dédiée, vpp-ver:pper, dédiée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(329, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(louent, v-ver:pres, louent, [dr(0,dl(0,np,s),np)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('BT', npp-abr, 'BT', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(330, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(loue, v-ver:pres, loue, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('BT', npp-abr, 'BT', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(331, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ligné, nc-nom, ligné, [n-1]), ex_si(dédiée, vpp-ver:pper, dédiée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(332, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(loue, v-ver:pres, loue, [dr(0,dl(0,np,s),np)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('BT', npp-abr, 'BT', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(333, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(loue, v-ver:pres, loue, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si('BT', npp-abr, 'BT', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(334, Result) :-
      prob_parse([ ex_si('GFI', npp-abr, 'GFI', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(335, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(entretient, v-ver:pres, entretient, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(336, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(entretient, v-ver:pres, entretient, [dr(0,dl(0,np,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('GFI', npp-abr, 'GFI', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(337, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(client, nc-nom, client, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintenance, nc-nom, maintenance, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(338, Result) :-
      prob_parse([ ex_si('MFI', npp-abr, 'MFI', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(client, nc-nom, client, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(exactement, adv-adv, exactement, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(339, Result) :-
      prob_parse([ ex_si('MFI', npp-abr, 'MFI', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintenance, nc-nom, maintenance, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(340, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(client, nc-nom, client, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintenance, nc-nom, maintenance, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(341, Result) :-
      prob_parse([ ex_si('MFI', npp-abr, 'MFI', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(client, nc-nom, client, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(342, Result) :-
      prob_parse([ ex_si('MFI', npp-abr, 'MFI', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintenance, nc-nom, maintenance, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(343, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(exécutif, adj-adj, exécutif, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(portable, adj-adj, portable, [dl(0,n,n)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(amené, vpp-ver:pper, amené, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(notes, nc-nom, notes, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(344, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(exécutive, adj-adj, exécutive, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si(portables, adj-adj, portables, [dl(0,n,n)-1]), ex_si(différents, adj-adj, différents, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(345, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(amené, vpp-ver:pper, amené, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si(portables, adj-adj, portables, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(346, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(347, Result) :-
      prob_parse([ ex_si('ICM', npp-abr, 'ICM', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(150, det-num, 150, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(348, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintenance, nc-nom, maintenance, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(aucun, pro-pro:ind, aucun, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(349, Result) :-
      prob_parse([ ex_si('Chacune', pro-pro:ind, 'Chacune', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(99, adj-num, 99, [dr(0,n,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(350, Result) :-
      prob_parse([ ex_si('Elles', cls-pro:per, 'Elles', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintenance, nc-nom, maintenance, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(351, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(possèdent, v-ver:pres, possèdent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintenance, nc-nom, maintenance, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(352, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(couverture, nc-nom, couverture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(353, Result) :-
      prob_parse([ ex_si('R-95-103', npp-nam, 'R-95-103', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(354, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(couverture, nc-nom, couverture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(355, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(couverture, nc-nom, couverture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('R-95-103', npp-num, 'R-95-103', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(356, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(accordé, vpp-ver:pper, accordé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(357, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accordé, vpp-ver:pper, accordé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accordé, vpp-ver:pper, accordé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(358, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(blessé, vpp-ver:pper, blessé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(359, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(blessé, vpp-ver:pper, blessé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(360, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(blessé, vpp-ver:pper, blessé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(361, Result) :-
      prob_parse([ ex_si('Quelqu\'un', pro-pro:rel, 'Quelqu\'un', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(blessé, vpp-ver:pper, blessé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(362, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(363, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(364, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(365, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(366, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(367, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(368, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(369, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(370, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(371, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(372, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(373, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,np,np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(374, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(375, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(376, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(377, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(parlera, v-ver:futu, parlera, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(378, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(379, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(380, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(381, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-t-il', cls-pro:per, '-t-il', [dl(1,s,s)-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('?', ponct-pun, '?', [dl(0,s,txt)-1])], Result).
sent(382, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(383, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(384, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(385, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(386, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(387, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allé, vpp-ver:pper, allé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(388, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allé, vpp-ver:pper, allé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(389, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allé, vpp-ver:pper, allé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(390, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allé, vpp-ver:pper, allé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(391, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allé, vpp-ver:pper, allé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(392, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allé, vpp-ver:pper, allé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(393, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(394, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(395, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allé, vpp-ver:pper, allé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(396, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(397, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(allé, vpp-ver:pper, allé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(398, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(399, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(400, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(401, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(402, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(403, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(possèdent, v-ver:pres, possèdent, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(404, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(405, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bleue, nc-nom, bleue, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(406, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(bleue, adj-adj, bleue, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(407, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(408, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bleue, nc-nom, bleue, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(409, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(410, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(411, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rapide, nc-adj, rapide, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(412, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(413, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(414, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rapide, nc-adj, rapide, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(415, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(416, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(417, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rapide, nc-adj, rapide, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(418, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(419, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(420, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lente, nc-adj, lente, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(421, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(lente, adj-adj, lente, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(422, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(papier, nc-nom, papier, [n-1]), ex_si(accepté, vpp-ver:pper, accepté, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(423, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sait, v-ver:pres, sait, [dr(0,dl(0,np,s),s_whq)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(pourquoi, advwh-adv, pourquoi, [s_whq-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(424, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(sait, v-ver:pres, sait, [dr(0,dl(0,np,s),s_whq)-1]), ex_si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(papier, nc-nom, papier, [n-1]), ex_si(accepté, vpp-ver:pper, accepté, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(425, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(426, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si('Suzanne', npp-nam, 'Suzanne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(427, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Suzanne', npp-nam, 'Suzanne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(428, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(429, Result) :-
      prob_parse([ ex_si('Vendredi', nc-nom, 'Vendredi', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(430, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(431, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(432, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(vendredi, nc-nom, vendredi, [dr(0,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(433, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(434, Result) :-
      prob_parse([ ex_si('Vingt', det-num, 'Vingt', [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(435, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,np,np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(436, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(437, Result) :-
      prob_parse([ ex_si('Cinq', det-num, 'Cinq', [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(438, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,np,np)-1]), ex_si('quarante-cinq', det-num, 'quarante-cinq', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(439, Result) :-
      prob_parse([ ex_si('Quarante-cinq', det-num, 'Quarante-cinq', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(440, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(441, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(442, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(443, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(444, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(combien, advwh-adv, combien, [dr(0,dr(0,s_whq,dl(0,np,s)),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(445, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(446, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(combien, advwh-adv, combien, [dr(0,dr(0,s_whq,dl(0,np,s)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(447, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(combien, advwh-adv, combien, [dr(0,dr(0,s_whq,dl(0,np,s)),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [dr(0,s_whq,dr(0,s,dia(1,box(1,dl(0,n,n)))))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(448, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(quels, detwh-pro:rel, quels, [dr(0,dr(0,s_whq,dr(0,s,dia(1,box(1,np)))),n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(partiel, adj-adj, partiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(449, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(450, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(451, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(452, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(453, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(454, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(455, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(456, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(457, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(458, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(459, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(460, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(461, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Pierre', npp-nam, 'Pierre', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(462, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Pierre', npp-nam, 'Pierre', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(463, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(alors, adv-adv, alors, [dl(1,s,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(464, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(465, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(466, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(voulait, v-ver:impf, voulait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(467, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(468, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(devait, v-ver:impf, devait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(469, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(470, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(471, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(472, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(473, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(474, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(475, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(476, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prétendu, vpp-ver:pper, prétendu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chiffré, vpp-ver:pper, chiffré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dl(0,np,s)))),dr(0,s,box(1,dia(1,dl(0,np,s))))),dr(0,s,dia(1,box(1,dl(0,np,s)))))-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(également, adv-adv, également, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(477, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prétendu, vpp-ver:pper, prétendu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chiffré, vpp-ver:pper, chiffré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(478, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prétendu, vpp-ver:pper, prétendu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chiffré, vpp-ver:pper, chiffré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dl(0,np,s)))),dr(0,s,box(1,dia(1,dl(0,np,s))))),dr(0,s,dia(1,box(1,dl(0,np,s)))))-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(également, adv-adv, également, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(479, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prétendu, vpp-ver:pper, prétendu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chiffré, vpp-ver:pper, chiffré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(480, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prétendu, vpp-ver:pper, prétendu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chiffré, vpp-ver:pper, chiffré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dl(0,np,s)))),dr(0,s,box(1,dia(1,dl(0,np,s))))),dr(0,s,dia(1,box(1,dl(0,np,s)))))-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(également, adv-adv, également, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(481, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prétendu, vpp-ver:pper, prétendu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chiffré, vpp-ver:pper, chiffré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(482, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prétendu, vpp-ver:pper, prétendu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chiffré, vpp-ver:pper, chiffré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dl(0,np,s)))),dr(0,s,box(1,dia(1,dl(0,np,s))))),dr(0,s,dia(1,box(1,dl(0,np,s)))))-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(également, adv-adv, également, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(483, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prétendu, vpp-ver:pper, prétendu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chiffré, vpp-ver:pper, chiffré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(484, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(485, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(486, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(487, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(488, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(aussi, adv-adv, aussi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(489, Result) :-
      prob_parse([ ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(490, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(491, Result) :-
      prob_parse([ ex_si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(ensemble, adv-adv, ensemble, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(492, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(493, Result) :-
      prob_parse([ ex_si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(494, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(495, Result) :-
      prob_parse([ ex_si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(496, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(497, Result) :-
      prob_parse([ ex_si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(498, Result) :-
      prob_parse([ ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(499, Result) :-
      prob_parse([ ex_si('S\'', cs-kon, 'S\'', [dr(0,dr(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Franck', npp-nam, 'Franck', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alain', npp-nam, 'Alain', [np-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(500, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(avocat, nc-nom, avocat, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vérificateur, nc-nom, vérificateur, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(501, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,np,np),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(avocat, nc-nom, avocat, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(502, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(vérificateur, nc-nom, vérificateur, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(503, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), ex_si(diamant, nc-nom, diamant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(504, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamant, nc-nom, diamant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(505, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(506, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(507, Result) :-
      prob_parse([ ex_si('(for', et-pun, '(for', [let-1]), ex_si(a, et-ver:pres, a, [dr(0,dr(0,s,s),np)-1]), ex_si(former, vinf-ver:infi, former, [dr(0,np,n)-1]), ex_si(university, et-adj, university, [dr(0,n,n)-1]), ex_si(student, et-nom, student, [dr(0,n,n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si('Jean', npp-nam, 'Jean', [let-1]), ex_si(est, v-ver:pres, est, [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), ex_si(remarquable, adj-adj, remarquable, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(étudiant, nc-nom, étudiant, [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(508, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(remarquable, adj-adj, remarquable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(509, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(remarquable, adj-adj, remarquable, [dr(0,n,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(510, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(remarquable, adj-adj, remarquable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(511, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(remarquable, adj-adj, remarquable, [dr(0,n,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(512, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(étudiant, adj-adj, étudiant, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(513, Result) :-
      prob_parse([ ex_si('Tout', adv-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(mammifère, nc-nom, mammifère, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(514, Result) :-
      prob_parse([ ex_si('Tout', det-pro:ind, 'Tout', [dr(0,np,n)-1]), ex_si(mammifère, nc-nom, mammifère, [n-1]), ex_si(quadrupède, adj-adj, quadrupède, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si(quadrupède, adj-adj, quadrupède, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(515, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si(quadrupède, adj-adj, quadrupède, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(516, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(quadrupède, adj-adj, quadrupède, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(517, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(518, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(519, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(520, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(521, Result) :-
      prob_parse([ ex_si('Fido', npp-nam, 'Fido', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(522, Result) :-
      prob_parse([ ex_si('Fido', npp-nam, 'Fido', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(523, Result) :-
      prob_parse([ ex_si('Fido', npp-nam, 'Fido', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(524, Result) :-
      prob_parse([ ex_si('Fido', npp-nam, 'Fido', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(525, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(526, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(527, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(petit, adj-adj, petit, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(528, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(529, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(530, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(531, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(petits, adj-adj, petits, [dr(0,n,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(532, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(533, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(534, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(éléphants, nc-nom, éléphants, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(535, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(éléphant, nc-nom, éléphant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(536, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(537, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(petits, adj-adj, petits, [dr(0,n,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(538, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(éléphants, nc-nom, éléphants, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(539, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(540, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(éléphant, nc-nom, éléphant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(541, Result) :-
      prob_parse([ ex_si('Dumbo', npp-nam, 'Dumbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(542, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(petits, adj-adj, petits, [dr(0,n,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(543, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(544, Result) :-
      prob_parse([ ex_si('Mickey', npp-nam, 'Mickey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(petit, adj-adj, petit, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(545, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(judiciaires, adj-adj, judiciaires, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(professeurs, nc-nom, professeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(546, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(professeurs, nc-nom, professeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(judiciaires, adj-adj, judiciaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(547, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(judiciaires, adj-adj, judiciaires, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(surpoids, nc-nom, surpoids, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(professeurs, nc-nom, professeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(surpoids, nc-nom, surpoids, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(548, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(judiciaires, adj-adj, judiciaires, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(professeurs, nc-nom, professeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(549, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(professeurs, nc-nom, professeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(judiciaires, adj-adj, judiciaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(550, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(judiciaires, adj-adj, judiciaires, [dl(0,n,n)-1]), ex_si(compétentes, adj-adj, compétentes, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(professeurs, nc-nom, professeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(compétents, adj-adj, compétents, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(551, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(politicien, nc-nom, politicien, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(552, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(553, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(politicien, nc-nom, politicien, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(astucieux, adj-adj, astucieux, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(554, Result) :-
      prob_parse([ ex_si('Jean', npp-nam, 'Jean', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(astucieux, adj-adj, astucieux, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Guillaume', npp-nam, 'Guillaume', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(555, Result) :-
      prob_parse([ ex_si('Kim', npp-nam, 'Kim', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(astucieuse, adj-adj, astucieuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(556, Result) :-
      prob_parse([ ex_si('Kim', npp-nam, 'Kim', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(astucieuse, adj-adj, astucieuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(557, Result) :-
      prob_parse([ ex_si('Kim', npp-nam, 'Kim', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(politicienne, nc-nom, politicienne, [n-1]), ex_si(astucieuse, adj-adj, astucieuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(558, Result) :-
      prob_parse([ ex_si('Kim', npp-nam, 'Kim', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(astucieuse, adj-adj, astucieuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(559, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(560, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(561, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(562, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(563, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(564, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(565, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(566, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(567, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(568, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(lent, adj-adj, lent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(569, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(570, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(571, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(572, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(573, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(574, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(575, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(576, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(577, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(578, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(579, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(lent, adj-adj, lent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(580, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(581, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(582, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(583, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(584, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(lent, adj-adj, lent, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-XZ', npp-abr, 'ITEL-XZ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(585, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(586, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(587, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(588, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(589, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(590, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(591, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(onze, det-num, onze, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(592, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(593, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(594, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(595, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(596, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(597, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(598, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(onze, det-num, onze, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(599, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(600, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(601, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(602, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(commande, nc-nom, commande, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(603, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,dr(0,np,np),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(604, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(605, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(vingt, det-num, vingt, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(606, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(607, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(608, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(609, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(610, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(611, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(612, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(onze, det-num, onze, [dr(0,np,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(613, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(500, adj-num, 500, [dr(0,n,n)-1]), ex_si('MIPS', npp-abr, 'MIPS', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(614, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-abr, 'ITEL-ZX', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(lent, adj-adj, lent, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(500, adj-num, 500, [dr(0,n,n)-1]), ex_si('MIPS', npp-abr, 'MIPS', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(615, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(616, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(3000, det-num, 3000, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(617, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(exactement, adv-adv, exactement, [dr(0,np,np)-1]), ex_si(2500, det-num, 2500, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(618, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(5500, det-num, 5500, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(619, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dr(0,dr(0,n,s_q),n)-1]), ex_si(client, nc-nom, client, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(620, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(client, nc-nom, client, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ne, adv-adv, ne, [dr(0,s,s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,s)-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,s,np),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(621, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dr(0,dr(0,n,s_q),n)-1]), ex_si(client, nc-nom, client, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(622, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dr(0,dr(0,n,s_q),n)-1]), ex_si(client, nc-nom, client, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,s,s)-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(623, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(624, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-abr, 'ITEL-ZX', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(625, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(626, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(627, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-abr, 'ITEL-ZX', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(628, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(629, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-nam, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('n\'', adv-adv, 'n\'', [np-1]), ex_si(importe, v-ver:pres, importe, [dr(0,dl(0,np,s),np)-1]), ex_si(quel, detwh-pro:rel, quel, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(630, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-abr, 'ITEL-ZX', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(631, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(632, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZY', npp-nam, 'ITEL-ZY', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(633, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(634, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZY', npp-nam, 'ITEL-ZY', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(635, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PC-6082', npp-abr, 'PC-6082', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ITEL-ZX', npp-nam, 'ITEL-ZX', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(636, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(637, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(638, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(installée, vpp-ver:pper, installée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(639, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),pp)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(640, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(641, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(développe, v-ver:pres, développe, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouvel, adj-adj, nouvel, [dr(0,n,n)-1]), ex_si(éditeur, nc-nom, éditeur, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(642, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),pp)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(643, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouvel, adj-adj, nouvel, [dr(0,n,n)-1]), ex_si(éditeur, nc-nom, éditeur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(644, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(grossi, vpp-ver:pper, grossi, [dl(0,np,s_ppart)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(645, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),pp)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(646, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(grossi, vpp-ver:pper, grossi, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(647, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(648, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),pp)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(649, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(650, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(651, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),pp)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(652, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(653, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(654, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),pp)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(655, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(656, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(1993, adj-num, 1993, [dl(0,n,n)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(657, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(existait, v-ver:impf, existait, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(658, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débuté, vpp-ver:pper, débuté, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si('Juillet', nc-nom, 'Juillet', [n-1]), ex_si(1994, adj-num, 1994, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(659, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(duré, vpp-ver:pper, duré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(660, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(terminée, vpp-ver:pper, terminée, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(1994, adj-num, 1994, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(661, Result) :-
      prob_parse([ ex_si('Hier', adv-adv, 'Hier', [dr(0,s,s)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(662, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(samedi, nc-nom, samedi, [dr(0,n,n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(663, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), ex_si(vendredi, nc-nom, vendredi, [n-1]), ex_si(13, adj-num, 13, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(664, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-nom, partie, [dl(0,np,s_ppart)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(665, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(666, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(667, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(668, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(669, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(670, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(671, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(672, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(673, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(674, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(675, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(676, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(677, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(678, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(679, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(680, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(681, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(682, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(683, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(684, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dl(0,np,s_ppart)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, vpp-ver:pper, partie, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(685, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(686, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(687, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(688, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(689, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(690, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(691, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(692, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(eut, v-ver:simp, eut, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(693, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(nageait, v-ver:impf, nageait, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(694, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(nageait, v-ver:impf, nageait, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(695, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(nageait, v-ver:impf, nageait, [dl(0,np,s)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(nageât, v-ver:impf, nageât, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(696, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(nageait, v-ver:impf, nageait, [dl(0,np,s)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(nageait, v-ver:impf, nageait, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(697, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(nagé, vpp-ver:pper, nagé, [dl(0,np,s_ppart)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rive, nc-nom, rive, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(698, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(nagé, vpp-ver:pper, nagé, [dl(0,np,s_ppart)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rive, nc-nom, rive, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(699, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(nagé, vpp-ver:pper, nagé, [dl(0,np,s_ppart)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rive, nc-nom, rive, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(nagé, vpp-ver:pper, nagé, [dl(0,np,s_ppart)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rive, nc-nom, rive, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(700, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(nagé, vpp-ver:pper, nagé, [dl(0,np,s_ppart)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rive, nc-nom, rive, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(nagé, vpp-ver:pper, nagé, [dl(0,np,s_ppart)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rive, nc-nom, rive, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(701, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(702, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(703, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(704, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(fût, v-ver:impf, fût, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(705, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(706, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(707, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(fût, v-ver:impf, fût, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(708, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(709, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(710, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(711, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(fût, v-ver:impf, fût, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(712, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(713, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(714, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(715, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(716, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(fût, v-ver:impf, fût, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(717, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(perdre, vinf-ver:infi, perdre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('sang-froid', nc-nom, 'sang-froid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(718, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('sang-froid', nc-nom, 'sang-froid', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(719, Result) :-
      prob_parse([ ex_si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('M25', nc-abr, 'M25', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(circulation, nc-nom, circulation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(720, Result) :-
      prob_parse([ ex_si('None', et-nam, 'None', [np-1])], Result).
sent(721, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(habitait, v-ver:impf, habitait, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(722, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(habité, vpp-ver:pper, habité, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(723, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(roman, nc-nom, roman, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(724, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(roman, nc-nom, roman, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(725, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(roman, nc-nom, roman, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(726, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(727, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(roman, nc-nom, roman, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(728, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(roman, nc-nom, roman, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(729, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(dirigeait, v-ver:impf, dirigeait, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(730, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(dirigeait, v-ver:impf, dirigeait, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(731, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(732, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(733, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(734, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(735, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(736, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(8, det-num, 8, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(matin, nc-nom, matin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(737, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fini, vpp-ver:pper, fini, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(11, det-num, 11, [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(matin, nc-nom, matin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(738, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(739, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(740, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(741, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(742, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(743, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(744, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(745, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(746, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(747, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(découvrir, vinf-ver:infi, découvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(748, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(749, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(750, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(751, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(découvrir, vinf-ver:infi, découvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(752, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(dirigeait, v-ver:impf, dirigeait, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(753, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(diriger, vinf-ver:infi, diriger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(754, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(dirigeait, v-ver:impf, dirigeait, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(755, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(diriger, vinf-ver:infi, diriger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(756, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(dirigeait, v-ver:impf, dirigeait, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(757, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(758, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(possédait, v-ver:impf, possédait, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(759, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(possédé, vpp-ver:pper, possédé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(760, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(possédait, v-ver:impf, possédait, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(761, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(possédé, vpp-ver:pper, possédé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(762, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(possédait, v-ver:impf, possédait, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(763, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(possédé, vpp-ver:pper, possédé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaine, nc-nom, chaine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(764, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(habité, vpp-ver:pper, habité, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(765, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(habité, vpp-ver:pper, habité, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(766, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(habité, vpp-ver:pper, habité, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(767, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(habité, vpp-ver:pper, habité, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(exactement, adv-adv, exactement, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(768, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(habité, vpp-ver:pper, habité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(769, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(habité, vpp-ver:pper, habité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(770, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(771, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(772, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(773, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(774, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(775, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(776, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(777, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(778, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(779, Result) :-
      prob_parse([ ex_si('None', et-nom, 'None', [np-1])], Result).
sent(780, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(781, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(782, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avancement, nc-nom, avancement, [n-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(783, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avancement, nc-nom, avancement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(1994, adj-num, 1994, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(784, Result) :-
      prob_parse([ ex_si(on, cls-pro:per, on, [dr(0,dr(0,s,s),np)-1]), ex_si(one, et-ver:pres, one, [dr(0,np,n)-1]), ex_si(scoping, et-nom, scoping, [n-1]), ex_si(';', ponct-pun, ';', [let-1]), ex_si(unknown, et-nom, unknown, [dl(0,n,n)-1]), ex_si(on, et-pro:per, on, [dr(0,dl(0,n,n),np)-1]), ex_si(another, et-det:art, another, [dr(0,np,n)-1]), ex_si(scoping, et-nom, scoping, [dr(0,n,n)-1]), ex_si('Dupont', npp-nam, 'Dupont', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(représentant, nc-nom, représentant, [n-1]), ex_si(toutes, adv-adv, toutes, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(785, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(représentant, nc-nom, représentant, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(786, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partie, nc-nom, partie, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(quart, nc-nom, quart, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(787, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taxi, nc-nom, taxi, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gare, nc-nom, gare, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attrapé, vpp-ver:pper, attrapé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(788, Result) :-
      prob_parse([ ex_si('None', et-nom, 'None', [np-1])], Result).
sent(789, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fichiers, nc-nom, fichiers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(790, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(détruits, vpp-ver:pper, détruits, [dl(0,np,s_pass)-1]), ex_si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(disque, nc-nom, disque, [n-1]), ex_si(dur, adj-adj, dur, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(planté, vpp-ver:pper, planté, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(791, Result) :-
      prob_parse([ ex_si('None', et-nam, 'None', [np-1])], Result).
sent(792, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(1,s,s),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(quart, nc-nom, quart, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(793, Result) :-
      prob_parse([ ex_si('Ensuite', adv-adv, 'Ensuite', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taxi, nc-nom, taxi, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gare, nc-nom, gare, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(794, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taxi, nc-nom, taxi, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(aller, vinf-ver:infi, aller, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gare, nc-nom, gare, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(795, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(rend, v-ver:pres, rend, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(retard, nc-nom, retard, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(796, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(797, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(retard, nc-nom, retard, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(798, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rend, v-ver:pres, rend, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(retard, nc-nom, retard, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(799, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(800, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(retard, nc-nom, retard, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(801, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivée, vpp-ver:pper, arrivée, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(802, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(803, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1])], Result).
sent(804, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(805, Result) :-
      prob_parse([ ex_si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivée, vpp-ver:pper, arrivée, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Katmandou', npp-nam, 'Katmandou', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voyagé, vpp-ver:pper, voyagé, [dl(0,np,s_ppart)-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(806, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voyagé, vpp-ver:pper, voyagé, [dl(0,np,s_ppart)-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(veille, nc-nom, veille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Katmandou', npp-nam, 'Katmandou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(807, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(diplôme, nc-nom, diplôme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(employé, vpp-ver:pper, employé, [dl(0,np,s_pass)-1]), ex_si(depuis, adv-adv, depuis, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(808, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sans, p-prp, sans, [dr(0,pp,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passé, nc-nom, passé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(809, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sans, p-prp, sans, [dr(0,pp,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(diplôme, nc-nom, diplôme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(810, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lu, vpp-ver:pper, lu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(811, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lu, vpp-ver:pper, lu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(812, Result) :-
      prob_parse([ ex_si('Aucun', det-pro:ind, 'Aucun', [dr(0,np,n)-1]), ex_si(représentant, nc-nom, représentant, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('demi-journée', nc-nom, 'demi-journée', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(lire, vinf-ver:infi, lire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(813, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(814, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(lire, vinf-ver:infi, lire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(815, Result) :-
      prob_parse([ ex_si('Pendant', p-prp, 'Pendant', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(mettait, v-ver:impf, mettait, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entrée, vpp-ver:pper, entrée, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(816, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fini, vpp-ver:pper, fini, [dl(0,np,s_ppart)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(817, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(récit, nc-nom, récit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Marie', npp-nam, 'Marie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(duré, vpp-ver:pper, duré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(longtemps, adv-adv, longtemps, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(818, Result) :-
      prob_parse([ ex_si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(achète, v-ver:subp, achète, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(actuels, adj-adj, actuels, [dr(0,n,n)-1]), ex_si(bureaux, nc-nom, bureaux, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(payé, vpp-ver:pper, payé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(frais, nc-nom, frais, [n-1]), ex_si(hypothécaires, adj-adj, hypothécaires, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(précédents, nc-nom, précédents, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(8, det-num, 8, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(819, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(actuels, adj-adj, actuels, [dr(0,n,n)-1]), ex_si(bureaux, nc-nom, bureaux, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(payé, vpp-ver:pper, payé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(hypothécaires, adj-adj, hypothécaires, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(820, Result) :-
      prob_parse([ ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(payé, vpp-ver:pper, payé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(frais, nc-nom, frais, [n-1]), ex_si(hypothécaires, adj-adj, hypothécaires, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(821, Result) :-
      prob_parse([ ex_si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIA', npp-abr, 'CIA', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(savait, v-ver:impf, savait, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(mémoires, nc-nom, mémoires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(822, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(mémoires, nc-nom, mémoires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(823, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(deux, det-num, deux, [dr(0,dr(0,pp,pp),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Florence', npp-nam, 'Florence', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passé, nc-nom, passé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(824, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(ira, v-ver:pres, ira, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Florence', npp-nam, 'Florence', [np-1]), ex_si(deux, det-num, deux, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(vient, v-ver:pres, vient, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(825, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(aura, v-ver:futu, aura, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(4, det-num, 4, [dr(0,dr(0,pp,pp),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Florence', npp-nam, 'Florence', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(826, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,dr(0,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(savais, v-ver:impf, savais, [dr(0,dl(0,np,s),s_q)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(après, adv-adv, après, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quand, cs-kon, quand, [dr(0,dr(0,s,s),s)-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(aura, v-ver:futu, aura, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(dupée, vpp-ver:pper, dupée, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(furieuse, adj-adj, furieuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(827, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(vrai, adj-adj, vrai, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(découvrira, v-ver:pres, découvrira, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(trompée, vpp-ver:pper, trompée, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(furieuse, adj-adj, furieuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(828, Result) :-
      prob_parse([ ex_si('Personne', pro-pro:ind, 'Personne', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(joue, v-ver:pres, joue, [dl(0,np,s)-1]), ex_si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(arrête, v-ver:pres, arrête, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(ruiné, vpp-ver:pper, ruiné, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(829, Result) :-
      prob_parse([ ex_si('Personne', pro-pro:ind, 'Personne', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), ex_si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(ruiné, vpp-ver:pper, ruiné, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(830, Result) :-
      prob_parse([ ex_si('Quelqu\'un', pro-pro:rel, 'Quelqu\'un', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(commence, v-ver:pres, commence, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), ex_si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(arrête, v-ver:pres, arrête, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(quand, cs-kon, quand, [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(ruiné, vpp-ver:pper, ruiné, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(831, Result) :-
      prob_parse([ ex_si('Personne', pro-pro:ind, 'Personne', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(commence, v-ver:pres, commence, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), ex_si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(arrête, v-ver:pres, arrête, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(ruiné, vpp-ver:pper, ruiné, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(832, Result) :-
      prob_parse([ ex_si('Quelqu\'un', pro-pro:rel, 'Quelqu\'un', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(commence, v-ver:pres, commence, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(jouer, vinf-ver:infi, jouer, [dl(0,np,s_inf)-1]), ex_si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), ex_si(continue, v-ver:pres, continue, [dl(0,np,s)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,np),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(ruiné, vpp-ver:pper, ruiné, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(833, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(dort, v-ver:pres, dort, [dl(0,np,s)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sait, v-ver:pres, sait, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(dort, v-ver:pres, dort, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(834, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(savent, v-ver:pres, savent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(endormies, vpp-ver:pper, endormies, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(dormi, vpp-ver:pper, dormi, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(835, Result) :-
      prob_parse([ ex_si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(découvrent, v-ver:pres, découvrent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(dormi, vpp-ver:pper, dormi, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(836, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(construit, vpp-ver:pper, construit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('MTALK', npp-abr, 'MTALK', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(837, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('MTALK', npp-abr, 'MTALK', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(838, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(construisait, v-ver:impf, construisait, [dr(0,dl(0,np,s),np)-1]), ex_si('MTALK', npp-abr, 'MTALK', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(839, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('MTALK', npp-abr, 'MTALK', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(840, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(841, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(842, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(843, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(844, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(détenait, v-ver:impf, détenait, [dr(0,dl(0,np,s),np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1988, pro-num, 1988, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(845, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(détenait, v-ver:impf, détenait, [dr(0,dl(0,np,s),np)-1]), ex_si('APCOM', npp-abr, 'APCOM', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1990, pro-num, 1990, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(846, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(847, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(848, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(849, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(850, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Dubois', npp-nam, 'Dubois', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rencontrés, vpp-ver:pper, rencontrés, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(851, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rencontré, vpp-ver:pper, rencontré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(852, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(savait, v-ver:impf, savait, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(853, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(854, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(croyait, v-ver:impf, croyait, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(855, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(856, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(857, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(858, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(essayé, vpp-ver:pper, essayé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(859, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(860, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(vrai, adj-adj, vrai, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(861, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(862, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(faux, adj-adj, faux, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(863, Result) :-
      prob_parse([ ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(864, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(865, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-adv, alors, [dr(0,s,s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si(tremblaient, v-ver:impf, tremblaient, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(866, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(trembler, vinf-ver:infi, trembler, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(867, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(868, Result) :-
      prob_parse([ ex_si('Quand', cs-kon, 'Quand', [dr(0,dr(0,s,s),s)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si(tremblaient, v-ver:impf, tremblaient, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(869, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mains, nc-nom, mains, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(trembler, vinf-ver:infi, trembler, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(870, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(871, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(872, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(873, Result) :-
      prob_parse([ ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(874, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ITEL', npp-abr, 'ITEL', [np-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(875, Result) :-
      prob_parse([ ex_si('Hélène', npp-nam, 'Hélène', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(téléphone, nc-nom, téléphone, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(876, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(877, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si('quelqu\'un', pro-pro:ind, 'quelqu\'un', [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si('Hélène', npp-nam, 'Hélène', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(téléphone, nc-nom, téléphone, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(878, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(copie, nc-nom, copie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(879, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(880, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(rayer, vinf-ver:infi, rayer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(clause, nc-nom, clause, [n-1]), ex_si(cruciale, adj-adj, cruciale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(881, Result) :-
      prob_parse([ ex_si('Dupont', npp-nam, 'Dupont', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(soit, cc-kon, soit, [dr(0,np,np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si('Durand', npp-nam, 'Durand', [np-1]), ex_si(rayer, vinf-ver:infi, rayer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(clause, nc-nom, clause, [n-1]), ex_si(principale, adj-adj, principale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
