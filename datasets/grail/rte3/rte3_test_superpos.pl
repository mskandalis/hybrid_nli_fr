:- dynamic sent/2.

sent(1, Result) :-
      prob_parse([ si('Claude', npp-nam, 'Claude', [dr(0,np,np)-1]), si('Chabrol', npp-nam, 'Chabrol', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(1930, adj-num, 1930, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(réalisateur, nc-nom, réalisateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cinéma, nc-nom, cinéma, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(célèbre, adj-adj, célèbre, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(40, adj-num, 40, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suivi, vpp-ver:pper, suivre, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(film, nc-nom, film, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Beau', npp-nam, 'Beau', [dr(0,n,n)-1]), si('Serge', npp-nam, 'Serge', [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(histoires, nc-nom, histoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si(glaçantes, adj-adj, glaçant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Boucher', npp-nam, 'Boucher', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Beau', npp-nam, 'Beau', [dr(0,n,n)-1]), si('Serge', npp-nam, 'Serge', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Chabrol', npp-nam, 'Chabrol', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(3, Result) :-
      prob_parse([ si('Claude', npp-nam, 'Claude', [dr(0,np,np)-1]), si('Chabrol', npp-nam, 'Chabrol', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(1930, adj-num, 1930, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(réalisateur, nc-nom, réalisateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cinéma, nc-nom, cinéma, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(célèbre, adj-adj, célèbre, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(40, adj-num, 40, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suivi, vpp-ver:pper, suivre, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(film, nc-nom, film, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Beau', npp-nam, 'Beau', [dr(0,n,n)-1]), si('Serge', npp-nam, 'Serge', [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(histoires, nc-nom, histoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si(glaçantes, adj-adj, glaçant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Boucher', npp-nam, 'Boucher', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(4, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Boucher', npp-nam, 'Boucher', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(réalisateur, nc-nom, réalisateur, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(5, Result) :-
      prob_parse([ si('Claude', npp-nam, 'Claude', [dr(0,np,np)-1]), si('Chabrol', npp-nam, 'Chabrol', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(divorcé, vpp-ver:pper, divorcer, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si('Agnès', npp-nam, 'Agnès', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(actrice, nc-nom, acteur, [n-1]), si('Stéphane', npp-nam, 'Stéphane', [dl(0,n,n)-1]), si('Audran', npp-nam, 'Audran', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(6, Result) :-
      prob_parse([ si('Sa', det-det:pos, 'Sa', [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Aurore', npp-nam, 'Aurore', [dr(0,np,np)-1]), si('Paquiss', npp-nam, 'Paquiss', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(7, Result) :-
      prob_parse([ si('Aurore', npp-nam, 'Aurore', [dr(0,np,np)-1]), si('Paquiss', npp-nam, 'Paquiss', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(épousé, vpp-ver:pper, épouser, [dr(0,dl(0,np,s_ppart),np)-1]), si('Chabrol', npp-nam, 'Chabrol', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(8, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(parti, nc-nom, parti, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(maoïste, adj-adj, maoïste, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1965, pro-num, 1965, [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Laski', npp-nam, 'Laski', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(scission, nc-nom, scission, [n-1]), si('sino-soviétique', adj-adj, 'sino-soviétique', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(9, Result) :-
      prob_parse([ si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Laski', npp-nam, 'Laski', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(membre, nc-nom, membre, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(maoïste, adj-adj, maoïste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(10, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(parti, nc-nom, parti, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(maoïste, adj-adj, maoïste, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1965, pro-num, 1965, [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Laski', npp-nam, 'Laski', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(scission, nc-nom, scission, [n-1]), si('sino-soviétique', adj-adj, 'sino-soviétique', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(11, Result) :-
      prob_parse([ si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Laski', npp-nam, 'Laski', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(opposant, nc-nom, opposant, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(12, Result) :-
      prob_parse([ si('Né', vpp-ver:pper, 'Né', [dl(0,np,s_ppart)-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Yirrkala', npp-nam, 'Yirrkala', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Territoire', nc-nam, 'Territoire', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Yunupingu', npp-nam, 'Yunupingu', [np-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(clan, nc-nom, clan, [n-1]), si('Gumatj', npp-nam, 'Gumatj', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(peuple, nc-nom, peuple, [n-1]), si('Yolngu', npp-nam, 'Yolngu', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(13, Result) :-
      prob_parse([ si('Yunupingu', npp-nam, 'Yunupingu', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(membre, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(peuple, nc-nom, peuple, [n-1]), si('Yolngu', npp-nam, 'Yolngu', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(14, Result) :-
      prob_parse([ si('Sandra', npp-nam, 'Sandra', [dr(0,np,np)-1]), si('Goudie', npp-nam, 'Goudie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(élue, vpp-ver:pper, élire, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(élections, nc-nom, élection, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2002, pro-num, 2002, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(remportant, vpr-ver:ppre, remporter, [dr(0,dl(0,np,s_ppres),np)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(justesse, nc-nom, justesse, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(siège, nc-nom, siège, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Coromandel', npp-nam, 'Coromandel', [np-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(battant, vpr-ver:ppre, battre, [dr(0,dl(0,np,s_ppres),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(candidat, nc-nom, candidat, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si('Max', npp-nam, 'Max', [dl(0,n,n)-1]), si('Purnell', npp-nam, 'Purnell', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s))),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(poussant, vpr-ver:ppre, pousser, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(députée, nc-nom, député, [n-1]), si(verte, adj-adj, vert, [dl(0,n,n)-1]), si(sortante, adj-adj, sortant, [dl(0,n,n)-1]), si('Jeanette', npp-nam, 'Jeanette', [dl(0,n,n)-1]), si('Fitzsimons', npp-nam, 'Fitzsimons', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(place, nc-nom, place, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(15, Result) :-
      prob_parse([ si('Sandra', npp-nam, 'Sandra', [dr(0,np,np)-1]), si('Goudie', npp-nam, 'Goudie', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(battue, vpp-ver:pper, battre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Max', npp-nam, 'Max', [dr(0,np,np)-1]), si('Purnell', npp-nam, 'Purnell', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(16, Result) :-
      prob_parse([ si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), si('Minton', npp-nam, 'Minton', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1961, pro-num, 1961, [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(17, Result) :-
      prob_parse([ si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), si('Minton', npp-nam, 'Minton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(née, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(18, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Minton', npp-nam, 'Minton', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Maggie', npp-nam, 'Maggie', [dr(0,np,np)-1]), si('Dempster', npp-nam, 'Dempster', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, nc-num, premier, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('One', npp-nam, 'One', [dr(0,n,n)-1]), si('Man', npp-nam, 'Man', [dr(0,n,n)-1]), si('Show', npp-nam, 'Show', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nicholas', npp-nam, 'Nicholas', [dr(0,np,np)-1]), si('Maw', npp-nam, 'Maw', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(19, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(après, adv-adv, après, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(elle, cls-pro:per, lui, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(membre, nc-nom, membre, [n-1]), si(régulier, adj-adj, régulier, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Opéra', nc-nam, 'Opéra', [n-1]), si(royal, adj-adj, royal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Covent', npp-nam, 'Covent', [dr(0,np,np)-1]), si('Garden', npp-nam, 'Garden', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(20, Result) :-
      prob_parse([ si('Maggie', npp-nam, 'Maggie', [dr(0,np,np)-1]), si('Dempster', npp-nam, 'Dempster', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(membre, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Royal', npp-nam, 'Royal', [dr(0,n,n)-1]), si('Opera', npp-nam, 'Opera', [dr(0,n,n)-1]), si('House', npp-nam, 'House', [dr(0,n,n)-1]), si('Covent', npp-nam, 'Covent', [dr(0,n,n)-1]), si('Garden', npp-nam, 'Garden', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(21, Result) :-
      prob_parse([ si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), si('Beaubien', npp-nam, 'Beaubien', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenté, vpp-ver:pper, tenter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(succès, nc-nom, succès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(élire, vinf-ver:infi, élire, [dr(0,dl(0,np,s_inf),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(communes, nc-nom, commune, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(candidat, nc-nom, candidat, [n-1]), si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(circonscription, nc-nom, circonscription, [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sarnia-Lambton', npp-nam, 'Sarnia-Lambton', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2004, pro-num, 2004, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(22, Result) :-
      prob_parse([ si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), si('Beaubien', npp-nam, 'Beaubien', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(élu, vpp-ver:pper, élire, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(communes, nc-nom, commune, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(23, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(version, nc-nom, version, [n-1]), si(sortie, vpp-ver:pper, sortir, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Super', npp-nam, 'Super', [dr(0,n,n)-1]), si('Nintendo', npp-nam, 'Nintendo', [dr(0,n,n)-1]), si('Entertainment', npp-nam, 'Entertainment', [dr(0,n,n)-1]), si('System', npp-nam, 'System', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jeu, nc-nom, jeu, [n-1]), si(sous, p-prp, sou, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Final', npp-nam, 'Final', [dr(0,np,np)-1]), si('Fantasy', npp-nam, 'Fantasy', [np-1]), si('III', adj-num, 'III', [dl(0,np,np)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Biggs', npp-nam, 'Biggs', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('Vicks', npp-nam, 'Vicks', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(24, Result) :-
      prob_parse([ si('Final', npp-nam, 'Final', [dr(0,np,np)-1]), si('Fantasy', npp-nam, 'Fantasy', [np-1]), si('III', adj-num, 'III', [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(produit, vpp-ver:pper, produire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Super', npp-nam, 'Super', [dr(0,n,n)-1]), si('Nintendo', npp-nam, 'Nintendo', [dr(0,n,n)-1]), si('Entertainment', npp-nam, 'Entertainment', [dr(0,n,n)-1]), si('System', npp-nam, 'System', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(25, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si('Drew', npp-nam, 'Drew', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(juge, nc-nom, juge, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), si('Kennon', npp-nam, 'Kennon', [np-1]), si(revienne, vs-ver:subp, revenir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(réclamer, vinf-ver:infi, réclamer, [dr(0,dl(0,np,s_inf),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(siège, nc-nom, siège, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1945, pro-num, 1945, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(26, Result) :-
      prob_parse([ si('Kennon', npp-nam, 'Kennon', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(juge, nc-nom, juge, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(27, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1956, pro-num, 1956, [np-1]), si(',', ponct-pun, ',', [let-1]), si('Accardo', npp-nam, 'Accardo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(concours, nc-nom, concours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Genève', npp-nam, 'Genève', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si(1958, pro-num, 1958, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(lauréat, nc-nom, lauréat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(concours, nc-nom, concours, [n-1]), si('Paganini', npp-nam, 'Paganini', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Gênes', npp-nam, 'Gênes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(28, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(célèbres, adj-adj, célèbre, [dr(0,n,n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si('Caprices', nc-nom, 'Caprices', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Paganini', npp-nam, 'Paganini', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(réenregistrés, vpp-ver:pper, réenregistrer, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1999, pro-num, 1999, [np-1]), si(')', ponct-pun, ')', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(violon, nc-nom, violon, [n-1]), si(seul, adj-adj, seul, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, nc-num, premier, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(six, adj-num, six, [dr(0,n,n)-1]), si('Concertos', nc-nom, 'Concertos', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(violon, nc-nom, violon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Paganini', npp-nam, 'Paganini', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(29, Result) :-
      prob_parse([ si('Accardo', npp-nam, 'Accardo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(composé, vpp-ver:pper, composer, [dr(0,dl(0,np,s_ppart),np)-1]), si(24, det-num, 24, [dr(0,np,n)-1]), si('Caprices', nc-nam, 'Caprices', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(30, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1956, pro-num, 1956, [np-1]), si(',', ponct-pun, ',', [let-1]), si('Accardo', npp-nam, 'Accardo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(concours, nc-nom, concours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Genève', npp-nam, 'Genève', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si(1958, pro-num, 1958, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(lauréat, nc-nom, lauréat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(concours, nc-nom, concours, [n-1]), si('Paganini', npp-nam, 'Paganini', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Gênes', npp-nam, 'Gênes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(31, Result) :-
      prob_parse([ si('Accardo', npp-nam, 'Accardo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(concours, nc-nom, concours, [n-1]), si('Paganini', npp-nam, 'Paganini', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Gênes', npp-nam, 'Gênes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(32, Result) :-
      prob_parse([ si('Dawson', npp-nam, 'Dawson', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(professeur, nc-nom, professeur, [np-1]), si(associé, vpp-ver:pper, associer, [dl(0,np,np)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Melbourne', npp-nam, 'Melbourne', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), si(professeur, nc-nom, professeur, [n-1]), si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si('Monash', npp-nam, 'Monash', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(33, Result) :-
      prob_parse([ si('Dawson', npp-nam, 'Dawson', [np-1]), si(enseigne, v-ver:pres, enseigne, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si('Monash', npp-nam, 'Monash', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(34, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Golinkin', npp-nam, 'Golinkin', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éditeur, nc-nom, éditeur, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(auteur, nc-nom, auteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('dix-huit', det-num, 'dix-huit', [dr(0,np,n)-1]), si(livres, nc-nom, livre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(150, det-num, 150, [dr(0,np,n)-1]), si(responsa, nc-nom, responsa, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(articles, nc-nom, article, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(sermons, nc-nom, sermon, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(ouvrages, nc-nom, ouvrage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(35, Result) :-
      prob_parse([ si('Golinkin', npp-nam, 'Golinkin', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si('dix-huit', det-num, 'dix-huit', [dr(0,np,n)-1]), si(livres, nc-nom, livre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(36, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Golinkin', npp-nam, 'Golinkin', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(lui, pro-pro:per, luire, [np-1]), si(seul, adj-adj, seul, [dl(0,np,np)-1]), si(responsable, nc-nom, responsable, [dl(0,np,np)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(republication, nc-nom, republication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(responsa, nc-nom, responsa, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Comité', nc-nam, 'Comité', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(normes, nc-nom, norme, [n-1]), si(juives, adj-adj, juif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(rabbinique, adj-adj, rabbinique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(mettant, vpr-ver:ppre, mettre, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(disposition, nc-nom, disposition, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(public, nc-nom, public, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(volumes, nc-nom, volume, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(37, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Golinkin', npp-nam, 'Golinkin', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(auteur, nc-nom, auteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(responsa, nc-nom, responsa, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Comité', nc-nam, 'Comité', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(normes, nc-nom, norme, [n-1]), si(juives, adj-adj, juif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(rabbinique, adj-adj, rabbinique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(38, Result) :-
      prob_parse([ si('Ryo', npp-nam, 'Ryo', [dr(0,np,np)-1]), si('Okumoto', npp-nam, 'Okumoto', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Osaka', npp-nam, 'Osaka', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(claviériste, nc-nom, claviériste, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(notamment, adv-adv, notamment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(travail, nc-nom, travail, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rock, nc-nom, rock, [n-1]), si(progressif, adj-adj, progressif, [dl(0,n,n)-1]), si('Spock\'s', npp-nam, 'Spock\'s', [dl(0,n,n)-1]), si('Beard', npp-nam, 'Beard', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(39, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rock, nc-nom, rock, [n-1]), si('Spock\'s', npp-nam, 'Spock\'s', [dl(0,n,n)-1]), si('Beard', npp-nam, 'Beard', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(originaire, adj-adj, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(40, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(saisons, nc-nom, saison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Reinsdorf', npp-nam, 'Reinsdorf', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(président, nc-nom, président, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('White', npp-nam, 'White', [dr(0,n,n)-1]), si('Sox', npp-nam, 'Sox', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(trois, det-num, trois, [dr(0,dr(0,np,np),n)-1]), si(fois, nc-nom, fois, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(championnat, nc-nom, championnat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(division, nc-nom, division, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Ligue', nc-nam, 'Ligue', [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si('AL', npp-nam, 'AL', [dl(0,n,n)-1]), si('Central', npp-nam, 'Central', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2000, pro-num, 2000, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(41, Result) :-
      prob_parse([ si('Reinsdorf', npp-nam, 'Reinsdorf', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('White', npp-nam, 'White', [dr(0,n,n)-1]), si('Sox', npp-nam, 'Sox', [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(24, det-num, 24, [dr(0,np,n)-1]), si(saisons, nc-nom, saison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(42, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(saisons, nc-nom, saison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Reinsdorf', npp-nam, 'Reinsdorf', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(président, nc-nom, président, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('White', npp-nam, 'White', [dr(0,n,n)-1]), si('Sox', npp-nam, 'Sox', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(trois, det-num, trois, [dr(0,dr(0,np,np),n)-1]), si(fois, nc-nom, fois, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(championnat, nc-nom, championnat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(division, nc-nom, division, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Ligue', nc-nam, 'Ligue', [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si('AL', npp-nam, 'AL', [dl(0,n,n)-1]), si('Central', npp-nam, 'Central', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2000, pro-num, 2000, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(43, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('White', npp-nam, 'White', [dr(0,n,n)-1]), si('Sox', npp-nam, 'Sox', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(24, det-num, 24, [dr(0,np,n)-1]), si(championnats, nc-nom, championnat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(44, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Major', npp-nam, 'Major', [dr(0,n,n)-1]), si('League', npp-nam, 'League', [dr(0,n,n)-1]), si('Baseball', npp-nam, 'Baseball', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(clubs, nc-nom, club, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(260, det-num, 260, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(biens, nc-nom, bien, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(services, nc-nom, service, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(appartenant, vpr-ver:ppre, appartenir, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(minorités, nc-nom, minorité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(45, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Major', npp-nam, 'Major', [dr(0,n,n)-1]), si('League', npp-nam, 'League', [dr(0,n,n)-1]), si('Baseball', npp-nam, 'Baseball', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(clubs, nc-nom, club, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(appartenant, vpr-ver:ppre, appartenir, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(minorités, nc-nom, minorité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(46, Result) :-
      prob_parse([ si('Anu', npp-prp:det, 'Anu', [dr(0,np,np)-1]), si('Kepa', npp-nam, 'Kepa', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mariée, vpp-ver:pper, marier, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Ro', npp-nam, 'Ro', [dr(0,np,np)-1]), si('Teimumu', npp-nam, 'Teimumu', [dr(0,np,np)-1]), si('Kepa', npp-nam, 'Kepa', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('Adi', npp-nam, 'Adi', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(cheffe, nc-nom, cheffe, [n-1]), si(fidjienne, adj-adj, fidjien, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(femme, nc-nom, femme, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(part, nc-nom, part, [n-1]), si(entière, adj-adj, entier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(47, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si('Filipe', npp-nam, 'Filipe', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Sailosi', npp-nam, 'Sailosi', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Jr', npp-nam, 'Jr', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Asenaca', npp-nam, 'Asenaca', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Tupoutu\'a', npp-nam, 'Tupoutu\'a', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(48, Result) :-
      prob_parse([ si('Anu', npp-prp:det, 'Anu', [dr(0,np,np)-1]), si('Kepa', npp-nam, 'Kepa', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(fidjien, adj-adj, fidjien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(49, Result) :-
      prob_parse([ si('Kepa', npp-nam, 'Kepa', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(marié, vpp-ver:pper, marier, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Ro', npp-abr, 'Ro', [dr(0,np,np)-1]), si('Teimumu', npp-nam, 'Teimumu', [dr(0,np,np)-1]), si('Kepa', npp-nam, 'Kepa', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('Adi', npp-nam, 'Adi', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(cheffe, nc-nom, cheffe, [n-1]), si(fidjienne, adj-adj, fidjien, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(femme, nc-nom, femme, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(part, nc-nom, part, [n-1]), si(entière, adj-adj, entier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(50, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si('Filipe', npp-nam, 'Filipe', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Sailosi', npp-nam, 'Sailosi', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Jr', npp-nam, 'Jr', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Asenaca', npp-nam, 'Asenaca', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Tupoutu\'a', npp-nam, 'Tupoutu\'a', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(51, Result) :-
      prob_parse([ si('Kepa', npp-nam, 'Kepa', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(52, Result) :-
      prob_parse([ si('Sean', npp-nam, 'Sean', [dr(0,np,np)-1]), si('Brown', npp-nam, 'Brown', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(1976, adj-num, 1976, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Oshawa', npp-nam, 'Oshawa', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('Ontario', npp-nam, 'Ontario', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(joueur, nc-nom, joueur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(utilité, nc-nom, utilité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(homme, nc-nom, homme, [n-1]), si(fort, adj-adj, fort, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Ligue', nc-nam, 'Ligue', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(hockey, nc-nom, hockey, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(53, Result) :-
      prob_parse([ si('Sean', npp-nam, 'Sean', [dr(0,np,np)-1]), si('Brown', npp-nam, 'Brown', [np-1]), si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Ligue', nc-nam, 'Ligue', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(hockey, nc-nom, hockey, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(54, Result) :-
      prob_parse([ si('Né', vpp-ver:pper, 'Né', [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Kingston-upon-Thames', npp-nam, 'Kingston-upon-Thames', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Surrey', npp-nam, 'Surrey', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Brockwell', npp-nam, 'Brockwell', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(joué, vpp-ver:pper, jouer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(cricket, nc-nom, cricket, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(comté, nc-nom, comté, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(forte, adj-adj, fort, [n-1]), si(équipe, nc-nom, équipe, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Surrey', npp-nam, 'Surrey', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('19e', adj-num, '19e', [dr(0,n,n)-1]), si(siècle, nc-nom, siècle, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(55, Result) :-
      prob_parse([ si('Brockwell', npp-nam, 'Brockwell', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Surrey', npp-nam, 'Surrey', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(56, Result) :-
      prob_parse([ si('Né', vpp-ver:pper, 'Né', [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Kingston-upon-Thames', npp-nam, 'Kingston-upon-Thames', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Surrey', npp-nam, 'Surrey', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Brockwell', npp-nam, 'Brockwell', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(joué, vpp-ver:pper, jouer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(cricket, nc-nom, cricket, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(comté, nc-nom, comté, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(forte, adj-adj, fort, [n-1]), si(équipe, nc-nom, équipe, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Surrey', npp-nam, 'Surrey', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('19e', adj-num, '19e', [n-1]), si(siècle, nc-nom, siècle, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(57, Result) :-
      prob_parse([ si('Brockwell', npp-nam, 'Brockwell', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('19ème', adj-num, '19ème', [dr(0,n,n)-1]), si(siècle, nc-nom, siècle, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(58, Result) :-
      prob_parse([ si('Crime', nc-nom, 'Crime', [np-1]), si(in, et-prp, in, [dr(0,dl(0,np,np),np)-1]), si('Choir', npp-nam, 'Choir', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rock, nc-nom, rock, [n-1]), si(progressif, adj-adj, progressif, [dl(0,n,n)-1]), si(instrumental, adj-adj, instrumental, [dl(0,n,n)-1]), si(originaire, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Francisco', npp-nam, 'Francisco', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(59, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(formation, nc-nom, formation, [n-1]), si(fondatrice, adj-adj, fondateur, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(automne, nc-nom, automne, [n-1]), si(2000, adj-num, 2000, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(composée, vpp-ver:pper, composer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Kenny', npp-nam, 'Kenny', [dr(0,np,np)-1]), si('Hopper', npp-nam, 'Hopper', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, pro-num, un, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(premiers, adj-num, premier, [dr(0,n,n)-1]), si(membres, nc-nom, membre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('At', et-prp, 'At', [dr(0,np,np)-1]), si(the, et-det:art, the, [dr(0,np,n)-1]), si('Drive-In', npp-nam, 'Drive-In', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('Jeff', npp-nam, 'Jeff', [dr(0,np,np)-1]), si('Hunt', npp-nam, 'Hunt', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Zach', npp-nam, 'Zach', [dr(0,np,np)-1]), si('Hill', npp-nam, 'Hill', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Hella', npp-nam, 'Hella', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(60, Result) :-
      prob_parse([ si('Jeff', npp-nam, 'Jeff', [dr(0,np,np)-1]), si('Hunt', npp-nam, 'Hunt', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(membre, nc-nom, membre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),pp)-1]), si('At', et-prp, 'At', [dr(0,pp,np)-1]), si(the, et-det:art, the, [dr(0,np,n)-1]), si('Drive-In', npp-nam, 'Drive-In', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(61, Result) :-
      prob_parse([ si('Natta', npp-nam, 'Natta', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tête, nc-nom, tête, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('PCI', npp-abr, 'PCI', [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(congrès, nc-nom, congrès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Florence', npp-nam, 'Florence', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1986, pro-num, 1986, [np-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), si(1988, pro-num, 1988, [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(contraint, vpp-ver:pper, contraindre, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(démissionner, vinf-ver:infi, démissionner, [dl(0,np,s_inf)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('Achille', npp-nam, 'Achille', [dr(0,np,np)-1]), si('Occhetto', npp-nam, 'Occhetto', [np-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(succédé, vpp-ver:pper, succéder, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(62, Result) :-
      prob_parse([ si('Achille', npp-nam, 'Achille', [dr(0,np,np)-1]), si('Occhetto', npp-nam, 'Occhetto', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(dirigeant, nc-nom, dirigeant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('PCI', npp-abr, 'PCI', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(63, Result) :-
      prob_parse([ si('Natta', npp-nam, 'Natta', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), si('Cossutta', npp-nam, 'Cossutta', [np-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(fortement, adv-adv, fortement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(opposé, vpp-ver:pper, opposer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Occhetto', npp-nam, 'Occhetto', [np-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(scission, nc-nom, scission, [n-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bolognina', npp-nam, 'Bolognina', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(changer, vinf-ver:infi, changer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(64, Result) :-
      prob_parse([ si('Cossutta', npp-nam, 'Cossutta', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(adversaire, nc-nom, adversaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Occhetto', npp-nam, 'Occhetto', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(65, Result) :-
      prob_parse([ si('KOOG', npp-abr, 'KOOG', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, nc-num, premier, [dr(0,n,n)-1]), si(affilié, nc-nom, affilier, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Pax', npp-nam, 'Pax', [np-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Utah', npp-nam, 'Utah', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(changé, vpp-ver:pper, changer, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(lettres, nc-nom, lettre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(appel, nc-nom, appel, [n-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si('KUPX', npp-nam, 'KUPX', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(1998, adj-num, 1998, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(66, Result) :-
      prob_parse([ si('KUPX', npp-abr, 'KUPX', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(filiale, nc-nom, filiale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('KOOG', npp-nam, 'KOOG', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(67, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(doctorat, nc-nom, doctorat, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Wetherill', npp-nam, 'Wetherill', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(membre, nc-nom, membre, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(personnel, nc-nom, personnel, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(département, nc-nom, département, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(magnétisme, nc-nom, magnétisme, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('DTM', npp-abr, 'DTM', [n-1]), si(')', ponct-pun, ')', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Carnegie', npp-nam, 'Carnegie', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('Washington', npp-nam, 'Washington', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('D.C', npp-abr, 'D.C', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(68, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(concept, nc-nom, concept, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(diagramme, nc-nom, diagramme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Concordia', npp-nam, 'Concordia', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(isotopique, adj-adj, isotopique, [dl(0,n,n)-1]), si('uranium-plomb', nc-nom, 'uranium-plomb', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(69, Result) :-
      prob_parse([ si('Wetherill', npp-nam, 'Wetherill', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inventeur, nc-nom, inventeur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(concept, nc-nom, concept, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(diagramme, nc-nom, diagramme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Concordia', npp-nam, 'Concordia', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(70, Result) :-
      prob_parse([ si('Prenant', vpr-ver:ppre, 'Prenant', [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(source, nc-nom, source, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Blackdown', npp-nam, 'Blackdown', [dr(0,n,n)-1]), si('Hills', npp-nam, 'Hills', [n-1]), si(',', ponct-pun, ',', [let-1]), si(juste, adv-adv, juste, [dr(0,pp,pp)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intérieur, nc-nom, intérieur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(frontière, nc-nom, frontière, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Somerset', npp-nam, 'Somerset', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rivière, nc-nom, rivière, [n-1]), si('Otter', npp-nam, 'Otter', [dl(0,n,n)-1]), si(coule, v-ver:pres, coule, [dl(0,np,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), si(32, adj-num, 32, [dr(0,n,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(finalement, adv-adv, finalement, [dl(1,s,s)-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Budleigh', npp-nam, 'Budleigh', [dr(0,np,np)-1]), si('Salterton', npp-nam, 'Salterton', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(71, Result) :-
      prob_parse([ si('Budleigh', npp-nam, 'Budleigh', [dr(0,np,np)-1]), si('Salterton', npp-nam, 'Salterton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Somerset', npp-nam, 'Somerset', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(72, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(péninsule, nc-nom, péninsule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Gaspé', npp-nam, 'Gaspé', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(simplement, adv-adv, simplement, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Gaspé', npp-nam, 'Gaspé', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Gaspésie', npp-nam, 'Gaspésie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(français, nc-nom, français, [n-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(péninsule, nc-nom, péninsule, [n-1]), si('nord-américaine', adj-adj, 'nord-américaine', [dl(0,n,n)-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rive, nc-nom, rive, [n-1]), si(sud, adj-nom, sud, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fleuve, nc-nom, fleuve, [n-1]), si('Saint-Laurent', npp-nam, 'Saint-Laurent', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Québec', npp-nam, 'Québec', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(73, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(péninsule, nc-nom, péninsule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Gaspé', npp-nam, 'Gaspé', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Québec', npp-nam, 'Québec', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(74, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(cotre, nc-nom, cotre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(collecteurs, nc-nom, collecteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(taxes, nc-nom, taxe, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(navire, nc-nom, navire, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(nommé, vpp-ver:pper, nommer, [dr(0,dl(0,np,s_pass),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_pass),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), si('Lane', npp-nam, 'Lane', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(nièce, nc-nom, nièce, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('James', npp-nam, 'James', [dl(0,n,n)-1]), si('Buchanan', npp-nam, 'Buchanan', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(hôtesse, nc-nom, hôtesse, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', npp-nam, 'Maison', [n-1]), si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Buchanan', npp-nam, 'Buchanan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(75, Result) :-
      prob_parse([ si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), si('Lane', npp-nam, 'Lane', [np-1]), si(possédait, v-ver:impf, posséder, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('Revenue', npp-nam, 'Revenue', [n-1]), si('Cutter', npp-nam, 'Cutter', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(76, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(cotre, nc-nom, cotre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(collecteurs, nc-nom, collecteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(taxes, nc-nom, taxe, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(navire, nc-nom, navire, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(nommé, vpp-ver:pper, nommer, [dr(0,dl(0,np,s_pass),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_pass),pp)-1]), si(après, p-prp, après, [dr(0,pp,np)-1]), si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), si('Lane', npp-nam, 'Lane', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(nièce, nc-nom, nièce, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('James', npp-nam, 'James', [dl(0,n,n)-1]), si('Buchanan', npp-nam, 'Buchanan', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(hôtesse, nc-nom, hôtesse, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', npp-nam, 'Maison', [n-1]), si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Buchanan', npp-nam, 'Buchanan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(77, Result) :-
      prob_parse([ si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), si('Lane', npp-nam, 'Lane', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(proche, nc-nom, proche, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('James', npp-nam, 'James', [dl(0,n,n)-1]), si('Buchanan', npp-nam, 'Buchanan', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(78, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(cotre, nc-nom, cotre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(collecteurs, nc-nom, collecteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(taxes, nc-nom, taxe, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(navire, nc-nom, navire, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(nommé, vpp-ver:pper, nommer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(honneur, nc-nom, honneur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), si('Lane', npp-nam, 'Lane', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(nièce, nc-nom, nièce, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('James', npp-nam, 'James', [dl(0,n,n)-1]), si('Buchanan', npp-nam, 'Buchanan', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(hôtesse, nc-nom, hôtesse, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', npp-nam, 'Maison', [n-1]), si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Buchanan', npp-nam, 'Buchanan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(79, Result) :-
      prob_parse([ si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), si('Lane', npp-nam, 'Lane', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', npp-nam, 'Maison', [n-1]), si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(80, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(à, p-prp, à, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),n)-1]), si(nouveau, adj-adj, nouveau, [n-1]), si(transférée, vpp-ver:pper, transférer, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marine, nc-nom, marine, [n-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Sécession', npp-nam, 'Sécession', [n-1]), si(débute, v-ver:pres, débuter, [dl(0,np,s)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1861, pro-num, 1861, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(81, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(civile, adj-adj, civil, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1861, pro-num, 1861, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(82, Result) :-
      prob_parse([ si('Landowska', npp-nam, 'Landowska', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(composition, nc-nom, composition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(pièces, nc-nom, pièce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(musique, nc-nom, musique, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(instrument, nc-nom, instrument, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(concerto, nc-nom, concerto, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(clavecin, nc-nom, clavecin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Manuel', npp-nam, 'Manuel', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Falla', npp-nam, 'Falla', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,np)-1]), si('El', npp-nam, 'El', [dr(0,n,n)-1]), si(retablo, et-nom, retablo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Maese', npp-nam, 'Maese', [dr(0,np,np)-1]), si('Pedro', npp-nam, 'Pedro', [np-1]), si('(', ponct-pun, '(', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si(duquel, adj-adj, duquel, [let-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [let-1]), si(salon, nc-nom, salon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Winnaretta', npp-nam, 'Winnaretta', [dr(0,np,np)-1]), si('Singer', npp-nam, 'Singer', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Poulenc', npp-nam, 'Poulenc', [np-1]), si(et, cc-kon, et, [np-1]), si('Landowska', npp-nam, 'Landowska', [dr(0,dl(0,np,np),np)-1]), si(se, clr-pro:per, se, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rencontrés, vpp-ver:pper, rencontrer, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [n-1]), si(fois, nc-nom, fois, [let-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(83, Result) :-
      prob_parse([ si('Landowska', npp-nam, 'Landowska', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inventeur, nc-nom, inventeur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(clavecin, nc-nom, clavecin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(84, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(style, nc-nom, style, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(jardin, nc-nom, jardin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Robinson', npp-nam, 'Robinson', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(visible, adj-adj, visible, [dl(0,n,n)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Gravetye', npp-nam, 'Gravetye', [dr(0,np,np)-1]), si('Manor', npp-nam, 'Manor', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('West', npp-nam, 'West', [dr(0,n,n)-1]), si('Sussex', npp-nam, 'Sussex', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(manucuré, vpp-ver:pper, manucurer, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Robinson', npp-nam, 'Robinson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(85, Result) :-
      prob_parse([ si('Gravetye', npp-nam, 'Gravetye', [dr(0,np,np)-1]), si('Manor', npp-nam, 'Manor', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Robinson', npp-nam, 'Robinson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(86, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(style, nc-nom, style, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(jardin, nc-nom, jardin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Robinson', npp-nam, 'Robinson', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(visible, adj-adj, visible, [dl(0,n,n)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Gravetye', npp-nam, 'Gravetye', [dr(0,np,np)-1]), si('Manor', npp-nam, 'Manor', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('West', npp-nam, 'West', [dr(0,n,n)-1]), si('Sussex', npp-nam, 'Sussex', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(manucuré, vpp-ver:pper, manucurer, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Robinson', npp-nam, 'Robinson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(87, Result) :-
      prob_parse([ si('Gravetye', npp-nam, 'Gravetye', [dr(0,np,np)-1]), si('Manor', npp-nam, 'Manor', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('West', npp-nam, 'West', [n-1]), si('Sussex', npp-nam, 'Sussex', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(88, Result) :-
      prob_parse([ si('Robinson', npp-nam, 'Robinson', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si(natale, adj-adj, natal, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1861, pro-num, 1861, [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(occuper, vinf-ver:infi, occuper, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(poste, nc-nom, poste, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(jardins, nc-nom, jardin, [n-1]), si(botaniques, adj-adj, botanique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Regents', npp-nam, 'Regents', [dr(0,np,np)-1]), si('Park', npp-nam, 'Park', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(',', ponct-pun, ',', [let-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(horticole, adj-adj, horticole, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Veitch', npp-nam, 'Veitch', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(89, Result) :-
      prob_parse([ si('Robinson', npp-nam, 'Robinson', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(90, Result) :-
      prob_parse([ si('Robinson', npp-nam, 'Robinson', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(membre, nc-nom, membre, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Société', nc-nam, 'Société', [n-1]), si(linnéenne, adj-adj, linnéen, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(âge, nc-nom, âge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(29, det-num, 29, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(correspondant, nc-nom, correspondant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(jardinage, nc-nom, jardinage, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(succès, nc-nom, succès, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Times', npp-nam, 'Times', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(91, Result) :-
      prob_parse([ si('Robinson', npp-nam, 'Robinson', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(membre, nc-nom, membre, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Société', nc-nam, 'Société', [n-1]), si(linnéenne, adj-adj, linnéen, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(92, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(livres, nc-nom, livre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(deux, pro-num, deux, [np-1]), si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(influents, adj-adj, influent, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Wild', npp-nam, 'Wild', [dr(0,n,n)-1]), si('Garden', npp-nam, 'Garden', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('English', npp-nam, 'English', [dr(0,n,n)-1]), si('Flower', npp-nam, 'Flower', [dr(0,n,n)-1]), si('Garden', npp-nam, 'Garden', [n-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(amie, nc-nom, amie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(toujours, adv-adv, toujours, [dr(0,np,np)-1]), si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), si('Jekyll', npp-nam, 'Jekyll', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(contribué, vpp-ver:pper, contribuer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(sections, nc-nom, section, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(93, Result) :-
      prob_parse([ si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), si('Jekyll', npp-nam, 'Jekyll', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('co-auteur', nc-nom, 'co-auteur', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Wild', npp-nam, 'Wild', [dr(0,n,n)-1]), si('Garden', npp-nam, 'Garden', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(94, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(rencontre, nc-nom, rencontre, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('Robinson', npp-nam, 'Robinson', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), si('Jekyll', npp-nam, 'Jekyll', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1875, pro-num, 1875, [np-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(accord, nc-nom, accord, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(principes, nc-nom, principe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(conception, nc-nom, conception, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entretenu, vpp-ver:pper, entretenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(amitié, nc-nom, amitié, [n-1]), si(étroite, adj-adj, étroit, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(association, nc-nom, association, [n-1]), si(professionnelle, adj-adj, professionnel, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(95, Result) :-
      prob_parse([ si('Robinson', npp-nam, 'Robinson', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(partenaire, nc-nom, partenaire, [n-1]), si(professionnel, adj-adj, professionnel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), si('Jekyll', npp-nam, 'Jekyll', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(96, Result) :-
      prob_parse([ si('British', npp-nam, 'British', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [dr(0,np,np)-1]), si('Ltd', npp-nam, 'Ltd', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créée, vpp-ver:pper, créer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Allied', npp-nam, 'Allied', [dr(0,np,np)-1]), si('British', npp-nam, 'British', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(1935, adj-num, 1935, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fusion, nc-nom, fusion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Spartan', npp-nam, 'Spartan', [dr(0,np,np)-1]), si('Air', npp-nam, 'Air', [dr(0,np,np)-1]), si('Lines', npp-nam, 'Lines', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('United', npp-nam, 'United', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(97, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acquis, vpp-ver:pper, acquérir, [dr(0,dl(0,np,s_ppart),np)-1]), si('Hillman\'s', npp-nam, 'Hillman\'s', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(adopté, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(définitif, adj-adj, définitif, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(transféré, vpp-ver:pper, transférer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(nouvel, adj-adj, nouveau, [dr(0,n,n)-1]), si(aéroport, nc-nom, aéroport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Gatwick', npp-nam, 'Gatwick', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(98, Result) :-
      prob_parse([ si('Spartan', npp-nam, 'Spartan', [dr(0,np,np)-1]), si('Air', npp-nam, 'Air', [dr(0,np,np)-1]), si('Lines', npp-nam, 'Lines', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acquis, vpp-ver:pper, acquérir, [dr(0,dl(0,np,s_ppart),np)-1]), si('United', npp-nam, 'United', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(99, Result) :-
      prob_parse([ si('British', npp-nam, 'British', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [dr(0,np,np)-1]), si('Ltd', npp-nam, 'Ltd', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créée, vpp-ver:pper, créer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Allied', npp-nam, 'Allied', [dr(0,np,np)-1]), si('British', npp-nam, 'British', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(1935, adj-num, 1935, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fusion, nc-nom, fusion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Spartan', npp-nam, 'Spartan', [dr(0,np,np)-1]), si('Air', npp-nam, 'Air', [dr(0,np,np)-1]), si('Lines', npp-nam, 'Lines', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('United', npp-nam, 'United', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(100, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acquis, vpp-ver:pper, acquérir, [dr(0,dl(0,np,s_ppart),np)-1]), si('Hillman\'s', npp-nam, 'Hillman\'s', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(adopté, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(définitif, adj-adj, définitif, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(transféré, vpp-ver:pper, transférer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(nouvel, adj-adj, nouveau, [dr(0,n,n)-1]), si(aéroport, nc-nom, aéroport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Gatwick', npp-nam, 'Gatwick', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(101, Result) :-
      prob_parse([ si('Hillman\'s', npp-nam, 'Hillman\'s', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(vendue, vpp-ver:pper, vendre, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('British', npp-nam, 'British', [dr(0,np,np)-1]), si('Airways', npp-nam, 'Airways', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(102, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(château, nc-nom, château, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Crathes', npp-nam, 'Crathes', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(siège, nc-nom, siège, [n-1]), si(ancestral, adj-adj, ancestral, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Burnett', npp-nam, 'Burnett', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Leys', npp-nam, 'Leys', [np-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,np),s)-1]), si(il, cls-pro:per, il, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('National', npp-nam, 'National', [dr(0,n,n)-1]), si('Trust', npp-nam, 'Trust', [n-1]), si(for, et-prp, for, [dr(0,dl(0,n,n),np)-1]), si('Scotland', npp-nam, 'Scotland', [np-1]), si(par, p-prp, par, [np-1]), si(le, det-det:art, le, [dr(0,pp_par,np)-1]), si('13e', adj-num, '13e', [dr(0,np,n)-1]), si(baronnet, nc-nom, baronnet, [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si('Leys', npp-nam, 'Leys', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Sir', npp-nam, 'Sir', [dr(0,np,np)-1]), si('James', npp-nam, 'James', [dr(0,np,np)-1]), si('Burnett', npp-nam, 'Burnett', [np-1]), si(en, p-prp, en, [np-1]), si(1951, pro-num, 1951, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(103, Result) :-
      prob_parse([ si('Sir', nc-abr, 'Sir', [dr(0,np,np)-1]), si('James', npp-nam, 'James', [dr(0,np,np)-1]), si('Burnett', npp-nam, 'Burnett', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(propriétaire, nc-nom, propriétaire, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(château, nc-nom, château, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Crathes', npp-nam, 'Crathes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(104, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(château, nc-nom, château, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Crathes', npp-nam, 'Crathes', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(siège, nc-nom, siège, [n-1]), si(ancestral, adj-adj, ancestral, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Burnetts', npp-nam, 'Burnetts', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Leys', npp-nam, 'Leys', [np-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,np),s)-1]), si(il, cls-pro:per, il, [np-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('National', npp-nam, 'National', [dr(0,n,n)-1]), si('Trust', npp-nam, 'Trust', [n-1]), si(for, et-prp, for, [dr(0,dl(0,n,n),np)-1]), si('Scotland', npp-nam, 'Scotland', [np-1]), si(par, p-prp, par, [np-1]), si(le, det-det:art, le, [dr(0,pp_par,np)-1]), si('13e', adj-num, '13e', [dr(0,np,n)-1]), si(baronnet, nc-nom, baronnet, [n-1]), si(de, p-prp, de, [n-1]), si('Leys', npp-nam, 'Leys', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Sir', nc-nam, 'Sir', [dr(0,np,np)-1]), si('James', npp-nam, 'James', [dr(0,np,np)-1]), si('Burnett', npp-nam, 'Burnett', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1951, pro-num, 1951, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(105, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(château, nc-nom, château, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Crathes', npp-nam, 'Crathes', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('National', npp-nam, 'National', [dr(0,n,n)-1]), si('Trust', npp-nam, 'Trust', [n-1]), si(for, et-prp, for, [dr(0,dl(0,n,n),np)-1]), si('Scotland', npp-nam, 'Scotland', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(106, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(études, nc-nom, étude, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Proche-Orient', npp-nam, 'Proche-Orient', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jérusalem', npp-nam, 'Jérusalem', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(études, nc-nom, étude, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(mont, nc-nom, mont, [n-1]), si('Scopus', npp-nam, 'Scopus', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Jérusalem-Est', npp-nam, 'Jérusalem-Est', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(107, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Centre', npp-nam, 'Centre', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(études, nc-nom, étude, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Proche-Orient', npp-nam, 'Proche-Orient', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', npp-nam, 'Université', [n-1]), si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jérusalem', npp-nam, 'Jérusalem', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Jérusalem', npp-nam, 'Jérusalem', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(108, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(études, nc-nom, étude, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Jérusalem', npp-nam, 'Jérusalem', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1968, pro-num, 1968, [np-1]), si(',', ponct-pun, ',', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(abord, nc-nom, abord, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('City', npp-nam, 'City', [n-1]), si('Hotel', npp-nam, 'Hotel', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Jérusalem-Est', npp-nam, 'Jérusalem-Est', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(109, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1968, pro-num, 1968, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(110, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(controverse, nc-nom, controverse, [n-1]), si(majeure, adj-adj, majeur, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(éclaté, vpp-ver:pper, éclater, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(juif, adj-adj, juif, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(conduisant, vpr-ver:ppre, conduire, [dr(0,dl(0,np,s_ppres),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(négociations, nc-nom, négociation, [n-1]), si(diplomatiques, adj-adj, diplomatique, [dl(0,n,n)-1]), si(minutieuses, adj-adj, minutieux, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Église', nc-nam, 'Église', [n-1]), si('LDS', npp-abr, 'LDS', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(juifs, adj-adj, juif, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Église', npp-nam, 'Église', [n-1]), si('LDS', npp-nam, 'LDS', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(utiliserait, v-ver:cond, utiliser, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Centre', npp-nam, 'Centre', [n-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prosélytisme, nc-nom, prosélytisme, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(juif, adj-adj, juif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(111, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Église', nc-nom, 'Église', [n-1]), si('LDS', npp-abr, 'LDS', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(bannie, vpp-ver:pper, bannir, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(112, Result) :-
      prob_parse([ si('Oscar', npp-nam, 'Oscar', [dr(0,np,np)-1]), si('Chisini', npp-nam, 'Chisini', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(1889, adj-num, 1889, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Bergame', npp-nam, 'Bergame', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(1967, adj-num, 1967, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Milan', npp-nam, 'Milan', [np-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mathématicien, nc-nom, mathématicien, [n-1]), si(italien, adj-adj, italien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(113, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(introduit, vpp-ver:pper, introduire, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moyenne, nc-nom, moyenne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Chisini', npp-nam, 'Chisini', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1929, pro-num, 1929, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(114, Result) :-
      prob_parse([ si('Oscar', npp-nam, 'Oscar', [dr(0,np,np)-1]), si('Chisini', npp-nam, 'Chisini', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1967, pro-num, 1967, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(115, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1929, pro-num, 1929, [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(fonde, v-ver:pres, fondre, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mathématiques, nc-nom, mathématique, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('Istituto', npp-nam, 'Istituto', [n-1]), si(di, et-prp, di, [dr(0,dl(0,n,n),np)-1]), si('Matematica', npp-nam, 'Matematica', [np-1]), si(')', ponct-pun, ')', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Milan', npp-nam, 'Milan', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('Gian', npp-nam, 'Gian', [dr(0,np,np)-1]), si('Antonio', npp-nam, 'Antonio', [np-1]), si('Maggi', npp-nam, 'Maggi', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Giulio', npp-nam, 'Giulio', [np-1]), si('Vivanti', npp-nam, 'Vivanti', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(116, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mathématiques, nc-nom, mathématique, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Milan', npp-nam, 'Milan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(117, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1929, pro-num, 1929, [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(fonde, v-ver:pres, fondre, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mathématiques, nc-nom, mathématique, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('Istituto', npp-nam, 'Istituto', [n-1]), si(di, et-prp, di, [dr(0,dl(0,n,n),np)-1]), si('Matematica', npp-nam, 'Matematica', [np-1]), si(')', ponct-pun, ')', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Milan', npp-nam, 'Milan', [np-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('Gian', npp-nam, 'Gian', [dr(0,np,np)-1]), si('Antonio', npp-nam, 'Antonio', [np-1]), si('Maggi', npp-nam, 'Maggi', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Giulio', npp-nam, 'Giulio', [np-1]), si('Vivanti', npp-nam, 'Vivanti', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(118, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Milan', npp-nam, 'Milan', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Gian', npp-nam, 'Gian', [dr(0,np,np)-1]), si('Antonio', npp-nam, 'Antonio', [dr(0,np,np)-1]), si('Maggi', npp-nam, 'Maggi', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Giulio', npp-nam, 'Giulio', [dr(0,np,np)-1]), si('Vivanti', npp-nam, 'Vivanti', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(119, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Japonais', nc-nam, 'Japonais', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rendus, vpp-ver:pper, rendre, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(1945, adj-num, 1945, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(donc, adv-adv, donc, [dr(0,s,s)-1]), si('Magdalena', npp-nam, 'Magdalena', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Philippines', npp-nam, 'Philippines', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(libérées, vpp-ver:pper, libérer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tyrannie, nc-nom, tyrannie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(120, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Philippines', npp-nam, 'Philippines', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rendues, vpp-ver:pper, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(121, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Japonais', nc-nam, 'Japonais', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rendus, vpp-ver:pper, rendre, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(25, adj-num, 25, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(1945, adj-num, 1945, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(donc, adv-adv, donc, [dr(0,s,s)-1]), si('Magdalena', npp-nam, 'Magdalena', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Philippines', npp-nam, 'Philippines', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(libérées, vpp-ver:pper, libérer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tyrannie, nc-nom, tyrannie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(122, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Philippines', npp-nam, 'Philippines', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vaincu, vpp-ver:pper, vaincre, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1945, pro-num, 1945, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(123, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(grotte, nc-nom, grotte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Kazumura', npp-nam, 'Kazumura', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(long, adj-adj, long, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(profond, adj-adj, profond, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(tubes, nc-nom, tube, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lave, nc-nom, lave, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(124, Result) :-
      prob_parse([ si('Située', vpp-ver:pper, 'Située', [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pentes, nc-nom, pente, [n-1]), si('sud-est', adj-adj, 'sud-est', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Mauna', npp-nam, 'Mauna', [dr(0,n,n)-1]), si('Loa', npp-nam, 'Loa', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sommet, nc-nom, sommet, [n-1]), si(sud, adj-adj, sud, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('Big', npp-nam, 'Big', [dr(0,np,np)-1]), si('Island', npp-nam, 'Island', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('Hawai\'i', npp-nam, 'Hawai\'i', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(125, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(tube, nc-nom, tube, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lave, nc-nom, lave, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,np,s_pass),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Hawaï', npp-nam, 'Hawaï', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(126, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(strass, nc-nom, strass, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(imitation, nc-nom, imitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(diamant, nc-nom, diamant, [n-1]), si(fabriquée, vpp-ver:pper, fabriquer, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(cristal, nc-nom, cristal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(roche, nc-nom, roche, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(verre, nc-nom, verre, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(acrylique, nc-nom, acrylique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(127, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(diamants, nc-nom, diamant, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fabriqués, vpp-ver:pper, fabriquer, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(verre, nc-nom, verre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(128, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(costume, nc-nom, costume, [n-1]), si('Nudie', npp-nam, 'Nudie', [dl(0,n,n)-1]), si(serti, vpp-ver:pper, sertir, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(strass, nc-nom, strass, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(inventé, vpp-ver:pper, inventer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Nudie', npp-nam, 'Nudie', [dr(0,np,np)-1]), si('Cohn', npp-nam, 'Cohn', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(1940, adj-num, 1940, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(américanisation, nc-nom, américanisation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(costume, nc-nom, costume, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lumières, nc-nom, lumière, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(matador, nc-nom, matador, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(129, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(costume, nc-nom, costume, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lumières, nc-nom, lumière, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(matador, nc-nom, matador, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(inventé, vpp-ver:pper, inventer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Nudie', npp-nam, 'Nudie', [dr(0,np,np)-1]), si('Cohn', npp-nam, 'Cohn', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(130, Result) :-
      prob_parse([ si('Diplômée', vpp-ver:pper, 'Diplômée', [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faculté, nc-nom, faculté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médecine, nc-nom, médecine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('St', npp-nam, 'St', [dl(0,n,n)-1]), si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), si('Wood', npp-nam, 'Wood', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chirurgien, nc-nom, chirurgien, [n-1]), si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), si('Keirath', npp-nam, 'Keirath', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(occidentale, adj-adj, occidental, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(émigrer, vinf-ver:infi, émigrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Perth', npp-nam, 'Perth', [np-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(premiers, adj-num, premier, [dr(0,n,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1987, pro-num, 1987, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(131, Result) :-
      prob_parse([ si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), si('Wood', npp-nam, 'Wood', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(diplômée, vpp-ver:pper, diplômer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faculté, nc-nom, faculté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médecine, nc-nom, médecine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('St', npp-nam, 'St', [dl(0,n,n)-1]), si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(132, Result) :-
      prob_parse([ si('Diplômée', vpp-ver:pper, 'Diplômée', [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faculté, nc-nom, faculté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médecine, nc-nom, médecine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('St', npp-nam, 'St', [dl(0,n,n)-1]), si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), si('Wood', npp-nam, 'Wood', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chirurgien, nc-nom, chirurgien, [n-1]), si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), si('Keirath', npp-nam, 'Keirath', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(occidentale, adj-adj, occidental, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(émigrer, vinf-ver:infi, émigrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Perth', npp-nam, 'Perth', [np-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(premiers, adj-num, premier, [dr(0,n,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1987, pro-num, 1987, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(133, Result) :-
      prob_parse([ si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), si('Wood', npp-nam, 'Wood', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), si('Keirath', npp-nam, 'Keirath', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(134, Result) :-
      prob_parse([ si('Diplômée', vpp-ver:pper, 'Diplômée', [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faculté, nc-nom, faculté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médecine, nc-nom, médecine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('St', npp-nam, 'St', [dl(0,n,n)-1]), si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), si('Wood', npp-nam, 'Wood', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chirurgien, nc-nom, chirurgien, [n-1]), si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), si('Keirath', npp-nam, 'Keirath', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(occidentale, adj-adj, occidental, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(émigrer, vinf-ver:infi, émigrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Perth', npp-nam, 'Perth', [np-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(premiers, adj-num, premier, [dr(0,n,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1987, pro-num, 1987, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(135, Result) :-
      prob_parse([ si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), si('Keirath', npp-nam, 'Keirath', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(136, Result) :-
      prob_parse([ si('Diplômée', vpp-ver:pper, 'Diplômée', [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faculté, nc-nom, faculté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médecine, nc-nom, médecine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('St', npp-nam, 'St', [dl(0,n,n)-1]), si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), si('Wood', npp-nam, 'Wood', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chirurgien, nc-nom, chirurgien, [n-1]), si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), si('Keirath', npp-nam, 'Keirath', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(occidentale, adj-adj, occidental, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(émigrer, vinf-ver:infi, émigrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Perth', npp-nam, 'Perth', [np-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(premiers, adj-num, premier, [dr(0,n,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1987, pro-num, 1987, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(137, Result) :-
      prob_parse([ si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), si('Wood', npp-nam, 'Wood', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(origine, nc-nom, origine, [n-1]), si(australienne, adj-adj, australien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(138, Result) :-
      prob_parse([ si('Maldon', npp-nam, 'Maldon', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Victoria', npp-nam, 'Victoria', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comté, nc-nom, comté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mount', npp-nam, 'Mount', [dr(0,np,np)-1]), si('Alexander', npp-nam, 'Alexander', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(139, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(porte, v-ver:pres, porte, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(nom, nc-nom, nom, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(140, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Maldon', npp-nam, 'Maldon', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(141, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(toile, nc-nom, toile, [n-1]), si(infinie, adj-adj, infini, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(idée, nc-nom, idée, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(taille, nc-nom, taille, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(page, nc-nom, page, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bande, nc-nom, bande, [n-1]), si(dessinée, vpp-ver:pper, dessiné, [dl(0,n,n)-1]), si(numérique, adj-adj, numérique, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(théoriquement, adv-adv, théoriquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(infinie, adj-adj, infini, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(142, Result) :-
      prob_parse([ si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), si(concept, nc-nom, concept, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(introduit, vpp-ver:pper, introduire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Scott', npp-nam, 'Scott', [dr(0,np,np)-1]), si('McCloud', npp-nam, 'McCloud', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(livre, nc-nom, livre, [n-1]), si('Reinventing', npp-nam, 'Reinventing', [dl(0,n,n)-1]), si('Comics', npp-nam, 'Comics', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(143, Result) :-
      prob_parse([ si('Reinventing', npp-nam, 'Reinventing', [dr(0,np,np)-1]), si('Comics', npp-nam, 'Comics', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(livre, nc-nom, livre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Scott', npp-nam, 'Scott', [dr(0,np,np)-1]), si('McCloud', npp-nam, 'McCloud', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(144, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(juin, nc-nom, juin, [n-1]), si(2004, adj-num, 2004, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(application, nc-nom, application, [n-1]), si(appelée, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si('InfiniteCanvas', npp-nam, 'InfiniteCanvas', [np-1]), si('(', ponct-pun, '(', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('IC', npp-abr, 'IC', [np-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(publiée, vpp-ver:pper, publier, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si('Markus', npp-nam, 'Markus', [dl(0,n,n)-1]), si('Müller', npp-nam, 'Müller', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(tentant, vpr-ver:ppre, tenter, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(apporter, vinf-ver:infi, apporter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(solution, nc-nom, solution, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(courants, adj-adj, courant, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(toiles, nc-nom, toile, [n-1]), si(infinies, adj-adj, infini, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(145, Result) :-
      prob_parse([ si('InfiniteCanvas', npp-nam, 'InfiniteCanvas', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Markus', npp-nam, 'Markus', [dr(0,np,np)-1]), si('Müller', npp-nam, 'Müller', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(146, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(petite, adj-adj, petit, [dr(0,n,n)-1]), si(île, nc-nom, île, [n-1]), si(inhabitée, adj-adj, inhabité, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(origine, nc-nom, origine, [n-1]), si(volcanique, adj-adj, volcanique, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(océan, nc-nom, océan, [n-1]), si('Austral', npp-nam, 'Austral', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(505, det-num, 505, [dr(0,np,n)-1]), si(km, nc-abr, kilomètre, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('nord-est', nc-nom, 'nord-est', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cap, nc-nom, cap, [n-1]), si('Adare', npp-nam, 'Adare', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(extrémité, nc-nom, extrémité, [n-1]), si('nord-est', nc-nom, 'nord-est', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(terre, nc-nom, terre, [n-1]), si('Victoria', npp-nam, 'Victoria', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(147, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(505, det-num, 505, [dr(0,np,n)-1]), si(km, nc-abr, kilomètre, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('nord-est', nc-nom, 'nord-est', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Victoria', npp-nam, 'Victoria', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(148, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(petite, adj-adj, petit, [dr(0,n,n)-1]), si(île, nc-nom, île, [n-1]), si(inhabitée, adj-adj, inhabité, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(origine, nc-nom, origine, [n-1]), si(volcanique, adj-adj, volcanique, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(océan, nc-nom, océan, [n-1]), si('Austral', npp-nam, 'Austral', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(505, det-num, 505, [dr(0,np,n)-1]), si(km, nc-abr, kilomètre, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('nord-est', nc-nom, 'nord-est', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cap, nc-nom, cap, [n-1]), si('Adare', npp-nam, 'Adare', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(extrémité, nc-nom, extrémité, [n-1]), si('nord-est', nc-nom, 'nord-est', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(terre, nc-nom, terre, [n-1]), si('Victoria', npp-nam, 'Victoria', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(149, Result) :-
      prob_parse([ si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), si(personne, pro-pro:ind, personne, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(vit, v-ver:pres, voir, [dl(0,np,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(150, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si(mesure, v-ver:pres, mesure, [dr(0,dl(0,np,s),np)-1]), si(370, det-num, 370, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(long, nc-nom, long, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(180, det-num, 180, [dr(0,np,n)-1]), si(m, nc-abr, m, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(large, nc-nom, large, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(altitude, nc-nom, altitude, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(élevée, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,np,s_ppres),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pilier, nc-nom, pilier, [n-1]), si('Haggits', npp-nam, 'Haggits', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(63, det-num, 63, [dr(0,np,n)-1]), si(m, nc-abr, m, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(151, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pilier, nc-nom, pilier, [n-1]), si('Haggits', npp-nam, 'Haggits', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(152, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(découverte, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), si(débarquée, vpp-ver:pper, débarquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(1902, adj-num, 1902, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(capitaine, nc-nom, capitaine, [n-1]), si('William', npp-nam, 'William', [dl(0,n,n)-1]), si('Colbeck', npp-nam, 'Colbeck', [dl(0,n,n)-1]), si(commandant, nc-nom, commandant, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Morning', npp-nam, 'Morning', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(navire, nc-nom, navire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(secours, nc-nom, secours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(expédition, nc-nom, expédition, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(capitaine, nc-nom, capitaine, [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('F.', npp-abr, 'F.', [dl(0,n,n)-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(153, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(alors, adv-adv, alors, [dl(1,s,s)-1]), si(nommée, vpp-ver:pper, nommer, [dr(0,dl(0,np,s_pass),np)-1]), si(île, nc-nom, île, [dr(0,np,np)-1]), si('Markham', npp-nam, 'Markham', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(154, Result) :-
      prob_parse([ si('William', npp-nam, 'William', [dr(0,np,np)-1]), si('Colbeck', npp-nam, 'Colbeck', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Markham', npp-nam, 'Markham', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(1902, adj-num, 1902, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(155, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dépendance, nc-nom, dépendance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Ross', npp-nam, 'Ross', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(revendiquée, vpp-ver:pper, revendiquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Nouvelle-Zélande', npp-nam, 'Nouvelle-Zélande', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(156, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Nouvelle-Zélande', npp-nam, 'Nouvelle-Zélande', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(157, Result) :-
      prob_parse([ si('Ullmann', npp-nam, 'Ullmann', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(enseigné, vpp-ver:pper, enseigner, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chimie, nc-nom, chimie, [n-1]), si(technique, adj-adj, technique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1905, pro-num, 1905, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1913, pro-num, 1913, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1922, pro-num, 1922, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1925, pro-num, 1925, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Technischen', npp-nam, 'Technischen', [dr(0,n,n)-1]), si('Hochschule', npp-nam, 'Hochschule', [dr(0,n,n)-1]), si('Berlin', npp-nam, 'Berlin', [dl(0,n,n)-1]), si('-aujourd\'hui', ponct-adv, '-aujourd\'hui', [dr(0,dl(0,n,n),n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(technique, adj-adj, technique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('-', ponct-pun, '-', [let-1]), si(',', ponct-pun, ',', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(abord, nc-nom, abord, [n-1]), si(comme, adv-adv, comme, [n-1]), si(membre, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(corps, nc-nom, corps, [n-1]), si(enseignant, adj-adj, enseignant, [dl(0,n,n)-1]), si(ordinaire, adj-adj, ordinaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(professeur, nc-nom, professeur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(158, Result) :-
      prob_parse([ si('Ullmann', npp-nam, 'Ullmann', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(professeur, nc-nom, professeur, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Technischen', npp-nam, 'Technischen', [dr(0,n,n)-1]), si('Hochschule', npp-nam, 'Hochschule', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(159, Result) :-
      prob_parse([ si('Ullmann', npp-nam, 'Ullmann', [np-1]), si(was, et-ver:pres, was, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(married, et-nom, married, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(to, et-prp, to, [dr(0,pp_a,np)-1]), si('Irma', npp-nam, 'Irma', [dr(0,np,np)-1]), si('Goldberg', npp-nam, 'Goldberg', [np-1]), si(who, et-pro:rel, who, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(was, et-adv, was, [dr(0,dl(0,np,s),np)-1]), si(his, et-det:art, his, [dr(0,np,n)-1]), si(assistant, et-nom, assistant, [n-1]), si(from, et-prp, from, [dr(0,dl(0,n,n),np)-1]), si(1905, pro-num, 1905, [np-1]), si(to, et-prp, to, [dr(0,dl(0,np,np),np)-1]), si(1910, pro-num, 1910, [np-1]), si(at, et-prp, at, [dr(0,dl(0,np,np),np)-1]), si(his, et-det:art, his, [dr(0,np,n)-1]), si(laboratory, et-nom, laboratory, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(160, Result) :-
      prob_parse([ si('Ullmann', npp-nam, 'Ullmann', [np-1]), si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), si('Irma', npp-nam, 'Irma', [dr(0,np,np)-1]), si('Goldberg', npp-nam, 'Goldberg', [np-1]), si(got, et-prp, got, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(married, et-nom, married, [dl(0,np,s_ppart)-1]), si(in, et-prp, in, [dr(0,dl(1,s,s),np)-1]), si(1905, pro-num, 1905, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(161, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si(1950, adj-num, 1950, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(radiotélescopes, nc-nom, radiotélescope, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(suffisante, adj-adj, suffisant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),np)-1]), si(identifier, vinf-ver:infi, identifier, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(sources, nc-nom, source, [n-1]), si(radio, nc-nom, radio, [dl(0,n,n)-1]), si(spécifiques, adj-adj, spécifique, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(homologues, nc-nom, homologue, [n-1]), si(optiques, adj-adj, optique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conduit, vpp-ver:pper, conduire, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(quasars, nc-nom, quasar, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(162, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(quasars, nc-nom, quasar, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(découverts, vpp-ver:pper, découvrir, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si(1950, adj-num, 1950, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(163, Result) :-
      prob_parse([ si('Muybridge', npp-nam, 'Muybridge', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(auparavant, adv-adv, auparavant, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(invention, nc-nom, invention, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(appelait, v-ver:impf, appeler, [dr(0,dr(0,dl(0,np,s),np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Zoopraxiscope', npp-nam, 'Zoopraxiscope', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(164, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Zoopraxiscope', npp-nam, 'Zoopraxiscope', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(inventé, vpp-ver:pper, inventer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Muybridge', npp-nam, 'Muybridge', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(165, Result) :-
      prob_parse([ si('Edison', npp-nam, 'Edison', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Dickson', npp-nam, 'Dickson', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(employés, nc-nom, employé, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Edison', npp-nam, 'Edison', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(progressé, vpp-ver:pper, progresser, [dl(0,np,s_ppart)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conception, nc-nom, conception, [n-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(certain, adj-adj, certain, [dr(0,n,n)-1]), si(point, nc-nom, point, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(166, Result) :-
      prob_parse([ si('Dickson', npp-nam, 'Dickson', [np-1]), si(travaillait, v-ver:impf, travailler, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('Edison', npp-nam, 'Edison', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(167, Result) :-
      prob_parse([ si('Peu', adv-adv, 'Peu', [dr(0,dr(0,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(après, adv-adv, après, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(industrie, nc-nom, industrie, [n-1]), si(automobile, nc-nom, automobile, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(naissante, adj-adj, naissant, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(premiers, adj-num, premier, [dr(0,n,n)-1]), si(efforts, nc-nom, effort, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('Selden', npp-nam, 'Selden', [np-1]), si(',', ponct-pun, ',', [let-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(réellement, adv-adv, réellement, [dl(1,s,s)-1]), si(produit, vpp-ver:pper, produire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(fonctionnel, adj-adj, fonctionnel, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(automobile, nc-nom, automobile, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(revendication, nc-nom, revendication, [n-1]), si(crédible, adj-adj, crédible, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(breveté, vpp-ver:pper, breveter, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(automobile, nc-nom, automobile, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(168, Result) :-
      prob_parse([ si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('Selden', npp-nam, 'Selden', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(produit, vpp-ver:pper, produire, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(automobile, nc-nom, automobile, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(169, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si('12e', adj-num, '12e', [dr(0,n,n)-1]), si(siècle, nc-nom, siècle, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tournoi, nc-nom, tournoi, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(si, adv-adv, si, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(roi, nc-nom, roi, [n-1]), si('Henri', npp-nam, 'Henri', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(jugea, v-ver:simp, juger, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(nécessaire, adj-adj, nécessaire, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(interdire, vinf-ver:infi, interdire, [dr(0,dl(0,np,s_inf),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(sport, nc-nom, sport, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(rassemblait, v-ver:impf, rassembler, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(lieu, nc-nom, lieu, [n-1]), si(tant, adv-adv, tant, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(barons, nc-nom, baron, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(chevaliers, nc-nom, chevalier, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(170, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(roi, nc-nom, roi, [n-1]), si('Henri', npp-nam, 'Henri', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(interdit, vpp-ver:pper, interdire, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tournois, nc-nom, tournoi, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(171, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(chroniqueur, nc-nom, chroniqueur, [n-1]), si(rapporte, v-ver:pres, rapporter, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(violente, adj-adj, violent, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1066, pro-num, 1066, [np-1]), si(',', ponct-pun, ',', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(baron, nc-nom, baron, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(nommé, vpp-ver:pper, nommer, [dr(0,dl(0,n,n),np)-1]), si('Geoffroi', npp-nam, 'Geoffroi', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Preulli', npp-nam, 'Preulli', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(témoignage, nc-nom, témoignage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(contemporains, nc-nom, contemporain, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(inventé, vpp-ver:pper, inventer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tournois, nc-nom, tournoi, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(172, Result) :-
      prob_parse([ si('Geoffroi', npp-nam, 'Geoffroi', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Preulli', npp-nam, 'Preulli', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tournoi, nc-nom, tournoi, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(173, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(mélange, nc-nom, mélange, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Buckley', npp-nam, 'Buckley', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(sirop, nc-nom, sirop, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(toux, nc-nom, toux, [n-1]), si(inventé, vpp-ver:pper, inventer, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1919, pro-num, 1919, [np-1]), si('(', ponct-pun, '(', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(produit, vpp-ver:pper, produire, [dl(0,n,n)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(noté, vpp-ver:pper, noter, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(goût, nc-nom, goût, [n-1]), si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(amer, adj-adj, amer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(174, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(mélange, nc-nom, mélange, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Buckley', npp-nam, 'Buckley', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(remède, nc-nom, remède, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(toux, nc-nom, toux, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(175, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(nouveau, adj-adj, nouveau, [n-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Holles', npp-nam, 'Holles', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(176, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1711, pro-num, 1711, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(éteignit, v-ver:simp, éteindre, [dl(0,cl_r,dl(0,np,s))-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(domaines, nc-nom, domaine, [n-1]), si(passèrent, v-ver:simp, passer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(neveu, nc-nom, neveu, [n-1]), si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), si('Pelham', npp-nam, 'Pelham', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(ans, nc-nom, an, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tard, adv-adv, tard, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(',', ponct-pun, ',', [let-1]), si(reçut, v-ver:simp, recevoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(création, nc-nom, création, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(177, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1757, pro-num, 1757, [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(reçoit, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(supplémentaire, adj-adj, supplémentaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Newcastle-under-Lyne', npp-nam, 'Newcastle-under-Lyne', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(178, Result) :-
      prob_parse([ si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Holles', npp-nam, 'Holles', [np-1]), si(reçoit, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Newcastle-under-Lyne', npp-nam, 'Newcastle-under-Lyne', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(179, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('Alcalde', npp-nam, 'Alcalde', [n-1]), si('Teniente', npp-nam, 'Teniente', [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),n)-1]), si('Capitan', npp-nam, 'Capitan', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(haute, adj-adj, haut, [dr(0,n,n)-1]), si(autorité, nc-nom, autorité, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(')', ponct-pun, ')', [let-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('Don', npp-nam, 'Don', [dr(0,np,np)-1]), si('Mauricio', npp-nam, 'Mauricio', [dr(0,np,np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Mateo', npp-nam, 'Mateo', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(180, Result) :-
      prob_parse([ si('Don', npp-nam, 'Don', [dr(0,np,np)-1]), si('Mauricio', npp-nam, 'Mauricio', [dr(0,np,np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Mateo', npp-nam, 'Mateo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(occupé, vpp-ver:pper, occuper, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(poste, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Capitan', npp-nam, 'Capitan', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(181, Result) :-
      prob_parse([ si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), si('Seasonings', npp-nam, 'Seasonings', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(thé, nc-nom, thé, [n-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Boulder', npp-nam, 'Boulder', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Colorado', npp-nam, 'Colorado', [n-1]), si(',', ponct-pun, ',', [let-1]), si(spécialisée, vpp-ver:pper, spécialiser, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tisanes, nc-nom, tisane, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(vend, v-ver:pres, vendre, [dr(0,dl(0,np,s),np)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(thé, nc-nom, thé, [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(thé, nc-nom, thé, [n-1]), si(noir, adj-adj, noir, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mélanges, nc-nom, mélange, [n-1]), si(blancs, adj-adj, blanc, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(oolongs, adj-adj, oolong, [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(182, Result) :-
      prob_parse([ si('Ses', det-det:pos, 'Ses', [dr(0,np,n)-1]), si(fondateurs, nc-nom, fondateur, [n-1]), si('Mo', npp-abr, 'Mo', [dl(0,n,n)-1]), si('Siegel', npp-nam, 'Siegel', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Hay', npp-nam, 'Hay', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(cueillir, vinf-ver:infi, cueillir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(herbes, nc-nom, herbe, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fleurs, nc-nom, fleur, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(montagnes, nc-nom, montagne, [n-1]), si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Boulder', npp-nam, 'Boulder', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(vendre, vinf-ver:infi, vendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(magasins, nc-nom, magasin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(diététiques, adj-adj, diététique, [dl(0,n,n)-1]), si(locaux, adj-adj, local, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1969, pro-num, 1969, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(183, Result) :-
      prob_parse([ si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), si('Seasonings', npp-nam, 'Seasonings', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Mo', npp-nam, 'Mo', [dr(0,np,np)-1]), si('Siegel', npp-nam, 'Siegel', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Hay', npp-nam, 'Hay', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(184, Result) :-
      prob_parse([ si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), si('Seasonings', npp-nam, 'Seasonings', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Kraft', npp-nam, 'Kraft', [dr(0,np,np)-1]), si('Foods', npp-nam, 'Foods', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1984, pro-num, 1984, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(étendu, vpp-ver:pper, étendre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(commercialisation, nc-nom, commercialisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marque, nc-nom, marque, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(185, Result) :-
      prob_parse([ si('Kraft', npp-nam, 'Kraft', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vendu, vpp-ver:pper, vendre, [dr(0,dl(0,np,s_ppart),np)-1]), si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), si('Seasonings', npp-nam, 'Seasonings', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(186, Result) :-
      prob_parse([ si('Mo', npp-abr, 'Mo', [dr(0,np,np)-1]), si('Siegel', npp-nam, 'Siegel', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(retraite, nc-nom, retraite, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1986, pro-num, 1986, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dr(0,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(suivante, adj-adj, suivant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Kraft', npp-nam, 'Kraft', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(allait, v-ver:impf, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(vendre, vinf-ver:infi, vendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), si('Seasonings', npp-nam, 'Seasonings', [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Lipton', npp-nam, 'Lipton', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(187, Result) :-
      prob_parse([ si('Kraft', npp-nam, 'Kraft', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vendu, vpp-ver:pper, vendre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), si('Seasonings', npp-nam, 'Seasonings', [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Lipton', npp-nam, 'Lipton', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1986, pro-num, 1986, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(188, Result) :-
      prob_parse([ si('Mo', npp-abr, 'Mo', [dr(0,np,np)-1]), si('Siegel', npp-nam, 'Siegel', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(retraite, nc-nom, retraite, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1986, pro-num, 1986, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dr(0,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(suivante, adj-adj, suivant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Kraft', npp-nam, 'Kraft', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(allait, v-ver:impf, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(vendre, vinf-ver:infi, vendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), si('Seasonings', npp-nam, 'Seasonings', [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Lipton', npp-nam, 'Lipton', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(189, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(vente, nc-nom, vente, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(contestée, vpp-ver:pper, contester, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), si(succès, nc-nom, succès, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Bigelow', npp-nam, 'Bigelow', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(vertu, nc-nom, vertu, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(lois, nc-nom, loi, [n-1]), si(antitrust, adj-adj, antitrust, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(direction, nc-nom, direction, [n-1]), si(locale, adj-adj, local, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(racheté, vpp-ver:pper, racheter, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Kraft', npp-nam, 'Kraft', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1988, pro-num, 1988, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(190, Result) :-
      prob_parse([ si('Kraft', npp-nam, 'Kraft', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vendu, vpp-ver:pper, vendre, [dr(0,dl(0,np,s_ppart),np)-1]), si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), si('Seasonings', npp-nam, 'Seasonings', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(191, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Dr', nc-abr, 'Dr', [n-1]), si('Felix', npp-nam, 'Felix', [dl(0,n,n)-1]), si('Soto', npp-nam, 'Soto', [dr(0,np,np)-1]), si('Toro', npp-nam, 'Toro', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1967, pro-num, 1967, [np-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Guaynabo', npp-nam, 'Guaynabo', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Porto', npp-nam, 'Porto', [dr(0,np,np)-1]), si('Rico', npp-nam, 'Rico', [dl(0,np,np)-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(candidat, nc-nom, candidat, [n-1]), si(astronaute, nc-nom, astronaute, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ingénieur, nc-nom, ingénieur, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(conception, nc-nom, conception, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('NASA', npp-abr, 'NASA', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mesure, nc-nom, mesure, [n-1]), si('3D', adj-adj, '3D', [dl(0,n,n)-1]), si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(192, Result) :-
      prob_parse([ si('Soto', npp-nam, 'Soto', [dr(0,np,np)-1]), si('Toro', npp-nam, 'Toro', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(inventé, vpp-ver:pper, inventer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mesure, nc-nom, mesure, [n-1]), si('3D', adj-adj, '3D', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(193, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(utilisations, nc-nom, utilisation, [n-1]), si(hors, p-prp, hors, [dr(0,dl(0,n,n),np)-1]), si('AMM', nc-abr, 'AMM', [np-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), si(antiémétique, adj-adj, antiémétique, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(atteints, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(cancer, nc-nom, cancer, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cas, nc-nom, cas, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(insomnie, nc-nom, insomnie, [n-1]), si(résistante, adj-adj, résistant, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(194, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(remède, nc-nom, remède, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(insomnie, nc-nom, insomnie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(195, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(administrée, vpp-ver:pper, administrer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(concomitance, nc-nom, concomitance, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(opioïdes, nc-nom, opioïde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dose, nc-nom, dose, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(opioïdes, nc-nom, opioïde, [n-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(réduite, vpp-ver:pper, réduire, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), si(amplifie, v-ver:pres, amplifier, [dr(0,dl(0,np,s),np)-1]), si(massivement, adv-adv, massivement, [dl(1,s,s)-1]), si(les, det-det:art, le, [dl(1,s,s)-1]), si(actions, nc-nom, action, [dr(0,np,n)-1]), si(thérapeutiques, adj-adj, thérapeutique, [n-1]), si(et, cc-kon, et, [dl(0,n,n)-1]), si(les, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [n-1]), si(des, p+d-prp:det, de, [dl(0,n,n)-1]), si(opioïdes, nc-nom, opioïde, [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(196, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), si(réduit, v-ver:pres, réduire, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(opioïdes, nc-nom, opioïde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(197, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('Windows', npp-nam, 'Windows', [dr(0,n,n)-1]), si('Challenge', npp-nam, 'Challenge', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(tenu, vpp-ver:pper, tenir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2004, pro-num, 2004, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(composé, vpp-ver:pper, composer, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si(équipes, nc-nom, équipe, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(198, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(2005, pro-num, 2005, [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(reste, nc-nom, reste, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(199, Result) :-
      prob_parse([ si(278, det-num, 278, [dr(0,np,n)-1]), si(équipes, nc-nom, équipe, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(entier, adj-adj, entier, [dl(0,n,n)-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(participé, vpp-ver:pper, participer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(200, Result) :-
      prob_parse([ si(278, det-num, 278, [dr(0,np,n)-1]), si(équipes, nc-nom, équipe, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(entier, adj-adj, entier, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(participé, vpp-ver:pper, participer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si('Windows', npp-nam, 'Windows', [dr(0,n,n)-1]), si('Challenge', npp-nam, 'Challenge', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(201, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('United', npp-nam, 'United', [dr(0,n,n)-1]), si('Center', npp-nam, 'Center', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Bulls', npp-nam, 'Bulls', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Blackhawks', nc-nam, 'Blackhawks', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Chicago', npp-nam, 'Chicago', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ouvert, vpp-ver:pper, ouvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(portes, nc-nom, porte, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(saison, nc-nom, saison, [n-1]), si('1994-95', adj-num, '1994-95', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Bulls', npp-nam, 'Bulls', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Sheri', npp-nam, 'Sheri', [dr(0,n,n)-1]), si('L.', npp-abr, 'L.', [dl(0,n,n)-1]), si('Berto', npp-nam, 'Berto', [dl(0,n,n)-1]), si('Center', npp-nam, 'Center', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entraînement, nc-nom, entraînement, [n-1]), si(ultramoderne, adj-adj, ultramoderne, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(202, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Blackhawks', nc-nam, 'Blackhawks', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basés, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Chicago', npp-nam, 'Chicago', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(203, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('United', npp-nam, 'United', [dr(0,n,n)-1]), si('Center', npp-nam, 'Center', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Bulls', npp-nam, 'Bulls', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Blackhawks', nc-nam, 'Blackhawks', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Chicago', npp-nam, 'Chicago', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ouvert, vpp-ver:pper, ouvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(portes, nc-nom, porte, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(saison, nc-nom, saison, [n-1]), si('1994-95', adj-num, '1994-95', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Bulls', npp-nam, 'Bulls', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Sheri', npp-nam, 'Sheri', [dr(0,n,n)-1]), si('L.', npp-abr, 'L.', [dl(0,n,n)-1]), si('Berto', npp-nam, 'Berto', [dl(0,n,n)-1]), si('Center', npp-nam, 'Center', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entraînement, nc-nom, entraînement, [n-1]), si(ultramoderne, adj-adj, ultramoderne, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(204, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('United', npp-nam, 'United', [dr(0,n,n)-1]), si('Center', npp-nam, 'Center', [n-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Bulls', npp-nam, 'Bulls', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(205, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Miracle', npp-nam, 'Miracle', [dr(0,n,n)-1]), si('Field', npp-nam, 'Field', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(terrain, nc-nom, terrain, [n-1]), si(spécialement, adv-adv, spécialement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(conçu, vpp-ver:pper, concevoir, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(besoins, nc-nom, besoin, [n-1]), si(spéciaux, adj-adj, spécial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(terrain, nc-nom, terrain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(type, nc-nom, type, [n-1]), si(construit, vpp-ver:pper, construire, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(année, nc-nom, année, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Chicago', npp-nam, 'Chicago', [np-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Chicago', npp-nam, 'Chicago', [dr(0,n,n)-1]), si('White', npp-nam, 'White', [dr(0,n,n)-1]), si('Sox', npp-nam, 'Sox', [dr(0,n,n)-1]), si('Charities', npp-nam, 'Charities', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(206, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Chicago', npp-nam, 'Chicago', [dr(0,n,n)-1]), si('White', npp-nam, 'White', [dr(0,n,n)-1]), si('Sox', npp-nam, 'Sox', [dr(0,n,n)-1]), si('Charities', npp-nam, 'Charities', [n-1]), si(soutiennent, v-ver:pres, soutenir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(besoins, nc-nom, besoin, [n-1]), si(spéciaux, adj-adj, spécial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(207, Result) :-
      prob_parse([ si('Techwood', npp-nam, 'Techwood', [dr(0,np,np)-1]), si('Homes', npp-nam, 'Homes', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(démoli, vpp-ver:pper, démolir, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1995, pro-num, 1995, [np-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(été, nc-nom, été, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(208, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(voisine, nc-nom, voisin, [n-1]), si('Clark', npp-nam, 'Clark', [dl(0,n,n)-1]), si('Howell', npp-nam, 'Howell', [dl(0,n,n)-1]), si('Homes', npp-nam, 'Homes', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(usage, nc-nom, usage, [n-1]), si(mixte, adj-adj, mixte, [dl(0,n,n)-1]), si(appelée, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si('Centennial', npp-nam, 'Centennial', [dr(0,np,np)-1]), si('Place', npp-nam, 'Place', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(209, Result) :-
      prob_parse([ si('Techwood', npp-nam, 'Techwood', [dr(0,np,np)-1]), si('Homes', npp-nam, 'Homes', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(côté, nc-nom, côté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Clark', npp-nam, 'Clark', [dr(0,np,np)-1]), si('Howell', npp-nam, 'Howell', [dr(0,np,np)-1]), si('Homes', npp-nam, 'Homes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(210, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(délivré, vpp-ver:pper, délivrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(patients, nc-nom, patient, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(navire, nc-nom, navire, [n-1]), si(appareille, v-ver:pres, appareiller, [dl(0,np,s)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(1946, adj-num, 1946, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(atomiques, adj-adj, atomique, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atoll, nc-nom, atoll, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bikini', npp-nam, 'Bikini', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(après, p-prp, après, [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(fourni, vpp-ver:pper, fournir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si(médicaux, adj-adj, médical, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(explosions, nc-nom, explosion, [n-1]), si(nucléaires, adj-adj, nucléaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si('Crossroads', npp-nam, 'Crossroads', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(revient, v-ver:pres, revenir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Seattle', npp-nam, 'Seattle', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(1946, adj-num, 1946, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(211, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(essais, nc-nom, essai, [n-1]), si(atomiques, adj-adj, atomique, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atoll, nc-nom, atoll, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bikini', npp-nam, 'Bikini', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1946, pro-num, 1946, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(212, Result) :-
      prob_parse([ si('Lauraine', npp-nam, 'Lauraine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décroché, vpp-ver:pper, décrocher, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(emploi, nc-nom, emploi, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(jouant, vpr-ver:ppre, jouer, [dr(0,dl(0,np,s_ppres),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tournée, nc-nom, tournée, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(comédie, nc-nom, comédie, [n-1]), si(musicale, adj-adj, musical, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Dreamgirls', npp-nam, 'Dreamgirls', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(213, Result) :-
      prob_parse([ si('Loraine', npp-nam, 'Loraine', [np-1]), si(remplaçait, v-ver:impf, remplacer, [dr(0,dl(0,np,s),np)-1]), si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(soeur, nc-nom, soeur, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Dreamgirls', npp-nam, 'Dreamgirls', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(jouaient, v-ver:impf, jouer, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Mimi', npp-nam, 'Mimi', [dr(0,np,np)-1]), si('Marquez', npp-nam, 'Marquez', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(214, Result) :-
      prob_parse([ si('Loraine', npp-nam, 'Loraine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(participé, vpp-ver:pper, participer, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(comédie, nc-nom, comédie, [n-1]), si(musicale, adj-adj, musical, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Dreamgirls', npp-nam, 'Dreamgirls', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(215, Result) :-
      prob_parse([ si('Du', p+d-prp:det, 'Du', [dr(0,dr(0,s,s),n)-1]), si(côté, nc-nom, côté, [n-1]), si('Illinois', npp-nam, 'Illinois', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pont, nc-nom, pont, [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(panneaux, nc-nom, panneau, [n-1]), si(indiquant, vpr-ver:ppre, indiquer, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('HISTORIC', npp-nam, 'HISTORIC', [dr(0,np,np)-1]), si('ROUTE', npp-nam, 'ROUTE', [dr(0,np,np)-1]), si(66, adj-num, 66, [dr(0,dl(0,np,np),n)-1]), si('SPUR', npp-abr, 'SPUR', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(conduisent, v-ver:pres, conduire, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(voyageurs, nc-nom, voyageur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(côté, nc-nom, côté, [n-1]), si('Illinois', npp-nam, 'Illinois', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pont, nc-nom, pont, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(panneau, nc-nom, panneau, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('HISTORIC', npp-nam, 'HISTORIC', [dr(0,np,np)-1]), si('ROUTE', npp-nam, 'ROUTE', [np-1]), si(66, adj-num, 66, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(marque, v-ver:pres, marque, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(côté, nc-nom, côté, [n-1]), si('Missouri', npp-nam, 'Missouri', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pont, nc-nom, pont, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(216, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Illinois', npp-nam, 'Illinois', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(limitrophe, adj-adj, limitrophe, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Missouri', npp-nam, 'Missouri', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(217, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(élections, nc-nom, élection, [n-1]), si(générales, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mai, nc-nom, mai, [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Howard', npp-nam, 'Howard', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réussi, vpp-ver:pper, réussir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(détrôner, vinf-ver:infi, détrôner, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conservateurs, nc-nom, conservateur, [n-1]), si(aient, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(gagné, vpp-ver:pper, gagner, [dr(0,dl(0,np,s_ppart),np)-1]), si(33, det-num, 33, [dr(0,np,n)-1]), si(sièges, nc-nom, siège, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(jouant, vpr-ver:ppre, jouer, [dr(0,dl(0,np,s_ppres),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(important, adj-adj, important, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réduction, nc-nom, réduction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(167, pro-num, 167, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(66, pro-num, 66, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(218, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(travaillistes, nc-nom, travailliste, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(élections, nc-nom, élection, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mai, nc-nom, mai, [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(219, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(élections, nc-nom, élection, [n-1]), si(générales, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mai, nc-nom, mai, [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Howard', npp-nam, 'Howard', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réussi, vpp-ver:pper, réussir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(détrôner, vinf-ver:infi, détrôner, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conservateurs, nc-nom, conservateur, [n-1]), si(aient, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(gagné, vpp-ver:pper, gagner, [dr(0,dl(0,np,s_ppart),np)-1]), si(33, det-num, 33, [dr(0,np,n)-1]), si(sièges, nc-nom, siège, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(jouant, vpr-ver:ppre, jouer, [dr(0,dl(0,np,s_ppres),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(important, adj-adj, important, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réduction, nc-nom, réduction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(167, pro-num, 167, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(66, pro-num, 66, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(220, Result) :-
      prob_parse([ si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Howard', npp-nam, 'Howard', [np-1]), si(faisait, v-ver:impf, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(221, Result) :-
      prob_parse([ si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(acheteurs, nc-nom, acheteur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(confédérés, adj-adj, confédérer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(capitaines, nc-nom, capitaine, [n-1]), si('Caleb', npp-nam, 'Caleb', [dl(0,n,n)-1]), si('Huse', npp-nam, 'Huse', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), si('James', npp-nam, 'James', [dl(0,n,n)-1]), si('Bulloch', npp-nam, 'Bulloch', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(passèrent, v-ver:simp, passer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fusils, nc-nom, fusil, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(revolvers, nc-nom, revolver, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armurerie, nc-nom, armurerie, [n-1]), si(pouvait, v-ver:impf, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(222, Result) :-
      prob_parse([ si('Huse', npp-nam, 'Huse', [np-1]), si(travaillait, v-ver:impf, travailler, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(collaboration, nc-nom, collaboration, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('Bolloch', npp-nam, 'Bolloch', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(223, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1999, pro-num, 1999, [np-1]), si(',', ponct-pun, ',', [let-1]), si('Cauty', npp-nam, 'Cauty', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(produit, vpp-ver:pper, produire, [dr(0,dl(0,np,s_ppart),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(remixes, nc-nom, remix, [n-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alias, nc-nom, alia, [n-1]), si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), si('Scourge', npp-nam, 'Scourge', [n-1]), si('Of', et-prp, 'Of', [dr(0,dl(0,n,n),np)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Earth', npp-nam, 'Earth', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(artistes, nc-nom, artiste, [n-1]), si(tels, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Placebo', npp-nam, 'Placebo', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Marilyn', npp-nam, 'Marilyn', [np-1]), si('Manson', npp-nam, 'Manson', [dr(0,dl(0,np,np),np)-1]), si(',', ponct-pun, ',', [np-1]), si('Hawkwind', npp-nam, 'Hawkwind', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Ian', npp-nam, 'Ian', [dr(0,np,np)-1]), si('Brown', npp-nam, 'Brown', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Orb', npp-nam, 'Orb', [n-1]), si(etc, adv-abr, etc, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(224, Result) :-
      prob_parse([ si('Placebo', npp-nam, 'Placebo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(collaboré, vpp-ver:pper, collaborer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si('Marilyn', npp-nam, 'Marilyn', [dr(0,np,np)-1]), si('Manson', npp-nam, 'Manson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(225, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(abord, nc-nom, abord, [n-1]), si(réussi, vpp-ver:pper, réussir, [dl(0,np,s_ppart)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(négociant, vpr-ver:ppre, négocier, [dr(0,dl(0,np,s_ppres),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(redevance, nc-nom, redevance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(3, pro-num, 3, [np-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si(4, pro-num, 4, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(1, det-num, 1, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(voitures, nc-nom, voiture, [n-1]), si(vendues, vpp-ver:pper, vendre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Association', nc-nam, 'Association', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(constructeurs, nc-nom, constructeur, [n-1]), si(automobiles, nc-nom, automobile, [dl(0,n,n)-1]), si(agréés, vpp-ver:pper, agréer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ALAM', npp-abr, 'ALAM', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(226, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ALAM', npp-abr, 'ALAM', [n-1]), si(fabriquait, v-ver:impf, fabriquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(voitures, nc-nom, voiture, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(227, Result) :-
      prob_parse([ si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), si('Ford', npp-nam, 'Ford', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(propriétaire, nc-nom, propriétaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Ford', npp-nam, 'Ford', [dr(0,n,n)-1]), si('Motor', npp-nam, 'Motor', [dr(0,n,n)-1]), si('Company', npp-nam, 'Company', [n-1]), si(',', ponct-pun, ',', [let-1]), si(fondée, vpp-ver:pper, fonder, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Détroit', npp-nam, 'Détroit', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('Michigan', npp-nam, 'Michigan', [np-1]), si(')', ponct-pun, ')', [let-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1903, pro-num, 1903, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(constructeurs, nc-nom, constructeur, [n-1]), si(automobiles, nc-nom, automobile, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(résolu, vpp-ver:pper, résoudre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(contester, vinf-ver:infi, contester, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(violation, nc-nom, violation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(brevet, nc-nom, brevet, [n-1]), si(intenté, vpp-ver:pper, intenter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Selden', npp-nam, 'Selden', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('EVC', npp-abr, 'EVC', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(228, Result) :-
      prob_parse([ si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), si('Ford', npp-nam, 'Ford', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Ford', npp-nam, 'Ford', [dr(0,n,n)-1]), si('Motor', npp-nam, 'Motor', [dr(0,n,n)-1]), si('Company', npp-nam, 'Company', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(229, Result) :-
      prob_parse([ si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), si('Ford', npp-nam, 'Ford', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(propriétaire, nc-nom, propriétaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Ford', npp-nam, 'Ford', [dr(0,n,n)-1]), si('Motor', npp-nam, 'Motor', [dr(0,n,n)-1]), si('Company', npp-nam, 'Company', [n-1]), si(',', ponct-pun, ',', [let-1]), si(fondée, vpp-ver:pper, fonder, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Détroit', npp-nam, 'Détroit', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('Michigan', npp-nam, 'Michigan', [np-1]), si(')', ponct-pun, ')', [let-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1903, pro-num, 1903, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(constructeurs, nc-nom, constructeur, [n-1]), si(automobiles, nc-nom, automobile, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(résolu, vpp-ver:pper, résoudre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(contester, vinf-ver:infi, contester, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(violation, nc-nom, violation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(brevet, nc-nom, brevet, [n-1]), si(intenté, vpp-ver:pper, intenter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Selden', npp-nam, 'Selden', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('EVC', npp-abr, 'EVC', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(230, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Ford', npp-nam, 'Ford', [dr(0,n,n)-1]), si('Motor', npp-nam, 'Motor', [dr(0,n,n)-1]), si('Company', npp-nam, 'Company', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(intenté, vpp-ver:pper, intenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('Selden', npp-nam, 'Selden', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('EVC', npp-abr, 'EVC', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(231, Result) :-
      prob_parse([ si('Maler', npp-nam, 'Maler', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(fin, nc-nom, fin, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(expéditions, nc-nom, expédition, [n-1]), si(physiquement, adv-adv, physiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(exigeantes, adj-adj, exigeant, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(jungle, nc-nom, jungle, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1905, pro-num, 1905, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(retiré, vpp-ver:pper, retirer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mérida', npp-nam, 'Mérida', [np-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), si('Yucatán', npp-nam, 'Yucatán', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(232, Result) :-
      prob_parse([ si('Maler', npp-nam, 'Maler', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(retiré, vpp-ver:pper, retirer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1905, pro-num, 1905, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(233, Result) :-
      prob_parse([ si('Maler', npp-nam, 'Maler', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(fin, nc-nom, fin, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(expéditions, nc-nom, expédition, [n-1]), si(physiquement, adv-adv, physiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(exigeantes, adj-adj, exigeant, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(jungle, nc-nom, jungle, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1905, pro-num, 1905, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(retiré, vpp-ver:pper, retirer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Mérida', npp-nam, 'Mérida', [np-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), si('Yucatán', npp-nam, 'Yucatán', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(234, Result) :-
      prob_parse([ si('Maler', npp-nam, 'Maler', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vécu, vpp-ver:pper, vivre, [dl(0,np,s_ppart)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Yucatán', npp-nam, 'Yucatán', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(235, Result) :-
      prob_parse([ si('Primrose', npp-nam, 'Primrose', [dr(0,np,np)-1]), si('Hill', npp-nam, 'Hill', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(colline, nc-nom, colline, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(situés, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(côté, nc-nom, côté, [n-1]), si(nord, nc-nom, nord, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Regent\'s', npp-nam, 'Regent\'s', [dr(0,np,np)-1]), si('Park', npp-nam, 'Park', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(236, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(colline, nc-nom, colline, [n-1]), si(offre, v-ver:pres, offrir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(belle, adj-adj, bel, [dr(0,n,n)-1]), si(vue, nc-nom, vue, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(centre, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(237, Result) :-
      prob_parse([ si('Comme', adv-adv, 'Comme', [dr(0,dr(0,s,s),np)-1]), si('Regent\'s', npp-nam, 'Regent\'s', [dr(0,np,np)-1]), si('Park', npp-nam, 'Park', [np-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(faisait, v-ver:impf, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(autrefois, adv-adv, autrefois, [dl(1,s,s)-1]), si(partie, nc-nom, partie, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(chasse, nc-nom, chasse, [n-1]), si(appropriée, vpp-ver:pper, approprier, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), si('VIII', adj-num, 'VIII', [dl(0,np,np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(propriété, nc-nom, propriété, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Couronne', npp-nam, 'Couronne', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1841, pro-num, 1841, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(238, Result) :-
      prob_parse([ si('Primrose', npp-nam, 'Primrose', [dr(0,np,np)-1]), si('Hill', npp-nam, 'Hill', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,np,s_pass),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(239, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(investigations, nc-nom, investigation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Leloir', npp-nam, 'Leloir', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(abouti, vpp-ver:pper, aboutir, [dl(0,np,s_ppart)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(laboratoire, nc-nom, laboratoire, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,np,s_ppres),np)-1]), si(simultanément, adv-adv, simultanément, [dl(1,s,s)-1]), si(professeur, nc-nom, professeur, [np-1]), si(invité, vpp-ver:pper, inviter, [dl(0,np,np)-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Faculté', nc-nam, 'Faculté', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sciences, nc-nom, science, [n-1]), si(naturelles, adj-adj, naturel, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(exactes, adj-adj, exact, [dl(0,n,n)-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(travail, nc-nom, travail, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(interrompu, vpp-ver:pper, interrompre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(périodes, nc-nom, période, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(poursuite, nc-nom, poursuite, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(études, nc-nom, étude, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Cambridge', npp-nam, 'Cambridge', [np-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Laboratoire', npp-nam, 'Laboratoire', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(enzymes, nc-nom, enzyme, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(centres, nc-nom, centre, [n-1]), si(mondiaux, adj-adj, mondial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(240, Result) :-
      prob_parse([ si('Leloir', npp-nam, 'Leloir', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(professeur, nc-nom, professeur, [np-1]), si(invité, vpp-ver:pper, inviter, [dl(0,np,np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Cambridge', npp-nam, 'Cambridge', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(241, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(1948, adj-num, 1948, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Leloir', npp-nam, 'Leloir', [np-1]), si(identifie, v-ver:pres, identifier, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sucres, nc-nom, sucre, [n-1]), si(carnucléotides, adj-adj, carnucléotide, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(composés, nc-nom, composé, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(jouent, v-ver:pres, jouer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(fondamental, adj-adj, fondamental, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(métabolisme, nc-nom, métabolisme, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hydrates, nc-nom, hydrate, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carbone, nc-nom, carbone, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(apporte, v-ver:pres, apporter, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(reconnaissance, nc-nom, reconnaissance, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Institut', npp-nam, 'Institut', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(242, Result) :-
      prob_parse([ si('Leloir', npp-nam, 'Leloir', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(découvert, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(métabolisme, nc-nom, métabolisme, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hydrates, nc-nom, hydrate, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(carbone, nc-nom, carbone, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(243, Result) :-
      prob_parse([ si('Leloir', npp-nam, 'Leloir', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premio', nc-nam, 'Premio', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Sociedad', npp-nam, 'Sociedad', [dr(0,n,n)-1]), si('Científica', npp-nam, 'Científica', [dr(0,n,n)-1]), si('Argentina', npp-nam, 'Argentina', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(rares, adj-adj, rare, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tel, adj-adj, tel, [dr(0,n,n)-1]), si(prix, nc-nom, prix, [dr(0,dl(1,s,s),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(où, prorel-pro:rel, où, [np-1]), si(il, cls-pro:per, il, [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(étranger, adj-adj, étranger, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(244, Result) :-
      prob_parse([ si('Leloir', npp-nam, 'Leloir', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premio', nc-nam, 'Premio', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Sociedad', npp-nam, 'Sociedad', [dr(0,n,n)-1]), si('Científica', npp-nam, 'Científica', [dr(0,n,n)-1]), si('Argentina', npp-nam, 'Argentina', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(245, Result) :-
      prob_parse([ si('Leloir', npp-nam, 'Leloir', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premio', nc-nam, 'Premio', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Sociedad', npp-nam, 'Sociedad', [dr(0,n,n)-1]), si('Científica', npp-nam, 'Científica', [dr(0,n,n)-1]), si('Argentina', npp-nam, 'Argentina', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(rares, adj-adj, rare, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tel, adj-adj, tel, [dr(0,n,n)-1]), si(prix, nc-nom, prix, [dr(0,dl(1,s,s),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(où, prorel-pro:rel, où, [np-1]), si(il, cls-pro:per, il, [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(étranger, adj-adj, étranger, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(246, Result) :-
      prob_parse([ si('Leloir', npp-nam, 'Leloir', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(247, Result) :-
      prob_parse([ si('Belknap', npp-nam, 'Belknap', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(épousé, vpp-ver:pper, épouser, [dr(0,dl(0,np,s_ppart),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(premières, adj-num, premier, [dr(0,n,n)-1]), si(épouses, nc-nom, épouse, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Cora', npp-nam, 'Cora', [dr(0,np,np)-1]), si('LeRoy', npp-nam, 'LeRoy', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), si('Tomlinson', npp-nam, 'Tomlinson', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(épousé, vpp-ver:pper, épouser, [dr(0,dl(0,np,s_ppart),np)-1]), si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Bower', npp-nam, 'Bower', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(soeur, nc-nom, soeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(seconde, adj-num, second, [dr(0,n,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(248, Result) :-
      prob_parse([ si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), si('Tomlinson', npp-nam, 'Tomlinson', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(soeur, nc-nom, soeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Bower', npp-nam, 'Bower', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(249, Result) :-
      prob_parse([ si('Belknap', npp-nam, 'Belknap', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(épousé, vpp-ver:pper, épouser, [dr(0,dl(0,np,s_ppart),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(premières, adj-num, premier, [dr(0,n,n)-1]), si(épouses, nc-nom, épouse, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Cora', npp-nam, 'Cora', [dr(0,np,np)-1]), si('LeRoy', npp-nam, 'LeRoy', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), si('Tomlinson', npp-nam, 'Tomlinson', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(épousé, vpp-ver:pper, épouser, [dr(0,dl(0,np,s_ppart),np)-1]), si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Bower', npp-nam, 'Bower', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(soeur, nc-nom, soeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(seconde, adj-num, second, [dr(0,n,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(250, Result) :-
      prob_parse([ si('Belknap', npp-nam, 'Belknap', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(marié, vpp-ver:pper, marier, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), si('Tomlinson', npp-nam, 'Tomlinson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(251, Result) :-
      prob_parse([ si('Belknap', npp-nam, 'Belknap', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(accusation, nc-nom, accusation, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(unanime, adj-adj, unanime, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(prétendument, adv-adv, prétendument, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(échange, nc-nom, échange, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nominations, nc-nom, nomination, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(postes, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociants, nc-nom, négociant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(252, Result) :-
      prob_parse([ si('Belknap', npp-nam, 'Belknap', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(accusé, vpp-ver:pper, accuser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(échange, nc-nom, échange, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nominations, nc-nom, nomination, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(postes, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociants, nc-nom, négociant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(253, Result) :-
      prob_parse([ si('Belknap', npp-nam, 'Belknap', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(accusation, nc-nom, accusation, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(unanime, adj-adj, unanime, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(prétendument, adv-adv, prétendument, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(échange, nc-nom, échange, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nominations, nc-nom, nomination, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(postes, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociants, nc-nom, négociant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(254, Result) :-
      prob_parse([ si('Belknap', npp-nam, 'Belknap', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(échange, nc-nom, échange, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nominations, nc-nom, nomination, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(postes, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociants, nc-nom, négociant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(255, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(naturelle, adj-adj, naturel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), si('Rocks', npp-nam, 'Rocks', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nord, nc-nom, nord, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comté, nc-nom, comté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), si('Angeles', npp-nam, 'Angeles', [np-1]), si(acquis, vpp-ver:pper, acquérir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comté, nc-nom, comté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('LA', npp-nam, 'LA', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(1970, adj-num, 1970, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(256, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(naturelle, adj-adj, naturel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), si('Rocks', npp-nam, 'Rocks', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(propriété, nc-nom, propriété, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comté, nc-nom, comté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('LA', npp-nam, 'LA', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(257, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(rochers, nc-nom, rocher, [n-1]), si('Vasquez', npp-nam, 'Vasquez', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(situés, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(environs, nc-nom, environ, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Agua', npp-nam, 'Agua', [dr(0,np,np)-1]), si('Dulce', npp-nam, 'Dulce', [np-1]), si(',', ponct-pun, ',', [let-1]), si(entre, p-prp, entrer, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vallée, nc-nom, vallée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Antelope', npp-nam, 'Antelope', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vallée, nc-nom, vallée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Santa', npp-nam, 'Santa', [dr(0,np,np)-1]), si('Clarita', npp-nam, 'Clarita', [np-1]), si(',', ponct-pun, ',', [let-1]), si(juste, adv-adv, juste, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(nord, nc-nom, nord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), si('Angeles', npp-nam, 'Angeles', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(facilement, adv-adv, facilement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(visibles, vpp-ver:pper, visible, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(automobilistes, nc-nom, automobiliste, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(empruntent, v-ver:pres, emprunter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autoroute, nc-nom, autoroute, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Antelope', npp-nam, 'Antelope', [dr(0,np,np)-1]), si('Valley', npp-nam, 'Valley', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(258, Result) :-
      prob_parse([ si('Agua', npp-nam, 'Agua', [dr(0,np,np)-1]), si('Dulce', npp-nam, 'Dulce', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(juste, adv-adv, juste, [dr(0,pp,pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(nord, nc-nom, nord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), si('Angeles', npp-nam, 'Angeles', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(259, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), si('Rocks', npp-nam, 'Rocks', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(roches, nc-nom, roche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(grès, nc-nom, grès, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(soulevées, vpp-ver:pper, soulever, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(angle, nc-nom, angle, [n-1]), si(pittoresque, adj-adj, pittoresque, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,np,s_ppres),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(caractéristiques, nc-nom, caractéristique, [n-1]), si(rouges, adj-adj, rouge, [dl(0,n,n)-1]), si(déchiquetées, vpp-ver:pper, déchiqueter, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(260, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(formations, nc-nom, formation, [n-1]), si(rocheuses, adj-adj, rocheux, [dl(0,n,n)-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faille, nc-nom, faille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Andreas', npp-nam, 'Andreas', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(261, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(roches, nc-nom, roche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), si('Rocks', npp-nam, 'Rocks', [np-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faille, nc-nom, faille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Andreas', npp-nam, 'Andreas', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(262, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), si('Rocks', npp-nam, 'Rocks', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(roches, nc-nom, roche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(grès, nc-nom, grès, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(soulevées, vpp-ver:pper, soulever, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(angle, nc-nom, angle, [n-1]), si(pittoresque, adj-adj, pittoresque, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,np,s_ppres),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(caractéristiques, nc-nom, caractéristique, [n-1]), si(rouges, adj-adj, rouge, [dl(0,n,n)-1]), si(déchiquetées, vpp-ver:pper, déchiqueter, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(263, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(formations, nc-nom, formation, [n-1]), si(rocheuses, adj-adj, rocheux, [dl(0,n,n)-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(partie, nc-nom, partie, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faille, nc-nom, faille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Andreas', npp-nam, 'Andreas', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(264, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(faille, nc-nom, faille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Andreas', npp-nam, 'Andreas', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(formée, vpp-ver:pper, former, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(265, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(bande, nc-nom, bande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ranchers, nc-nom, rancher, [n-1]), si(sous, p-prp, sou, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(direction, nc-nom, direction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pedro', npp-nam, 'Pedro', [dr(0,np,np)-1]), si('Quintanar', npp-nam, 'Quintanar', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),dl(0,np,s_ppres))-1]), si(apprenant, vpr-ver:ppre, apprendre, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si('Bátiz', npp-nam, 'Bátiz', [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(saisi, vpp-ver:pper, saisir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(trésor, nc-nom, trésor, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(déclarée, vpp-ver:pper, déclarer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(rébellion, nc-nom, rébellion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(266, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si('Bátiz', npp-nam, 'Bátiz', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bande, nc-nom, bande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ranchers, nc-nom, rancher, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(267, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(bande, nc-nom, bande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ranchers, nc-nom, rancher, [n-1]), si(sous, p-prp, sou, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(direction, nc-nom, direction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pedro', npp-nam, 'Pedro', [dr(0,np,np)-1]), si('Quintanar', npp-nam, 'Quintanar', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),dl(0,np,s_ppres))-1]), si(apprenant, vpr-ver:ppre, apprendre, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si('Bátiz', npp-nam, 'Bátiz', [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(saisi, vpp-ver:pper, saisir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(trésor, nc-nom, trésor, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(déclarée, vpp-ver:pper, déclarer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(rébellion, nc-nom, rébellion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(268, Result) :-
      prob_parse([ si('Pedro', npp-nam, 'Pedro', [dr(0,np,np)-1]), si('Quintanar', npp-nam, 'Quintanar', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bande, nc-nom, bande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ranchers, nc-nom, rancher, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(269, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(soulèvement, nc-nom, soulèvement, [n-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(maire, nc-nom, maire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pénjamo', npp-nam, 'Pénjamo', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Guanajuato', npp-nam, 'Guanajuato', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Luis', npp-nam, 'Luis', [dr(0,np,np)-1]), si('Navarro', npp-nam, 'Navarro', [dr(0,np,np)-1]), si('Origel', npp-nam, 'Origel', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(28, adj-num, 28, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(270, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(vaincu, vpp-ver:pper, vaincre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(fédérales, adj-adj, fédéral, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si(ouvertes, vpp-ver:pper, ouvert, [dl(0,n,n)-1]), si(autour, p-prp, autour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(retira, v-ver:simp, retirer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(montagnes, nc-nom, montagne, [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(lui, pro-pro:per, luire, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(continuèrent, v-ver:simp, continuer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guérilla, nc-nom, guérilla, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(271, Result) :-
      prob_parse([ si('Luis', npp-nam, 'Luis', [dr(0,np,np)-1]), si('Navarro', npp-nam, 'Navarro', [dr(0,np,np)-1]), si('Origel', npp-nam, 'Origel', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(guérillero, nc-nom, guérillero, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(272, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(principal, adj-adj, principal, [dr(0,n,n)-1]), si(foyer, nc-nom, foyer, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rébellion, nc-nom, rébellion, [n-1]), si(dirigée, vpp-ver:pper, diriger, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('René', npp-nam, 'René', [dr(0,np,np)-1]), si('Capistran', npp-nam, 'Capistran', [dr(0,np,np)-1]), si('Garza', npp-nam, 'Garza', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(27, det-num, 27, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(leader, nc-nom, leader, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Association', nc-nam, 'Association', [n-1]), si(mexicaine, adj-adj, mexicain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(jeunesse, nc-nom, jeunesse, [n-1]), si(catholique, adj-adj, catholique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(273, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Association', nc-nam, 'Association', [n-1]), si(mexicaine, adj-adj, mexicain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(jeunesse, nc-nom, jeunesse, [n-1]), si(catholique, adj-adj, catholique, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(dirigée, vpp-ver:pper, diriger, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('René', npp-nam, 'René', [dr(0,np,np)-1]), si('Capistran', npp-nam, 'Capistran', [dr(0,np,np)-1]), si('Garza', npp-nam, 'Garza', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(274, Result) :-
      prob_parse([ si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Wilkins', npp-nam, 'Wilkins', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(famille, nc-nom, famille, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rapidement, adv-adv, rapidement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(installés, vpp-ver:pper, installer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ce, cls-pro:dem, ce, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ère, nc-nom, ère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(succès, nc-nom, succès, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Milan', npp-nam, 'Milan', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('Wilkins', npp-nam, 'Wilkins', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(autorisé, vpp-ver:pper, autoriser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1987, pro-num, 1987, [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(club, nc-nom, club, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si('Saint-Germain', npp-nam, 'Saint-Germain', [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(275, Result) :-
      prob_parse([ si('Wilkins', npp-nam, 'Wilkins', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrivé, vpp-ver:pper, arriver, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1987, pro-num, 1987, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(276, Result) :-
      prob_parse([ si('Wilkins', npp-nam, 'Wilkins', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(choisi, vpp-ver:pper, choisir, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(qualifiée, vpp-ver:pper, qualifier, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Coupe', nc-nam, 'Coupe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(1986, adj-num, 1986, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Mexique', npp-nam, 'Mexique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(joué, vpp-ver:pper, jouer, [dl(0,np,s_ppart)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(défaite, nc-nom, défaite, [n-1]), si(inaugurale, adj-adj, inaugural, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Portugal', npp-nam, 'Portugal', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(277, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(battu, vpp-ver:pper, battre, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Portugal', npp-nam, 'Portugal', [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Coupe', nc-nam, 'Coupe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(1986, adj-num, 1986, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(278, Result) :-
      prob_parse([ si('André', npp-nam, 'André', [dr(0,np,np)-1]), si('Henri', npp-nam, 'Henri', [dr(0,np,np)-1]), si('Constant', npp-nam, 'Constant', [np-1]), si(van, et-prp, van, [dr(0,dl(0,np,np),np)-1]), si('Hasselt', npp-nam, 'Hasselt', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Maastricht', npp-nam, 'Maastricht', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Limbourg', npp-nam, 'Limbourg', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(279, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(natale, adj-adj, natal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Liège', npp-nam, 'Liège', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(280, Result) :-
      prob_parse([ si('André', npp-nam, 'André', [dr(0,np,np)-1]), si('Henri', npp-nam, 'Henri', [dr(0,np,np)-1]), si('Constant', npp-nam, 'Constant', [np-1]), si(van, et-prp, van, [dr(0,dl(0,np,np),np)-1]), si('Hasselt', npp-nam, 'Hasselt', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(études, nc-nom, étude, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Maastricht', npp-nam, 'Maastricht', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(281, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1833, pro-num, 1833, [np-1]), si(',', ponct-pun, ',', [let-1]), si('Van', npp-nam, 'Van', [dr(0,np,np)-1]), si('Hasselt', npp-nam, 'Hasselt', [np-1]), si(quitte, v-ver:pres, quitte, [dr(0,dl(0,np,s),np)-1]), si('Maastricht', npp-nam, 'Maastricht', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(alors, adv-adv, alors, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(bloquée, vpp-ver:pper, bloquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(belges, adj-adj, belge, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rend, v-ver:pres, rendre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(naturalisé, vpp-ver:pper, naturaliser, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(belge, adj-adj, belge, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(attaché, vpp-ver:pper, attacher, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Bibliothèque', npp-nam, 'Bibliothèque', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bourgogne', npp-nam, 'Bourgogne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(282, Result) :-
      prob_parse([ si('Van', npp-nam, 'Van', [dr(0,np,np)-1]), si('Hasselt', npp-nam, 'Hasselt', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(origine, nc-nom, origine, [n-1]), si(belge, adj-adj, belge, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(283, Result) :-
      prob_parse([ si('Bountiful', npp-nam, 'Bountiful', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Francisco', npp-nam, 'Francisco', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(1944, adj-num, 1944, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('Honolulu', npp-nam, 'Honolulu', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(revenu, vpp-ver:pper, revenir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tard, adv-adv, tard, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(mois, nc-nom, mois, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reparti, vpp-ver:pper, repartir, [dl(0,np,s_ppart)-1]), si(une, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pacifique', npp-nam, 'Pacifique', [n-1]), si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(284, Result) :-
      prob_parse([ si('Bountiful', npp-nam, 'Bountiful', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si('Honolulu', npp-nam, 'Honolulu', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si(1944, adj-num, 1944, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(285, Result) :-
      prob_parse([ si('Tripontium', npp-nam, 'Tripontium', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(initialement, adv-adv, initialement, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(poste, nc-nom, poste, [n-1]), si(frontière, nc-nom, frontière, [dl(0,n,n)-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(établi, vpp-ver:pper, établir, [dl(0,n,n)-1]), si(peu, adv-adv, peu, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n)))-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(romaine, adj-adj, romain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(vers, p-prp, vers, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(ap, nc-nom, ap, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(286, Result) :-
      prob_parse([ si('J.-C', npp-nam, 'J.-C', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(287, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Romains', nc-nam, 'Romains', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrivés, vpp-ver:pper, arriver, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(ap, nc-abr, ap, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(288, Result) :-
      prob_parse([ si('J.-C..', npp-abr, 'J.-C..', [np-1])], Result).
sent(289, Result) :-
      prob_parse([ si('Metin', npp-nam, 'Metin', [dr(0,np,np)-1]), si('Kaplan', npp-nam, 'Kaplan', [np-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(rival, nc-nom, rival, [n-1]), si('Ibrahim', npp-nam, 'Ibrahim', [dl(0,n,n)-1]), si('Sofu', npp-nam, 'Sofu', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(290, Result) :-
      prob_parse([ si('Ibrahim', npp-nam, 'Ibrahim', [dr(0,np,np)-1]), si('Sofu', npp-nam, 'Sofu', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(assassiné, vpp-ver:pper, assassiner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Metin', npp-nam, 'Metin', [dr(0,np,np)-1]), si('Kaplan', npp-nam, 'Kaplan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(291, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(début, nc-nom, début, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mois, nc-nom, mois, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mai, nc-nom, mai, [n-1]), si(2004, adj-num, 2004, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Kaplan', npp-nam, 'Kaplan', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réfugié, nc-nom, réfugié, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(risquait, v-ver:impf, risquer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(extradition, nc-nom, extradition, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(avant, p-prp, avant, [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(puisse, vs-ver:subp, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), si(',', ponct-pun, ',', [let-1]), si('Kaplan', npp-nam, 'Kaplan', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(disparu, vpp-ver:pper, disparaître, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Cologne', npp-nam, 'Cologne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(292, Result) :-
      prob_parse([ si('Kaplan', npp-nam, 'Kaplan', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(extradé, vpp-ver:pper, extrader, [dl(0,np,s_pass)-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(293, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(familles, nc-nom, famille, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Britanniques', nc-nam, 'Britanniques', [n-1]), si(disparus, vpp-ver:pper, disparaître, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(attentats, nc-nom, attentat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Charm', npp-nam, 'Charm', [dr(0,np,np)-1]), si('el-Cheikh', npp-nam, 'el-Cheikh', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(envoler, vinf-ver:infi, envoler, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(station, nc-nom, station, [n-1]), si(balnéaire, adj-adj, balnéaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si('Rouge', npp-nam, 'Rouge', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Foreign', npp-nam, 'Foreign', [dr(0,n,n)-1]), si('Office', npp-nam, 'Office', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(294, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('Britanniques', nc-nam, 'Britanniques', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(portés, vpp-ver:pper, porter, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(disparus, vpp-ver:pper, disparaître, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Charm', npp-nam, 'Charm', [dr(0,np,np)-1]), si('el-Cheikh', npp-nam, 'el-Cheikh', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(295, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ambassadeur, nc-nom, ambassadeur, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Égypte', npp-nam, 'Égypte', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Derek', npp-nam, 'Derek', [dr(0,np,np)-1]), si('Plumbly', npp-nam, 'Plumbly', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Reuters', npp-nam, 'Reuters', [np-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dressé, vpp-ver:pper, dresser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(10, nc-num, 10, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(basant, vpr-ver:ppre, baser, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(listes, nc-nom, liste, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(compagnies, nc-nom, compagnie, [n-1]), si(touristiques, adj-adj, touristique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(familles, nc-nom, famille, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(proches, nc-nom, proche, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(contact, nc-nom, contact, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(attentats, nc-nom, attentat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(296, Result) :-
      prob_parse([ si('Derek', npp-nam, 'Derek', [dr(0,np,np)-1]), si('Plumbly', npp-nam, 'Plumbly', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diplomate, nc-nom, diplomate, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Egypte', npp-nam, 'Egypte', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(297, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(égyptien, adj-adj, égyptien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écarté, vpp-ver:pper, écarter, [dr(0,dl(0,np,s_ppart),np)-1]), si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(spéculations, nc-nom, spéculation, [n-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Pakistanais', nc-nom, 'Pakistanais', [n-1]), si(disparus, vpp-ver:pper, disparaître, [dl(0,n,n)-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(aidé, vpp-ver:pper, aider, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(attentats, nc-nom, attentat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(298, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Pakistanais', nc-nam, 'Pakistanais', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(aidé, vpp-ver:pper, aider, [dr(0,dl(0,np,s_ppart),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(attentats, nc-nom, attentat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(299, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(perpétré, vpp-ver:pper, perpétrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(attentats, nc-nom, attentat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Taba', npp-nam, 'Taba', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Charm', npp-nam, 'Charm', [dr(0,np,np)-1]), si('el-Cheikh', npp-nam, 'el-Cheikh', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(obéissant, vpr-ver:ppre, obéir, [dr(0,dl(0,np,s_ppres),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(chefs, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jihad, nc-nom, jihad, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(sainte, adj-adj, saint, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('al-Qaïda', npp-nam, 'al-Qaïda', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cheikh, nc-nom, cheikh, [n-1]), si('Oussama', npp-nam, 'Oussama', [dl(0,n,n)-1]), si(ben, npp-nam, ben, [dr(0,np,np)-1]), si('Laden', npp-nam, 'Laden', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cheikh, nc-nom, cheikh, [n-1]), si('Ayman', npp-nam, 'Ayman', [dl(0,n,n)-1]), si('al-Zawahri', npp-nam, 'al-Zawahri', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(venger, vinf-ver:infi, venger, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), si(frères, nc-nom, frère, [n-1]), si(opprimés, vpp-ver:pper, opprimer, [dl(0,n,n)-1]), si(en, p-prp, en, [dl(0,n,n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [n-1]), si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(300, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(cheikh, nc-nom, cheikh, [n-1]), si('Oussama', npp-nam, 'Oussama', [dl(0,n,n)-1]), si(ben, npp-kon, ben, [dl(0,n,n)-1]), si('Laden', npp-nam, 'Laden', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cheikh, nc-nom, cheikh, [n-1]), si('Ayman', npp-nam, 'Ayman', [dl(0,n,n)-1]), si('al-Zawahri', npp-nam, 'al-Zawahri', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('al-Qaïda', npp-nam, 'al-Qaïda', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(301, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(égyptienne, adj-adj, égyptien, [dl(0,n,n)-1]), si(enquête, v-ver:pres, enquête, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(possibilité, nc-nom, possibilité, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si('Mohamed', npp-nam, 'Mohamed', [dr(0,np,np)-1]), si('Fulayfel', npp-nam, 'Fulayfel', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(frère, nc-nom, frère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(kamikazes, nc-nom, kamikaze, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Taba', npp-nam, 'Taba', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conduit, vpp-ver:pper, conduire, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(piégée, vpp-ver:pper, piéger, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôtel, nc-nom, hôtel, [n-1]), si('Ghazala', npp-nam, 'Ghazala', [dl(0,n,n)-1]), si('Gardens', npp-nam, 'Gardens', [dl(0,n,n)-1]), si(samedi, nc-nom, samedi, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(302, Result) :-
      prob_parse([ si('Mohamed', npp-nam, 'Mohamed', [dr(0,np,np)-1]), si('Fulayfel', npp-nam, 'Fulayfel', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perpétré, vpp-ver:pper, perpétrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(attentat, nc-nom, attentat, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bombe, nc-nom, bombe, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Taba', npp-nam, 'Taba', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(303, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(groupes, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_ppart),np)-1]), si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), si('2.500', adj-num, '2.500', [dr(0,n,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôtel, nc-nom, hôtel, [n-1]), si('Hilton', npp-nam, 'Hilton', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Taba', npp-nam, 'Taba', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(maltraité, vpp-ver:pper, maltraiter, [dr(0,dl(0,np,s_ppart),np)-1]), si(nombre, nc-nom, nombre, [np-1]), si('d\'', p-prp, 'd\'', [np-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si(elles, pro-pro:per, lui, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(304, Result) :-
      prob_parse([ si('Quelque', det-pro:ind, 'Quelque', [dr(0,np,n)-1]), si('2.500', adj-num, '2.500', [dr(0,n,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêtées, vpp-ver:pper, arrêter, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôtel, nc-nom, hôtel, [n-1]), si('Hilton', npp-nam, 'Hilton', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Taba', npp-nam, 'Taba', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(305, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(fabricant, nc-nom, fabricant, [n-1]), si(rival, adj-adj, rival, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(génériques, adj-adj, générique, [dl(0,n,n)-1]), si('Mylan', npp-nam, 'Mylan', [dr(0,dl(0,n,n),np)-1]), si('Laboratories', npp-nam, 'Laboratories', [dr(0,np,np)-1]), si('Inc', et-abr, 'Inc', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(306, Result) :-
      prob_parse([ si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(revenu, nc-nom, revenu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('1,3', det-num, '1,3', [dr(0,np,n)-1]), si(milliard, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exercice, nc-nom, exercice, [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(307, Result) :-
      prob_parse([ si('Mylan', npp-nam, 'Mylan', [dr(0,np,np)-1]), si('Laboratories', npp-nam, 'Laboratories', [dr(0,np,np)-1]), si('Inc', et-nam, 'Inc', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(308, Result) :-
      prob_parse([ si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(gagné, vpp-ver:pper, gagner, [dr(0,dl(0,np,s_ppart),np)-1]), si('1,3', det-num, '1,3', [dr(0,np,n)-1]), si(milliard, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exercice, nc-nom, exercice, [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(309, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conclusion, nc-nom, conclusion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Teva', npp-nam, 'Teva', [np-1]), si(réalisera, v-ver:futu, réaliser, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(chiffre, nc-nom, chiffre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(7, det-num, 7, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), si(an, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(310, Result) :-
      prob_parse([ si('Teva', npp-nam, 'Teva', [np-1]), si(gagne, v-ver:pres, gagner, [dr(0,dl(0,np,s),np)-1]), si(7, det-num, 7, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), si(an, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(311, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_ppart),np)-1]), si('Omar', npp-nam, 'Omar', [np-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(évacué, vpp-ver:pper, évacuer, [dr(0,dl(0,np,s_ppart),np)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si(maisons, nc-nom, maison, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(démineurs, nc-nom, démineur, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Small', npp-nam, 'Small', [dr(0,np,np)-1]), si('Heath', npp-nam, 'Heath', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(perquisition, nc-nom, perquisition, [n-1]), si(')', ponct-pun, ')', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Birmingham', npp-nam, 'Birmingham', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), si(120, adj-num, 120, [dr(0,n,n)-1]), si(miles, nc-nom, mile, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('nord-ouest', nc-nom, 'nord-ouest', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(312, Result) :-
      prob_parse([ si('Omar', npp-nam, 'Omar', [np-1]), si(résidait, v-ver:impf, résider, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Small', npp-nam, 'Small', [dr(0,np,np)-1]), si('Heath', npp-nam, 'Heath', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(313, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(dizaines, nc-num, dizaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(policiers, nc-nom, policier, [n-1]), si(antiterroristes, adj-adj, antiterroriste, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déferlé, vpp-ver:pper, déferler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), si('Omar', npp-nam, 'Omar', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(citoyen, nc-nom, citoyen, [n-1]), si(somalien, adj-adj, somalien, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résidence, nc-nom, résidence, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(soupçonné, vpp-ver:pper, soupçonner, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(station, nc-nom, station, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(métro, nc-nom, métro, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Warren', npp-nam, 'Warren', [dr(0,np,np)-1]), si('Street', npp-nam, 'Street', [np-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(314, Result) :-
      prob_parse([ si('Omar', npp-nam, 'Omar', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(origine, nc-nom, origine, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(315, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(suspect, nc-nom, suspect, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(essayé, vpp-ver:pper, essayer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), si(exploser, vinf-ver:infi, exploser, [dl(0,np,s_inf)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bombe, nc-nom, bombe, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(train, nc-nom, train, [n-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(station, nc-nom, station, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(métro, nc-nom, métro, [n-1]), si('Shepherd\'s', npp-nam, 'Shepherd\'s', [dl(0,n,n)-1]), si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(316, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(attentat, nc-nom, attentat, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bombe, nc-nom, bombe, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(station, nc-nom, station, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(métro, nc-nom, métro, [n-1]), si('Shepherd\'s', npp-nam, 'Shepherd\'s', [dl(0,n,n)-1]), si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(317, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(relâché, vpp-ver:pper, relâcher, [dr(0,dl(0,np,s_ppart),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(photo, nc-nom, photo, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(suspect, nc-nom, suspect, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenté, vpp-ver:pper, tenter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), si(exploser, vinf-ver:infi, exploser, [dl(0,np,s_inf)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bombe, nc-nom, bombe, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(train, nc-nom, train, [n-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(station, nc-nom, station, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(métro, nc-nom, métro, [n-1]), si('Shepherd\'s', npp-nam, 'Shepherd\'s', [dl(0,n,n)-1]), si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(318, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(relâché, vpp-ver:pper, relâcher, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(suspect, nc-nom, suspect, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenté, vpp-ver:pper, tenter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), si(exploser, vinf-ver:infi, exploser, [dl(0,np,s_inf)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(bombe, nc-nom, bombe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(319, Result) :-
      prob_parse([ si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Ronald', npp-nam, 'Ronald', [dl(0,n,n)-1]), si('Reagan', npp-nam, 'Reagan', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fiscalité, nc-nom, fiscalité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(relance, nc-nom, relance, [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1981, pro-num, 1981, [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(progressivement, adv-adv, progressivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(impôts, nc-nom, impôt, [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('25%.', pro-num, '25%.', [dr(0,np,n)-1])], Result).
sent(320, Result) :-
      prob_parse([ si('Reagan', npp-nam, 'Reagan', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(impôts, nc-nom, impôt, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('25%.', pro-num, '25%.', [dr(0,np,n)-1])], Result).
sent(321, Result) :-
      prob_parse([ si('Debbie', npp-nam, 'Debbie', [dr(0,np,np)-1]), si('Inker', npp-nam, 'Inker', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('CPA', npp-abr, 'CPA', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(vit, v-ver:pres, voir, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(2002, pro-num, 2002, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(322, Result) :-
      prob_parse([ si('Debbie', npp-nam, 'Debbie', [dr(0,np,np)-1]), si('Inker', npp-nam, 'Inker', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(citoyen, nc-nom, citoyen, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(323, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(intérêt, nc-nom, intérêt, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(économie, nc-nom, économie, [n-1]), si(israélienne, adj-adj, israélien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(israéliens, adj-adj, israélien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(négocie, v-ver:pres, négocier, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(sociale, adj-adj, social, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(dès, p-prp, dès, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(324, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conclu, vpp-ver:pper, conclure, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(325, Result) :-
      prob_parse([ si('Pinkerton', npp-nam, 'Pinkerton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(membre, nc-nom, membre, [n-1]), si(actif, adj-adj, actif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(église, nc-nom, église, [n-1]), si('Saint-Bernard', npp-nam, 'Saint-Bernard', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(variété, nc-nom, variété, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ministères, nc-nom, ministère, [n-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éducation, nc-nom, éducation, [n-1]), si(religieuse, adj-adj, religieux, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(musique, nc-nom, musique, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prisons, nc-nom, prison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(326, Result) :-
      prob_parse([ si('Pinkerton', npp-nam, 'Pinkerton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(église, nc-nom, église, [n-1]), si('St', npp-nom, 'St', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(327, Result) :-
      prob_parse([ si('Bernard', npp-nam, 'Bernard', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(328, Result) :-
      prob_parse([ si('Beverly', npp-nam, 'Beverly', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(effectué, vpp-ver:pper, effectuer, [dr(0,dl(0,np,s_ppart),np)-1]), si(divers, adj-adj, divers, [dr(0,np,n)-1]), si(stages, nc-nom, stage, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(assistante, nc-nom, assistant, [n-1]), si(administrative, adj-adj, administratif, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Wabash', npp-nam, 'Wabash', [dr(0,n,n)-1]), si('County', npp-nam, 'County', [dr(0,n,n)-1]), si('Economic', npp-nam, 'Economic', [dr(0,n,n)-1]), si('Development', npp-nam, 'Development', [dr(0,n,n)-1]), si('Corporation', npp-nam, 'Corporation', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('WEDCOR', npp-abr, 'WEDCOR', [np-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(329, Result) :-
      prob_parse([ si('Beverly', npp-nam, 'Beverly', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('WEDCOR', npp-nam, 'WEDCOR', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(330, Result) :-
      prob_parse([ si('Rejoignant', vpr-ver:ppre, 'Rejoignant', [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), si('Pinkerton', npp-nam, 'Pinkerton', [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Lindsey', npp-nam, 'Lindsey', [dr(0,np,np)-1]), si('Beverly', npp-nam, 'Beverly', [np-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(assistante, nc-nom, assistant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(direction, nc-nom, direction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(331, Result) :-
      prob_parse([ si('Pinkerton', npp-nam, 'Pinkerton', [np-1]), si(travaille, v-ver:pres, travailler, [dl(0,np,s)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('Beverly', npp-nam, 'Beverly', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(332, Result) :-
      prob_parse([ si('Dean', npp-nam, 'Dean', [dr(0,np,np)-1]), si('Lynn', npp-nam, 'Lynn', [dr(0,np,np)-1]), si('Hart', npp-nam, 'Hart', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dl(0,np,s_pass)-1]), si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(domicile, nc-nom, domicile, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comté, nc-nom, comté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Storey', npp-nam, 'Storey', [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résidence, nc-nom, résidence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Reno', npp-nam, 'Reno', [np-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bloc, nc-nom, bloc, [n-1]), si(4200, adj-num, 4200, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Truckee', npp-nam, 'Truckee', [dr(0,np,np)-1]), si('River', npp-nam, 'River', [dr(0,np,np)-1]), si('Trail', npp-nam, 'Trail', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(333, Result) :-
      prob_parse([ si('Dean', npp-nam, 'Dean', [dr(0,np,np)-1]), si('Lynn', npp-nam, 'Lynn', [dr(0,np,np)-1]), si('Hart', npp-nam, 'Hart', [np-1]), si(vit, v-ver:pres, voir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Truckee', npp-nam, 'Truckee', [dr(0,np,np)-1]), si('River', npp-nam, 'River', [dr(0,np,np)-1]), si('Trail', npp-nam, 'Trail', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(334, Result) :-
      prob_parse([ si('Dean', npp-nam, 'Dean', [dr(0,np,np)-1]), si('Lynn', npp-nam, 'Lynn', [dr(0,np,np)-1]), si('Hart', npp-nam, 'Hart', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dl(0,np,s_pass)-1]), si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(domicile, nc-nom, domicile, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comté, nc-nom, comté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Storey', npp-nam, 'Storey', [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résidence, nc-nom, résidence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Reno', npp-nam, 'Reno', [np-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bloc, nc-nom, bloc, [n-1]), si(4200, adj-num, 4200, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Truckee', npp-nam, 'Truckee', [dr(0,np,np)-1]), si('River', npp-nam, 'River', [dr(0,np,np)-1]), si('Trail', npp-nam, 'Trail', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(335, Result) :-
      prob_parse([ si('Dean', npp-nam, 'Dean', [dr(0,np,np)-1]), si('Lynn', npp-nam, 'Lynn', [dr(0,np,np)-1]), si('Hart', npp-nam, 'Hart', [np-1]), si(réside, v-ver:pres, résider, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(comté, nc-nom, comté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Storey', npp-nam, 'Storey', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(336, Result) :-
      prob_parse([ si('Eiken', npp-nam, 'Eiken', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(équipe, nc-nom, équipe, [np-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si('ABC', npp-nam, 'ABC', [dr(0,np,np)-1]), si('Marketing', npp-nam, 'Marketing', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Inc', et-abr, 'Inc', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(337, Result) :-
      prob_parse([ si('-', ponct-pun, '-', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(petite, adj-adj, petit, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(appartenant, vpr-ver:ppre, appartenir, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Alan', npp-nam, 'Alan', [dr(0,np,np)-1]), si('Baird', npp-nam, 'Baird', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(habitant, nc-nom, habitant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jefferson', npp-nam, 'Jefferson', [dr(0,np,np)-1]), si('City', npp-nam, 'City', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(338, Result) :-
      prob_parse([ si('Baird', npp-nam, 'Baird', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(propriétaire, nc-nom, propriétaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('ABC', npp-abr, 'ABC', [dr(0,np,np)-1]), si('Marketing', npp-nam, 'Marketing', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Inc', et-abr, 'Inc', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(339, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Baird', npp-nam, 'Baird', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Eiken', npp-nam, 'Eiken', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sélectionné, vpp-ver:pper, sélectionner, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fabricant, nc-nom, fabricant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('LANGCO', npp-nam, 'LANGCO', [dr(0,np,np)-1]), si('Tools', npp-nam, 'Tools', [np-1]), si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), si('Plastic', npp-nam, 'Plastic', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Inc', et-nam, 'Inc', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('Oran', npp-nam, 'Oran', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Missouri', npp-nam, 'Missouri', [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(340, Result) :-
      prob_parse([ si('Baird', npp-nam, 'Baird', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Eiken', npp-nam, 'Eiken', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_ppart),np)-1]), si('LANGCO', npp-nam, 'LANGCO', [dr(0,np,np)-1]), si('Tools', npp-nam, 'Tools', [np-1]), si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), si('Plastic', npp-nam, 'Plastic', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(341, Result) :-
      prob_parse([ si('McDonald\'s', npp-nam, 'McDonald\'s', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(associait, v-ver:impf, associer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('DreamWorks', npp-nam, 'DreamWorks', [dr(0,np,np)-1]), si('Animation', npp-nam, 'Animation', [dr(0,np,np)-1]), si('SKG', npp-nam, 'SKG', [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(promotions, nc-nom, promotion, [n-1]), si(basées, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnages, nc-nom, personnage, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(films, nc-nom, film, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(studio, nc-nom, studio, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si('Shrek', npp-nam, 'Shrek', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(342, Result) :-
      prob_parse([ si('Shrek', npp-nam, 'Shrek', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(produit, vpp-ver:pper, produire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('McDonald\'s', npp-nam, 'McDonald\'s', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(343, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('C\'est', v-ver:pres, 'C\'est', [np-1]), si(irresponsable, adj-adj, irresponsable, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [let-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si('Susan', npp-nam, 'Susan', [dl(1,s,dl(0,np,s_ppart))-1]), si('Linn', npp-nam, 'Linn', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [np-1]), si(psychologue, nc-nom, psychologue, [dr(0,dl(0,np,np),n)-1]), si(au, p+d-prp:det, au, [n-1]), si('Judge', npp-nam, 'Judge', [dr(0,dl(0,n,n),n)-1]), si('Baker', npp-nam, 'Baker', [dr(0,n,n)-1]), si('Children\'s', npp-nam, 'Children\'s', [dr(0,n,n)-1]), si('Center', npp-nam, 'Center', [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si('Boston', npp-nam, 'Boston', [dr(0,dl(0,n,n),np)-1]), si(et, cc-kon, et, [np-1]), si(auteur, nc-nom, auteur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(livre, nc-nom, livre, [n-1]), si('"', ponct-pun:cit, '"', [n-1]), si('Consuming', npp-nam, 'Consuming', [dr(0,np,np)-1]), si('Kids', npp-nam, 'Kids', [dr(0,np,np)-1]), si('"', ponct-pun:cit, '"', [np-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(344, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Consuming', npp-nam, 'Consuming', [dr(0,np,np)-1]), si('Kids', npp-nam, 'Kids', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Susan', npp-nam, 'Susan', [dr(0,np,np)-1]), si('Linn', npp-nam, 'Linn', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(345, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('C\'est', v-ver:pres, 'C\'est', [np-1]), si(irresponsable, adj-adj, irresponsable, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [let-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si('Susan', npp-nam, 'Susan', [dl(1,s,dl(0,np,s_ppart))-1]), si('Linn', npp-nam, 'Linn', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [np-1]), si(psychologue, nc-nom, psychologue, [dr(0,dl(0,np,np),n)-1]), si(au, p+d-prp:det, au, [n-1]), si('Judge', npp-nam, 'Judge', [dr(0,dl(0,n,n),n)-1]), si('Baker', npp-nam, 'Baker', [dr(0,n,n)-1]), si('Children\'s', npp-nam, 'Children\'s', [dr(0,n,n)-1]), si('Center', npp-nam, 'Center', [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si('Boston', npp-nam, 'Boston', [dr(0,dl(0,n,n),np)-1]), si(et, cc-kon, et, [np-1]), si(auteur, nc-nom, auteur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(livre, nc-nom, livre, [n-1]), si('"', ponct-pun:cit, '"', [n-1]), si('Consuming', npp-nam, 'Consuming', [dr(0,np,np)-1]), si('Kids', npp-nam, 'Kids', [dr(0,np,np)-1]), si('"', ponct-pun:cit, '"', [np-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(346, Result) :-
      prob_parse([ si('Susan', npp-nam, 'Susan', [dr(0,np,np)-1]), si('Linn', npp-nam, 'Linn', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tête, nc-nom, tête, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Judge', npp-nam, 'Judge', [dr(0,n,n)-1]), si('Baker', npp-nam, 'Baker', [dr(0,n,n)-1]), si('Children\'s', npp-nam, 'Children\'s', [dr(0,n,n)-1]), si('Center', npp-nam, 'Center', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(347, Result) :-
      prob_parse([ si('Monsieur', nc-abr, 'Monsieur', [dr(0,np,np)-1]), si('Katzenberg', npp-nam, 'Katzenberg', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Disney', npp-nam, 'Disney', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(impliqué, vpp-ver:pper, impliquer, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(médiatisé, vpp-ver:pper, médiatiser, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(récupérer, vinf-ver:infi, récupérer, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(estimait, v-ver:impf, estimer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(dû, vpp-ver:pper, devoir, [dr(0,dl(0,np,s_pass),pp_a)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(348, Result) :-
      prob_parse([ si('Katzenberg', npp-nam, 'Katzenberg', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(intenté, vpp-ver:pper, intenter, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si('Disney', npp-nam, 'Disney', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(349, Result) :-
      prob_parse([ si('Monsieur', nc-nom, 'Monsieur', [dr(0,np,np)-1]), si('Gotti', npp-nam, 'Gotti', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(purge, v-ver:pres, purger, [dr(0,dl(0,np,s),np)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(neuf, det-num, neuf, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(prison, nc-nom, prison, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), si(extorsion, nc-nom, extorsion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(25, det-num, 25, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(supplémentaires, adj-adj, supplémentaire, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si('Richard', npp-nam, 'Richard', [dl(0,n,n)-1]), si('D.', npp-abr, 'D.', [dl(0,n,n)-1]), si('Casey', npp-nam, 'Casey', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(district, nc-nom, district, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(350, Result) :-
      prob_parse([ si('Gotti', npp-nam, 'Gotti', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(accusé, vpp-ver:pper, accuser, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(extorsion, nc-nom, extorsion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(351, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(sentence, nc-nom, sentence, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hier, adv-adv, hier, [n-1]), si(concernait, v-ver:impf, concerner, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(condamnation, nc-nom, condamnation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), si('Gotti', npp-nam, 'Gotti', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(accusations, nc-nom, accusation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(extorsion, nc-nom, extorsion, [n-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('-', ponct-pun, '-', [let-1]), si(finalement, adv-adv, finalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(succès, nc-nom, succès, [n-1]), si('-', ponct-pun, '-', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Salvatore', npp-nam, 'Salvatore', [dr(0,np,np)-1]), si('Gravano', npp-nam, 'Gravano', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(352, Result) :-
      prob_parse([ si('Salvatore', npp-nam, 'Salvatore', [dr(0,np,np)-1]), si('Gravano', npp-nam, 'Gravano', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), si('Gotti', npp-nam, 'Gotti', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(353, Result) :-
      prob_parse([ si('Monsieur', nc-nom, 'Monsieur', [dr(0,np,np)-1]), si('Gotti', npp-nam, 'Gotti', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(purge, v-ver:pres, purger, [dr(0,dl(0,np,s),np)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(neuf, det-num, neuf, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), si(extorsion, nc-nom, extorsion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(25, det-num, 25, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(supplémentaires, adj-adj, supplémentaire, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si('Richard', npp-nam, 'Richard', [dl(0,n,n)-1]), si('D.', npp-abr, 'D.', [dl(0,n,n)-1]), si('Casey', npp-nam, 'Casey', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(district, nc-nom, district, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(354, Result) :-
      prob_parse([ si('Casey', npp-nam, 'Casey', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(juge, nc-nom, juge, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(district, nc-nom, district, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(355, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(convoqués, vpp-ver:pper, convoquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(comité, nc-nom, comité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(solidarité, nc-nom, solidarité, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(latine, adj-adj, latin, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(agressé, vpp-ver:pper, agresser, [dr(0,dl(0,np,s_ppart),np)-1]), si(verbalement, adv-adv, verbalement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(salvadorien, adj-adj, salvadorien, [dl(0,n,n)-1]), si('Alfredo', npp-nam, 'Alfredo', [dl(0,n,n)-1]), si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(356, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Alfredo', npp-nam, 'Alfredo', [dl(0,n,n)-1]), si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attaqué, vpp-ver:pper, attaquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(357, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Vinicio', npp-nam, 'Vinicio', [dl(0,n,n)-1]), si('Cerezo', npp-nam, 'Cerezo', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tacitement, adv-adv, tacitement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(administration, nc-nom, administration, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('Alfredo', npp-nam, 'Alfredo', [dl(0,n,n)-1]), si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), si(responsable, nc-nom, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(prévaut, v-ver:impf, prévaloir, [dl(0,np,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(suite, nc-nom, suite, [dr(0,pp_a,np)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(offensive, nc-nom, offensive, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Front', nc-nam, 'Front', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(libération, nc-nom, libération, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si('Farabundo', npp-nam, 'Farabundo', [dl(0,n,n)-1]), si('Marti', npp-nam, 'Marti', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dl(0,n,n)-1]), si('FMLN', npp-abr, 'FMLN', [n-1]), si(')', ponct-pun, ')', [let-1]), si(lancée, vpp-ver:pper, lancer, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(samedi, nc-nom, samedi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(358, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('FMLN', npp-abr, 'FMLN', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lancé, vpp-ver:pper, lancer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(offensive, nc-nom, offensive, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(359, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Vinicio', npp-nam, 'Vinicio', [dl(0,n,n)-1]), si('Cerezo', npp-nam, 'Cerezo', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tacitement, adv-adv, tacitement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(administration, nc-nom, administration, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('Alfredo', npp-nam, 'Alfredo', [dl(0,n,n)-1]), si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), si(responsable, nc-nom, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(prévaut, v-ver:impf, prévaloir, [dl(0,np,s)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Salvador', npp-nam, 'Salvador', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(offensive, nc-nom, offensive, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Front', npp-nam, 'Front', [n-1]), si('Farabundo', npp-nam, 'Farabundo', [dl(0,n,n)-1]), si('Marti', npp-nam, 'Marti', [dl(0,n,n)-1]), si(de, p-prp, de, [n-1]), si(libération, nc-nom, libération, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('FMLN', npp-abr, 'FMLN', [n-1]), si(')', ponct-pun, ')', [let-1]), si(lancée, vpp-ver:pper, lancer, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(samedi, nc-nom, samedi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(360, Result) :-
      prob_parse([ si('Alfredo', npp-nam, 'Alfredo', [dr(0,np,np)-1]), si('Cristiani', npp-nam, 'Cristiani', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Salvador', npp-nam, 'Salvador', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(361, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Minnesota', npp-nam, 'Minnesota', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Tim', npp-nam, 'Tim', [dr(0,np,np)-1]), si('Pawlenty', npp-nam, 'Pawlenty', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(signé, vpp-ver:pper, signer, [dr(0,dl(0,np,s_ppart),np)-1]), si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(loi, nc-nom, loi, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(oblige, v-ver:pres, obliger, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(quantité, nc-nom, quantité, [n-1]), si(importante, adj-adj, important, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(besoins, nc-nom, besoin, [n-1]), si(énergétiques, adj-adj, énergétique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(sources, nc-nom, source, [n-1]), si(renouvelables, vpp-ver:pper, renouvelable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(362, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(quantité, nc-nom, quantité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(produite, vpp-ver:pper, produire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(éoliennes, nc-nom, éolienne, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(élève, v-ver:pres, élever, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(895, det-num, 895, [dr(0,np,n)-1]), si(mégawatts, nc-nom, mégawatt, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(363, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(quantité, nc-nom, quantité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(produite, vpp-ver:pper, produire, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Minnesota', npp-nam, 'Minnesota', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(élève, v-ver:pres, élever, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(895, det-num, 895, [dr(0,np,n)-1]), si(mégawatts, nc-nom, mégawatt, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(364, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Giorgio', npp-nam, 'Giorgio', [dr(0,np,np)-1]), si('Napolitano', npp-nam, 'Napolitano', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Romano', npp-nam, 'Romano', [dr(0,np,np)-1]), si('Prodi', npp-nam, 'Prodi', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(poste, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Premier', adj-num, 'Premier', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si('Prodi', npp-nam, 'Prodi', [np-1]), si(devra, v-ver:futu, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(confiance, nc-nom, confiance, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(365, Result) :-
      prob_parse([ si('Romano', npp-nam, 'Romano', [dr(0,np,np)-1]), si('Prodi', npp-nam, 'Prodi', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(italien, adj-adj, italien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(366, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(19, adj-num, 19, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2007, adj-num, 2007, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('XM', npp-abr, 'XM', [dr(0,np,np)-1]), si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), si('Radio', npp-nam, 'Radio', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sirius', npp-nam, 'Sirius', [dr(0,np,np)-1]), si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), si('Radio', npp-nam, 'Radio', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(changer, vinf-ver:infi, changer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(visage, nc-nom, visage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(radio, nc-nom, radio, [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(satellite, nc-nom, satellite, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si('XM', npp-abr, 'XM', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sirius', npp-nam, 'Sirius', [np-1]), si(vont, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(fusionner, vinf-ver:infi, fusionner, [dr(0,dl(0,np,s_inf),np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(créant, vpr-ver:ppre, créer, [dr(0,dl(0,np,s_ppres),np)-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(fournisseur, nc-nom, fournisseur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(radio, nc-nom, radio, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(satellite, nc-nom, satellite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(367, Result) :-
      prob_parse([ si('XM', npp-abr, 'XM', [dr(0,np,np)-1]), si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), si('Radio', npp-nam, 'Radio', [np-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(fusionner, vinf-ver:infi, fusionner, [dr(0,dl(0,np,s_inf),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si('Sirius', npp-nam, 'Sirius', [dr(0,np,np)-1]), si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), si('Radio', npp-nam, 'Radio', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(368, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(19, adj-num, 19, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(2007, adj-num, 2007, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('XM', npp-abr, 'XM', [dr(0,np,np)-1]), si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), si('Radio', npp-nam, 'Radio', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sirius', npp-nam, 'Sirius', [dr(0,np,np)-1]), si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), si('Radio', npp-nam, 'Radio', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(changer, vinf-ver:infi, changer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(visage, nc-nom, visage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(radio, nc-nom, radio, [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(satellite, nc-nom, satellite, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si('XM', npp-abr, 'XM', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sirius', npp-nam, 'Sirius', [np-1]), si(vont, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(fusionner, vinf-ver:infi, fusionner, [dr(0,dl(0,np,s_inf),np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(créant, vpr-ver:ppre, créer, [dr(0,dl(0,np,s_ppres),np)-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(fournisseur, nc-nom, fournisseur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(radio, nc-nom, radio, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(satellite, nc-nom, satellite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(369, Result) :-
      prob_parse([ si('XM', npp-abr, 'XM', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sirius', npp-nam, 'Sirius', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(radio, nc-nom, radio, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(satellite, nc-nom, satellite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(370, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PDG', nc-abr, 'PDG', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sirius', npp-nam, 'Sirius', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Mel', npp-nam, 'Mel', [dr(0,np,np)-1]), si('Karmazin', npp-nam, 'Karmazin', [np-1]), si(',', ponct-pun, ',', [let-1]), si(conservera, v-ver:futu, conserver, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('PDG', nc-abr, 'PDG', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(société, nc-nom, société, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(371, Result) :-
      prob_parse([ si('Mel', npp-nam, 'Mel', [dr(0,np,np)-1]), si('Karmazin', npp-nam, 'Karmazin', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(dirigeant, nc-nom, dirigeant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sirius', npp-nam, 'Sirius', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(372, Result) :-
      prob_parse([ si('Fulham', npp-nam, 'Fulham', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(pression, nc-nom, pression, [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(égaliser, vinf-ver:infi, égaliser, [dl(0,np,s_inf)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si('Manchester', npp-nam, 'Manchester', [dr(0,np,np)-1]), si('United', npp-nam, 'United', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(imposé, vpp-ver:pper, imposer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(poursuivant, vpr-ver:ppre, poursuivre, [dr(0,dl(0,np,s_ppres),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(victoires, nc-nom, victoire, [n-1]), si(cette, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(saison, nc-nom, saison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Premiere', npp-nam, 'Premiere', [dr(0,n,n)-1]), si('League', npp-nam, 'League', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(373, Result) :-
      prob_parse([ si('Manchester', npp-nam, 'Manchester', [dr(0,np,np)-1]), si('United', npp-nam, 'United', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(battu, vpp-ver:pper, battre, [dr(0,dl(0,np,s_ppart),np)-1]), si('Fulham', npp-nam, 'Fulham', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(374, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(nomination, nc-nom, nomination, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(film, nc-nom, film, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Trailer', npp-nam, 'Trailer', [dr(0,np,np)-1]), si('Park', npp-nam, 'Park', [dr(0,np,np)-1]), si('Boys', npp-nam, 'Boys', [np-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Movie', npp-nam, 'Movie', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(rares, adj-adj, rare, [dr(0,n,n)-1]), si(films, nc-nom, film, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(succès, nc-nom, succès, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('box-office', nc-nom, 'box-office', [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2006, pro-num, 2006, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(375, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Trailer', npp-nam, 'Trailer', [dr(0,dl(0,np,s_inf),np)-1]), si('Park', npp-nam, 'Park', [dr(0,np,np)-1]), si('Boys', npp-nam, 'Boys', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(meilleure, adj-adj, meilleur, [dr(0,n,n)-1]), si(image, nc-nom, image, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(376, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pèlerinage, nc-nom, pèlerinage, [n-1]), si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(fleuve, nc-nom, fleuve, [n-1]), si('Gange', npp-nam, 'Gange', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(vénéré, vpp-ver:pper, vénérer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hindous, nc-nom, hindou, [n-1]), si(sous, p-prp, sou, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(déesse, nc-nom, déesse, [n-1]), si('Ganga', npp-nam, 'Ganga', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(rassemblement, nc-nom, rassemblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(participants, nc-nom, participant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(éclipsant, vpr-ver:ppre, éclipser, [dr(0,dl(0,np,s_ppres),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(pèlerinages, nc-nom, pèlerinage, [n-1]), si(religieux, adj-adj, religieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(377, Result) :-
      prob_parse([ si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(participent, v-ver:pres, participer, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(pèlerinage, nc-nom, pèlerinage, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(fleuve, nc-nom, fleuve, [n-1]), si('Gange', npp-nam, 'Gange', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(378, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,dr(0,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(milliers, nc-nom, millier, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hommes, nc-nom, homme, [n-1]), si(saints, adj-adj, saint, [dl(0,n,n)-1]), si(hindous, adj-adj, hindou, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(appelés, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si(sadhus, et-nom, sadhu, [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(menacé, vpp-ver:pper, menacer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(boycotter, vinf-ver:infi, boycotter, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(festivals, nc-nom, festival, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(pèlerinage, nc-nom, pèlerinage, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Gange', npp-nam, 'Gange', [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(rituels, nc-nom, rituel, [n-1]), si(consistent, v-ver:pres, consister, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(laver, vinf-ver:infi, laver, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(péchés, nc-nom, péché, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(baignant, vpr-ver:ppre, baigner, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(379, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(saints, adj-adj, saint, [dl(0,n,n)-1]), si(hindous, adj-adj, hindou, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(boycotté, vpp-ver:pper, boycotter, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(festivals, nc-nom, festival, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(pèlerinage, nc-nom, pèlerinage, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Gange', npp-nam, 'Gange', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(380, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(prince, nc-nom, prince, [n-1]), si('Laurent', npp-nam, 'Laurent', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(fils, nc-nom, fils, [n-1]), si(cadet, nc-nom, cadet, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(roi, nc-nom, roi, [n-1]), si('Albert', npp-nam, 'Albert', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(interrogé, vpp-ver:pper, interroger, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(hier, adv-adv, hier, [dr(0,dl(1,s,s),n)-1]), si(soir, nc-nom, soir, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(assiste, v-ver:pres, assister, [dr(0,dl(0,np,s),pp)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(séance, nc-nom, séance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Hasselt', npp-nam, 'Hasselt', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fraude, nc-nom, fraude, [n-1]), si(maritime, adj-adj, maritime, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(passionne, v-ver:pres, passionner, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(belges, adj-adj, belge, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(381, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(roi, nc-nom, roi, [n-1]), si('Albert', npp-nam, 'Albert', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prince, nc-nom, prince, [n-1]), si('Laurent', npp-nam, 'Laurent', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(382, Result) :-
      prob_parse([ si('Adam', npp-nam, 'Adam', [dr(0,np,np)-1]), si('DePrisco', npp-nam, 'DePrisco', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), si(homme, nc-nom, homme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(19, det-num, 19, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(originaire, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Woodbridge', npp-nam, 'Woodbridge', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Ontario', npp-nam, 'Ontario', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvé, vpp-ver:pper, retrouver, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(mort, adj-adj, mort, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Acapulco', npp-nam, 'Acapulco', [np-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), si('Mexique', npp-nam, 'Mexique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(383, Result) :-
      prob_parse([ si('Adam', npp-nam, 'Adam', [dr(0,np,np)-1]), si('DePrisco', npp-nam, 'DePrisco', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tué, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Mexique', npp-nam, 'Mexique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(384, Result) :-
      prob_parse([ si('DePrisco', npp-nam, 'DePrisco', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si('Canadien', nc-nam, 'Canadien', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(décédé, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Mexique', npp-nam, 'Mexique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('Nancy', npp-nam, 'Nancy', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Domenic', npp-nam, 'Domenic', [dr(0,np,np)-1]), si('Ianiero', npp-nam, 'Ianiero', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(couple, nc-nom, couple, [n-1]), si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(originaire, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Woodbridge', npp-nam, 'Woodbridge', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(poignardé, vpp-ver:pper, poignarder, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(mort, nc-nom, mort, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(hôtel, nc-nom, hôtel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(luxe, nc-nom, luxe, [n-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Cancun', npp-nam, 'Cancun', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(également, adv-adv, également, [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(destination, nc-nom, destination, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vacances, nc-nom, vacance, [n-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(385, Result) :-
      prob_parse([ si('Nancy', npp-nam, 'Nancy', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Domenic', npp-nam, 'Domenic', [dr(0,np,np)-1]), si('Ianiero', npp-nam, 'Ianiero', [np-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(citoyenneté, nc-nom, citoyenneté, [n-1]), si(canadienne, adj-adj, canadien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(386, Result) :-
      prob_parse([ si('DePrisco', npp-nam, 'DePrisco', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si('Canadien', nc-nam, 'Canadien', [n-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(décédé, vpp-ver:pper, décéder, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Mexique', npp-nam, 'Mexique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), si('Nancy', npp-nam, 'Nancy', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Domenic', npp-nam, 'Domenic', [dr(0,np,np)-1]), si('Ianiero', npp-nam, 'Ianiero', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(couple, nc-nom, couple, [n-1]), si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(originaire, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Woodbridge', npp-nam, 'Woodbridge', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(poignardé, vpp-ver:pper, poignarder, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(mort, nc-nom, mort, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(hôtel, nc-nom, hôtel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(luxe, nc-nom, luxe, [n-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Cancun', npp-nam, 'Cancun', [np-1]), si(',', ponct-pun, ',', [np-1]), si(également, adv-adv, également, [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(destination, nc-nom, destination, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vacances, nc-nom, vacance, [n-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(387, Result) :-
      prob_parse([ si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), si('Ianiero', npp-nam, 'Ianiero', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tuée, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Mexique', npp-nam, 'Mexique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(388, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(considérée, vpp-ver:pper, considérer, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(surprenante, adj-adj, surprenant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Banque', nc-nam, 'Banque', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(relevé, vpp-ver:pper, relever, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(intérêt, nc-nom, intérêt, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(1,s,s)),np)-1]), si('5,25', det-num, '5,25', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(389, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(intérêt, nc-nom, intérêt, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passés, vpp-ver:pper, passer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), si('5,25', det-num, '5,25', [dr(0,np,n)-1]), si('%.', nc-abr, '%.', [n-1])], Result).
sent(390, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(vendredi, nc-nom, vendredi, [dr(0,n,n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Saskatchewan', npp-nam, 'Saskatchewan', [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(succombé, vpp-ver:pper, succomber, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tempête, nc-nom, tempête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(391, Result) :-
      prob_parse([ si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tuées, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(tempête, nc-nom, tempête, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Saskatchewan', npp-nam, 'Saskatchewan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(392, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(différend, nc-nom, différend, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(apparu, vpp-ver:pper, apparaître, [dr(0,dl(0,np,s_ppart),pp)-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fabricant, nc-nom, fabricant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('iPhone', npp-nam, 'iPhone', [n-1]), si('(', ponct-pun, '(', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(présenté, vpp-ver:pper, présenter, [dl(0,np,s_pass)-1]), si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(')', ponct-pun, ')', [let-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si('Apple', npp-nam, 'Apple', [np-1]), si('Inc', npp-nam, 'Inc', [dl(0,np,np)-1]), si('-', ponct-pun, '-', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(leader, nc-nom, leader, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(systèmes, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(communication, nc-nom, communication, [n-1]), si(',', ponct-pun, ',', [let-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Jose', npp-nam, 'Jose', [np-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si('Cisco', npp-nam, 'Cisco', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(393, Result) :-
      prob_parse([ si('Apple', npp-nam, 'Apple', [np-1]), si('Inc', npp-nam, 'Inc', [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(394, Result) :-
      prob_parse([ si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Jose', npp-nam, 'Jose', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(395, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(différend, nc-nom, différend, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(apparu, vpp-ver:pper, apparaître, [dr(0,dl(0,np,s_ppart),pp)-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fabricant, nc-nom, fabricant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('iPhone', npp-nam, 'iPhone', [n-1]), si('(', ponct-pun, '(', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(présenté, vpp-ver:pper, présenter, [dl(0,np,s_pass)-1]), si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(')', ponct-pun, ')', [let-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si('Apple', npp-nam, 'Apple', [np-1]), si('Inc', npp-nam, 'Inc', [dl(0,np,np)-1]), si('-', ponct-pun, '-', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(leader, nc-nom, leader, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(systèmes, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réseaux, nc-nom, réseau, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(communication, nc-nom, communication, [n-1]), si(',', ponct-pun, ',', [let-1]), si(basé, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Jose', npp-nam, 'Jose', [np-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si('Cisco', npp-nam, 'Cisco', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(396, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('iPhone', nc-abr, 'iPhone', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(produit, vpp-ver:pper, produire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Cisco', npp-nam, 'Cisco', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(397, Result) :-
      prob_parse([ si('Cisco', npp-nam, 'Cisco', [np-1]), si(déclare, v-ver:pres, déclarer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marque, nc-nom, marque, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2000, pro-num, 2000, [np-1]), si(',', ponct-pun, ',', [let-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dépassé, vpp-ver:pper, dépasser, [dr(0,dl(0,np,s_ppart),np)-1]), si('Infogear', npp-nam, 'Infogear', [dr(0,np,np)-1]), si('Technology', npp-nam, 'Technology', [dr(0,np,np)-1]), si('Corp', npp-nam, 'Corp', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(398, Result) :-
      prob_parse([ si('Cisco', npp-nam, 'Cisco', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rachetée, vpp-ver:pper, racheter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Infogear', npp-nam, 'Infogear', [dr(0,np,np)-1]), si('Technology', npp-nam, 'Technology', [dr(0,np,np)-1]), si('Corp', et-abr, 'Corp', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(399, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(tempête, nc-nom, tempête, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(perdre, vinf-ver:infi, perdre, [dl(0,np,s_inf)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(courant, nc-nom, courant, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('125.000', det-num, '125.000', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Saint-Louis', npp-nam, 'Saint-Louis', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Missouri', npp-nam, 'Missouri', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(disent, v-ver:pres, dire, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(perdent, v-ver:pres, perdre, [dr(0,dl(0,np,s),np)-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(gens, nc-nom, gens, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(services, nc-nom, service, [n-1]), si(publics, adj-adj, public, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Springfield', npp-nam, 'Springfield', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Ern', npp-nam, 'Ern', [dr(0,np,np)-1]), si('DeCamp', npp-nam, 'DeCamp', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(400, Result) :-
      prob_parse([ si('125.000', det-num, '125.000', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tuées, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(tempête, nc-nom, tempête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(401, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(séisme, nc-nom, séisme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(magnitude, nc-nom, magnitude, [n-1]), si('8,3', adj-num, '8,3', [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(océan, nc-nom, océan, [n-1]), si('Pacifique', npp-nam, 'Pacifique', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Agence', nc-nam, 'Agence', [n-1]), si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(émis, vpp-ver:pper, émettre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(alerte, nc-nom, alerte, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(côte, nc-nom, côte, [n-1]), si('nord-est', nc-nom, 'nord-est', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hokkaido', npp-nam, 'Hokkaido', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(alerte, nc-nom, alerte, [n-1]), si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(importante, adj-adj, important, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Honshu', npp-nam, 'Honshu', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(402, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(frappé, vpp-ver:pper, frapper, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(côte, nc-nom, côte, [n-1]), si('nord-est', nc-nom, 'nord-est', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Hokkaido', npp-nam, 'Hokkaido', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(403, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tueur, nc-nom, tueur, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(série, nc-nom, série, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mumbai', npp-nam, 'Mumbai', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(personne, nc-nom, personne, [n-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(nuit, nc-nom, nuit, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si(';', ponct-pun, ';', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(faisant, vpr-ver:ppre, faire, [dr(0,dr(0,dl(0,np,s_ppres),np),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(dernier, nc-nom, dernier, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(jeunes, adj-adj, jeune, [dr(0,n,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(assassinés, vpp-ver:pper, assassiner, [dl(0,n,n)-1]), si(récemment, adv-adv, récemment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(404, Result) :-
      prob_parse([ si('Cinq', det-num, 'Cinq', [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tués, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tueur, nc-nom, tueur, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(série, nc-nom, série, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Mumbai', npp-nam, 'Mumbai', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(405, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bombay', npp-nam, 'Bombay', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(90, det-num, 90, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(chargée, vpp-ver:pper, charger, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tueur, nc-nom, tueur, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(série, nc-nom, série, [n-1]), si(',', ponct-pun, ',', [let-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(fonctionnaire, nc-nom, fonctionnaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(police, nc-nom, police, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(comparé, vpp-ver:pper, comparer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Raman', npp-nam, 'Raman', [dr(0,np,np)-1]), si('Raghav', npp-nam, 'Raghav', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(matraqué, vpp-ver:pper, matraquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(9, det-num, 9, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, det-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(trottoirs, nc-nom, trottoir, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(sommeil, nc-nom, sommeil, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(1960, adj-num, 1960, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(406, Result) :-
      prob_parse([ si('Raman', npp-nam, 'Raman', [dr(0,np,np)-1]), si('Raghav', npp-nam, 'Raghav', [np-1]), si(travaille, v-ver:pres, travailler, [dl(0,np,s)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(fonctionnaire, nc-nom, fonctionnaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(police, nc-nom, police, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(407, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bombay', npp-nam, 'Bombay', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(90, det-num, 90, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(chargée, vpp-ver:pper, charger, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tueur, nc-nom, tueur, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(série, nc-nom, série, [n-1]), si(',', ponct-pun, ',', [let-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(comparé, vpp-ver:pper, comparer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Raman', npp-nam, 'Raman', [dr(0,np,np)-1]), si('Raghav', npp-nam, 'Raghav', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(matraqué, vpp-ver:pper, matraquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(9, det-num, 9, [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, det-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(trottoirs, nc-nom, trottoir, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(sommeil, nc-nom, sommeil, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(1960, adj-num, 1960, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(408, Result) :-
      prob_parse([ si(9, det-num, 9, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(assassinées, vpp-ver:pper, assassiner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Raman', npp-nam, 'Raman', [dr(0,np,np)-1]), si('Raghav', npp-nam, 'Raghav', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(409, Result) :-
      prob_parse([ si('Arnold', npp-nam, 'Arnold', [dr(0,np,np)-1]), si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(surtout, adv-adv, surtout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('Terminator', npp-nam, 'Terminator', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(valu, vpp-ver:pper, valoir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(surnom, nc-nom, surnom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Governator', npp-nam, 'Governator', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(invité, vpp-ver:pper, inviter, [dr(0,pp_par,np)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bureau, nc-nom, bureau, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(410, Result) :-
      prob_parse([ si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(attentes, nc-nom, attente, [n-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(élevées, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(réduction, nc-nom, réduction, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(émissions, nc-nom, émission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(411, Result) :-
      prob_parse([ si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), si('Harper', npp-nam, 'Harper', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(412, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PM', nc-abr, 'PM', [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Governator', npp-nam, 'Governator', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rencontrés, vpp-ver:pper, rencontrer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rendus, vpp-ver:pper, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Mexique', npp-nam, 'Mexique', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(investiture, nc-nom, investiture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), si('Calderón', npp-nam, 'Calderón', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Mexique', npp-nam, 'Mexique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(413, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('PM', nc-abr, 'PM', [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(investiture, nc-nom, investiture, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Mexique', npp-nam, 'Mexique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(414, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(abattu, vpp-ver:pper, abattre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, pro-num, un, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(anciens, adj-adj, ancien, [dr(0,n,n)-1]), si(satellites, nc-nom, satellite, [n-1]), si(météorologiques, adj-adj, météorologique, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(missile, nc-nom, missile, [n-1]), si(balistique, adj-adj, balistique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(inquiètent, v-ver:pres, inquiéter, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(415, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(attaqué, vpp-ver:pper, attaquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(416, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('Apple', npp-nam, 'Apple', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(78, det-num, 78, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(bénéfices, nc-nom, bénéfice, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(trimestre, nc-nom, trimestre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(terminé, vpp-ver:pper, terminer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(30, adj-num, 30, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2006, adj-num, 2006, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(417, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(bénéfices, nc-nom, bénéfice, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Apple', npp-nam, 'Apple', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(78, det-num, 78, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(trimestre, nc-nom, trimestre, [n-1]), si(2006, adj-num, 2006, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(418, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(disparu, vpp-ver:pper, disparaître, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jungles, nc-nom, jungle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Cambodge', npp-nam, 'Cambodge', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(âge, nc-nom, âge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(8, det-num, 8, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvée, vpp-ver:pper, retrouver, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(vécu, vpp-ver:pper, vivre, [dl(0,np,s_ppart)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(enfant, nc-nom, enfant, [n-1]), si(sauvage, adj-adj, sauvage, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(19, det-num, 19, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(419, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(identifiée, vpp-ver:pper, identifier, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,n,n),np)-1]), si('Rochom', npp-nam, 'Rochom', [dr(0,np,np)-1]), si('P\'ngieng', npp-nam, 'P\'ngieng', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(disparu, vpp-ver:pper, disparaître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1988, pro-num, 1988, [np-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(gardait, v-ver:impf, garder, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(buffles, nc-nom, buffle, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(reculée, vpp-ver:pper, reculé, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jungles, nc-nom, jungle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('nord-est', nc-nom, 'nord-est', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Cambodge', npp-nam, 'Cambodge', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(420, Result) :-
      prob_parse([ si('Rochom', npp-nam, 'Rochom', [dr(0,np,np)-1]), si('P\'ngieng', npp-nam, 'P\'ngieng', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(disparu, vpp-ver:pper, disparaître, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jungles, nc-nom, jungle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Cambodge', npp-nam, 'Cambodge', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(421, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(philippine, adj-adj, philippin, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CHR', npp-abr, 'CHR', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(divers, adj-adj, divers, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(qualifié, vpp-ver:pper, qualifier, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(exagéré, adj-adj, exagéré, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(capitole, nc-nom, capitole, [n-1]), si(provincial, adj-adj, provincial, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Iloilo', npp-nam, 'Iloilo', [np-1]), si(',', ponct-pun, ',', [let-1]), si(mercredi, nc-nom, mercredi, [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(422, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si('Niel', npp-nam, 'Niel', [dl(0,n,n)-1]), si('Tupas', npp-nam, 'Tupas', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Sr', nc-abr, 'Sr', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(423, Result) :-
      prob_parse([ si(et, cc-kon, et, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(capitole, nc-nom, capitole, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(policiers, nc-nom, policier, [n-1]), si(armés, vpp-ver:pper, armer, [dr(0,dl(0,n,n),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(fusils, nc-nom, fusil, [n-1]), si('M-16', npp-nam, 'M-16', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(capitole, nc-nom, capitole, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(brisé, vpp-ver:pper, briser, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(portes, nc-nom, porte, [n-1]), si(vitrées, adj-adj, vitrer, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(détruit, v-ver:pres, détruire, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(portes, nc-nom, porte, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(fer, nc-nom, fer, [n-1]), si(cadenassées, vpp-ver:pper, cadenasser, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(424, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(fusils, nc-nom, fusil, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pointés, vpp-ver:pper, pointer, [dl(0,np,s_pass)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(425, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si(philippins, adj-adj, philippin, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tués, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(426, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(philippine, adj-adj, philippin, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CHR', npp-abr, 'CHR', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(divers, adj-adj, divers, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(qualifié, vpp-ver:pper, qualifier, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(exagéré, adj-adj, exagéré, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(capitole, nc-nom, capitole, [n-1]), si(provincial, adj-adj, provincial, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Iloilo', npp-nam, 'Iloilo', [np-1]), si(',', ponct-pun, ',', [let-1]), si(mercredi, nc-nom, mercredi, [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(427, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si('Niel', npp-nam, 'Niel', [dl(0,n,n)-1]), si('Tupas', npp-nam, 'Tupas', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Sr', nc-abr, 'Sr', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(428, Result) :-
      prob_parse([ si(et, cc-kon, et, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(capitole, nc-nom, capitole, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(policiers, nc-nom, policier, [n-1]), si(armés, vpp-ver:pper, armer, [dr(0,dl(0,n,n),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(fusils, nc-nom, fusil, [n-1]), si('M-16', npp-nam, 'M-16', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(capitole, nc-nom, capitole, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(brisé, vpp-ver:pper, briser, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(portes, nc-nom, porte, [n-1]), si(vitrées, adj-adj, vitrer, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(détruit, v-ver:pres, détruire, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(portes, nc-nom, porte, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(fer, nc-nom, fer, [n-1]), si(cadenassées, vpp-ver:pper, cadenasser, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(429, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(fusils, nc-nom, fusil, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pointés, vpp-ver:pper, pointer, [dl(0,np,s_pass)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(civils, nc-nom, civil, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(430, Result) :-
      prob_parse([ si('Niel', npp-nam, 'Niel', [dr(0,np,np)-1]), si('Tupas', npp-nam, 'Tupas', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dl(0,np,s_pass)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(431, Result) :-
      prob_parse([ si('Baena', npp-nam, 'Baena', [dr(0,np,np)-1]), si('Soares', npp-nam, 'Soares', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(évacué, vpp-ver:pper, évacuer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôtel, nc-nom, hôtel, [n-1]), si('Sheraton', npp-nam, 'Sheraton', [dl(0,n,n)-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(siège, nc-nom, siège, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('état-major', nc-nom, 'état-major', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(rencontré, vpp-ver:pper, rencontrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(hautes, adj-adj, haut, [dr(0,n,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(salvadoriennes, adj-adj, salvadorien, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(sources, nc-nom, source, [n-1]), si(diplomatiques, adj-adj, diplomatique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(432, Result) :-
      prob_parse([ si('Baena', npp-nam, 'Baena', [dr(0,np,np)-1]), si('Soares', npp-nam, 'Soares', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(armées, adj-adj, armé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(433, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('FMLN', npp-abr, 'FMLN', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lancé, vpp-ver:pper, lancer, [dr(0,dl(0,np,s_ppart),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(agression, nc-nom, agression, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(utilisant, vpr-ver:ppre, utiliser, [dr(0,dl(0,np,s_ppres),np)-1]), si(principalement, adv-adv, principalement, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(concentration, nc-nom, concentration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combattants, nc-nom, combattant, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(métropolitaine, adj-adj, métropolitain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Salvador', npp-nam, 'Salvador', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(434, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('FMLN', npp-abr, 'FMLN', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Salvador', npp-nam, 'Salvador', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(435, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sait, v-ver:pres, savoir, [dr(0,dl(0,np,s),s_whq)-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(instant, nc-nom, instant, [n-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(proches, nc-nom, proche, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réclamé, vpp-ver:pper, réclamer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(quatre, adj-num, quatre, [dr(0,n,n)-1]), si(militaires, nc-nom, militaire, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tués, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(crash, nc-nom, crash, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(436, Result) :-
      prob_parse([ si('Quatre', det-num, 'Quatre', [dr(0,np,n)-1]), si(militaires, nc-nom, militaire, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(morts, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accident, nc-nom, accident, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(avion, nc-nom, avion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(437, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(match, nc-nom, match, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Universiade', nc-nam, 'Universiade', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(2007, adj-num, 2007, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(hockey, nc-nom, hockey, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(battu, vpp-ver:pper, battre, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('5-0', adj-num, '5-0', [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(match, nc-nom, match, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(locale, adj-adj, local, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dl(0,np,s_ppart)-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Kazakhstan', npp-nam, 'Kazakhstan', [n-1]), si('3-1', pro-num, '3-1', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(438, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(battu, vpp-ver:pper, battre, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(439, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(match, nc-nom, match, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Universiade', nc-nam, 'Universiade', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(2007, adj-num, 2007, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(hockey, nc-nom, hockey, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(battu, vpp-ver:pper, battre, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('5-0', adj-num, '5-0', [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(match, nc-nom, match, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(locale, adj-adj, local, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dl(0,np,s_ppart)-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Kazakhstan', npp-nam, 'Kazakhstan', [n-1]), si('3-1', pro-num, '3-1', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(440, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(battu, vpp-ver:pper, battre, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Kazakhstan', npp-nam, 'Kazakhstan', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(441, Result) :-
      prob_parse([ si('Aux', p+d-prp:det, 'Aux', [dr(0,dr(0,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(agression, nc-nom, agression, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(couteau, nc-nom, couteau, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), si(régionale, adj-adj, régional, [dl(0,n,n)-1]), si('Lincoln-Sudbury', npp-nam, 'Lincoln-Sudbury', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Sudbury', npp-nam, 'Sudbury', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(élèves, nc-nom, élève, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(442, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(agression, nc-nom, agression, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(couteau, nc-nom, couteau, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(produite, vpp-ver:pper, produire, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si('7h20', npp-num, '7h20', [dr(0,np,np)-1]), si('HNE', npp-abr, 'HNE', [n-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(443, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(bagarre, nc-nom, bagarre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(éclaté, vpp-ver:pper, éclater, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(toilettes, nc-nom, toilette, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(garçons, nc-nom, garçon, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victime, nc-nom, victime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('James', npp-nam, 'James', [dr(0,np,np)-1]), si('Alenson', npp-nam, 'Alenson', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(suspect, nc-nom, suspect, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Odgren', npp-nam, 'Odgren', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bagarre, nc-nom, bagarre, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(répandue, vpp-ver:pper, répandre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(couloir, nc-nom, couloir, [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coup, nc-nom, coup, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(couteau, nc-nom, couteau, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(444, Result) :-
      prob_parse([ si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Odgren', npp-nam, 'Odgren', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(suspecté, vpp-ver:pper, suspecter, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(poignardé, vpp-ver:pper, poignarder, [dr(0,dl(0,np,s_ppart),np)-1]), si('James', npp-nam, 'James', [dr(0,np,np)-1]), si('Alenson', npp-nam, 'Alenson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(445, Result) :-
      prob_parse([ si('Aux', p+d-prp:det, 'Aux', [dr(0,dr(0,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(agression, nc-nom, agression, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(couteau, nc-nom, couteau, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), si(régionale, adj-adj, régional, [dl(0,n,n)-1]), si('Lincoln-Sudbury', npp-nam, 'Lincoln-Sudbury', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Sudbury', npp-nam, 'Sudbury', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(élèves, nc-nom, élève, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(446, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(agression, nc-nom, agression, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(couteau, nc-nom, couteau, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(produite, vpp-ver:pper, produire, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si('7h20', npp-num, '7h20', [dr(0,np,np)-1]), si('HNE', npp-abr, 'HNE', [n-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(447, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(bagarre, nc-nom, bagarre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(éclaté, vpp-ver:pper, éclater, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(toilettes, nc-nom, toilette, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(garçons, nc-nom, garçon, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(victime, nc-nom, victime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('James', npp-nam, 'James', [dr(0,np,np)-1]), si('Alenson', npp-nam, 'Alenson', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(suspect, nc-nom, suspect, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Odgren', npp-nam, 'Odgren', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bagarre, nc-nom, bagarre, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(répandue, vpp-ver:pper, répandre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(couloir, nc-nom, couloir, [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coup, nc-nom, coup, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(couteau, nc-nom, couteau, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(448, Result) :-
      prob_parse([ si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Odgren', npp-nam, 'Odgren', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédé, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), si(régionale, adj-adj, régional, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lincoln-Sudbury', npp-nam, 'Lincoln-Sudbury', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(449, Result) :-
      prob_parse([ si('Berlin', npp-nam, 'Berlin', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(point, nc-nom, point, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(repère, nc-nom, repère, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(450, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grues, nc-nom, grue, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(dominent, v-ver:pres, dominer, [dr(0,dl(0,np,s),np)-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(horizon, nc-nom, horizon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(récente, adj-adj, récent, [dr(0,n,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(dresse, v-ver:pres, dresse, [dr(0,dl(0,cl_r,s),np)-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chancellerie, nc-nom, chancellerie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(vivra, v-ver:simp, vivre, [dr(0,s,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si('Gerhard', npp-nam, 'Gerhard', [dl(0,n,n)-1]), si('Schroeder', npp-nam, 'Schroeder', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cabinet, nc-nom, cabinet, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si(tiendra, v-ver:futu, tenir, [dr(0,dl(0,np,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(réunions, nc-nom, réunion, [n-1]), si(régulières, adj-adj, régulier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(451, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(érigés, vpp-ver:pper, ériger, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(452, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(bâtiment, nc-nom, bâtiment, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Reichstag', npp-nam, 'Reichstag', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(construit, vpp-ver:pper, construire, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(abriter, vinf-ver:infi, abriter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Reichstag', npp-nam, 'Reichstag', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(originel, adj-adj, originel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Empire', npp-nam, 'Empire', [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(453, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(inauguré, vpp-ver:pper, inaugurer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1894, pro-num, 1894, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(abrité, vpp-ver:pper, abriter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Reichstag', npp-nam, 'Reichstag', [n-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(1933, pro-num, 1933, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(454, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(construits, vpp-ver:pper, construire, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(455, Result) :-
      prob_parse([ si('Seule', adv-adv, 'Seule', [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(poignée, nc-nom, poignée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ambassades, nc-nom, ambassade, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(principalement, adv-adv, principalement, [dr(0,np,np)-1]), si(celles, pro-pro:dem, celui, [np-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,np,np),n)-1]), si('États', nc-nam, 'États', [n-1]), si(accrédités, vpp-ver:pper, accréditer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('République', npp-nam, 'République', [n-1]), si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('RDA', npp-abr, 'RDA', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(existants, vpp-ver:ppre, existant, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(456, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(ambassades, nc-nom, ambassade, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dû, vpp-ver:pper, devoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(adapter, vinf-ver:infi, adapter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(place, nc-nom, place, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(nouvel, adj-adj, nouveau, [dr(0,n,n)-1]), si(usage, nc-nom, usage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(457, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(construits, vpp-ver:pper, construire, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(458, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(avérée, vpp-ver:pper, avérer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(précise, adj-adj, précis, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prototype, nc-nom, prototype, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(électrofaible, adj-adj, électrofaible, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(rassemble, v-ver:pres, rassembler, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(électromagnétiques, adj-adj, électromagnétique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(nucléaires, adj-adj, nucléaire, [dl(0,n,n)-1]), si(faibles, adj-adj, faible, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(valu, vpp-ver:pper, valoir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Nobel', nc-nam, 'Nobel', [n-1]), si(1979, adj-num, 1979, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Sheldon', npp-nam, 'Sheldon', [dr(0,np,np)-1]), si('L.', npp-abr, 'L.', [dr(0,np,np)-1]), si('Glashow', npp-nam, 'Glashow', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Abdus', npp-nam, 'Abdus', [dr(0,np,np)-1]), si('Salam', npp-nam, 'Salam', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Steven', npp-nam, 'Steven', [dr(0,np,np)-1]), si('Weinberg', npp-nam, 'Weinberg', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(459, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(électrofaible, adj-adj, électrofaible, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(confirmée, vpp-ver:pper, confirmer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(460, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accélération, nc-nom, accélération, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(univers, nc-nom, univers, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(changé, vpp-ver:pper, changer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(façon, nc-nom, façon, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),s)-1]), si(nous, cls-pro:per, nous, [np-1]), si(envisageons, v-ver:pres, envisager, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(problème, nc-nom, problème, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vide, nc-nom, vide, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(461, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(lieu, nc-nom, lieu, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(expliquer, vinf-ver:infi, expliquer, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(nulle, adj-adj, nul, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(nous, cls-pro:per, nous, [np-1]), si(essayons, v-ver:pres, essayer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(comprendre, vinf-ver:infi, comprendre, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(anormalement, adv-adv, anormalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(petite, adj-adj, petit, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(462, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(observations, nc-nom, observation, [n-1]), si(cosmologiques, adj-adj, cosmologique, [dl(0,n,n)-1]), si(récentes, adj-adj, récent, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(univers, nc-nom, univers, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plat, adj-adj, plat, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(presque, adv-adv, presque, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(exactement, adv-adv, exactement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plat, adj-adj, plat, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(prédictions, nc-nom, prédiction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(inflationniste, adj-adj, inflationniste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(463, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(électrofaible, adj-adj, électrofaible, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(confirmée, vpp-ver:pper, confirmer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(464, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(arrivé, vpp-ver:pper, arriver, [dl(0,np,s_ppart)-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crème, nc-nom, crème, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(voyous, nc-nom, voyou, [n-1]), si(anglais, adj-adj, anglais, [dl(0,n,n)-1]), si(fumait, v-ver:impf, fumer, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(herbe, nc-nom, herbe, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(légalement, adv-adv, légalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(disponible, adj-adj, disponible, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(465, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(drogues, nc-nom, drogue, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Hollande', npp-nam, 'Hollande', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(achètent, v-ver:pres, acheter, [dl(0,cl_r,dl(0,np,s))-1]), si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(466, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(politiques, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lutte, nc-nom, lutte, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(drogue, nc-nom, drogue, [n-1]), si(vantées, vpp-ver:pper, vanter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), si(légalisation, nc-nom, légalisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vente, nc-nom, vente, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cannabis, nc-nom, cannabis, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(désormais, adv-adv, désormais, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(célèbres, adj-adj, célèbre, [dr(0,n,n)-1]), si(coffee, et-adj, coffee, [n-1]), si(shops, nc-nom, shops, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(adoption, nc-nom, adoption, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(attitude, nc-nom, attitude, [n-1]), si(généralement, adv-adv, généralement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(indulgente, adj-adj, indulgent, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(égard, nc-nom, égard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(drogue, nc-nom, drogue, [n-1]), si('-', ponct-pun, '-', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(pays, nc-nom, pays, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(stupéfiants, nc-nom, stupéfiant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(occidentale, adj-adj, occidental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(467, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(drogue, nc-nom, drogue, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Hollande', npp-nam, 'Hollande', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(achète, v-ver:pres, acheter, [dl(0,cl_r,dl(0,np,s))-1]), si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(468, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(fortes, adj-adj, fort, [dr(0,n,n)-1]), si(pluies, nc-nom, pluie, [n-1]), si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),np),n)-1]), si(travers, nc-nom, travers, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(orientale, adj-adj, oriental, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(conditions, nc-nom, condition, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(inondation, nc-nom, inondation, [n-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vues, vpp-ver:pper, voir, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(siècles, nc-nom, siècle, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(tuant, vpr-ver:ppre, tuer, [dr(0,dl(0,np,s_ppres),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(100, det-num, 100, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(forçant, vpr-ver:ppre, forcer, [dr(0,dl(0,np,s_ppres),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(évacuation, nc-nom, évacuation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(autres, adj-adj, autre, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(dévastant, vpr-ver:ppre, dévaster, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('centres-villes', nc-nom, 'centres-villes', [n-1]), si(historiques, adj-adj, historique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('République', npp-nam, 'République', [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(469, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(inondations, nc-nom, inondation, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(communautés, nc-nom, communauté, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Autriche', npp-nam, 'Autriche', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(470, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(inondations, nc-nom, inondation, [n-1]), si(ravagent, v-ver:pres, ravager, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(471, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(secouristes, nc-nom, secouriste, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(achevé, vpp-ver:pper, achever, [dr(0,dl(0,np,s_ppart),np)-1]), si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(évacuation, nc-nom, évacuation, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(pont, nc-nom, pont, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quartier, nc-nom, quartier, [n-1]), si(riverain, adj-adj, riverain, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), si(moitié, nc-nom, moitié, [n-1]), si(submergé, vpp-ver:pper, submerger, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(suisse, adj-adj, suisse, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(méridionale, adj-adj, méridional, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(frappée, vpp-ver:pper, frapper, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(inondations, nc-nom, inondation, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_ppart),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(42, det-num, 42, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(472, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(inondations, nc-nom, inondation, [n-1]), si(ravagent, v-ver:pres, ravager, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(473, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(célébrations, nc-nom, célébration, [n-1]), si(gigantesques, adj-adj, gigantesque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(marquer, vinf-ver:infi, marquer, [dr(0,dl(0,np,s_inf),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(adhésion, nc-nom, adhésion, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(17, det-num, 17, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(ans, nc-nom, an, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chute, nc-nom, chute, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(communisme, nc-nom, communisme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(474, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(élargit, v-ver:pres, élargir, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(composition, nc-nom, composition, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(475, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(élargissement, nc-nom, élargissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(25, det-num, 25, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(2004, adj-num, 2004, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(adhésion, nc-nom, adhésion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(10, pro-num, 10, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(candidats, nc-nom, candidat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(476, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suivi, vpp-ver:pper, suivre, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2007, adj-num, 2007, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(477, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(élargit, v-ver:pres, élargir, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(composition, nc-nom, composition, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(478, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(poids, nc-nom, poids, [n-1]), si(lourd, adj-adj, lourd, [dl(0,n,n)-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ce, cls-pro:dem, ce, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(monolithe, nc-nom, monolithe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(479, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(travaille, v-ver:pres, travailler, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bien, nc-nom, bien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(propres, adj-adj, propre, [dr(0,n,n)-1]), si(membres, nc-nom, membre, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(prend, v-ver:pres, prendre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(compte, nc-nom, compte, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bien, nc-nom, bien, [n-1]), si(global, adj-adj, global, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(480, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(élargit, v-ver:pres, élargir, [dr(0,dl(0,np,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(481, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1850, pro-num, 1850, [np-1]), si(encore, adv-adv, encore, [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(cependant, adv-adv, cependant, [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dr(0,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(était, v-ver:impf, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(possible, adj-adj, possible, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(objecteurs, nc-nom, objecteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(conscience, nc-nom, conscience, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(exemption, nc-nom, exemption, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(engageant, vpr-ver:ppre, engager, [dr(0,dl(0,np,s_ppres),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(remplaçant, nc-nom, remplaçant, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(chefs, nc-nom, chef, [n-1]), si(religieux, adj-adj, religieux, [dl(0,n,n)-1]), si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(opposés, vpp-ver:pper, opposer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(service, nc-nom, service, [n-1]), si(volontaire, adj-adj, volontaire, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(482, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(objecteurs, nc-nom, objecteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(conscience, nc-nom, conscience, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(voient, v-ver:pres, voir, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), si(confier, vinf-ver:infi, confier, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tâches, nc-nom, tâche, [n-1]), si(particulières, adj-adj, particulier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(483, Result) :-
      prob_parse([ si('Près', adv-adv, 'Près', [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(siècle, nc-nom, siècle, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(achevé, vpp-ver:pper, achever, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(conscrits, nc-nom, conscrit, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(terminé, vpp-ver:pper, terminer, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(484, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(objecteurs, nc-nom, objecteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(conscience, nc-nom, conscience, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(voient, v-ver:pres, voir, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), si(confier, vinf-ver:infi, confier, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tâches, nc-nom, tâche, [n-1]), si(particulières, adj-adj, particulier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(485, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(athlètes, nc-nom, athlète, [n-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(célèbres, adj-adj, célèbre, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Darryl', npp-nam, 'Darryl', [dr(0,np,np)-1]), si('Strawberry', npp-nam, 'Strawberry', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Dwight', npp-nam, 'Dwight', [dr(0,np,np)-1]), si('Gooden', npp-nam, 'Gooden', [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(baseball, nc-nom, baseball, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Gilberto', npp-nam, 'Gilberto', [dr(0,np,np)-1]), si('Simoni', npp-nam, 'Simoni', [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(cyclisme, nc-nom, cyclisme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Diego', npp-nam, 'Diego', [dr(0,np,np)-1]), si('Maradona', npp-nam, 'Maradona', [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(football, nc-nom, football, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tous, adv-adv, tout, [dr(0,dl(0,np,s_ppart),np)-1]), si(associé, vpp-ver:pper, associer, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, p-prp, de, [n-1]), si(manière, nc-nom, manière, [n-1]), si(indélébile, adj-adj, indélébile, [dl(0,n,n)-1]), si(la, det-det:art, le, [n-1]), si(cocaïne, nc-nom, cocaïne, [n-1]), si(et, cc-kon, et, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si(sport, nc-nom, sport, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(esprit, nc-nom, esprit, [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(innombrables, adj-adj, innombrable, [dr(0,dl(0,n,n),n)-1]), si(fans, nc-nom, fan, [n-1]), si(de, p-prp, de, [n-1]), si(sport, nc-nom, sport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(486, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(drogue, nc-nom, drogue, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(répandue, vpp-ver:pper, répandre, [dl(0,np,s_pass)-1]), si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(joueurs, nc-nom, joueur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(football, nc-nom, football, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(487, Result) :-
      prob_parse([ si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(1993, adj-num, 1993, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(transporté, vpp-ver:pper, transporter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(hélicoptère, nc-nom, hélicoptère, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si('Nevers', npp-nam, 'Nevers', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('Nièvre', npp-nam, 'Nièvre', [np-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvé, vpp-ver:pper, retrouver, [dr(0,dl(0,np,s_pass),pp)-1]), si(une, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(heure, nc-nom, heure, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coma, nc-nom, coma, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(balles, nc-nom, balle, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tête, nc-nom, tête, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(488, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), si(balle, nc-nom, balle, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(attribuée, vpp-ver:pper, attribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(réflexe, nc-nom, réflexe, [n-1]), si(nerveux, adj-adj, nerveux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(489, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(enquêteurs, nc-nom, enquêteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conclu, vpp-ver:pper, conclure, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(suicide, nc-nom, suicide, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(confirmant, vpr-ver:ppre, confirmer, [dr(0,dl(0,np,s_ppres),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(déposition, nc-nom, déposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(garde, nc-nom, garde, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(corps, nc-nom, corps, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(affirmé, vpp-ver:pper, affirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(lui, pro-pro:per, luire, [np-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(saisi, vpp-ver:pper, saisir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arme, nc-nom, arme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(garde, nc-nom, garde, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(plausible, adj-adj, plausible, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(version, nc-nom, version, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(faits, nc-nom, fait, [n-1]), si(parue, vpp-ver:pper, paraître, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(presse, nc-nom, presse, [n-1]), si(relatant, vpr-ver:ppre, relater, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rentré, vpp-ver:pper, rentrer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(seul, adj-adj, seul, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arme, nc-nom, arme, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(boîte, nc-nom, boîte, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(gants, nc-nom, gant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(490, Result) :-
      prob_parse([ si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(suicide, v-ver:pres, suicide, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(491, Result) :-
      prob_parse([ si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dr(0,s,s))),np)-1]), si(encore, adv-adv, encore, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mois, nc-nom, mois, [n-1]), si('Premier', det-num, 'Premier', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(apparemment, adv-adv, apparemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(laissé, vpp-ver:pper, laisser, [dr(0,dl(0,np,s_ppart),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(message, nc-nom, message, [n-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(tué, vpp-ver:pper, tuer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(arme, nc-nom, arme, [n-1]), si(empruntée, vpp-ver:pper, emprunter, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(492, Result) :-
      prob_parse([ si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(suicide, v-ver:pres, suicide, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(493, Result) :-
      prob_parse([ si('Premièrement', adv-adv, 'Premièrement', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(nous, cls-pro:per, nous, [np-1]), si(récoltons, v-ver:pres, récolter, [dr(0,dl(0,np,s),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(méthane, nc-nom, méthane, [n-1]), si(biogaz, nc-nom, biogaz, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(seulement, adv-adv, seulement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(des, p+d-prp:det, un, [dr(0,pp_de,n)-1]), si(effluents, nc-nom, effluent, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(élevage, nc-nom, élevage, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(des, p+d-prp:det, un, [dr(0,pp_de,n)-1]), si(eaux, nc-nom, eau, [n-1]), si(usées, adj-adj, user, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), si(aussi, adv-adv, aussi, [dr(0,np,np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(résidus, nc-nom, résidu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(culture, nc-nom, culture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(déchets, nc-nom, déchet, [n-1]), si(alimentaires, adj-adj, alimentaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(constituent, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(matière, nc-nom, matière, [n-1]), si(première, adj-num, premier, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(digesteur, nc-nom, digesteur, [n-1]), si(anaérobie, adj-adj, anaérobie, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(494, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(méthane, nc-nom, méthane, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(récolté, vpp-ver:pper, récolter, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(servir, vinf-ver:infi, servir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(combustible, nc-nom, combustible, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(495, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entraîné, vpp-ver:pper, entraîner, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(radiodiffusion, nc-nom, radiodiffusion, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(communistes, adj-adj, communiste, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(communistes, adj-adj, communiste, [dl(0,n,n)-1]), si(tentant, vpr-ver:ppre, tenter, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(influencer, vinf-ver:infi, influencer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(intérieure, adj-adj, intérieur, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(chacun, pro-pro:ind, chacun, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(496, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si('américano-soviétique', adj-adj, 'américano-soviétique', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(différend, nc-nom, différend, [n-1]), si(frontalier, adj-adj, frontalier, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conduit, vpp-ver:pper, conduire, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nombre, nc-nom, nombre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(émetteurs, nc-nom, émetteur, [n-1]), si(destinés, vpp-ver:pper, destiner, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(nations, nc-nom, nation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(développement, nc-nom, développement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(techniques, nc-nom, technique, [n-1]), si(telles, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lecture, nc-nom, lecture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bandes, nc-nom, bande, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(envers, nc-nom, envers, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(enregistreurs, nc-nom, enregistreur, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(bobines, nc-nom, bobine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(497, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(radio, nc-nom, radio, [n-1]), si(augmente, v-ver:pres, augmenter, [dl(0,np,s)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(guerres, nc-nom, guerre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(498, Result) :-
      prob_parse([ si('Suite', nc-nom, 'Suite', [dr(0,dr(0,s,s),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(succès, nc-nom, succès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(radio, nc-nom, radio, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(produit, vpp-ver:pper, produire, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1955, pro-num, 1955, [np-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('Field', npp-nam, 'Field', [n-1]), si('Manual', npp-nam, 'Manual', [dl(0,n,n)-1]), si(intitulé, vpp-ver:pper, intituler, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Psychological', npp-nam, 'Psychological', [dr(0,n,n)-1]), si('Warfare', npp-nam, 'Warfare', [dr(0,n,n)-1]), si('Operations', npp-nam, 'Operations', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('FM', npp-abr, 'FM', [n-1]), si('33-5', adj-num, '33-5', [dl(0,np,np)-1]), si(')', ponct-pun, ')', [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(discute, v-ver:pres, discuter, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(importance, nc-nom, importance, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(émissions, nc-nom, émission, [n-1]), si(radio, nc-nom, radio, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(opérations, nc-nom, opération, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(américaines, adj-adj, américain, [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(499, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(radio, nc-nom, radio, [n-1]), si(augmente, v-ver:pres, augmenter, [dl(0,np,s)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(guerres, nc-nom, guerre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(500, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(texte, nc-nom, texte, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dûment, adv-adv, dûment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Constitution', nc-nom, 'Constitution', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1996, pro-num, 1996, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entré, vpp-ver:pper, entrer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(vigueur, nc-nom, vigueur, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(1997, adj-num, 1997, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(501, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(modifié, vpp-ver:pper, modifier, [dl(0,np,s_pass)-1]), si(douze, det-num, douze, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(fois, nc-nom, fois, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(adoption, nc-nom, adoption, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(502, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si('Constitution', nc-nom, 'Constitution', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(503, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si(sommes, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(fiers, adj-adj, fier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(constitution, nc-nom, constitution, [n-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(égalité, nc-nom, égalité, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(langues, nc-nom, langue, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si(';', ponct-pun, ';', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(langues, nc-nom, langue, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(particulier, nc-nom, particulier, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(communautés, nc-nom, communauté, [n-1]), si('Khoi', npp-nam, 'Khoi', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('Nama', npp-nam, 'Nama', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('San', npp-nam, 'San', [dl(0,n,n)-1]), si(recevront, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attention, nc-nom, attention, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elles, cls-pro:per, lui, [np-1]), si(méritent, v-ver:pres, mériter, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(504, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si('Constitution', nc-nom, 'Constitution', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(505, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(amendements, nc-nom, amendement, [n-1]), si(proposés, vpp-ver:pper, proposer, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(acceptés, vpp-ver:pper, accepter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(assemblée, nc-nom, assemblée, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(statuts, nc-nom, statut, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(règlements, nc-nom, règlement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(amendements, nc-nom, amendement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(ratifiés, vpp-ver:pper, ratifier, [dl(0,np,s_pass)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prochaine, adj-adj, prochain, [dr(0,n,n)-1]), si('AGA', npp-abr, 'AGA', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Société', nc-nam, 'Société', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(506, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si('Constitution', nc-nom, 'Constitution', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(507, Result) :-
      prob_parse([ si(53, det-num, 53, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Temple', nc-nam, 'Temple', [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvés, vpp-ver:pper, retrouver, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(morts, adj-adj, mort, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(endroits, nc-nom, endroit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Suisse', npp-nam, 'Suisse', [n-1]), si(',', ponct-pun, ',', [let-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Genève', npp-nam, 'Genève', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(508, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Temple', nc-nam, 'Temple', [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvés, vpp-ver:pper, retrouver, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(morts, adj-adj, mort, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(509, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ordre', npp-nam, 'Ordre', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Temple', npp-nam, 'Temple', [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(69, det-num, 69, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(suicides, nc-nom, suicide, [n-1]), si(collectifs, adj-adj, collectif, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Suisse', npp-nam, 'Suisse', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('France', npp-nam, 'France', [n-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(1994, pro-num, 1994, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(1995, pro-num, 1995, [np-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parquet, nc-nom, parquet, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(510, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Temple', nc-nam, 'Temple', [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvés, vpp-ver:pper, retrouver, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(morts, adj-adj, mort, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(511, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Ordre', npp-nam, 'Ordre', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Temple', npp-nam, 'Temple', [n-1]), si('Solaire', npp-nam, 'Solaire', [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(culte, nc-nom, culte, [n-1]), si(apocalyptique, adj-adj, apocalyptique, [dl(0,n,n)-1]), si(fortement, adv-adv, fortement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(impliqué, vpp-ver:pper, impliquer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(blanchiment, nc-nom, blanchiment, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(argent, nc-nom, argent, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(trafic, nc-nom, trafic, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(512, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Temple', nc-nam, 'Temple', [n-1]), si('Solaire', npp-nam, 'Solaire', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvés, vpp-ver:pper, retrouver, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(morts, adj-adj, mort, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(513, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(synthèse, nc-nom, synthèse, [n-1]), si(aborde, v-ver:pres, aborder, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(principales, adj-adj, principal, [dr(0,n,n)-1]), si(méthodes, nc-nom, méthode, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contraception, nc-nom, contraception, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(naissances, nc-nom, naissance, [n-1]), si(')', ponct-pun, ')', [let-1]), si(utilisées, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(avantages, nc-nom, avantage, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(inconvénients, nc-nom, inconvénient, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(514, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(aborde, v-ver:pres, aborder, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(naissances, nc-nom, naissance, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(515, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Caire', npp-nam, 'Caire', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1994, pro-num, 1994, [np-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(certain, adj-adj, certain, [dr(0,n,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(musulmans, adj-adj, musulman, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(joints, vpp-ver:pper, joindre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Vatican', npp-nam, 'Vatican', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(opposer, vinf-ver:infi, opposer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(contraceptifs, nc-nom, contraceptif, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avortement, nc-nom, avortement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(516, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(occasion, nc-nom, occasion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Rabita', npp-nam, 'Rabita', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(convoqué, vpp-ver:pper, convoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si(présidée, vpp-ver:pper, présider, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(roi, nc-nom, roi, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Arabie', npp-nam, 'Arabie', [n-1]), si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptée, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(légalisation, nc-nom, légalisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avortement, nc-nom, avortement, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(concéder, vinf-ver:infi, concéder, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(droits, nc-nom, droit, [n-1]), si(sexuels, adj-adj, sexuel, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(adolescents, nc-nom, adolescent, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(célibataires, nc-nom, célibataire, [n-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(relèvement, nc-nom, relèvement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(âge, nc-nom, âge, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mariage, nc-nom, mariage, [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(517, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', npp-abr, 'ONU', [n-1]), si(discute, v-ver:pres, discuter, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(naissances, nc-nom, naissance, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(518, Result) :-
      prob_parse([ si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(voyages, nc-nom, voyage, [n-1]), si(internationaux, adj-adj, international, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(plein, adj-adj, plein, [dr(0,n,n)-1]), si(essor, nc-nom, essor, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(perdent, v-ver:pres, perdre, [dr(0,dl(0,np,s),np)-1]), si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(parts, nc-nom, part, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(secteur, nc-nom, secteur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(pour, p-prp, pour, [dr(0,dr(0,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si('non-Américains', nc-nom, 'non-Américains', [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(tout, adv-adv, tout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(simplement, adv-adv, simplement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(trop, adv-adv, trop, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),dl(0,n,n))-1]), si(compliqué, adj-adj, compliqué, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2001, adj-num, 2001, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(519, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tourisme, nc-nom, tourisme, [n-1]), si(chute, v-ver:pres, chute, [dl(0,np,s)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(520, Result) :-
      prob_parse([ si('Vous', cls-pro:per, 'Vous', [np-1]), si(pouvez, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(nous, clo-pro:per, nous, [cl_r-1]), si(contacter, vinf-ver:infi, contacter, [dr(0,dl(0,np,s_inf),np)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(façons, nc-nom, façon, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(écrivez, vimp-ver:impe, écrire, [dr(0,s,np)-1]), si('-nous', cls-pro:per, '-nous', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(téléphonez, vimp-ver:impe, téléphoner, [dr(0,s,np)-1]), si('-nous', clr-pro:per, '-nous', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(envoyez, vimp-ver:impe, envoyer, [dr(0,dr(0,s,pp),cl_r)-1]), si('-nous', clo-pro:per, '-nous', [np-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(courriel, nc-nom, courriel, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(remplissez, vimp-ver:impe, remplir, [dr(0,s,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(formulaire, nc-nom, formulaire, [n-1]), si('ci-dessous', adv-adv, 'ci-dessous', [dl(1,s,s)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(soumettez, vimp-ver:impe, soumettre, [np-1]), si('-le', cls-pro:per, '-le', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(521, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si(serons, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(heureux, adj-adj, heureux, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(fournir, vinf-ver:infi, fournir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(nous, cls-pro:per, nous, [np-1]), si(pouvons, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(522, Result) :-
      prob_parse([ si('Bureau', nc-nom, 'Bureau', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tourisme, nc-nom, tourisme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(visiteurs, nc-nom, visiteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Cedar', npp-nam, 'Cedar', [dr(0,np,np)-1]), si('Falls', npp-nam, 'Falls', [np-1]), si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(523, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tourisme, nc-nom, tourisme, [n-1]), si(chute, v-ver:pres, chute, [dl(0,np,s)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(524, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(exiger, vinf-ver:infi, exiger, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(voyageant, vpr-ver:ppre, voyager, [dr(0,dl(0,n,n),pp)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(munies, vpp-ver:pper, munir, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(passeport, nc-nom, passeport, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(pièce, nc-nom, pièce, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(identité, nc-nom, identité, [n-1]), si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), si(nuit, nc-nom, nuire, [dr(0,dl(0,np,s),pp)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(tourisme, nc-nom, tourisme, [n-1]), si(transfrontalier, adj-adj, transfrontalier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(vigueur, nc-nom, vigueur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tourisme, nc-nom, tourisme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(525, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tourisme, nc-nom, tourisme, [n-1]), si(chute, v-ver:pres, chute, [dl(0,np,s)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(526, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(position, nc-nom, position, [n-1]), si(exige, v-ver:pres, exiger, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(modes, nc-nom, mode, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transport, nc-nom, transport, [n-1]), si(deviennent, v-ver:pres, devenir, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(efficaces, adj-adj, efficace, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(capables, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(exigences, nc-nom, exigence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(clients, nc-nom, client, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(527, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(industrie, nc-nom, industrie, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(devient, v-ver:pres, devenir, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(compétitive, adj-adj, compétitif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(528, Result) :-
      prob_parse([ si('Girard', npp-nam, 'Girard', [np-1]), si(ajoutera, v-ver:pres, ajouter, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(honneurs, nc-nom, honneur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réalisations, nc-nom, réalisation, [n-1]), si(ce, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(mois, nc-nom, mois, [n-1]), si('-ci', adv-adv, '-ci', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(intronisé, vpp-ver:pper, introniser, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(auguste, nc-nom, auguste, [dr(0,n,n)-1]), si('Académie', npp-nam, 'Académie', [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(40, det-num, 40, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cardinal, nc-nom, cardinal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Richelieu', npp-nam, 'Richelieu', [np-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1635, pro-num, 1635, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(529, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Académie', nc-nam, 'Académie', [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Richelieu', npp-nam, 'Richelieu', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(530, Result) :-
      prob_parse([ si('Richelieu', npp-nam, 'Richelieu', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(mécène, nc-nom, mécène, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(arts, nc-nom, art, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(531, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reconstruit, vpp-ver:pper, reconstruire, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Sorbonne', npp-nam, 'Sorbonne', [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(écrivains, nc-nom, écrivain, [n-1]), si(prometteurs, adj-adj, prometteur, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Académie', nc-nam, 'Académie', [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(532, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Académie', nc-nam, 'Académie', [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Richelieu', npp-nam, 'Richelieu', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(533, Result) :-
      prob_parse([ si('Fin', nc-nom, 'Fin', [dr(0,dr(0,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Sydney', npp-nam, 'Sydney', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(recouverte, vpp-ver:pper, recouvrir, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(fumée, nc-nom, fumée, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(incendies, nc-nom, incendie, [n-1]), si(violents, adj-adj, violent, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Blue', npp-nam, 'Blue', [dr(0,n,n)-1]), si('Mountains', npp-nam, 'Mountains', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(534, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(incendies, nc-nom, incendie, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(allumé, vpp-ver:pper, allumer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(foudre, nc-nom, foudre, [n-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Burra', npp-nam, 'Burra', [dr(0,np,np)-1]), si('Korain', npp-nam, 'Korain', [dr(0,np,np)-1]), si('Head', npp-nam, 'Head', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Blue', npp-nam, 'Blue', [dr(0,n,n)-1]), si('Mountains', npp-nam, 'Mountains', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(13, adj-num, 13, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(535, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(végétation, nc-nom, végétation, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démarré, vpp-ver:pper, démarrer, [dl(0,np,s_ppart)-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Sydney', npp-nam, 'Sydney', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(536, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(fonctionnaires, nc-nom, fonctionnaire, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(pyromanes, nc-nom, pyromane, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(probablement, adv-adv, probablement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(responsables, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(allumage, nc-nom, allumage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(certains, pro-pro:ind, certain, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(plus, adv-adv, plus, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(incendies, nc-nom, incendie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(forêt, nc-nom, forêt, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(rage, nc-nom, rage, [np-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('week-end', nc-nom, 'week-end', [n-1]), si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Sydney', npp-nam, 'Sydney', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(détruisant, vpr-ver:ppre, détruire, [dr(0,dl(0,np,s_ppres),np)-1]), si(sept, det-num, sept, [dr(0,np,n)-1]), si(maisons, nc-nom, maison, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(donnant, vpr-ver:ppre, donner, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(précoce, adj-adj, précoce, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(menaçant, vpr-ver:ppre, menacer, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(saison, nc-nom, saison, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(incendies, nc-nom, incendie, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Australie', npp-nam, 'Australie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(537, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(végétation, nc-nom, végétation, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démarré, vpp-ver:pper, démarrer, [dl(0,np,s_ppart)-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Sydney', npp-nam, 'Sydney', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(538, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(départs, nc-nom, départ, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mêmes, adj-adj, même, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(port, nc-nom, port, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sydney', npp-nam, 'Sydney', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(539, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(littéralement, adv-adv, littéralement, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(milliers, nc-nom, millier, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(embarcations, nc-nom, embarcation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(spectateurs, nc-nom, spectateur, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vents, nc-nom, vent, [n-1]), si(capricieux, adj-adj, capricieux, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tourbillons, nc-nom, tourbillon, [n-1]), si(locaux, adj-adj, local, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(agitée, vpp-ver:pper, agité, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(540, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(végétation, nc-nom, végétation, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démarré, vpp-ver:pper, démarrer, [dl(0,np,s_ppart)-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Sydney', npp-nam, 'Sydney', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(541, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(décennies, nc-nom, décennie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(incendies, nc-nom, incendie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(victimes, nc-nom, victime, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(incendies, nc-nom, incendie, [n-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si(économiques, adj-adj, économique, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(cessé, vpp-ver:pper, cesser, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(diminuer, vinf-ver:infi, diminuer, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(542, Result) :-
      prob_parse([ si('Néanmoins', adv-adv, 'Néanmoins', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(journée, nc-nom, journée, [n-1]), si(moyenne, adj-adj, moyen, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2001, pro-num, 2001, [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(répondu, vpp-ver:pper, répondre, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(4750, det-num, 4750, [dr(0,np,n)-1]), si(incendies, nc-nom, incendie, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédées, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(56, det-num, 56, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(blessés, vpp-ver:pper, blesser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(543, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pompiers, nc-nom, pompier, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(nombreuses, adj-adj, nombreux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(544, Result) :-
      prob_parse([ si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(alliés, nc-nom, allié, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(victorieux, vpp-ver:pper, victorieux, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(champ, nc-nom, champ, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bataille, nc-nom, bataille, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(présent, nc-nom, présent, [n-1]), si(essuyé, vpp-ver:pper, essuyer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(défaite, nc-nom, défaite, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(efforts, nc-nom, effort, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(découvrir, vinf-ver:infi, découvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(malades, adj-adj, malade, [dr(0,np,pp_de)-1]), si(tant, adv-adv, tant, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(vétérans, nc-nom, vétéran, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(545, Result) :-
      prob_parse([ si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(études, nc-nom, étude, [n-1]), si(indiquent, v-ver:pres, indiquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vétérans, nc-nom, vétéran, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),dr(0,dl(0,n,n),dl(0,n,n)))-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(susceptibles, adj-adj, susceptible, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mourir, vinf-ver:infi, mourir, [dl(0,np,s_inf)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(hospitalisés, vpp-ver:pper, hospitaliser, [dl(0,np,s_pass)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(combattu, vpp-ver:pper, combattre, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(546, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(plaignent, v-ver:pres, plaindre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(547, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(indépendante, adj-adj, indépendant, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(affirmations, nc-nom, affirmation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(vétérans, nc-nom, vétéran, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(certains, pro-pro:ind, certain, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(effectivement, adv-adv, effectivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(souffert, vpp-ver:pper, souffrir, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(suite, nc-nom, suite, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1991, pro-num, 1991, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(548, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(plaignent, v-ver:pres, plaindre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(549, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(comparera, v-ver:futu, comparer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si(avant, p-prp, avant, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,n,n),np),dr(0,dl(0,n,n),np)),dr(0,dl(0,n,n),np))-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(déploiement, nc-nom, déploiement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(personnel, nc-nom, personnel, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(déployé, vpp-ver:pper, déployer, [dr(0,dl(0,n,n),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(550, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(plaignent, v-ver:pres, plaindre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(551, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(adopté, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_ppart),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(communication, nc-nom, communication, [n-1]), si(définissant, vpr-ver:ppre, définir, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(stratégique, adj-adj, stratégique, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(relations, nc-nom, relation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Asie', npp-nam, 'Asie', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prochaine, adj-adj, prochain, [dr(0,n,n)-1]), si(décennie, nc-nom, décennie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(552, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(adopte, v-ver:pres, adopter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(monnaie, nc-nom, monnaie, [n-1]), si(unique, adj-adj, unique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(553, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(composée, vpp-ver:pper, composer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(six, det-num, six, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Belgique', npp-nam, 'Belgique', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(554, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Danemark', npp-nam, 'Danemark', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(adhéré, vpp-ver:pper, adhérer, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1973, pro-num, 1973, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,np,s))))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),dl(0,np,s)))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,np,s))))))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grèce', npp-nam, 'Grèce', [n-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),np)-1]), si(1981, pro-num, 1981, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,p(0,np,pp),p(0,np,dia(0,box(0,pp)))),p(0,np,pp))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Portugal', npp-nam, 'Portugal', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1986, pro-num, 1986, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Autriche', npp-nam, 'Autriche', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Finlande', npp-nam, 'Finlande', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Suède', npp-nam, 'Suède', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1995, pro-num, 1995, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(555, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(expansion, nc-nom, expansion, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2004, pro-num, 2004, [np-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(adhésion, nc-nom, adhésion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(556, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(espace, nc-nom, espace, [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(élargit, v-ver:pres, élargir, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(557, Result) :-
      prob_parse([ si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secteur, nc-nom, secteur, [n-1]), si(clé, nc-nom, clé, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(offshore, adj-adj, offshore, [dl(0,n,n)-1]), si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(forte, adj-adj, fort, [dr(0,n,n)-1]), si(expansion, nc-nom, expansion, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(activité, nc-nom, activité, [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(principale, adj-adj, principal, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prochaines, adj-adj, prochain, [dr(0,n,n)-1]), si(décennies, nc-nom, décennie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(développements, nc-nom, développement, [n-1]), si(continus, adj-adj, continu, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(champs, nc-nom, champ, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(activité, nc-nom, activité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exploration, nc-nom, exploration, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(558, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(espace, nc-nom, espace, [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étend, v-ver:pres, étendre, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(559, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(accidents, nc-nom, accident, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(baisse, nc-nom, baisse, [n-1]), si(constante, adj-adj, constant, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sept, adj-num, sept, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(560, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(accidents, nc-nom, accident, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(avion, nc-nom, avion, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(baisse, nc-nom, baisse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(561, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(accidents, nc-nom, accident, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aviation, nc-nom, aviation, [n-1]), si(commerciale, adj-adj, commercial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(baissé, vpp-ver:pper, baisser, [dl(0,np,s_ppart)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(façon, nc-nom, façon, [n-1]), si(assez, adv-adv, assez, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(spectaculaire, adj-adj, spectaculaire, [dl(0,n,n)-1]), si(surtout, adv-adv, surtout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(1950, pro-num, 1950, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(1970, pro-num, 1970, [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(introduction, nc-nom, introduction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(technologies, nc-nom, technologie, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(562, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(accidents, nc-nom, accident, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(avion, nc-nom, avion, [n-1]), si(diminuent, v-ver:pres, diminuer, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(563, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(études, nc-nom, étude, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(significative, adj-adj, significatif, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(risque, nc-nom, risque, [n-1]), si(associé, vpp-ver:pper, associer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(oestrogènes, nc-nom, oestrogène, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(564, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(risque, nc-nom, risque, [n-1]), si(semble, v-ver:pres, sembler, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(associé, vpp-ver:pper, associer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(prolongée, vpp-ver:pper, prolonger, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(risques, nc-nom, risque, [n-1]), si(accrus, adj-adj, accroître, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(24, det-num, 24, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(plus, adv-adv, plus, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(565, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(grossesse, nc-nom, grossesse, [n-1]), si('post-ménopausique', adj-adj, 'post-ménopausique', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(soumise, vpp-ver:pper, soumettre, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(risques, nc-nom, risque, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(566, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grossesse, nc-nom, grossesse, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(ménopausées, vpp-ver:pper, ménopausée, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(question, nc-nom, question, [n-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(éthique, adj-adj, éthique, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), si(médicale, adj-adj, médical, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(partie, nc-nom, partie, [n-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(rapportées, vpp-ver:pper, rapporter, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grossesse, nc-nom, grossesse, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(ménopausées, adj-adj, ménopausée, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(insuffisantes, adj-adj, insuffisant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(profil, nc-nom, profil, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(risque, nc-nom, risque, [n-1]), si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(567, Result) :-
      prob_parse([ si('Chez', p-prp, 'Chez', [dr(0,dr(0,s,s),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vieillissement, nc-nom, vieillissement, [n-1]), si(cardiovasculaire, adj-adj, cardiovasculaire, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(accélère, v-ver:pres, accélérer, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(568, Result) :-
      prob_parse([ si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), si(conséquent, nc-nom, conséquent, [n-1]), si(',', ponct-pun, ',', [let-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dr(0,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(preuve, nc-nom, preuve, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(contraire, nc-nom, contraire, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(ménopausées, adj-adj, ménopausée, [dl(0,n,n)-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(considérées, vpp-ver:pper, considérer, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(risque, nc-nom, risque, [n-1]), si(accru, vpp-ver:pper, accroître, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(complications, nc-nom, complication, [n-1]), si(vasculaires, adj-adj, vasculaire, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grossesse, nc-nom, grossesse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(569, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(grossesse, nc-nom, grossesse, [n-1]), si('post-ménopausique', adj-adj, 'post-ménopausique', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(soumise, vpp-ver:pper, soumettre, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(risques, nc-nom, risque, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(570, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OMC', npp-abr, 'OMC', [n-1]), si(administre, v-ver:pres, administrer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accords, nc-nom, accord, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(traite, v-ver:pres, traire, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(différends, nc-nom, différend, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(surveille, v-ver:pres, surveiller, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(politiques, nc-nom, politique, [n-1]), si(commerciales, adj-adj, commercial, [dl(0,n,n)-1]), si(nationales, adj-adj, national, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(fournit, v-ver:pres, fournir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(assistance, nc-nom, assistance, [n-1]), si(technique, adj-adj, technique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(formation, nc-nom, formation, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(pays, nc-nom, pays, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(développement, nc-nom, développement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(coopère, v-ver:pres, coopérer, [dr(0,dl(0,np,s),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(organisations, nc-nom, organisation, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(571, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(assure, v-ver:pres, assurer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(médiation, nc-nom, médiation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(différends, nc-nom, différend, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(572, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(différends, nc-nom, différend, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sein, nc-nom, sein, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMC', npp-abr, 'OMC', [n-1]), si(portent, v-ver:pres, porter, [dr(0,dl(0,np,s),pp)-1]), si(essentiellement, adv-adv, essentiellement, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(promesses, nc-nom, promesse, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(tenues, vpp-ver:pper, tenir, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(573, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OMC', npp-abr, 'OMC', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(convenu, vpp-ver:pper, convenir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(',', ponct-pun, ',', [let-1]), si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(estiment, v-ver:pres, estimer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(collègues, nc-nom, collègue, [n-1]), si(membres, nc-nom, membre, [dl(0,n,n)-1]), si(violent, adj-adj, violer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(règles, nc-nom, règle, [n-1]), si(commerciales, adj-adj, commercial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(utiliseront, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(multilatéral, adj-adj, multilatéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(différends, nc-nom, différend, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(lieu, nc-nom, lieu, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(agir, vinf-ver:infi, agir, [dl(0,np,s_inf)-1]), si(unilatéralement, adv-adv, unilatéralement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(574, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médiateur, nc-nom, médiateur, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(différends, nc-nom, différend, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(575, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(bien, adv-adv, bien, [dr(0,np,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(égards, nc-nom, égard, [n-1]), si(similaire, adj-adj, similaire, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(division, nc-nom, division, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atome, nc-nom, atome, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(576, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, nc-num, deux, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(potentiel, nc-nom, potentiel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(productivité, nc-nom, productivité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(destruction, nc-nom, destruction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(577, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Organisation', nc-nam, 'Organisation', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(sert, v-ver:pres, servir, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(médiateur, nc-nom, médiateur, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(différends, nc-nom, différend, [n-1]), si(commerciaux, adj-adj, commercial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(578, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), si('Mains', nc-nom, 'Mains', [n-1]), si(propres, adj-adj, propre, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(corruption, nc-nom, corruption, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grave, adj-adj, grave, [dr(0,n,n)-1]), si(crise, nc-nom, crise, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étendant, vpr-ver:ppre, étendre, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp_a)-1]), si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(niveaux, nc-nom, niveau, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(élevés, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(système, nc-nom, système, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(579, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(mois, nc-nom, mois, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(magistrature, nc-nom, magistrature, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(jour, nc-nom, jour, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(scène, nc-nom, scène, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(corruption, nc-nom, corruption, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(illégalité, nc-nom, illégalité, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(précédent, nc-nom, précédent, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(démocraties, nc-nom, démocratie, [n-1]), si(occidentales, adj-adj, occidental, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(impliquant, vpr-ver:ppre, impliquer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(classe, nc-nom, classe, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(larges, adj-adj, large, [dr(0,n,n)-1]), si(secteurs, nc-nom, secteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(milieux, nc-nom, milieu, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(affaires, nc-nom, affaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(580, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(corruption, nc-nom, corruption, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(581, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(partis, nc-nom, parti, [n-1]), si(faible, adj-adj, faible, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(influence, nc-nom, influence, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(puissants, adj-adj, puissant, [dr(0,n,n)-1]), si(législateurs, nc-nom, législateur, [n-1]), si(individuels, adj-adj, individuel, [dl(0,n,n)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(emporte, v-ver:pres, emporter, [dr(0,dl(0,np,s),np)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(impératifs, nc-nom, impératif, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(partis, nc-nom, parti, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(pouvoir, nc-nom, pouvoir, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(582, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(corruption, nc-nom, corruption, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présente, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(583, Result) :-
      prob_parse([ si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), si(cours, nc-nom, cours, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(but, nc-nom, but, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étudiant, nc-nom, étudiant, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(formation, nc-nom, formation, [n-1]), si(fondamentale, adj-adj, fondamental, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(logique, nc-nom, logique, [n-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(puisse, vs-ver:subp, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(doter, vinf-ver:infi, doter, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(connaissances, nc-nom, connaissance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(logique, nc-nom, logique, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(habituer, vinf-ver:infi, habituer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pensée, nc-nom, pensée, [n-1]), si(logique, adj-adj, logique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(584, Result) :-
      prob_parse([ si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), si(cours, nc-nom, cours, [n-1]), si(comprend, v-ver:pres, comprendre, [dr(0,dl(0,np,s),np)-1]), si(':', ponct-pun, ':', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(usages, nc-nom, usage, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(langage, nc-nom, langage, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(déduction, nc-nom, déduction, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(induction, nc-nom, induction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(585, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(déduction, nc-nom, déduction, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(induction, nc-nom, induction, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisées, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(enseigner, vinf-ver:infi, enseigner, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(anglais, nc-nom, anglais, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(586, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, un, [dr(0,pp_de,n)-1]), si('Vikings', nc-nam, 'Vikings', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voyagé, vpp-ver:pper, voyager, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Écosse', npp-nam, 'Écosse', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(régions, nc-nom, région, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(',', ponct-pun, ',', [let-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(commerçants, nc-nom, commerçant, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(colons, nc-nom, colon, [n-1]), si(pacifiques, adj-adj, pacifique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terres, nc-nom, terre, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(cultiver, vinf-ver:infi, cultiver, [dr(0,dl(0,np,s_inf),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(587, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Vikings', nc-nam, 'Vikings', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(débarqué, vpp-ver:pper, débarquer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ecosse', npp-nam, 'Ecosse', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(588, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si(suggèrent, v-ver:pres, suggérer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Vikings', nc-nam, 'Vikings', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envahi, vpp-ver:pper, envahir, [dr(0,dl(0,np,s_ppart),np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Écosse', npp-nam, 'Écosse', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Hébrides', nc-nam, 'Hébrides', [n-1]), si(extérieures, adj-adj, extérieur, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Shetland', npp-nam, 'Shetland', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Caithness', npp-nam, 'Caithness', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sutherland', npp-nam, 'Sutherland', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(y, clo-pro:per, y, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(installés, vpp-ver:pper, installer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(589, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Vikings', nc-nam, 'Vikings', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(débarqué, vpp-ver:pper, débarquer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Ecosse', npp-nam, 'Ecosse', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(590, Result) :-
      prob_parse([ si('Juste', adv-adv, 'Juste', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(pour, p-prp, pour, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(garder, vinf-ver:infi, garder, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(corps, nc-nom, corps, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(chaud, nc-nom, chaud, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(manger, vinf-ver:infi, manger, [dr(0,dl(0,np,s_inf),np)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(dixième, nc-num, dixième, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(poids, nc-nom, poids, [n-1]), si(corporel, adj-adj, corporel, [dl(0,n,n)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(jour, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(591, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(mangent, v-ver:pres, manger, [dr(0,dr(0,s,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lamantins, nc-nom, lamantin, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(592, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(lamantins, nc-nom, lamantin, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(végétariens, adj-adj, végétarien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(593, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(mangent, v-ver:pres, manger, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(herbe, nc-nom, herbe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(végétaux, adj-adj, végétal, [n-1]), si(tels, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(algues, nc-nom, algue, [n-1]), si(',', ponct-pun, ',', [let-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(ils, cls-pro:per, il, [np-1]), si(trouvent, v-ver:pres, trouver, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(eaux, nc-nom, eau, [n-1]), si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(profondes, adj-adj, profond, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(vivent, v-ver:pres, vivre, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(594, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(mangent, v-ver:pres, manger, [dr(0,dr(0,s,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lamantins, nc-nom, lamantin, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(595, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(consomment, v-ver:pres, consommer, [dr(0,dl(0,np,s),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(énormes, adj-adj, énorme, [dr(0,n,n)-1]), si(quantités, nc-nom, quantité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(nourriture, nc-nom, nourriture, [n-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(jour, nc-nom, jour, [n-1]), si('-', ponct-pun, '-', [dr(0,dl(1,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(adulte, nc-nom, adulte, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(manger, vinf-ver:infi, manger, [dr(0,dl(0,np,s_inf),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(livres, nc-nom, livre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(végétation, nc-nom, végétation, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(jour, nc-nom, jour, [n-1]), si('-', ponct-pun, '-', [let-1]), si(principalement, adv-adv, principalement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(eaux, nc-nom, eau, [n-1]), si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(profondes, adj-adj, profond, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(rivage, nc-nom, rivage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(596, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(lamantins, nc-nom, lamantin, [n-1]), si(mangent, v-ver:pres, manger, [dr(0,dl(0,np,s),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(occasionnellement, adv-adv, occasionnellement, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(poissons, nc-nom, poisson, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(escargots, nc-nom, escargot, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(source, nc-nom, source, [n-1]), si(importante, adj-adj, important, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(calcium, nc-nom, calcium, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(phosphore, nc-nom, phosphore, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(protéines, nc-nom, protéine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(597, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(mangent, v-ver:pres, manger, [dr(0,dr(0,s,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lamantins, nc-nom, lamantin, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(disponibles, adj-adj, disponible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(598, Result) :-
      prob_parse([ si('Hubble', npp-nam, 'Hubble', [np-1]), si(célèbre, v-ver:pres, célébrer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('15e', adj-num, '15e', [dr(0,n,n)-1]), si(anniversaire, nc-nom, anniversaire, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(images, nc-nom, image, [n-1]), si(spectaculaires, adj-adj, spectaculaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(599, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(télescope, nc-nom, télescope, [n-1]), si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), si(célèbre, v-ver:pres, célébrer, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(anniversaire, nc-nom, anniversaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(600, Result) :-
      prob_parse([ si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(célébrer, vinf-ver:infi, célébrer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(succès, nc-nom, succès, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(télescope, nc-nom, télescope, [n-1]), si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(agences, nc-nom, agence, [n-1]), si(spatiales, adj-adj, spatial, [dl(0,n,n)-1]), si(impliquées, vpp-ver:pper, impliquer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('NASA', npp-abr, 'NASA', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Agence', nc-nam, 'Agence', [n-1]), si(spatiale, adj-adj, spatial, [dl(0,n,n)-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('ESA', npp-abr, 'ESA', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(publient, v-ver:pres, publier, [dr(0,dl(0,np,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(image, nc-nom, image, [n-1]), si('Messier', npp-nam, 'Messier', [dl(0,n,n)-1]), si(82, adj-num, 82, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(601, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(télescope, nc-nom, télescope, [n-1]), si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), si(célèbre, v-ver:pres, célébrer, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(anniversaire, nc-nom, anniversaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(602, Result) :-
      prob_parse([ si('Située', vpp-ver:pper, 'Située', [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si('années-lumière', nc-nom, 'années-lumière', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),np),np)-1]), si('M82', npp-nam, 'M82', [np-1]), si(apparaît, v-ver:pres, apparaître, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(haut, adj-adj, haut, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ciel, nc-nom, ciel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(printemps, nc-nom, printemps, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nord, nc-nom, nord, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(direction, nc-nom, direction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(constellation, nc-nom, constellation, [n-1]), si('Ursa', npp-nam, 'Ursa', [dl(0,n,n)-1]), si('Major', npp-nam, 'Major', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande', adj-adj, 'Grande', [dr(0,n,n)-1]), si('Ourse', npp-nam, 'Ourse', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(603, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(appelée, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_pass),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(galaxie, nc-nom, galaxie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cigare, nc-nom, cigare, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(forme, nc-nom, forme, [n-1]), si(elliptique, adj-adj, elliptique, [dl(0,n,n)-1]), si(allongée, vpp-ver:pper, allongé, [dl(0,n,n)-1]), si(produite, vpp-ver:pper, produire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inclinaison, nc-nom, inclinaison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(disque, nc-nom, disque, [n-1]), si(étoilé, adj-adj, étoilé, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(visée, nc-nom, visée, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(604, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(télescope, nc-nom, télescope, [n-1]), si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), si(célèbre, v-ver:pres, célébrer, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(anniversaire, nc-nom, anniversaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(605, Result) :-
      prob_parse([ si('Mercredi', nc-nom, 'Mercredi', [dr(0,dr(0,s,s),n)-1]), si(dernier, adj-adj, dernier, [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Corporation', nc-nam, 'Corporation', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('EPE', npp-abr, 'EPE', [n-1]), si(')', ponct-pun, ')', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Brésil', npp-nam, 'Brésil', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si(énergétique, adj-adj, énergétique, [dl(0,n,n)-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(2030, adj-num, 2030, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si(directeur, adj-adj, directeur, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(énergétique, adj-adj, énergétique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(24, adj-num, 24, [dr(0,n,n)-1]), si(prochaines, adj-adj, prochain, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(606, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(projets, nc-nom, projet, [n-1]), si(hydroélectriques, adj-adj, hydroélectrique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(prévus, vpp-ver:pper, prévoir, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(607, Result) :-
      prob_parse([ si('Manitoba', npp-nam, 'Manitoba', [dr(0,np,np)-1]), si('Hydro', npp-nam, 'Hydro', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(plans, nc-nom, plan, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(centrales, nc-nom, centrale, [n-1]), si(hydroélectriques, adj-adj, hydroélectrique, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('GS', npp-abr, 'GS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nord, nc-nom, nord, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Manitoba', npp-nam, 'Manitoba', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('GS', npp-abr, 'GS', [n-1]), si('Wuskwatim', npp-nam, 'Wuskwatim', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rivière, nc-nom, rivière, [n-1]), si('Burntwood', npp-nam, 'Burntwood', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('GS', npp-abr, 'GS', [n-1]), si('Gull', npp-nam, 'Gull', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si('Keeyask', npp-nam, 'Keeyask', [np-1]), si(')', ponct-pun, ')', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rivière, nc-nom, rivière, [n-1]), si('Nelson', npp-nam, 'Nelson', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(608, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(projets, nc-nom, projet, [n-1]), si(hydroélectriques, adj-adj, hydroélectrique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(prévus, vpp-ver:pper, prévoir, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(609, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(2001, adj-num, 2001, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Autorité', nc-nam, 'Autorité', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parc, nc-nom, parc, [n-1]), si(marin, adj-adj, marin, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande', adj-adj, 'Grande', [dr(0,n,n)-1]), si('Barrière', npp-nam, 'Barrière', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Corail', npp-nam, 'Corail', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(2001, adj-num, 2001, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(qualité, nc-nom, qualité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bassin, nc-nom, bassin, [n-1]), si(versant, vpr-ver:ppre, versant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande', adj-adj, 'Grande', [dr(0,n,n)-1]), si('Barrière', npp-nam, 'Barrière', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Corail', npp-nam, 'Corail', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(610, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(végétation, nc-nom, végétation, [n-1]), si(marine, adj-adj, marine, [dl(0,n,n)-1]), si(améliore, v-ver:pres, améliorer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(qualité, nc-nom, qualité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(611, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chercheurs, nc-nom, chercheur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('CSIRO', npp-abr, 'CSIRO', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(établi, vpp-ver:pper, établir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(culture, nc-nom, culture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(plantes, nc-nom, plante, [n-1]), si(marines, adj-adj, marin, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(huîtres, nc-nom, huître, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(organismes, nc-nom, organisme, [n-1]), si(filtrants, adj-adj, filtrant, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(eaux, nc-nom, eau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rejet, nc-nom, rejet, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fermes, nc-nom, ferme, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), si(considérablement, adv-adv, considérablement, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(qualité, nc-nom, qualité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(612, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(végétation, nc-nom, végétation, [n-1]), si(marine, adj-adj, marine, [dl(0,n,n)-1]), si(améliore, v-ver:pres, améliorer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(qualité, nc-nom, qualité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(613, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(consortium, nc-nom, consortium, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(communication, nc-nom, communication, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(fibre, nc-nom, fibre, [n-1]), si(optique, adj-adj, optique, [dl(0,n,n)-1]), si('sous-marine', adj-adj, 'sous-marine', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(permettra, v-ver:futu, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(compléter, vinf-ver:infi, compléter, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(boucle, nc-nom, boucle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fibre, nc-nom, fibre, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(nécessaire, adj-adj, nécessaire, [dl(0,n,n)-1]), si(autour, p-prp, autour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(continent, nc-nom, continent, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(614, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), si(fois, nc-nom, fois, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(place, nc-nom, place, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(câble, nc-nom, câble, [n-1]), si(fournira, v-ver:futu, fournir, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(connexion, nc-nom, connexion, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(large, adj-adj, large, [dr(0,n,n)-1]), si(bande, nc-nom, bande, [n-1]), si(nécessaire, adj-adj, nécessaire, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(offrir, vinf-ver:infi, offrir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mêmes, adj-adj, même, [dr(0,n,n)-1]), si(avancées, nc-nom, avancée, [n-1]), si(abordables, adj-adj, abordable, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(télécommunications, nc-nom, télécommunications, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_de))))-1]), si(bénéficient, v-ver:pres, bénéficier, [dr(0,dr(0,s,pp),np)-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(pays, nc-nom, pays, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(parties, nc-nom, party, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(615, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(câble, nc-nom, câble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fibre, nc-nom, fibre, [n-1]), si(optique, adj-adj, optique, [dl(0,n,n)-1]), si('sous-marin', adj-adj, 'sous-marin', [dl(0,n,n)-1]), si(améliore, v-ver:pres, améliorer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(communications, nc-nom, communication, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(616, Result) :-
      prob_parse([ si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), si(principal, adj-adj, principal, [dr(0,n,n)-1]), si(composant, nc-nom, composant, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si('39.000', det-num, '39.000', [dr(0,np,n)-1]), si(km, nc-abr, kilomètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(câble, nc-nom, câble, [n-1]), si('sous-marin', adj-adj, 'sous-marin', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(fibre, nc-nom, fibre, [n-1]), si(optique, adj-adj, optique, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(reliera, v-ver:futu, relier, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si(eux, pro-pro:per, lui, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(reste, nc-nom, reste, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(617, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(câble, nc-nom, câble, [n-1]), si('sous-marin', adj-adj, 'sous-marin', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(fibre, nc-nom, fibre, [n-1]), si(optique, adj-adj, optique, [dl(0,n,n)-1]), si(améliore, v-ver:pres, améliorer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(communications, nc-nom, communication, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(618, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(unité, nc-nom, unité, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(organisé, vpp-ver:pper, organiser, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(exposition, nc-nom, exposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(faux, nc-nom, faux, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('V', nc-abr, 'V', [n-1]), si('&', cc-sym, '&', [dr(0,dl(0,n,n),n)-1]), si('A', nc-nom, 'A', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(souligner, vinf-ver:infi, souligner, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prévalence, nc-nom, prévalence, [n-1]), si(croissante, vpr-ver:ppre, croissant, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sophistication, nc-nom, sophistication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(criminalité, nc-nom, criminalité, [n-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(oeuvres, nc-nom, oeuvre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(art, nc-nom, art, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(619, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(criminalité, nc-nom, criminalité, [n-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(oeuvres, nc-nom, oeuvre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(art, nc-nom, art, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(croissance, nc-nom, croissance, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(620, Result) :-
      prob_parse([ si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(face, nc-nom, face, [np-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(phénomène, nc-nom, phénomène, [n-1]), si(croissant, adj-adj, croissant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(criminalité, nc-nom, criminalité, [n-1]), si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(stratégies, nc-nom, stratégie, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(uniquement, adv-adv, uniquement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(efficacité, nc-nom, efficacité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(poursuites, nc-nom, poursuite, [n-1]), si(échoueront, v-ver:futu, échouer, [dl(0,np,s)-1]), si(inévitablement, adv-adv, inévitablement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(621, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(criminalité, nc-nom, criminalité, [n-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(oeuvres, nc-nom, oeuvre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(art, nc-nom, art, [n-1]), si(augmente, v-ver:pres, augmenter, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(622, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(1970, adj-num, 1970, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(criminalité, nc-nom, criminalité, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(églises, nc-nom, église, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(art, nc-nom, art, [n-1]), si(religieux, adj-adj, religieux, [dl(0,n,n)-1]), si(devenant, vpr-ver:ppre, devenir, [dr(0,dl(0,np,s_ppres),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(collectionneurs, nc-nom, collectionneur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(623, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(criminalité, nc-nom, criminalité, [n-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(oeuvres, nc-nom, oeuvre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(art, nc-nom, art, [n-1]), si(augmente, v-ver:pres, augmenter, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(624, Result) :-
      prob_parse([ si('Mon', det-det:pos, 'Mon', [dr(0,np,n)-1]), si(pote, nc-nom, pote, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bûcheron, nc-nom, bûcheron, [n-1]), si('Codger', npp-nam, 'Codger', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('m\'', clo-pro:per, 'm\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ours, nc-nom, ours, [n-1]), si(noir, adj-adj, noir, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Laclede', npp-nam, 'Laclede', [np-1]), si(il, cls-pro:per, il, [cl_y-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(décennies, nc-nom, décennie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(625, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(incident, nc-nom, incident, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ours, nc-nom, ours, [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(attrapé, vpp-ver:pper, attraper, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bambin, nc-nom, bambin, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(était, v-ver:impf, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(enfui, vpp-ver:pper, enfuir, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bébé, nc-nom, bébé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(626, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ours, nc-nom, ours, [n-1]), si(noir, adj-adj, noir, [dl(0,n,n)-1]), si(attaque, v-ver:pres, attaquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(gens, nc-nom, gens, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(627, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(ours, nc-nom, ours, [n-1]), si(noirs, adj-adj, noir, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(628, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(tuent, v-ver:pres, tuer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(gens, nc-nom, gens, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(629, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ours, nc-nom, ours, [n-1]), si(noir, adj-adj, noir, [dl(0,n,n)-1]), si(attaque, v-ver:pres, attaquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(gens, nc-nom, gens, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(630, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(passagers, nc-nom, passager, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(aéroports, nc-nom, aéroport, [n-1]), si(européens, adj-adj, européen, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(soumis, vpp-ver:pper, soumettre, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(contrôles, nc-nom, contrôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(renforcés, vpp-ver:pper, renforcer, [dl(0,n,n)-1]), si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(cherchant, vpr-ver:ppre, chercher, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(empêcher, vinf-ver:infi, empêcher, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(terroristes, nc-nom, terroriste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(répéter, vinf-ver:infi, répéter, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(attaques, nc-nom, attaque, [n-1]), si(dévastatrices, adj-adj, dévastateur, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(interrompu, vpp-ver:pper, interrompre, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(trafic, nc-nom, trafic, [n-1]), si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Atlantique', npp-nam, 'Atlantique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(631, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(aéroports, nc-nom, aéroport, [n-1]), si(renforcent, v-ver:pres, renforcer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(632, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(technologies, nc-nom, technologie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rayons, nc-nom, rayon, [n-1]), si('X', nc-nom, 'X', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(faible, adj-adj, faible, [dr(0,n,n)-1]), si(dose, nc-nom, dose, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capacité, nc-nom, capacité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(voir, vinf-ver:infi, voir, [dl(0,np,s_inf)-1]), si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), si(travers, nc-nom, travers, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vêtements, nc-nom, vêtement, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(agents, nc-nom, agent, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(possibilité, nc-nom, possibilité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(arme, nc-nom, arme, [n-1]), si(dissimulée, vpp-ver:pper, dissimuler, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(633, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(aéroports, nc-nom, aéroport, [n-1]), si(renforcent, v-ver:pres, renforcer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(634, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),n)-1]), si(bord, nc-nom, bord, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(navire, nc-nom, navire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(croisière, nc-nom, croisière, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(expédition, nc-nom, expédition, [n-1]), si(',', ponct-pun, ',', [let-1]), si(vous, cls-pro:per, vous, [np-1]), si(visitez, v-ver:futu, visiter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(îles, nc-nom, île, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Shetland', npp-nam, 'Shetland', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si(',', ponct-pun, ',', [let-1]), si(composé, vpp-ver:pper, composer, [dr(0,pp_de,np)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vingtaine, nc-num, vingtaine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(îles, nc-nom, île, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(îles, nc-nom, île, [n-1]), si('King', npp-nam, 'King', [dl(0,n,n)-1]), si('George', npp-nam, 'George', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), si('Half', npp-nam, 'Half', [dr(0,np,np)-1]), si('Moon', npp-nam, 'Moon', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Livingston', npp-nam, 'Livingston', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(proximité, nc-nom, proximité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(péninsule, nc-nom, péninsule, [n-1]), si(antarctique, adj-adj, antarctique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(vous, clo-pro:per, vous, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(continentale, adj-adj, continental, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(proprement, adv-adv, proprement, [dl(0,n,n)-1]), si(dite, vpp-ver:pper, dire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(635, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(exploration, nc-nom, exploration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Antarctique', npp-nam, 'Antarctique', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(636, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(conditions, nc-nom, condition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('AMS', npp-abr, 'AMS', [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appliquent, v-ver:pres, appliquer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(cependant, adv-adv, cependant, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étranger, nc-nom, étranger, [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(compagnies, nc-nom, compagnie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(effrontées, vpp-ver:pper, effronté, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(attirer, vinf-ver:infi, attirer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jeunes, nc-nom, jeune, [n-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dépendance, nc-nom, dépendance, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(compagnies, nc-nom, compagnie, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(souvent, adv-adv, souvent, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(libres, adj-adj, libre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(engager, vinf-ver:infi, engager, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tactiques, nc-nom, tactique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marketing, nc-nom, marketing, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(éhontées, vpp-ver:pper, éhonté, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(telles, adj-adj, tel, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cadeaux, nc-nom, cadeau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cigarettes, nc-nom, cigarette, [dr(0,n,pp_a)-1]), si(mettant, vpr-ver:ppre, mettre, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(scène, nc-nom, scène, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(légèrement, adv-adv, légèrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(vêtues, vpp-ver:pper, vêtir, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dl(0,n,n)-1]), si(allument, v-ver:pres, allumer, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(séduisante, adj-adj, séduisant, [dl(0,n,n)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cigarettes, nc-nom, cigarette, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bouche, nc-nom, bouche, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(adolescents, nc-nom, adolescent, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(637, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(ventes, nc-nom, vente, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étranger, nc-nom, étranger, [n-1]), si(augmentent, v-ver:pres, augmenter, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(638, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(1990, pro-num, 1990, [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ventes, nc-nom, vente, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cigarettes, nc-nom, cigarette, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(que, adv-adv, que, [dr(0,pp,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('4,7', det-num, '4,7', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(80, det-num, 80, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étranger, nc-nom, étranger, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bénéfices, nc-nom, bénéfice, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ventes, nc-nom, vente, [n-1]), si(internationales, adj-adj, international, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(71, det-num, 71, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(639, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(ventes, nc-nom, vente, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étranger, nc-nom, étranger, [n-1]), si(augmentent, v-ver:pres, augmenter, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(640, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(districts, nc-nom, district, [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(fixer, vinf-ver:infi, fixer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(normes, nc-nom, norme, [n-1]), si(élevées, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(écoles, nc-nom, école, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(alignées, vpp-ver:pper, aligner, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(exigences, nc-nom, exigence, [n-1]), si(éducatives, adj-adj, éducatif, [dl(0,n,n)-1]), si(élémentaires, adj-adj, élémentaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(postsecondaires, adj-adj, postsecondaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(641, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(établissent, v-ver:pres, établir, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(normes, nc-nom, norme, [n-1]), si(éducatives, adj-adj, éducatif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(642, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(fixation, nc-nom, fixation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(objectifs, nc-nom, objectif, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élaboration, nc-nom, élaboration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(normes, nc-nom, norme, [n-1]), si(nationales, adj-adj, national, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(stratégies, nc-nom, stratégie, [n-1]), si(récentes, adj-adj, récent, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éducation, nc-nom, éducation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(643, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernements, nc-nom, gouvernement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États', nc-nam, 'États', [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(normes, nc-nom, norme, [n-1]), si(nationales, adj-adj, national, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(éducation, nc-nom, éducation, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1989, pro-num, 1989, [np-1]), si(',', ponct-pun, ',', [let-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('National', npp-nam, 'National', [dr(0,n,n)-1]), si('Governors', npp-nam, 'Governors', [dr(0,n,n)-1]), si('Association', npp-nam, 'Association', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(objectifs, nc-nom, objectif, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(éducation, nc-nom, éducation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(644, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('George', npp-nam, 'George', [dl(0,n,n)-1]), si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ajouté, vpp-ver:pper, ajouter, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(formant, vpr-ver:ppre, former, [dr(0,dl(0,np,s_ppres),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(experts, nc-nom, expert, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(objectifs, nc-nom, objectif, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éducation, nc-nom, éducation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(645, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(établissent, v-ver:pres, établir, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(normes, nc-nom, norme, [n-1]), si(éducatives, adj-adj, éducatif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(646, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(espèces, nc-nom, espèce, [n-1]), si(sauvages, adj-adj, sauvage, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(menacées, vpp-ver:pper, menacer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(extinction, nc-nom, extinction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(647, Result) :-
      prob_parse([ si('Personne', pro-pro:ind, 'Personne', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tigre, nc-nom, tigre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Bengale', npp-nam, 'Bengale', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(puma, nc-nom, puma, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(jaguar, nc-nom, jaguar, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rhinocéros, nc-nom, rhinocéros, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Indonésie', npp-nam, 'Indonésie', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(habitat, nc-nom, habitat, [n-1]), si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faune, nc-nom, faune, [n-1]), si(sauvage, adj-adj, sauvage, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(648, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(espèces, nc-nom, espèce, [n-1]), si(sauvages, adj-adj, sauvage, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(menacées, vpp-ver:pper, menacer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(extinction, nc-nom, extinction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(649, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Espèce', nc-nom, 'Espèce', [n-1]), si(menacée, vpp-ver:pper, menacer, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(terme, nc-nom, terme, [n-1]), si(connexe, adj-adj, connexe, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(désignant, vpr-ver:ppre, désigner, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si(susceptible, adj-adj, susceptible, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(devenir, vinf-ver:infi, devenir, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(voie, nc-nom, voie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(disparition, nc-nom, disparition, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avenir, nc-nom, avenir, [n-1]), si(prévisible, adj-adj, prévisible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(650, Result) :-
      prob_parse([ si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(espèces, nc-nom, espèce, [n-1]), si(sauvages, adj-adj, sauvage, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(voie, nc-nom, voie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(disparition, nc-nom, disparition, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(651, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(logiciel, nc-nom, logiciel, [n-1]), si(informatique, nc-nom, informatique, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('ELFIN', npp-abr, 'ELFIN', [n-1]), si(')', ponct-pun, ')', [let-1]), si(conçu, vpp-ver:pper, concevoir, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(surveiller, vinf-ver:infi, surveiller, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(modèles, nc-nom, modèle, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(besoins, nc-nom, besoin, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(satisfaits, vpp-ver:pper, satisfaire, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(développé, vpp-ver:pper, développer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(attente, nc-nom, attente, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(centres, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(652, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(terminaux, nc-nom, terminal, [n-1]), si(informatiques, adj-adj, informatique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(653, Result) :-
      prob_parse([ si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(pas, nc-nom, pas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(là, adv-adv, là, [np-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(adolescent, nc-nom, adolescent, [n-1]), si(consulte, v-ver:pres, consulte, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(terminal, nc-nom, terminal, [n-1]), si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(prochain, adj-adj, prochain, [dr(0,n,n)-1]), si(devoir, nc-nom, devoir, [n-1]), si(scolaire, adj-adj, scolaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(terminal, nc-nom, terminal, [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(cherche, v-ver:pres, cherche, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(diabète, nc-nom, diabète, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(654, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(terminaux, nc-nom, terminal, [n-1]), si(informatiques, adj-adj, informatique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(655, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rendez, nc-nom, rendez, [n-1]), si('-vous', nc-pro:per, '-vous', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(organisés, vpp-ver:pper, organiser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(terminaux, nc-nom, terminal, [n-1]), si(informatiques, adj-adj, informatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(afficher, vinf-ver:infi, afficher, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dossier, nc-nom, dossier, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(rendez, nc-nom, rendez, [n-1]), si('-vous', adj-adj, '-vous', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(chaque, det-pro:ind, chaque, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(656, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(terminaux, nc-nom, terminal, [n-1]), si(informatiques, adj-adj, informatique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(657, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rejeté, vpp-ver:pper, rejeter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(pénale, adj-adj, pénal, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(enseignant, nc-nom, enseignant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(école, nc-nom, école, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(village, nc-nom, village, [n-1]), si(accusé, vpp-ver:pper, accuser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(logiciels, nc-nom, logiciel, [n-1]), si('Microsoft', npp-nam, 'Microsoft', [dl(0,n,n)-1]), si(piratés, vpp-ver:pper, pirater, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(658, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(rejette, v-ver:pres, rejeter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(piratage, nc-nom, piratage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Microsoft', npp-nam, 'Microsoft', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(659, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rejeté, vpp-ver:pper, rejeter, [dr(0,dl(0,np,s_ppart),np)-1]), si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(école, nc-nom, école, [n-1]), si(accusé, vpp-ver:pper, accuser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(logiciels, nc-nom, logiciel, [n-1]), si('Microsoft', npp-nam, 'Microsoft', [dl(0,n,n)-1]), si(piratés, vpp-ver:pper, pirater, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ex-dirigeant', nc-nom, 'ex-dirigeant', [dr(0,n,n)-1]), si(soviétique, adj-adj, soviétique, [n-1]), si('Mikhaïl', npp-nam, 'Mikhaïl', [dl(0,n,n)-1]), si('Gorbatchev', npp-nam, 'Gorbatchev', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dl(0,n,n)-1]), si(critiqué, vpp-ver:pper, critiquer, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s_ppart),np)-1]), si(procès, nc-nom, procès, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(660, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(rejette, v-ver:pres, rejeter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(piratage, nc-nom, piratage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Microsoft', npp-nam, 'Microsoft', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(661, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rejeté, vpp-ver:pper, rejeter, [dr(0,dl(0,np,s_ppart),np)-1]), si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accusations, nc-nom, accusation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(piratage, nc-nom, piratage, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(locale, adj-adj, local, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(qualifiant, vpr-ver:ppre, qualifier, [dr(0,dr(0,dl(0,np,s_ppres),pp_de),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(triviale, adj-adj, trivial, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(662, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(école, nc-nom, école, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(versions, nc-nom, version, [n-1]), si(bidon, adj-adj, bidon, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Windows', npp-nam, 'Windows', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Microsoft', npp-nam, 'Microsoft', [dr(0,np,np)-1]), si('Office', npp-nam, 'Office', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(663, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(rejette, v-ver:pres, rejeter, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accusations, nc-nom, accusation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(piratage, nc-nom, piratage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Microsoft', npp-nam, 'Microsoft', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(664, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(psychiatriques, adj-adj, psychiatrique, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(guérissent, v-ver:pres, guérir, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(même, adv-adv, même, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(permettent, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sentir, vinf-ver:infi, sentir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), si(mieux, adv-adv, mieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(665, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(guérissent, v-ver:pres, guérir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(mentales, adj-adj, mental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(666, Result) :-
      prob_parse([ si('Donc', adv-kon, 'Donc', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(psychiatriques, adj-adj, psychiatrique, [dl(0,n,n)-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),np),dl(0,np,s_inf))-1]), si(cesser, vinf-ver:infi, cesser, [dl(0,np,s_inf)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(comportements, nc-nom, comportement, [n-1]), si(déplaisants, adj-adj, déplaisant, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(handicaper, vinf-ver:infi, handicaper, [dr(0,dl(0,np,s_inf),np)-1]), si(mentalement, adv-adv, mentalement, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si(suffisamment, adv-adv, suffisamment, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(puisse, vs-ver:subp, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sentir, vinf-ver:infi, sentir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(colère, nc-nom, colère, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(malheureuse, adj-adj, malheureux, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(déprimée, vpp-ver:pper, déprimer, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(667, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(guérissent, v-ver:pres, guérir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(mentales, adj-adj, mental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(668, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(engagés, vpp-ver:pper, engager, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(vastes, adj-adj, vaste, [dr(0,n,n)-1]), si(efforts, nc-nom, effort, [n-1]), si(internationaux, adj-adj, international, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tant, adv-adv, tant, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(activités, nc-nom, activité, [n-1]), si(multilatérales, adj-adj, multilatéral, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), si(bilatérales, adj-adj, bilatéral, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(669, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(engagés, vpp-ver:pper, engager, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(transfert, nc-nom, transfert, [n-1]), si(illégal, adj-adj, illégal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(technologies, nc-nom, technologie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(670, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(législation, nc-nom, législation, [n-1]), si(reconnaît, v-ver:pres, reconnaître, [dr(0,dl(0,np,s),np)-1]), si(explicitement, adv-adv, explicitement, [dl(1,s,s)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enseignement, nc-nom, enseignement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(option, nc-nom, option, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(éducation, nc-nom, éducation, [n-1]), si(légitime, adj-adj, légitime, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(place, nc-nom, placer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pied, nc-nom, pied, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(égalité, nc-nom, égalité, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enseignement, nc-nom, enseignement, [n-1]), si(scolaire, adj-adj, scolaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(671, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(autorise, v-ver:pres, autoriser, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enseignement, nc-nom, enseignement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(672, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(législation, nc-nom, législation, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éducation, nc-nom, éducation, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(reconnaît, v-ver:pres, reconnaître, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enseignement, nc-nom, enseignement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(673, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(autorise, v-ver:pres, autoriser, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enseignement, nc-nom, enseignement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(674, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(auteurs, nc-nom, auteur, [n-1]), si(soutiennent, v-ver:pres, soutenir, [dr(0,dl(0,np,s),s_q)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(',', ponct-pun, ',', [let-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(éducateurs, nc-nom, éducateur, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(option, nc-nom, option, [n-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(agence, nc-nom, agence, [n-1]), si(culturelle, adj-adj, culturel, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(scolarisation, nc-nom, scolarisation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(675, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(permet, v-ver:pres, permettre, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enseignement, nc-nom, enseignement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(676, Result) :-
      prob_parse([ si('Vous', cls-pro:per, 'Vous', [np-1]), si(pensez, v-ver:pres, penser, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(gens, nc-nom, gens, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(côtés, nc-nom, côté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(lutte, nc-nom, lutte, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(aimeraient, v-ver:pres, aimer, [dr(0,dl(0,np,s),s_q)-1]), si(bien, adv-adv, bien, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(cela, pro-pro:dem, celer, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aboutisse, vs-ver:subp, aboutir, [dl(0,np,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('?', ponct-pun, '?', [dl(0,s,txt)-1])], Result).
sent(677, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(pourparlers, nc-nom, pourparler, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si(réussissent, v-ver:pres, réussir, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(678, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(républicaine, adj-adj, républicain, [dl(0,n,n)-1]), si(irlandaise, adj-adj, irlandais, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(soumis, vpp-ver:pper, soumettre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(message, nc-nom, message, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(attendu, vpp-ver:pper, attendre, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(négociateurs, nc-nom, négociateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suscité, vpp-ver:pper, susciter, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mince, adj-adj, mince, [dr(0,n,n)-1]), si(espoir, nc-nom, espoir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dernière, adj-adj, dernier, [dr(0,n,n)-1]), si(minute, nc-nom, minute, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mission, nc-nom, mission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sauvetage, nc-nom, sauvetage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(sénateur, nc-nom, sénateur, [n-1]), si('George', npp-nam, 'George', [dl(0,n,n)-1]), si('J.', npp-abr, 'J.', [dl(0,n,n)-1]), si('Mitchell', npp-nam, 'Mitchell', [dl(0,n,n)-1]), si(puisse, vs-ver:subp, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(réussir, vinf-ver:infi, réussir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), si(avancer, vinf-ver:infi, avancer, [dl(0,np,s_inf)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impasse, nc-nom, impasse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(679, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(négociations, nc-nom, négociation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si(réussissent, v-ver:pres, réussir, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(680, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fallu, vpp-ver:pper, falloir, [dr(0,dl(0,np,s_ppart),np)-1]), si(encore, adv-adv, encore, [dr(0,np,np)-1]), si(22, det-num, 22, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(chemin, nc-nom, chemin, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(table, nc-nom, table, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(négociations, nc-nom, négociation, [n-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('cessez-le-feu', nc-nom, 'cessez-le-feu', [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(1994, adj-num, 1994, [dl(0,n,n)-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(annoncée, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('IRA', npp-abr, 'IRA', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(681, Result) :-
      prob_parse([ si('Cela', pro-pro:dem, 'Cela', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(marqué, vpp-ver:pper, marquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(processus, nc-nom, processus, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(abouti, vpp-ver:pper, aboutir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(avril, nc-nom, avril, [n-1]), si(1998, adj-num, 1998, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(accord, nc-nom, accord, [n-1]), si(couvrant, vpr-ver:ppre, couvrir, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(questions, nc-nom, question, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(civils, adj-adj, civil, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(relations, nc-nom, relation, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(682, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(pourparlers, nc-nom, pourparler, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si(réussissent, v-ver:pres, réussir, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(683, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(aura, v-ver:futu, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(ouragan, nc-nom, ouragan, [n-1]), si('Andrew', npp-nam, 'Andrew', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), si('-t-il', cls-pro:per, '-t-il', [np-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(faisant, vpr-ver:ppre, faire, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), si(référence, nc-nom, référence, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tempête, nc-nom, tempête, [n-1]), si(tropicale, adj-adj, tropical, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(catégorie, nc-nom, catégorie, [n-1]), si(5, adj-num, 5, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(frappé, vpp-ver:pper, frapper, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Floride', npp-nam, 'Floride', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(causant, vpr-ver:ppre, causer, [dr(0,dl(0,np,s_ppres),np)-1]), si('26,5', det-num, '26,5', [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dégâts, nc-nom, dégât, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(tuant, vpr-ver:ppre, tuer, [dr(0,dl(0,np,s_ppres),np)-1]), si(26, det-num, 26, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('Bahamas', npp-nam, 'Bahamas', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(684, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tempêtes, nc-nom, tempête, [n-1]), si(tropicales, adj-adj, tropical, [dl(0,n,n)-1]), si(causent, v-ver:pres, causer, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(graves, adj-adj, grave, [dr(0,n,n)-1]), si(dommages, nc-nom, dommage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(685, Result) :-
      prob_parse([ si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tempêtes, nc-nom, tempête, [n-1]), si(tropicales, adj-adj, tropical, [dl(0,n,n)-1]), si(mineures, adj-adj, mineur, [dl(0,n,n)-1]), si(passant, vpr-ver:ppre, passer, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(distance, nc-nom, distance, [n-1]), si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(grande, adj-adj, grand, [dl(0,n,n)-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dégâts, nc-nom, dégât, [n-1]), si(importants, adj-adj, important, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(686, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tempêtes, nc-nom, tempête, [n-1]), si(tropicales, adj-adj, tropical, [dl(0,n,n)-1]), si(provoquent, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dégâts, nc-nom, dégât, [n-1]), si(importants, adj-adj, important, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(687, Result) :-
      prob_parse([ si('Bilis', npp-nam, 'Bilis', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(désignée, vpp-ver:pper, désigner, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), si(tempête, nc-nom, tempête, [np-1]), si(tropicale, adj-adj, tropical, [dl(0,np,np)-1]), si(sévère, adj-adj, sévère, [dl(0,np,np)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('JMA', npp-abr, 'JMA', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tempête, nc-nom, tempête, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(beaucoup, adv-adv, beaucoup, [dl(1,s,s)-1]), si(renforcée, vpp-ver:pper, renforcer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jours, nc-nom, jour, [n-1]), si(suivants, vpr-ver:ppre, suivant, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si(marginal, adj-adj, marginal, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(altitude, nc-nom, altitude, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(entraînement, nc-nom, entraînement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(air, nc-nom, air, [n-1]), si(sec, adj-adj, sec, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(688, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tempêtes, nc-nom, tempête, [n-1]), si(tropicales, adj-adj, tropical, [dl(0,n,n)-1]), si(provoquent, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dégâts, nc-nom, dégât, [n-1]), si(importants, adj-adj, important, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(689, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(cyclone, nc-nom, cyclone, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(phénomène, nc-nom, phénomène, [n-1]), si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si(survenant, vpr-ver:ppre, survenir, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(baie, nc-nom, baie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(690, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tempêtes, nc-nom, tempête, [n-1]), si(tropicales, adj-adj, tropical, [dl(0,n,n)-1]), si(provoquent, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dégâts, nc-nom, dégât, [n-1]), si(importants, adj-adj, important, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(691, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(galvanisé, vpp-ver:pper, galvaniser, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(décret, nc-nom, décret, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Harry', npp-nam, 'Harry', [dl(0,n,n)-1]), si('S.', npp-abr, 'S.', [dl(0,n,n)-1]), si('Truman', npp-nam, 'Truman', [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tard, adv-adv, tard, [dl(1,s,s)-1]), si(cette, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si('-là', adv-adv, '-là', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(acres, nc-nom, acre, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('8.000', det-num, '8.000', [dr(0,np,n)-1]), si('km²', nc-nom, 'km²', [n-1]), si(')', ponct-pun, ')', [dl(0,n,n)-1]), si(en, p-prp, en, [let-1]), si(tant, adv-adv, tant, [dr(0,dl(1,s,s),n)-1]), si(que, cs-kon, que, [dr(0,n,s_q)-1]), si(parc, nc-nom, parc, [dr(0,s_q,n)-1]), si(national, adj-adj, national, [n-1]), si(des, p+d-prp:det, de, [dl(0,n,n)-1]), si('Everglades', npp-nam, 'Everglades', [dr(0,dl(0,n,n),n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(692, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(protégé, vpp-ver:pper, protéger, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Everglades', nc-nam, 'Everglades', [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(davantage, adv-adv, davantage, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(dommages, nc-nom, dommage, [n-1]), si(environnementaux, adj-adj, environnemental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(693, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(règlement, nc-nom, règlement, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Floride', npp-nam, 'Floride', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si('William', npp-nam, 'William', [dl(0,n,n)-1]), si('Hoeveler', npp-nam, 'Hoeveler', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(imposé, vpp-ver:pper, imposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(niveaux, nc-nom, niveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(phosphore, nc-nom, phosphore, [n-1]), si(nuisibles, adj-adj, nuisible, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Loxahatchee', npp-nam, 'Loxahatchee', [dr(0,n,n)-1]), si('National', npp-nam, 'National', [dl(0,n,n)-1]), si('Wildlife', npp-nam, 'Wildlife', [dl(0,n,n)-1]), si('Refuge', npp-nam, 'Refuge', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Everglades', npp-nam, 'Everglades', [n-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(31, adj-num, 31, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(2006, adj-num, 2006, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(694, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(protégé, vpp-ver:pper, protéger, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Everglades', nc-nam, 'Everglades', [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(davantage, adv-adv, davantage, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(dommages, nc-nom, dommage, [n-1]), si(environnementaux, adj-adj, environnemental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(695, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(outre, adv-adv, outre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(constitution, nc-nom, constitution, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(futurs, adj-adj, futur, [dr(0,n,n)-1]), si(candidats, nc-nom, candidat, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(poste, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(proposés, vpp-ver:pper, proposer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(approuvés, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(aura, v-ver:futu, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(mot, nc-nom, mot, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(696, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(procédure, nc-nom, procédure, [n-1]), si(diffère, v-ver:pres, différer, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(procédure, nc-nom, procédure, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mesure, nc-nom, mesure, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(acquerra, v-ver:futu, acquérir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pouvoir, nc-nom, pouvoir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(rejeter, vinf-ver:infi, rejeter, [dr(0,dl(0,np,s_inf),np)-1]), si(spécifiquement, adv-adv, spécifiquement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(désigné, vpp-ver:pper, désigner, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rejeter, vinf-ver:infi, rejeter, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ensemble, nc-nom, ensemble, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(697, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(candidats, nc-nom, candidat, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidence, nc-nom, présidence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CE', npp-abr, 'CE', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(désignés, vpp-ver:pper, désigner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(698, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(physique, nc-nom, physique, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(particules, nc-nom, particule, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(quarks, nc-nom, quark, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(constituants, nc-nom, constituant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(base, nc-nom, base, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(matière, nc-nom, matière, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(1,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(fermions, nc-nom, fermion, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(standard, adj-adj, standard, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(leptons, nc-nom, lepton, [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(699, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(antiparticules, nc-nom, antiparticule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(quarks, nc-nom, quark, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(appelées, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_pass),np)-1]), si(antiquarks, nc-nom, antiquark, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(700, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(quarks, nc-nom, quark, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(seules, adj-adj, seul, [dr(0,n,n)-1]), si(particules, nc-nom, particule, [n-1]), si(fondamentales, adj-adj, fondamental, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(interagissent, v-ver:pres, interagir, [dl(0,np,s)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(biais, nc-nom, biais, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(quatre, adj-num, quatre, [dr(0,n,n)-1]), si(forces, nc-nom, force, [n-1]), si(fondamentales, adj-adj, fondamental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(701, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(preuve, nc-nom, preuve, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(quarks, nc-nom, quark, [n-1]), si(supérieurs, adj-adj, supérieur, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(trouvée, vpp-ver:pper, trouver, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(702, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1965, pro-num, 1965, [np-1]), si(',', ponct-pun, ',', [let-1]), si('Moo-Young', npp-nam, 'Moo-Young', [dr(0,np,np)-1]), si('Han', npp-nam, 'Han', [np-1]), si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), si('Yoichiro', npp-nam, 'Yoichiro', [dr(0,np,np)-1]), si('Nambu', npp-nam, 'Nambu', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Oscar', npp-nam, 'Oscar', [dr(0,np,np)-1]), si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), si('Greenberg', npp-nam, 'Greenberg', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indépendamment, adv-adv, indépendamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(résolu, vpp-ver:pper, résoudre, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(problème, nc-nom, problème, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(proposant, vpr-ver:ppre, proposer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(quarks, nc-nom, quark, [n-1]), si(possèdent, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(degré, nc-nom, degré, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(liberté, nc-nom, liberté, [n-1]), si(de, p-prp, de, [n-1]), si(jauge, nc-nom, jauge, [dl(0,n,n)-1]), si('SU', npp-abr, 'SU', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si(3, pro-num, 3, [np-1]), si(')', ponct-pun, ')', [let-1]), si(supplémentaire, adj-adj, supplémentaire, [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,np)-1]), si(tard, adv-adv, tard, [np-1]), si(charge, nc-nom, charge, [dr(0,dl(0,np,np),n)-1]), si(de, p-prp, de, [n-1]), si(couleur, nc-nom, couleur, [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(703, Result) :-
      prob_parse([ si('Han', npp-nam, 'Han', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Nambu', npp-nam, 'Nambu', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(noté, vpp-ver:pper, noter, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(quarks, nc-nom, quark, [n-1]), si(interagiraient, v-ver:impf, interagir, [dl(0,np,s)-1]), si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(octet, nc-nom, octet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bosons, nc-nom, boson, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(jauge, nc-nom, jauge, [n-1]), si(vectoriels, adj-adj, vectoriel, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gluons, nc-nom, gluon, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(704, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(preuve, nc-nom, preuve, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(quarks, nc-nom, quark, [n-1]), si(supérieurs, adj-adj, supérieur, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(trouvée, vpp-ver:pper, trouver, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(705, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(autorisent, v-ver:pres, autoriser, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(double, adj-adj, double, [dr(0,n,n)-1]), si(nationalité, nc-nom, nationalité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(par, p-prp, par, [dr(0,dr(0,s,s),n)-1]), si(conséquent, adv-adv, conséquent, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(courses, nc-nom, course, [n-1]), si(courues, vpp-ver:pper, courir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Lagat', npp-nam, 'Lagat', [np-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(7, adj-num, 7, [dr(0,n,n)-1]), si(mai, nc-nom, mai, [n-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(ratifiées, vpp-ver:pper, ratifier, [dl(0,np,s_pass)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(records, nc-nom, record, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(puisque, cs-kon, puisque, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(règles, nc-nom, règle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('USATF', npp-abr, 'USATF', [n-1]), si(stipulent, v-ver:pres, stipuler, [dr(0,dl(0,np,s),s_q)-1]), si(seulement, adv-adv, seulement, [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(athlète, nc-nom, athlète, [n-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(citoyen, nc-nom, citoyen, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(participant, vpr-ver:ppre, participer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(compétition, nc-nom, compétition, [n-1]), si(sanctionnée, vpp-ver:pper, sanctionner, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(établir, vinf-ver:infi, établir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(record, nc-nom, record, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(706, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(records, nc-nom, record, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(athlétisme, nc-nom, athlétisme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1995, pro-num, 1995, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(ratifiés, vpp-ver:pper, ratifier, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(707, Result) :-
      prob_parse([ si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(lancer, nc-nom, lancer, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marteau, nc-nom, marteau, [n-1]), si(masculin, adj-adj, masculin, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1900, pro-num, 1900, [np-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('IAAF', npp-abr, 'IAAF', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ratifier, vinf-ver:infi, ratifier, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(marques, nc-nom, marque, [n-1]), si(féminines, adj-adj, féminin, [dl(0,n,n)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1995, pro-num, 1995, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(708, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(lancer, nc-nom, lancer, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marteau, nc-nom, marteau, [n-1]), si(féminin, adj-adj, féminin, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(inclus, vpp-ver:pper, inclure, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(été, nc-nom, être, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2000, pro-num, 2000, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('Sydney', npp-nam, 'Sydney', [np-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(inclus, vpp-ver:pper, inclure, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Championnats', nc-nam, 'Championnats', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(un, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(an, nc-nom, an, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(709, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(records, nc-nom, record, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(athlétisme, nc-nom, athlétisme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1995, pro-num, 1995, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(ratifiés, vpp-ver:pper, ratifier, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(710, Result) :-
      prob_parse([ si('Lillehammer', npp-nam, 'Lillehammer', [dr(0,np,np)-1]), si('Ishockeylubb', npp-nam, 'Ishockeylubb', [np-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(joué, vpp-ver:pper, jouer, [dr(0,dl(0,np,s_ppart),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(matchs, nc-nom, match, [n-1]), si(',', ponct-pun, ',', [n-1]), si(mais, cc-kon, mais, [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(importants, adj-adj, important, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(tournois, nc-nom, tournoi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(hockey, nc-nom, hockey, [n-1]), si(disputés, vpp-ver:pper, disputer, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),pp)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arène, nc-nom, arène, [dr(0,np,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1994, pro-num, 1994, [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(rendus, vpp-ver:pper, rendre, [dr(0,dl(0,n,n),pp_par)-1]), si(célèbres, adj-adj, célèbre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(but, nc-nom, but, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), si('Forsberg', npp-nam, 'Forsberg', [dr(0,np,np)-1]), si(lors, adv-adv, lors, [np-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),pp_de)-1]), si(la, det-det:art, le, [dr(0,pp_de,np)-1]), si(séance, nc-nom, séance, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(tirs, nc-nom, tir, [dr(0,dl(0,n,n),n)-1]), si(au, p+d-prp:det, au, [n-1]), si(but, nc-nom, but, [dr(0,dl(0,n,n),n)-1]), si(décisive, adj-adj, décisif, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(match, nc-nom, match, [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si('Championnats', nc-nam, 'Championnats', [dr(0,np,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(monde, nc-nom, monde, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si(hockey, nc-nom, hockey, [dr(0,dl(0,n,n),n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si(glace, nc-nom, glace, [n-1]), si(de, p-prp, de, [n-1]), si(1999, pro-num, 1999, [np-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(711, Result) :-
      prob_parse([ si('Lillehammer', npp-nam, 'Lillehammer', [np-1]), si(accueille, v-ver:pres, accueillir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(finales, nc-nom, finale, [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(hockey, nc-nom, hockey, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si(glace, nc-nom, glace, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(712, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1994, pro-num, 1994, [np-1]), si(',', ponct-pun, ',', [let-1]), si(officiellement, adv-adv, officiellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connus, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('XVIIe', adj-num, 'XVIIe', [dr(0,n,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(célébrés, vpp-ver:pper, célébrer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1994, pro-num, 1994, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Lillehammer', npp-nam, 'Lillehammer', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Norvège', npp-nam, 'Norvège', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(713, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(villes, nc-nom, ville, [n-1]), si(candidates, adj-adj, candidate, [dl(0,n,n)-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('Anchorage', npp-nam, 'Anchorage', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('Alaska', npp-nam, 'Alaska', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Östersund', npp-nam, 'Östersund', [np-1]), si('/', ponct-pun, '/', [dr(0,dl(0,np,np),np)-1]), si('Åre', npp-nam, 'Åre', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('Suède', npp-nam, 'Suède', [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sofia', npp-nam, 'Sofia', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(714, Result) :-
      prob_parse([ si('Lillehammer', npp-nam, 'Lillehammer', [np-1]), si(accueille, v-ver:pres, accueillir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(finales, nc-nom, finale, [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(hockey, nc-nom, hockey, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si(glace, nc-nom, glace, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(715, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(convient, v-ver:pres, convier, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(souligner, vinf-ver:infi, souligner, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(compétences, nc-nom, compétence, [n-1]), si(linguistiques, adj-adj, linguistique, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(inégalement, adv-adv, inégalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réparties, vpp-ver:pper, répartir, [dr(0,dl(0,np,s_pass),pp)-1]), si(à, p-prp, à, [dr(0,dr(0,pp,pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(géographique, adj-adj, géographique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(groupes, nc-nom, groupe, [n-1]), si('socio-démographiques', adj-adj, 'socio-démographiques', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(716, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(anglais, nc-nom, anglais, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(français, nc-nom, français, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(langues, nc-nom, langue, [n-1]), si(officielles, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(717, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(précédent, nc-nom, précédent, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Foreword', npp-nam, 'Foreword', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(intro, nc-nom, intro, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(album, nc-nom, album, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(termine, v-ver:pres, terminer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(bruit, nc-nom, bruit, [n-1]), si(fracassant, vpr-ver:ppre, fracassant, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(beaucoup, pro-pro:ind, beaucoup, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(bris, nc-nom, bris, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(verre, nc-nom, verre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agit, v-ver:pres, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(graveur, nc-nom, graveur, [n-1]), si(de, p-prp, de, [n-1]), si('CD', nc-abr, 'CD', [n-1]), si(externe, adj-adj, externe, [dl(0,n,n)-1]), si(posé, vpp-ver:pper, poser, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(table, nc-nom, table, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(bois, nc-nom, bois, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(fracassé, vpp-ver:pper, fracasser, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(batte, nc-nom, batte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(baseball, nc-nom, baseball, [dr(0,dl(0,n,n),n)-1]), si(en, p-prp, en, [n-1]), si(aluminium, nc-nom, aluminium, [let-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(718, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(graveur, nc-nom, graveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CD', nc-abr, 'CD', [n-1]), si(frappe, v-ver:pres, frappe, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(marchés, nc-nom, marché, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(719, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(gamme, nc-nom, gamme, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Macintosh', npp-nam, 'Macintosh', [np-1]), si(varie, v-ver:pres, varier, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bureau, nc-nom, bureau, [n-1]), si('Mac', npp-nam, 'Mac', [dl(0,n,n)-1]), si(mini, nc-nam, mini, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entrée, nc-nom, entrée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gamme, nc-nom, gamme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Apple', npp-nam, 'Apple', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(serveur, nc-nom, serveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milieu, nc-nom, milieu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gamme, nc-nom, gamme, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Xserve', npp-abr, 'Xserve', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(720, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(systèmes, nc-nom, système, [n-1]), si('Macintosh', npp-nam, 'Macintosh', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(principalement, adv-adv, principalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(destinés, vpp-ver:pper, destiner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(marchés, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éducation, nc-nom, éducation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(professionnels, nc-nom, professionnel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(721, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(graveur, nc-nom, graveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('CD', nc-abr, 'CD', [n-1]), si(arrive, v-ver:pres, arriver, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(marchés, nc-nom, marché, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(722, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(assassinat, nc-nom, assassinat, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Yitzhak', npp-nam, 'Yitzhak', [dr(0,np,np)-1]), si('Rabin', npp-nam, 'Rabin', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('21h30', npp-nam, '21h30', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(issue, nc-nom, issue, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rassemblement, nc-nom, rassemblement, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(accords, nc-nom, accord, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Oslo', npp-nam, 'Oslo', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(place, nc-nom, place, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Rois', nc-nam, 'Rois', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [dr(0,dl(0,n,n),np)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Tel-Aviv', npp-nam, 'Tel-Aviv', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(723, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(assassinat, nc-nom, assassinat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Rabin', npp-nam, 'Rabin', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1995, pro-num, 1995, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(724, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(4, adj-num, 4, [dr(0,n,n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Rabin', npp-nam, 'Rabin', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(assassiné, vpp-ver:pper, assassiner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Yigal', npp-nam, 'Yigal', [dr(0,np,np)-1]), si('Amir', npp-nam, 'Amir', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(radical, nc-nom, radical, [n-1]), si(juif, adj-adj, juif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droite, nc-nom, droite, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(était, v-ver:impf, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(vigoureusement, adv-adv, vigoureusement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(opposé, vpp-ver:pper, opposer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(signature, nc-nom, signature, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(accords, nc-nom, accord, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Oslo', npp-nam, 'Oslo', [np-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si('Rabin', npp-nam, 'Rabin', [np-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rassemblement, nc-nom, rassemblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(promotion, nc-nom, promotion, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(processus, nc-nom, processus, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Oslo', npp-nam, 'Oslo', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(place, nc-nom, place, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Rois', nc-nom, 'Rois', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Tel', npp-nam, 'Tel', [dr(0,np,np)-1]), si('Aviv', npp-nam, 'Aviv', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rebaptisée, vpp-ver:pper, rebaptiser, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(place, nc-nom, place, [dr(0,np,np)-1]), si('Yitzhak', npp-nam, 'Yitzhak', [dr(0,np,np)-1]), si('Rabin', npp-nam, 'Rabin', [np-1]), si(après, p-prp, après, [np-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(')', ponct-pun, ')', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(725, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(assassinat, nc-nom, assassinat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Rabin', npp-nam, 'Rabin', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1995, pro-num, 1995, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(726, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(versions, nc-nom, version, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(action, nc-nom, action, [n-1]), si(intensive, adj-adj, intensif, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Mongolie', npp-nam, 'Mongolie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Finlande', npp-nam, 'Finlande', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si(1941, adj-num, 1941, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(727, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(diverses, adj-adj, divers, [dr(0,np,n)-1]), si(fonctions, nc-nom, fonction, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(variantes, nc-nom, variante, [n-1]), si(civiles, adj-adj, civil, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(avion, nc-nom, avion, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entraînement, nc-nom, entraînement, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(rôles, nc-nom, rôle, [n-1]), si(secondaires, adj-adj, secondaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(728, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(relations, nc-nom, relation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Mongolie', npp-nam, 'Mongolie', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(améliorent, v-ver:pres, améliorer, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(729, Result) :-
      prob_parse([ si('Auparavant', adv-adv, 'Auparavant', [dr(0,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(paria, nc-nom, paria, [n-1]), si(auquel, p+pro-pro:rel, auquel, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_a))))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(pays, nc-nom, pays, [n-1]), si(refusaient, v-ver:impf, refuser, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(reconnaissance, nc-nom, reconnaissance, [n-1]), si(diplomatique, adj-adj, diplomatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(relations, nc-nom, relation, [n-1]), si(officielles, adj-adj, officiel, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nations, nc-nom, nation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si(1980, adj-num, 1980, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(730, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(relations, nc-nom, relation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Mongolie', npp-nam, 'Mongolie', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(améliorent, v-ver:pres, améliorer, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(731, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(mon, det-det:pos, mon, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(général, nc-nom, général, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(cité, vpp-ver:pper, citer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acte, nc-nom, acte, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(accusation, nc-nom, accusation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(comparu, vpp-ver:pper, comparaître, [dl(0,np,s_ppart)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(témoin, nc-nom, témoin, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('m\'', clo-pro:per, 'm\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(défendu, vpp-ver:pper, défendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(732, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(général, nc-nom, général, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(crée, v-ver:pres, créer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Balkans', npp-nam, 'Balkans', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(733, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(opportunité, nc-nom, opportunité, [n-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(stabilité, nc-nom, stabilité, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(peu, adv-adv, peu, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autre, pro-pro:ind, autre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(734, Result) :-
      prob_parse([ si('Sinon', adv-adv, 'Sinon', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Balkans', nc-nam, 'Balkans', [n-1]), si(deviendront, v-ver:pres, devenir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(trou, nc-nom, trou, [n-1]), si(noir, adj-adj, noir, [dl(0,n,n)-1]), si(permanent, adj-adj, permanent, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(coeur, nc-nom, coeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(735, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(général, nc-nom, général, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(crée, v-ver:pres, créer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Balkans', npp-nam, 'Balkans', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(736, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('52e', adj-num, '52e', [dr(0,n,n)-1]), si('Golden', npp-nam, 'Golden', [dr(0,n,n)-1]), si('Globe', npp-nam, 'Globe', [dr(0,n,n)-1]), si('Awards', npp-nam, 'Awards', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(récompensent, v-ver:pres, récompenser, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(meilleur, nc-nom, meilleur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cinéma, nc-nom, cinéma, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(télévision, nc-nom, télévision, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(1994, adj-num, 1994, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôtel, nc-nom, hôtel, [n-1]), si('Beverly', npp-nam, 'Beverly', [dl(0,n,n)-1]), si('Hilton', npp-nam, 'Hilton', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Beverly', npp-nam, 'Beverly', [dr(0,np,np)-1]), si('Hills', npp-nam, 'Hills', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(737, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Golden', npp-nam, 'Golden', [dr(0,n,n)-1]), si('Globes', npp-nam, 'Globes', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(1994, pro-num, 1994, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(décernés, vpp-ver:pper, décerner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), si('Angeles', npp-nam, 'Angeles', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(738, Result) :-
      prob_parse([ si('Millennium', npp-nam, 'Millennium', [dr(0,np,np)-1]), si('Approaches', npp-nam, 'Approaches', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Perestroika', npp-nam, 'Perestroika', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tous, adv-adv, tout, [dr(0,dl(1,s,s),np)-1]), si(deux, pro-num, deux, [np-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Tony', npp-nam, 'Tony', [dr(0,n,n)-1]), si('Award', npp-nam, 'Award', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(meilleure, adj-adj, meilleur, [dr(0,n,n)-1]), si(pièce, nc-nom, pièce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(théâtre, nc-nom, théâtre, [n-1]), si(coup, nc-nom, coup, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(coup, nc-nom, coup, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1993, pro-num, 1993, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(1994, pro-num, 1994, [np-1]), si(',', ponct-pun, ',', [let-1]), si(respectivement, adv-adv, respectivement, [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(739, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(pièces, nc-nom, pièce, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(coup, nc-nom, coup, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,dl(1,s,s)),n)-1]), si(coup, nc-nom, coup, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Drama', npp-nam, 'Drama', [dr(0,n,n)-1]), si('Desk', npp-nam, 'Desk', [dr(0,n,n)-1]), si('Award', npp-nam, 'Award', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(meilleure, adj-adj, meilleur, [dr(0,n,n)-1]), si(pièce, nc-nom, pièce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(théâtre, nc-nom, théâtre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(740, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Golden', npp-nam, 'Golden', [dr(0,n,n)-1]), si('Globes', npp-nam, 'Globes', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(1994, pro-num, 1994, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(décernés, vpp-ver:pper, décerner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), si('Angeles', npp-nam, 'Angeles', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(741, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(opposants, nc-nom, opposant, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prohibition, nc-nom, prohibition, [n-1]), si(soutiennent, v-ver:pres, soutenir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(inefficace, adj-adj, inefficace, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(coûteuse, adj-adj, coûteux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(socialement, adv-adv, socialement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(dommageable, adj-adj, dommageable, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(drogues, nc-nom, drogue, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elle, cls-pro:per, lui, [np-1]), si(interdit, v-ver:pres, interdire, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(742, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(affirment, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prohibition, nc-nom, prohibition, [n-1]), si(crée, v-ver:pres, créer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(criminalise, v-ver:pres, criminalise, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(innocentes, adj-adj, innocent, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(constituent, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(menace, nc-nom, menace, [n-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(violence, nc-nom, violence, [n-1]), si(associée, vpp-ver:pper, associer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acquisition, nc-nom, acquisition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(drogues, nc-nom, drogue, [n-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(source, nc-nom, source, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réglementées, vpp-ver:pper, réglementer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(743, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(opposants, nc-nom, opposant, [n-1]), si(soutiennent, v-ver:pres, soutenir, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prohibition, nc-nom, prohibition, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(inconstitutionnelle, adj-adj, inconstitutionnel, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(viole, v-ver:pres, viole, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(naturelle, adj-adj, naturel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(744, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(peines, nc-nom, peine, [n-1]), si(liées, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(drogue, nc-nom, drogue, [n-1]), si(varient, v-ver:pres, varier, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(745, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(concept, nc-nom, concept, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(base, nc-nom, base, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alcool, nc-nom, alcool, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(populaires, adj-adj, populaire, [dl(0,n,n)-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(drogues, nc-nom, drogue, [n-1]), si(illégales, adj-adj, illégal, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(subjectivement, adv-adv, subjectivement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(agréables, adj-adj, agréable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(746, Result) :-
      prob_parse([ si('Cela', pro-pro:dem, 'Cela', [np-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(critiques, nc-nom, critique, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(attribuable, vpp-ver:pper, attribuable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(profit, nc-nom, profit, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(campagnes, nc-nom, campagne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marketing, nc-nom, marketing, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sociétés, nc-nom, société, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(alcool, nc-nom, alcool, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(747, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(peines, nc-nom, peine, [n-1]), si(liées, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(drogue, nc-nom, drogue, [n-1]), si(varient, v-ver:pres, varier, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(748, Result) :-
      prob_parse([ si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(répertoriée, vpp-ver:pper, répertorier, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si('Web', npp-nam, 'Web', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('CDC', npp-abr, 'CDC', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('Center', npp-nam, 'Center', [n-1]), si(for, et-prp, for, [dr(0,dl(0,n,n),n)-1]), si('Disease', npp-nam, 'Disease', [dr(0,np,np)-1]), si('Control', et-nam, 'Control', [np-1]), si(')', ponct-pun, ')', [let-1]), si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(éliminer, vinf-ver:infi, éliminer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lieux, nc-nom, lieu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(travail, nc-nom, travail, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lieux, nc-nom, lieu, [n-1]), si(publics, adj-adj, public, [dl(0,n,n)-1]), si(fermés, vpp-ver:pper, fermer, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(considérablement, adv-adv, considérablement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(niveaux, nc-nom, niveau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('RSP', npp-abr, 'RSP', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(particules, nc-nom, particule, [n-1]), si(respirables, adj-adj, respirable, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(suspension, nc-nom, suspension, [n-1]), si(')', ponct-pun, ')', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lieux, nc-nom, lieu, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(accueil, nc-nom, accueil, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouest, nc-nom, ouest, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(749, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(restrictions, nc-nom, restriction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(fumer, nc-ver:infi, fumer, [dl(0,np,s_inf)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appliquent, v-ver:pres, appliquer, [dl(0,cl_r,dl(0,np,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(restaurants, nc-nom, restaurant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(750, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Queensland', npp-nam, 'Queensland', [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(interdit, vpp-ver:pper, interdire, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fumer, vinf-ver:infi, fumer, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pubs, nc-nom, pub, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(clubs, nc-nom, club, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(restaurants, nc-nom, restaurant, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(lieux, nc-nom, lieu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(travail, nc-nom, travail, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,pp,pp),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(zones, nc-nom, zone, [n-1]), si(commerciales, adj-adj, commercial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(restauration, nc-nom, restauration, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(plein, adj-adj, plein, [dr(0,n,n)-1]), si(air, nc-nom, air, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lieux, nc-nom, lieu, [n-1]), si(publics, adj-adj, public, [dl(0,n,n)-1]), si(extérieurs, adj-adj, extérieur, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(par, p-prp, par, [dr(0,dr(0,np,np),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(plages, nc-nom, plage, [n-1]), si(surveillées, vpp-ver:pper, surveiller, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(aires, nc-nom, aire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(jeux, nc-nom, jeu, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(stades, nc-nom, stade, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sport, nc-nom, sport, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(entrées, nc-nom, entrée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bâtiments, nc-nom, bâtiment, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(résidentiels, adj-adj, résidentiel, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(751, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(restrictions, nc-nom, restriction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(fumer, nc-ver:infi, fumer, [dl(0,np,s_inf)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appliquent, v-ver:pres, appliquer, [dl(0,cl_r,dl(0,np,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(restaurants, nc-nom, restaurant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(752, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(européens, adj-adj, européen, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commenté, vpp-ver:pper, commenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ralentissement, nc-nom, ralentissement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réformes, nc-nom, réforme, [n-1]), si(turques, adj-adj, turc, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(',', ponct-pun, ',', [let-1]), si(combiné, vpp-ver:pper, combiner, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(problème, nc-nom, problème, [n-1]), si(chypriote, adj-adj, chypriote, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conduit, vpp-ver:pper, conduire, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(commissaire, nc-nom, commissaire, [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élargissement, nc-nom, élargissement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(garde, nc-nom, garde, [n-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(naufrage, nc-nom, naufrage, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(imminent, adj-adj, imminent, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(négociations, nc-nom, négociation, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(753, Result) :-
      prob_parse([ si('Malgré', p-prp, 'Malgré', [dr(0,dr(0,s,s),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(revers, nc-nom, revers, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(clos, vpp-ver:pper, clore, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(chapitre, nc-nom, chapitre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociations, nc-nom, négociation, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juin, nc-nom, juin, [n-1]), si(2006, adj-num, 2006, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(754, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si(négocie, v-ver:pres, négocier, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(adhésion, nc-nom, adhésion, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(755, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(administration, nc-nom, administration, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(adhésion, nc-nom, adhésion, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(priorité, nc-nom, priorité, [n-1]), si(absolue, adj-adj, absolu, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(de, p-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(trains, nc-nom, train, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réformes, nc-nom, réforme, [n-1]), si('-', ponct-pun, '-', [let-1]), si(parfois, adv-adv, parfois, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(controversés, vpp-ver:pper, controversé, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(harmoniser, vinf-ver:infi, harmoniser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(progressivement, adv-adv, progressivement, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(normes, nc-nom, norme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(756, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(officiellement, adv-adv, officiellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(entamé, vpp-ver:pper, entamer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(négociations, nc-nom, négociation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(adhésion, nc-nom, adhésion, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(celles, pro-pro:dem, celui, [np-1]), si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basées, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acquis, nc-nom, acquis, [n-1]), si(communautaire, adj-adj, communautaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(757, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Turquie', npp-nam, 'Turquie', [n-1]), si(négocie, v-ver:pres, négocier, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(adhésion, nc-nom, adhésion, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(758, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(régime, nc-nom, régime, [n-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(gluten, nc-nom, gluten, [n-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(strictement, adv-adv, strictement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(suivi, vpp-ver:pper, suivre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(atteintes, vpp-ver:pper, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(coeliaque, adj-adj, coeliaque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dermatite, nc-nom, dermatite, [n-1]), si(herpétiforme, adj-adj, herpétiforme, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(759, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(régimes, nc-nom, régime, [n-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(gluten, nc-nom, gluten, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(coeliaques, nc-nom, coeliaque, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(760, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gluten, nc-nom, gluten, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(blé, nc-nom, blé, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(seigle, nc-nom, seigle, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(orge, nc-nom, orge, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), si(contaminer, vinf-ver:infi, contaminer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avoine, nc-nom, avoine, [n-1]), si(cultivée, vpp-ver:pper, cultiver, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(proximité, nc-nom, proximité, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(traitée, vpp-ver:pper, traiter, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), si(équipement, nc-nom, équipement, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(céréales, nc-nom, céréale, [n-1]), si(contenant, vpr-ver:ppre, contenir, [dr(0,dl(0,n,n),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(gluten, nc-nom, gluten, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(caséine, nc-nom, caséine, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(produits, nc-nom, produit, [n-1]), si(laitiers, adj-adj, laitier, [dl(0,n,n)-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(blé, nc-nom, blé, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(produits, nc-nom, produit, [n-1]), si(laitiers, adj-adj, laitier, [dl(0,n,n)-1]), si(constituent, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si(fréquemment, adv-adv, fréquemment, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(régime, nc-nom, régime, [n-1]), si(alimentaire, adj-adj, alimentaire, [dl(0,n,n)-1]), si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(761, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(régimes, nc-nom, régime, [n-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(gluten, nc-nom, gluten, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(destinés, vpp-ver:pper, destiner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(coeliaques, nc-nom, coeliaque, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(762, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(possède, v-ver:pres, posséder, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si('Austin', npp-nam, 'Austin', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('Nichols', npp-nam, 'Nichols', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(fabricant, nc-nom, fabricant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(whiskies, nc-nom, whisky, [n-1]), si('Wild', npp-nam, 'Wild', [dl(0,n,n)-1]), si('Turkey', npp-nam, 'Turkey', [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(division, nc-nom, division, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(boissons, nc-nom, boisson, [n-1]), si(alcoolisées, vpp-ver:pper, alcooliser, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancienne, adj-adj, ancien, [dr(0,n,n)-1]), si(société, nc-nom, société, [n-1]), si('Seagram', npp-nam, 'Seagram', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(participations, nc-nom, participation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(763, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(2005, pro-num, 2005, [np-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acquis, vpp-ver:pper, acquérir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(concurrent, nc-nom, concurrent, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('Allied', npp-nam, 'Allied', [dl(0,n,n)-1]), si('Domecq', npp-nam, 'Domecq', [dl(0,n,n)-1]), si(plc, npp-nam, plc, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(764, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(production, nc-nom, production, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(scotch, nc-nom, scotch, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(765, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(marée, nc-nom, marée, [n-1]), si(noire, adj-adj, noir, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(centrale, nc-nom, centrale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jiyeh', npp-nam, 'Jiyeh', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(environnementale, adj-adj, environnemental, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(',', ponct-pun, ',', [let-1]), si(causée, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rejet, nc-nom, rejet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fioul, nc-nom, fioul, [n-1]), si(lourd, adj-adj, lourd, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Méditerranée', npp-nam, 'Méditerranée', [n-1]), si(orientale, adj-adj, oriental, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réservoirs, nc-nom, réservoir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(stockage, nc-nom, stockage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(centrale, nc-nom, centrale, [n-1]), si(thermique, adj-adj, thermique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jiyeh', npp-nam, 'Jiyeh', [np-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), si('Liban', npp-nam, 'Liban', [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si(km, nc-abr, kilomètre, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(19, det-num, 19, [dr(0,np,n)-1]), si(mi, nc-nom, mi, [n-1]), si(')', ponct-pun, ')', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sud, nc-nom, sud, [dr(0,dl(0,n,n),np)-1]), si(de, p-prp, de, [np-1]), si('Beyrouth', npp-nam, 'Beyrouth', [let-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(bombardés, vpp-ver:pper, bombarder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(air, nc-nom, air, [n-1]), si(israélienne, adj-adj, israélien, [dl(0,n,n)-1]), si(les, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2006, adj-num, 2006, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si('israélo-libanais', adj-adj, 'israélo-libanais', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2006, pro-num, 2006, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(766, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si(affecte, v-ver:pres, affecter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(767, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(éléments, nc-nom, élément, [n-1]), si(marginaux, adj-adj, marginal, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(républicanisme, nc-nom, républicanisme, [n-1]), si(irlandais, adj-adj, irlandais, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pu, vpp-ver:pper, pouvoir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(origine, nc-nom, origine, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(émeutes, nc-nom, émeute, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(produites, vpp-ver:pper, produire, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Dublin', npp-nam, 'Dublin', [np-1]), si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), si(dernier, adj-adj, dernier, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(je, cls-pro:per, je, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pense, v-ver:pres, penser, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gros, nc-nom, gros, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(émeutiers, nc-nom, émeutier, [n-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(motivations, nc-nom, motivation, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(soi, pro-pro:per, soi, [np-1]), si(',', ponct-pun, ',', [let-1]), si(hormis, p-prp, hormis, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(identification, nc-nom, identification, [n-1]), si(occasionnelle, adj-adj, occasionnel, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(républicanisme, nc-nom, républicanisme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(768, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(prenaient, v-ver:impf, prendre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(gravement, adv-adv, gravement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(laissés, vpp-ver:pper, laisser, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(tomber, vinf-ver:infi, tomber, [dl(0,np,s_inf)-1]), si('-', ponct-pun, '-', [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(irlandais, adj-adj, irlandais, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(769, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(émeutes, nc-nom, émeute, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(football, nc-nom, football, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Dublin', npp-nam, 'Dublin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(770, Result) :-
      prob_parse([ si('Charlotte', npp-nam, 'Charlotte', [np-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Lottie', npp-nam, 'Lottie', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Dod', npp-nam, 'Dod', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(24, det-num, 24, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(1871, adj-num, 1871, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), si(27, adj-num, 27, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(1960, adj-num, 1960, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(athlète, nc-nom, athlète, [n-1]), si(anglaise, adj-adj, anglais, [dl(0,n,n)-1]), si(surtout, adv-adv, surtout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connue, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(comme, adv-adv, comme, [dr(0,pp,n)-1]), si(joueuse, nc-nom, joueur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tennis, nc-nom, tennis, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(771, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(cinq, det-num, cinq, [dr(0,dr(0,np,np),n)-1]), si(fois, nc-nom, fois, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(championnat, nc-nom, championnat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, nc-num, premier, [n-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si(quinze, det-num, quinze, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(été, nc-nom, été, [n-1]), si(1887, adj-num, 1887, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(772, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(gagnantes, adj-adj, gagnant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(populaires, adj-adj, populaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(773, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(certain, adj-adj, certain, [dr(0,n,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('plates-formes', nc-nom, 'plates-formes', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(interface, nc-nom, interface, [n-1]), si(utilisateur, nc-nom, utilisateur, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(smartphones, nc-nom, smartphone, [n-1]), si(basées, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('Symbian', npp-nam, 'Symbian', [dr(0,np,np)-1]), si('OS', npp-abr, 'OS', [np-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(inclus, vpp-ver:pper, inclus, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('plates-formes', nc-nom, 'plates-formes', [n-1]), si(ouvertes, vpp-ver:pper, ouvert, [dl(0,n,n)-1]), si('UIQ', npp-abr, 'UIQ', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Series', nc-nam, 'Series', [n-1]), si(60, adj-num, 60, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Series', npp-nam, 'Series', [n-1]), si(80, adj-num, 80, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), si('Series', npp-nam, 'Series', [dl(0,n,n)-1]), si(90, pro-num, 90, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nokia', npp-nam, 'Nokia', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('plates-formes', nc-nom, 'plates-formes', [n-1]), si(fermées, vpp-ver:pper, fermé, [dl(0,n,n)-1]), si(telles, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si(développée, vpp-ver:pper, développer, [dr(0,dl(0,np,np),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(combinés, nc-nom, combiné, [n-1]), si('FOMA', npp-nam, 'FOMA', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('NTT', npp-nam, 'NTT', [dr(0,np,np)-1]), si('DoCoMo', npp-nam, 'DoCoMo', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(774, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(adaptabilité, nc-nom, adaptabilité, [n-1]), si(permet, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Symbian', npp-nam, 'Symbian', [dr(0,np,np)-1]), si('OS', npp-abr, 'OS', [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(utilisé, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(smartphones, nc-nom, smartphone, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(facteurs, nc-nom, facteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(forme, nc-nom, forme, [n-1]), si(variés, vpp-ver:pper, varier, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(par, p-prp, par, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(forme, nc-nom, forme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coquille, nc-nom, coquille, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(barre, nc-nom, barre, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(monobloc, nc-nom, monobloc, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(candybar, nc-nom, candybar, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),pp_par)-1]), si(pilotés, vpp-ver:pper, piloter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(clavier, nc-nom, clavier, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(stylet, nc-nom, stylet, [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(775, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(téléphones, nc-nom, téléphone, [n-1]), si(portables, adj-adj, portable, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(volant, nc-nom, volant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(776, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(téléphones, nc-nom, téléphone, [n-1]), si(portables, adj-adj, portable, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(risquent, v-ver:pres, risquer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(interférer, vinf-ver:infi, interférer, [dr(0,dl(0,np,s_inf),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(équipements, nc-nom, équipement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(hôpitaux, nc-nom, hôpital, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(avions, nc-nom, avion, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(zones, nc-nom, zone, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Université', nc-nam, 'Université', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(sensibles, adj-adj, sensible, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(téléphones, nc-nom, téléphone, [n-1]), si(portables, adj-adj, portable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(777, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(téléphones, nc-nom, téléphone, [n-1]), si(portables, adj-adj, portable, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(volant, nc-nom, volant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(778, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(liberté, nc-nom, liberté, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(expression, nc-nom, expression, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(concept, nc-nom, concept, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(exprimer, vinf-ver:infi, exprimer, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(censure, nc-nom, censure, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(779, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), si(considérée, vpp-ver:pper, considérer, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(concept, nc-nom, concept, [n-1]), si(intégral, adj-adj, intégral, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(démocraties, nc-nom, démocratie, [n-1]), si(libérales, adj-adj, libéral, [dl(0,n,n)-1]), si(modernes, adj-adj, moderne, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(780, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(liberté, nc-nom, liberté, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(expression, nc-nom, expression, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(limitée, vpp-ver:pper, limiter, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Internet', npp-nam, 'Internet', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(781, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protection, nc-nom, protection, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Internet', npp-nam, 'Internet', [np-1]), si(',', ponct-pun, ',', [let-1]), si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connue, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('CIPA', npp-abr, 'CIPA', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(projets, nc-nom, projet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(loi, nc-nom, loi, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Congrès', npp-nam, 'Congrès', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(proposés, vpp-ver:pper, proposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(limiter, vinf-ver:infi, limiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exposition, nc-nom, exposition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pornographie, nc-nom, pornographie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(matériels, nc-nom, matériel, [n-1]), si(controversés, vpp-ver:pper, controversé, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(782, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(liberté, nc-nom, liberté, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(expression, nc-nom, expression, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(limitée, vpp-ver:pper, limiter, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Internet', npp-nam, 'Internet', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(783, Result) :-
      prob_parse([ si('Mêlant', adv-ver:ppre, 'Mêlant', [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sport, nc-nom, sport, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(culture, nc-nom, culture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éducation, nc-nom, éducation, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Olympisme', npp-nam, 'Olympisme', [n-1]), si(cherche, v-ver:pres, cherche, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mode, nc-nom, mode, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vie, nc-nom, vie, [n-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(joie, nc-nom, joie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effort, nc-nom, effort, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(valeur, nc-nom, valeur, [n-1]), si(éducative, adj-adj, éducatif, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bon, adj-adj, bon, [dr(0,n,n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(respect, nc-nom, respect, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(principes, nc-nom, principe, [n-1]), si(éthiques, adj-adj, éthique, [dl(0,n,n)-1]), si(fondamentaux, adj-adj, fondamental, [dl(0,n,n)-1]), si(universels, adj-adj, universel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(784, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si(favorisent, v-ver:pres, favoriser, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paix, nc-nom, paix, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(785, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(participants, nc-nom, participant, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(souligné, vpp-ver:pper, souligner, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nécessité, nc-nom, nécessité, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(appeler, vinf-ver:infi, appeler, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(sportifs, adj-adj, sportif, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(promouvoir, vinf-ver:infi, promouvoir, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(culture, nc-nom, culture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paix, nc-nom, paix, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(respect, nc-nom, respect, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(trêve, nc-nom, trêve, [n-1]), si(olympique, adj-adj, olympique, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), si(conviction, nc-nom, conviction, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(détermination, nc-nom, détermination, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(évidence, nc-nom, évidence, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(importance, nc-nom, importance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sport, nc-nom, sport, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), si(composante, nc-nom, composante, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(unité, nc-nom, unité, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(rapprochement, nc-nom, rapprochement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(peuples, nc-nom, peuple, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(786, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si(promeuvent, v-ver:pres, promouvoir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(paix, nc-nom, paix, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(787, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enfant, nc-nom, enfant, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), si(engagé, vpp-ver:pper, engager, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(reconnaissance, nc-nom, reconnaissance, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(expansion, nc-nom, expansion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('/', nc-sym, '/', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(régression, nc-nom, régression, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enfant, nc-nom, enfant, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(788, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enfant, nc-nom, enfant, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(789, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(référence, nc-nom, référence, [np-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(concept, nc-nom, concept, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(êtres, nc-nom, être, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(droits, nc-nom, droit, [n-1]), si(universels, adj-adj, universel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(statut, nc-nom, statut, [n-1]), si(',', ponct-pun, ',', [let-1]), si(indépendamment, adv-adv, indépendamment, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(juridiction, nc-nom, juridiction, [n-1]), si(légale, adj-adj, légal, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(facteurs, nc-nom, facteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(localisation, nc-nom, localisation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tels, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ethnicité, nc-nom, ethnicité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nationalité, nc-nom, nationalité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sexe, nc-nom, sexe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(790, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enfant, nc-nom, enfant, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si(historique, adj-adj, historique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(791, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Phare', nc-nam, 'Phare', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alexandrie', npp-nam, 'Alexandrie', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(sept, adj-num, sept, [dr(0,n,n)-1]), si(merveilles, nc-nom, merveille, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(antique, adj-adj, antique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(cessé, vpp-ver:pper, cesser, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fonctionner, vinf-ver:infi, fonctionner, [dl(0,np,s_inf)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(en, p-prp, en, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(détruit, vpp-ver:pper, détruire, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tremblement, nc-nom, tremblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1375, pro-num, 1375, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(792, Result) :-
      prob_parse([ si('Certains', pro-pro:ind, 'Certains', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(vestiges, nc-nom, vestige, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvés, vpp-ver:pper, retrouver, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sol, nc-nom, sol, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(port, nc-nom, port, [n-1]), si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alexandrie', npp-nam, 'Alexandrie', [np-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(plongeurs, nc-nom, plongeur, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1994, pro-num, 1994, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(793, Result) :-
      prob_parse([ si('D\'', det-prp, 'D\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(vestiges, nc-nom, vestige, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(révélés, vpp-ver:pper, révéler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(imagerie, nc-nom, imagerie, [n-1]), si(satellitaire, adj-adj, satellitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(794, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(vestiges, nc-nom, vestige, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(certaines, pro-pro:ind, certains, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(sept, adj-num, sept, [dr(0,n,n)-1]), si(merveilles, nc-nom, merveille, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(antique, adj-adj, antique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(795, Result) :-
      prob_parse([ si('AI', npp-abr, 'AI', [dr(0,np,np)-1]), si('USA', npp-nam, 'USA', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(oppose, v-ver:pres, opposer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(fermement, adv-adv, fermement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(application, nc-nom, application, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mort, nc-nom, mort, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(796, Result) :-
      prob_parse([ si('Amnesty', npp-nam, 'Amnesty', [np-1]), si(appelle, v-ver:pres, appeler, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(abolition, nc-nom, abolition, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(entier, adj-adj, entier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(en, p-prp, en, [dr(0,dr(0,np,np),n)-1]), si(particulier, nc-nom, particulier, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), si(aux, p+d-prp:det, à, [dr(0,dr(0,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), si('Vietnam', npp-nam, 'Vietnam', [n-1]), si(',', ponct-pun, ',', [let-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(constituent, v-ver:pres, constituer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(écrasante, adj-adj, écrasant, [dr(0,n,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(exécutions, nc-nom, exécution, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(797, Result) :-
      prob_parse([ si('AI', npp-abr, 'AI', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mort, nc-nom, mort, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(798, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ozone, nc-nom, ozone, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('O3', npp-nam, 'O3', [n-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(molécule, nc-nom, molécule, [n-1]), si(triatomique, adj-adj, triatomique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(constituée, vpp-ver:pper, constituer, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(atomes, nc-nom, atome, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(oxygène, nc-nom, oxygène, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(799, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(allotrope, nc-nom, allotrope, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(oxygène, nc-nom, oxygène, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(stable, adj-adj, stable, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(espèce, nc-nom, espèce, [n-1]), si(diatomique, adj-adj, diatomique, [dl(0,n,n)-1]), si('O2', npp-nam, 'O2', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(800, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présent, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(faibles, adj-adj, faible, [dr(0,n,n)-1]), si(concentrations, nc-nom, concentration, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(801, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(applications, nc-nom, application, [n-1]), si(industrielles, adj-adj, industriel, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ozonothérapie, nc-nom, ozonothérapie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(802, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dommages, nc-nom, dommage, [n-1]), si(causés, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(couche, nc-nom, couche, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ozone, nc-nom, ozone, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(803, Result) :-
      prob_parse([ si('Puisque', cs-kon, 'Puisque', [dr(0,dr(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(couche, nc-nom, couche, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ozone, nc-nom, ozone, [n-1]), si(empêche, v-ver:pres, empêcher, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(longueurs, nc-nom, longueur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(onde, nc-nom, onde, [n-1]), si('UVB', npp-nam, 'UVB', [dl(0,n,n)-1]), si(nocives, adj-adj, nocif, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si('270-315', det-num, '270-315', [dr(0,np,n)-1]), si(nm, nc-nom, nm, [n-1]), si(')', ponct-pun, ')', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lumière, nc-nom, lumière, [n-1]), si(ultraviolette, adj-adj, ultraviolet, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(traverser, vinf-ver:infi, traverser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(atmosphère, nc-nom, atmosphère, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(diminutions, nc-nom, diminution, [n-1]), si(observées, vpp-ver:pper, observer, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(prévues, vpp-ver:pper, prévoir, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ozone, nc-nom, ozone, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suscité, vpp-ver:pper, susciter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(inquiétude, nc-nom, inquiétude, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conduit, vpp-ver:pper, conduire, [dr(0,dl(0,np,s_ppart),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(adoption, nc-nom, adoption, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(protocole, nc-nom, protocole, [n-1]), si(de, p-prp, de, [n-1]), si('Montréal', npp-nam, 'Montréal', [dr(0,dl(0,n,n),np)-1]), si(interdisant, vpr-ver:ppre, interdire, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(production, nc-nom, production, [n-1]), si(de, p-prp, de, [n-1]), si('CFC', npp-abr, 'CFC', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(halons, nc-nom, halon, [n-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(que, cs-kon, que, [dr(0,pp_de,n)-1]), si(de, p-prp, de, [n-1]), si(produits, nc-nom, produit, [n-1]), si(chimiques, adj-adj, chimique, [dl(0,n,n)-1]), si(appauvrissant, vpr-ver:ppre, appauvrir, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(couche, nc-nom, couche, [n-1]), si('d\'', p-prp, 'd\'', [n-1]), si(ozone, nc-nom, ozone, [dr(0,dl(0,n,n),n)-1]), si(connexes, adj-adj, connexe, [n-1]), si(tels, adj-adj, tel, [dl(0,n,n)-1]), si(que, cs-kon, que, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,s_q,np)-1]), si(tétrachlorure, nc-nom, tétrachlorure, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(carbone, nc-nom, carbone, [n-1]), si(et, cc-kon, et, [n-1]), si(le, det-det:art, le, [n-1]), si(trichloroéthane, nc-nom, trichloroéthane, [n-1]), si('(', ponct-pun, '(', [n-1]), si(également, adv-adv, également, [let-1]), si(connu, vpp-ver:pper, connaître, [let-1]), si(sous, p-prp, sou, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(nom, nc-nom, nom, [dr(0,dl(0,n,n),pp)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),pp)-1]), si(méthylchloroforme, nc-nom, méthylchloroforme, [dr(0,np,n)-1]), si(')', ponct-pun, ')', [n-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(804, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dommages, nc-nom, dommage, [n-1]), si(causés, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(couche, nc-nom, couche, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ozone, nc-nom, ozone, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(805, Result) :-
      prob_parse([ si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), si(120, det-num, 120, [dr(0,np,n)-1]), si(miles, nc-nom, mile, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(côte, nc-nom, côte, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Cornouailles', npp-nam, 'Cornouailles', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(80, det-num, 80, [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(contaminés, vpp-ver:pper, contaminer, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si('15.000', det-num, '15.000', [dr(0,np,n)-1]), si(oiseaux, nc-nom, oiseau, [n-1]), si(marins, adj-adj, marin, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tués, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(énorme, adj-adj, énorme, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(organismes, nc-nom, organisme, [n-1]), si(marins, adj-adj, marin, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nappe, nc-nom, nappe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(270, det-num, 270, [dr(0,np,n)-1]), si(miles, nc-nom, mile, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(disperse, vs-ver:subp, disperser, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(806, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(accidents, nc-nom, accident, [n-1]), si(pétroliers, adj-adj, pétrolier, [dl(0,n,n)-1]), si(tuent, v-ver:pres, tuer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(oiseaux, nc-nom, oiseau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(807, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(tue, v-ver:pres, taire, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(oiseaux, nc-nom, oiseau, [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(façons, nc-nom, façon, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(808, Result) :-
      prob_parse([ si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(effet, nc-nom, effet, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(briser, vinf-ver:infi, briser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(imperméabilité, nc-nom, imperméabilité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(oiseaux, nc-nom, oiseau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(809, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(eau, nc-nom, eau, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(écoule, v-ver:pres, écouler, [dl(0,cl_r,dl(0,np,s))-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dos, nc-nom, dos, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(oiseau, nc-nom, oiseau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mer, nc-nom, mer, [n-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(oiseau, nc-nom, oiseau, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(protégé, vpp-ver:pper, protéger, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(couche, nc-nom, couche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(plumes, nc-nom, plume, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(chevauchent, v-ver:pres, chevaucher, [dl(0,cl_r,dl(0,np,s))-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tuiles, nc-nom, tuile, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(toit, nc-nom, toit, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(810, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(accidents, nc-nom, accident, [n-1]), si(pétroliers, adj-adj, pétrolier, [dl(0,n,n)-1]), si(tuent, v-ver:pres, tuer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(oiseaux, nc-nom, oiseau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(811, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(restaurants, nc-nom, restaurant, [n-1]), si(traditionnels, adj-adj, traditionnel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ramen, nc-nom, ramen, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sushis, nc-nom, sushi, [n-1]), si(dominent, v-ver:pres, dominer, [dr(0,dl(0,np,s),np)-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(culture, nc-nom, culture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(restauration, nc-nom, restauration, [n-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(',', ponct-pun, ',', [let-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(points, nc-nom, point, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vente, nc-nom, vente, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si('Pizza', npp-nam, 'Pizza', [dr(0,np,np)-1]), si('Hut', npp-nam, 'Hut', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('McDonald\'s', npp-nam, 'McDonald\'s', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Kentucky', npp-nam, 'Kentucky', [dr(0,np,np)-1]), si('Fried', npp-nam, 'Fried', [dr(0,np,np)-1]), si('Chicken', npp-nam, 'Chicken', [np-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(populaires, adj-adj, populaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chaînes, nc-nom, chaîne, [n-1]), si(japonaises, adj-adj, japonais, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(style, nc-nom, style, [n-1]), si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si('Mos', npp-nam, 'Mos', [dr(0,np,np)-1]), si('Burger', npp-nam, 'Burger', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(812, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(restauration, nc-nom, restauration, [n-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(813, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('Hawaï', npp-nam, 'Hawaï', [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hamburgers, nc-nom, hamburger, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), si(garnis, vpp-ver:pper, garnir, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(sauce, nc-nom, sauce, [n-1]), si(teriyaki, nc-nom, teriyaki, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(issue, vpp-ver:pper, issu, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(culture, nc-nom, culture, [n-1]), si('nippo-américaine', adj-adj, 'nippo-américaine', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(ananas, nc-nom, ananas, [n-1]), si(cultivé, vpp-ver:pper, cultiver, [dl(0,n,n)-1]), si(localement, adv-adv, localement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(814, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(restauration, nc-nom, restauration, [n-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(815, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(curry, nc-nom, curry, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(introduit, vpp-ver:pper, introduire, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ère, nc-nom, ère, [n-1]), si('Meiji', npp-nam, 'Meiji', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si(1869, pro-num, 1869, [np-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si(1913, pro-num, 1913, [np-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(administration, nc-nom, administration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Compagnie', nc-nam, 'Compagnie', [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Indes', nc-nam, 'Indes', [n-1]), si(orientales, adj-adj, oriental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(816, Result) :-
      prob_parse([ si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(raison, nc-nom, raison, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(curry, nc-nom, curry, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(catégorisé, vpp-ver:pper, catégoriser, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(plat, nc-nom, plat, [n-1]), si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(lieu, nc-nom, lieu, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(plat, nc-nom, plat, [n-1]), si(asiatique, adj-adj, asiatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(817, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(importe, v-ver:pres, importer, [dr(0,dl(0,np,s),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(riz, nc-nom, riz, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(818, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(coloniale, adj-adj, colonial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Sierra', npp-nam, 'Sierra', [n-1]), si('Leone', npp-nam, 'Leone', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(placide, adj-adj, placide, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(819, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(peuples, nc-nom, peuple, [n-1]), si(autochtones, adj-adj, autochtone, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(monté, vpp-ver:pper, monter, [dr(0,dl(0,np,s_ppart),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(révoltes, nc-nom, révolte, [n-1]), si(infructueuses, adj-adj, infructueux, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(domination, nc-nom, domination, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(domination, nc-nom, domination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Krios', npp-nam, 'Krios', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(820, Result) :-
      prob_parse([ si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(majeure, adj-adj, majeur, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('XXe', adj-num, 'XXe', [dr(0,n,n)-1]), si(siècle, nc-nom, siècle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(colonie, nc-nom, colonie, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(pacifique, adj-adj, pacifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(obtenue, vpp-ver:pper, obtenir, [dl(0,np,s_pass)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(violence, nc-nom, violence, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(821, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(rébellion, nc-nom, rébellion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Sierra', npp-nam, 'Sierra', [n-1]), si('Leone', adj-nam, 'Leone', [dl(0,n,n)-1]), si(affecte, v-ver:pres, affecter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(diamants, nc-nom, diamant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(822, Result) :-
      prob_parse([ si('Taylor', npp-nam, 'Taylor', [np-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(aidé, vpp-ver:pper, aider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(négocier, vinf-ver:infi, négocier, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Burkina', npp-nam, 'Burkina', [n-1]), si('Faso', npp-nam, 'Faso', [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(nom, nc-nom, nom, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('RUF', npp-abr, 'RUF', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fourniture, nc-nom, fourniture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mercenaires, nc-nom, mercenaire, [n-1]), si(burkinabés, adj-adj, burkinabé, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(paiement, nc-nom, paiement, [n-1]), si(devant, vpr-ver:ppre, devoir, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(effectué, vpp-ver:pper, effectuer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(diamants, nc-nom, diamant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sierra', npp-nam, 'Sierra', [np-1]), si('Leone', npp-nam, 'Leone', [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(823, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(rébellion, nc-nom, rébellion, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Sierra', npp-nam, 'Sierra', [n-1]), si('Leone', npp-nam, 'Leone', [dl(0,n,n)-1]), si(affecte, v-ver:pres, affecter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(diamants, nc-nom, diamant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(824, Result) :-
      prob_parse([ si('Women\'s', npp-nam, 'Women\'s', [dr(0,np,np)-1]), si('Hub', npp-nam, 'Hub', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(organisation, nc-nom, organisation, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(gouvernementale, adj-adj, gouvernemental, [dl(0,n,n)-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Philippines', npp-nam, 'Philippines', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(aide, v-ver:pres, aide, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(femmes, nc-nom, femme, [n-1]), si(luttant, vpr-ver:ppre, lutter, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autodétermination, nc-nom, autodétermination, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('TIC', npp-abr, 'TIC', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(technologies, nc-nom, technologie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(information, nc-nom, information, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(communication, nc-nom, communication, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(825, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tient, v-ver:pres, tenir, [dl(0,cl_r,dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Pékin', npp-nam, 'Pékin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(826, Result) :-
      prob_parse([ si('Women\'s', npp-nam, 'Women\'s', [dr(0,np,np)-1]), si('Net', npp-nam, 'Net', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(collaboré, vpp-ver:pper, collaborer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si('FEMNET', npp-nam, 'FEMNET', [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(plateforme, nc-nom, plateforme, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(permettant, vpr-ver:ppre, permettre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(processus, nc-nom, processus, [n-1]), si(régionaux, adj-adj, régional, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(vue, nc-nom, vue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pékin', npp-nam, 'Pékin', [np-1]), si(dédiée, vpp-ver:pper, dédier, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(femmes, nc-nom, femme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(827, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tient, v-ver:pres, tenir, [dl(0,cl_r,dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Pékin', npp-nam, 'Pékin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(828, Result) :-
      prob_parse([ si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(reconstruction, nc-nom, reconstruction, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(commence, v-ver:pres, commencer, [dl(0,np,s)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Reichstag', npp-nam, 'Reichstag', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(recouvert, vpp-ver:pper, recouvrir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(artiste, nc-nom, artiste, [n-1]), si(bulgare, adj-adj, bulgare, [dl(0,n,n)-1]), si('Christo', npp-nam, 'Christo', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('Jeanne-Claude', npp-nam, 'Jeanne-Claude', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1995, pro-num, 1995, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(attirant, vpr-ver:ppre, attirer, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(visiteurs, nc-nom, visiteur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(829, Result) :-
      prob_parse([ si('Christo', npp-nam, 'Christo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(recouvert, vpp-ver:pper, recouvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Reichstag', npp-nam, 'Reichstag', [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(830, Result) :-
      prob_parse([ si('Christo', npp-nam, 'Christo', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Jeanne-Claude', npp-nam, 'Jeanne-Claude', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(couple, nc-nom, couple, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(artistes, nc-nom, artiste, [n-1]), si(pratiquant, vpr-ver:ppre, pratiquer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(art, nc-nom, art, [n-1]), si(environnemental, adj-adj, environnemental, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(installation, nc-nom, installation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(831, Result) :-
      prob_parse([ si('Leurs', det-det:pos, 'Leurs', [dr(0,np,n)-1]), si(oeuvres, nc-nom, oeuvre, [n-1]), si(comprennent, v-ver:pres, comprendre, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(recouverture, nc-nom, recouverture, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Reichstag', npp-nam, 'Reichstag', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pont, nc-nom, pont, [n-1]), si('Neuf', npp-nam, 'Neuf', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Running', npp-nam, 'Running', [dr(0,n,n)-1]), si('Fence', npp-nam, 'Fence', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(24, det-num, 24, [dr(0,np,n)-1]), si(miles, nc-nom, mile, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(long, nc-nom, long, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(comtés, nc-nom, comté, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Marin', npp-nam, 'Marin', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sonoma', npp-nam, 'Sonoma', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('The', det-det:art, 'The', [dr(0,np,n)-1]), si('Gates', npp-nam, 'Gates', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('Central', npp-nam, 'Central', [dr(0,np,np)-1]), si('Park', npp-nam, 'Park', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(832, Result) :-
      prob_parse([ si('Christo', npp-nam, 'Christo', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(recouvert, vpp-ver:pper, recouvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Reichstag', npp-nam, 'Reichstag', [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(833, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Arabella', npp-nam, 'Arabella', [dr(0,np,np)-1]), si('Cosima-Asereba', npp-nam, 'Cosima-Asereba', [np-1]), si('Kiesbauer', npp-nam, 'Kiesbauer', [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cible, nc-nom, cible, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(piégée, vpp-ver:pper, piéger, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(studios, nc-nom, studio, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pro7', npp-nam, 'Pro7', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(assistant, nc-nom, assistant, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(blessé, vpp-ver:pper, blesser, [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(834, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(piégée, vpp-ver:pper, piéger, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(envoyée, vpp-ver:pper, envoyer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Kiesbauer', npp-nam, 'Kiesbauer', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(835, Result) :-
      prob_parse([ si('Kiesbauer', npp-nam, 'Kiesbauer', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cible, nc-nom, cible, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(piégée, vpp-ver:pper, piéger, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juin, nc-nom, juin, [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(836, Result) :-
      prob_parse([ si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(blessé, vpp-ver:pper, blesser, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(837, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(piégée, vpp-ver:pper, piéger, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(envoyée, vpp-ver:pper, envoyer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Kiesbauer', npp-nam, 'Kiesbauer', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(838, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(mobile, adj-adj, mobile, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('M-Commerce', npp-nam, 'M-Commerce', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('mCommerce', npp-nam, 'mCommerce', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('U-Commerce', npp-nam, 'U-Commerce', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nature, nc-nom, nature, [n-1]), si(omniprésente, vpp-ver:pper, omniprésent, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si(')', ponct-pun, ')', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(possibilité, nc-nom, possibilité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(appareil, nc-nom, appareil, [n-1]), si(mobile, adj-adj, mobile, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(par, p-prp, par, [dr(0,dr(0,np,np),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(téléphone, nc-nom, téléphone, [n-1]), si(mobile, adj-adj, mobile, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(téléphone, nc-nom, téléphone, [n-1]), si(cellulaire, adj-adj, cellulaire, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('PDA', nc-abr, 'PDA', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(smartphone, nc-nom, smartphone, [n-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(déplacements, nc-nom, déplacement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(839, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(téléphones, nc-nom, téléphone, [n-1]), si(mobiles, adj-adj, mobile, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(utilité, nc-nom, utilité, [n-1]), si(limitée, vpp-ver:pper, limité, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(840, Result) :-
      prob_parse([ si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avancée, nc-nom, avancée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(miniaturisation, nc-nom, miniaturisation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(actuellement, adv-adv, actuellement, [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(téléphones, nc-nom, téléphone, [n-1]), si(mobiles, adj-adj, mobile, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(portatifs, adj-adj, portatif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(841, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fonction, nc-nom, fonction, [n-1]), si(vocale, adj-adj, vocal, [dl(0,n,n)-1]), si(standard, adj-adj, standard, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(téléphone, nc-nom, téléphone, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(téléphone, nc-nom, téléphone, [n-1]), si(mobile, adj-adj, mobile, [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(charge, nc-nom, charge, [n-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(services, nc-nom, service, [n-1]), si(supplémentaires, adj-adj, supplémentaire, [dl(0,n,n)-1]), si(tels, adj-adj, tel, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('SMS', nc-abr, 'SMS', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(messagerie, nc-nom, messagerie, [n-1]), si(texte, nc-nom, texte, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(courrier, nc-nom, courrier, [n-1]), si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(commutation, nc-nom, commutation, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(paquets, nc-nom, paquet, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accès, nc-nom, accès, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Internet', npp-nam, 'Internet', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('MMS', nc-abr, 'MMS', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(envoi, nc-nom, envoi, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réception, nc-nom, réception, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(photos, nc-nom, photo, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(842, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(téléphones, nc-nom, téléphone, [n-1]), si(mobiles, adj-adj, mobile, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(utilité, nc-nom, utilité, [n-1]), si(limitée, vpp-ver:pper, limité, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(843, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(ministres, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pêche, nc-nom, pêche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(convenu, vpp-ver:pper, convenir, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, det-prp, de, [dr(0,pp_de,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(réductions, nc-nom, réduction, [n-1]), si(drastiques, adj-adj, drastique, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(quotas, nc-nom, quota, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pêche, nc-nom, pêche, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(26, det-num, 26, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociations, nc-nom, négociation, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(844, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(réduit, v-ver:pres, réduire, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(quotas, nc-nom, quota, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pêche, nc-nom, pêche, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(845, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(industrie, nc-nom, industrie, [n-1]), si(écossaise, adj-adj, écossais, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pêche, nc-nom, pêche, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tourmente, nc-nom, tourmente, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(apparu, vpp-ver:pper, apparaître, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pêcheurs, nc-nom, pêcheur, [n-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(mesure, nc-nom, mesure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(capturer, vinf-ver:infi, capturer, [dr(0,dl(0,np,s_inf),np)-1]), si(autant, adv-adv, autant, [dr(0,dr(0,np,s_q),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(églefins, nc-nom, églefin, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(pensaient, v-ver:impf, penser, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(vertu, nc-nom, vertu, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(quotas, nc-nom, quota, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(846, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(réduit, v-ver:pres, réduire, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(quotas, nc-nom, quota, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pêche, nc-nom, pêche, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(847, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(langue, nc-nom, langue, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(mot, nc-nom, mot, [n-1]), si(étudiant, adj-adj, étudiant, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(généralement, adv-adv, généralement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réservé, vpp-ver:pper, réserver, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(848, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(collège, nc-nom, collège, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), si(lycée, nc-nom, lycée, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(étudiants, nc-nom, étudiant, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(donc, adv-adv, donc, [dl(1,s,s)-1]), si(appelés, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_pass),np)-1]), si(élèves, nc-nom, élève, [np-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(traduction, nc-nom, traduction, [n-1]), si(anglaise, adj-adj, anglais, [dl(0,n,n)-1]), si(pupils, adj-adj, pupil, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(849, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(mots, nc-nom, mot, [n-1]), si(étrangers, adj-adj, étranger, [dl(0,n,n)-1]), si(existent, v-ver:pres, exister, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(français, nc-nom, français, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(850, Result) :-
      prob_parse([ si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(langues, nc-nom, langue, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(orthographe, nc-nom, orthographe, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(dit, v-ver:pres, dire, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si('grand-chose', nc-nom, 'grand-chose', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sons, nc-nom, son, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(par, p-prp, par, [dr(0,dr(0,np,np),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(anglais, nc-nom, anglais, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(lettres, nc-nom, lettre, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(muettes, adj-adj, muet, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(par, p-prp, par, [dr(0,dr(0,np,np),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(français, nc-nom, français, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(transcription, nc-nom, transcription, [n-1]), si(phonétique, adj-adj, phonétique, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(cruciale, adj-adj, crucial, [dr(0,dl(0,n,n),pp)-1]), si(non, adv-adv, non, [dr(0,pp,pp)-1]), si(seulement, adv-adv, seulement, [dr(0,pp,pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(apprenants, nc-nom, apprenant, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(aussi, adv-adv, aussi, [dr(0,pp,pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(linguistes, nc-nom, linguiste, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(851, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(mots, nc-nom, mot, [n-1]), si(étrangers, adj-adj, étranger, [dl(0,n,n)-1]), si(existent, v-ver:pres, exister, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(français, nc-nom, français, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(852, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(féministes, nc-nom, féministe, [n-1]), si(considèrent, v-ver:pres, considérer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(concours, nc-nom, concours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(beauté, nc-nom, beauté, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(femmes, nc-nom, femme, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(dégradants, adj-adj, dégradant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(tant, adv-adv, tant, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(spectateur, nc-nom, spectateur, [n-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(candidate, nc-nom, candidat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(853, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(comparaison, nc-nom, comparaison, [n-1]), si(courante, adj-adj, courant, [dl(0,n,n)-1]), si(faite, vpp-ver:pper, faire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(féministes, nc-nom, féministe, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(concours, nc-nom, concours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(beauté, nc-nom, beauté, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(marché, nc-nom, marché, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(bestiaux, nc-nom, bestial, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(applique, v-ver:pres, applique, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objectivation, nc-nom, objectivation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(femmes, nc-nom, femme, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(854, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(concours, nc-nom, concours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(beauté, nc-nom, beauté, [n-1]), si(internationaux, adj-adj, international, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(mettent, v-ver:pres, mettre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(855, Result) :-
      prob_parse([ si('Lady', npp-nom, 'Lady', [np-1]), si(of, et-prp, of, [dr(0,dl(0,np,np),np)-1]), si('Universe', npp-nam, 'Universe', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(concours, nc-nom, concours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(beauté, nc-nom, beauté, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gagnante, nc-nom, gagnant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(concours, nc-nom, concours, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(856, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(concours, nc-nom, concours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(beauté, nc-nom, beauté, [n-1]), si(internationaux, adj-adj, international, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(mettent, v-ver:pres, mettre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(857, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(construction, nc-nom, construction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Tour', nc-nam, 'Tour', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pise', npp-nam, 'Pise', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réalisée, vpp-ver:pper, réaliser, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(étapes, nc-nom, étape, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(200, det-num, 200, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(858, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(construction, nc-nom, construction, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(étage, nc-nom, étage, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(campanile, nc-nom, campanile, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(marbre, nc-nom, marbre, [n-1]), si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(9, adj-num, 9, [dr(0,n,n)-1]), si(août, nc-nom, août, [n-1]), si(1173, adj-num, 1173, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(succès, nc-nom, succès, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prospérité, nc-nom, prospérité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(859, Result) :-
      prob_parse([ si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(étage, nc-nom, étage, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(entouré, vpp-ver:pper, entourer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(piliers, nc-nom, pilier, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(chapiteaux, nc-nom, chapiteau, [n-1]), si(classiques, adj-adj, classique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(adossés, vpp-ver:pper, adosser, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(arcs, nc-nom, arc, [n-1]), si(aveugles, adj-adj, aveugle, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(860, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(elle, cls-pro:per, lui, [np-1]), si(rest, v-ver:pres, rest, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(intacte, adj-adj, intact, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(siècles, nc-nom, siècle, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(intempéries, nc-nom, intempérie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(âge, nc-nom, âge, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(861, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Tour', nc-nam, 'Tour', [n-1]), si('Penchée', npp-nam, 'Penchée', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Pise', npp-nam, 'Pise', [np-1]), si(survit, v-ver:pres, survivre, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(862, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(demande, nc-nom, demande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Food', npp-nam, 'Food', [n-1]), si(and, et-kon, and, [dr(0,dl(0,n,n),n)-1]), si('Drug', npp-nam, 'Drug', [dr(0,n,n)-1]), si('Administration', npp-nam, 'Administration', [n-1]), si(',', ponct-pun, ',', [let-1]), si('Fort', npp-nam, 'Fort', [dr(0,np,np)-1]), si('Dodge', npp-nam, 'Dodge', [dr(0,np,np)-1]), si('Animal', npp-nam, 'Animal', [dr(0,np,np)-1]), si('Health', npp-nam, 'Health', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(volontairement, adv-adv, volontairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(cessé, vpp-ver:pper, cesser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(production, nc-nom, production, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('ProHeart', npp-nam, 'ProHeart', [np-1]), si(6, adj-num, 6, [dl(0,np,np)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rappelé, vpp-ver:pper, rappeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('ProHeart', npp-nam, 'ProHeart', [n-1]), si(6, adj-num, 6, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(distribués, vpp-ver:pper, distribuer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(vétérinaires, nc-nom, vétérinaire, [n-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,pp_a,np)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(préoccupations, nc-nom, préoccupation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('FDA', npp-abr, 'FDA', [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [dr(0,dl(0,n,n),n)-1]), si(du, p+d-prp:det, de, [n-1]), si(médicament, nc-nom, médicament, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(résolues, vpp-ver:pper, résoudre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(863, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(produits, nc-nom, produit, [n-1]), si('Dodge', npp-nam, 'Dodge', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rappelés, vpp-ver:pper, rappeler, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(864, Result) :-
      prob_parse([ si('Chrysler', npp-nam, 'Chrysler', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(rappellerait, v-ver:cond, rappeler, [dr(0,dl(0,np,s),np)-1]), si('145.099', pro-num, '145.099', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(camionnettes, nc-nom, camionnette, [dr(0,n,n)-1]), si('Dodge', npp-nam, 'Dodge', [dl(0,n,n)-1]), si('Ram', npp-nam, 'Ram', [dl(0,n,n)-1]), si(1500, adj-num, 1500, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2006, pro-num, 2006, [np-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(réparer, vinf-ver:infi, réparer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sac, nc-nom, sac, [n-1]), si(gonflable, adj-adj, gonflable, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ceinture, nc-nom, ceinture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(passager, nc-nom, passager, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(865, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(produits, nc-nom, produit, [n-1]), si('Dodge', npp-nam, 'Dodge', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rappelés, vpp-ver:pper, rappeler, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(866, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(dévoilé, vpp-ver:pper, dévoiler, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(initiative, nc-nom, initiative, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(produits, nc-nom, produit, [n-1]), si(défectueux, adj-adj, défectueux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(rappels, nc-nom, rappel, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(867, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(produits, nc-nom, produit, [n-1]), si('Dodge', npp-nam, 'Dodge', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rappelés, vpp-ver:pper, rappeler, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(868, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(cardiaques, adj-adj, cardiaque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accidents, nc-nom, accident, [n-1]), si(vasculaires, adj-adj, vasculaire, [dl(0,n,n)-1]), si(cérébraux, adj-adj, cérébral, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(cardiovasculaires, adj-adj, cardiovasculaire, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(coeur, nc-nom, coeur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(vaisseaux, nc-nom, vaisseau, [n-1]), si(sanguins, adj-adj, sanguin, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(provoquées, vpp-ver:pper, provoquer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(869, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(cardiaques, adj-adj, cardiaque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accidents, nc-nom, accident, [n-1]), si(vasculaires, adj-adj, vasculaire, [dl(0,n,n)-1]), si(cérébraux, adj-adj, cérébral, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(causes, nc-nom, cause, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(décès, nc-nom, décès, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(870, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(871, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(presque, adv-adv, presque, [dr(0,np,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(organes, nc-nom, organe, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(corps, nc-nom, corps, [n-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(complet, adj-adj, complet, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Département', nc-nam, 'Département', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(services, nc-nom, service, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('HHS', npp-abr, 'HHS', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(872, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(873, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(fumeurs, nc-nom, fumeur, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(infections, nc-nom, infection, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(voies, nc-nom, voie, [n-1]), si(respiratoires, adj-adj, respiratoire, [dl(0,n,n)-1]), si(supérieures, adj-adj, supérieur, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(inférieures, adj-adj, inférieur, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('non-fumeurs', nc-nom, 'non-fumeurs', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(874, Result) :-
      prob_parse([ si('Cela', pro-pro:dem, 'Cela', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(produit, v-ver:pres, produire, [dl(0,cl_r,dl(0,np,s))-1]), si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si(endommage, v-ver:pres, endommager, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(défenses, nc-nom, défense, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(votre, det-det:pos, votre, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(infections, nc-nom, infection, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(875, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(876, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(récents, adj-adj, récent, [dr(0,n,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conclu, vpp-ver:pper, conclure, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cancers, nc-nom, cancer, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vessie, nc-nom, vessie, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(oesophage, nc-nom, oesophage, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bouche, nc-nom, bouche, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gorge, nc-nom, gorge, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si(cardiovasculaires, adj-adj, cardiovasculaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(effets, nc-nom, effet, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(reproduction, nc-nom, reproduction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(877, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(tabagisme, nc-nom, tabagisme, [n-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(maladies, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(878, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(lacunes, nc-nom, lacune, [n-1]), si(considérables, adj-adj, considérable, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(notre, det-det:pos, notre, [dr(0,np,n)-1]), si(connaissance, nc-nom, connaissance, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(formes, nc-nom, forme, [n-1]), si(modernes, adj-adj, moderne, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(nous, cls-pro:per, nous, [np-1]), si(savons, v-ver:pres, savoir, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(pendant, p-prp, pendant, [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si(carbonifère, adj-adj, carbonifère, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(formes, nc-nom, forme, [n-1]), si(différentes, adj-adj, différent, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(amphibiens, nc-nom, amphibien, [n-1]), si(parcouraient, v-ver:impf, parcourir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(marais, nc-nom, marais, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(879, Result) :-
      prob_parse([ si('A', p-prp, 'A', [dr(0,dr(0,dr(0,s,s),np),n)-1]), si(part, nc-nom, part, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(caeciliens, nc-nom, caecilien, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(amphibiens, nc-nom, amphibien, [n-1]), si(modernes, adj-adj, moderne, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(perdu, vpp-ver:pper, perdre, [dr(0,dl(0,np,s_ppart),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(écailles, nc-nom, écaille, [n-1]), si(semblables, adj-adj, semblable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(celles, pro-pro:dem, celui, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(poissons, nc-nom, poisson, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(peau, nc-nom, peau, [n-1]), si(douce, adj-adj, doux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(880, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(grenouilles, nc-nom, grenouille, [n-1]), si(vivent, v-ver:pres, vivre, [dl(0,np,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(marécages, nc-nom, marécage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(881, Result) :-
      prob_parse([ si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), si(autant, adv-adv, autant, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(espèces, nc-nom, espèce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(crapauds, nc-nom, crapaud, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(grenouilles, nc-nom, grenouille, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(surprenant, adj-adj, surprenant, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(habitent, v-ver:pres, habiter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(variété, nc-nom, variété, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(habitats, nc-nom, habitat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(882, Result) :-
      prob_parse([ si('Certains', pro-pro:ind, 'Certains', [np-1]), si(vivent, v-ver:pres, vivre, [dl(0,np,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(désertiques, adj-adj, désertique, [dl(0,n,n)-1]), si(arides, adj-adj, aride, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(montagneuses, adj-adj, montagneux, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si(encore, adv-adv, encore, [dr(0,pp,pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(marécages, nc-nom, marécage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(883, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(grenouilles, nc-nom, grenouille, [n-1]), si(vivent, v-ver:pres, vivre, [dl(0,np,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(marécages, nc-nom, marécage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(884, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bénéficié, vpp-ver:pper, bénéficier, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(immunité, nc-nom, immunité, [n-1]), si(miraculeusement, adv-adv, miraculeusement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(longue, adj-adj, long, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(redoutable, adj-adj, redoutable, [dr(0,n,n)-1]), si(peste, nc-nom, peste, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(balayait, v-ver:impf, balayer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(885, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(peste, nc-nom, peste, [n-1]), si(noire, adj-adj, noir, [dl(0,n,n)-1]), si(balayait, v-ver:impf, balayer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(886, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(peste, nc-nom, peste, [n-1]), si(noire, adj-adj, noir, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(duré, vpp-ver:pper, durer, [dr(0,dl(0,np,s_ppart),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,np,s_ppart),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tiers, nc-nom, tiers, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(887, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(peste, nc-nom, peste, [n-1]), si(noire, adj-adj, noir, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(balayé, vpp-ver:pper, balayer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(888, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(originaire, adj-adj, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(889, Result) :-
      prob_parse([ si('De', p-prp, 'De', [dr(0,dr(0,s,s),n)-1]), si(même, adj-adj, même, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(pandémies, nc-nom, pandémie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(peste, nc-nom, peste, [n-1]), si(bubonique, adj-adj, bubonique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(890, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(peste, nc-nom, peste, [n-1]), si(noire, adj-adj, noir, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(balayé, vpp-ver:pper, balayer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(891, Result) :-
      prob_parse([ si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), si(conséquent, nc-nom, conséquent, [n-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(trouve, v-ver:pres, trouver, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(influence, nc-nom, influence, [n-1]), si(turque, adj-adj, turc, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(culture, nc-nom, culture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(art, nc-nom, art, [n-1]), si(marocains, adj-adj, marocain, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étendent, v-ver:pres, étendre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(tradition, nc-nom, tradition, [n-1]), si(ininterrompue, adj-adj, ininterrompu, [dl(0,n,n)-1]), si(remontant, vpr-ver:ppre, remonter, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(islamique, adj-adj, islamique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(892, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(influence, v-ver:pres, influencer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(art, nc-nom, art, [n-1]), si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(893, Result) :-
      prob_parse([ si('Norris', npp-nam, 'Norris', [np-1]), si(poursuit, v-ver:pres, poursuivre, [dr(0,dl(0,np,s),np)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(important, adj-adj, important, [dr(0,n,n)-1]), si(travail, nc-nom, travail, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), si(originalité, nc-nom, originalité, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(clarté, nc-nom, clarté, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(explorant, vpr-ver:ppre, explorer, [dr(0,dl(0,np,s_ppres),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(relation, nc-nom, relation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(art, nc-nom, art, [n-1]), si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(masse, nc-nom, masse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(894, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(influence, v-ver:pres, influencer, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(art, nc-nom, art, [n-1]), si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(895, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(poésie, nc-nom, poésie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(bon, adj-adj, bon, [dr(0,np,n)-1]), si(ménage, nc-nom, ménage, [n-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('L\'Iliade', npp-nam, 'L\'Iliade', [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si(ne, adv-adv, ne, [let-1]), si('s\'', clr-pro:per, 's\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(adresse, v-ver:pres, adresse, [cl_r-1]), si(à, p-prp, à, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(la, det-det:art, le, [dr(0,pp_a,np)-1]), si(classe, nc-nom, classe, [dr(0,np,n)-1]), si(dirigeante, adj-adj, dirigeant, [n-1]), si(des, p+d-prp:det, de, [dl(0,n,n)-1]), si('Grecs', nc-nam, 'Grecs', [dr(0,dl(0,n,n),n)-1]), si(en, p-prp, en, [n-1]), si(identifiant, vpr-ver:ppre, identifier, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(les, det-det:art, le, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), si(dirigeants, nc-nom, dirigeant, [dr(0,np,n)-1]), si(contemporains, adj-adj, contemporain, [n-1]), si(aux, p+d-prp:det, à, [dl(0,n,n)-1]), si(héros, nc-nom, héros, [dr(0,pp_a,n)-1]), si(de, p-prp, de, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), si(guerre, nc-nom, guerre, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Troie', npp-nam, 'Troie', [dr(0,dl(0,n,n),np)-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(896, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(poésie, nc-nom, poésie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(influencent, v-ver:pres, influencer, [dl(0,cl_r,dl(0,np,s))-1]), si(mutuellement, adv-adv, mutuellement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(897, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(définitivement, adv-adv, définitivement, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ruissellement, nc-nom, ruissellement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(898, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(faible, adj-adj, faible, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(instruites, adj-adj, instruire, [dl(0,n,n)-1]), si(lisent, v-ver:pres, lire, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(poésie, nc-nom, poésie, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(poésie, nc-nom, poésie, [n-1]), si(écrite, vpp-ver:pper, écrire, [dl(0,n,n)-1]), si(affecte, v-ver:pres, affecter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(écriture, nc-nom, écriture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chansons, nc-nom, chanson, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(écriture, nc-nom, écriture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chansons, nc-nom, chanson, [n-1]), si(affecte, v-ver:pres, affecter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(masses, nc-nom, masse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(899, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(poésie, nc-nom, poésie, [n-1]), si(devient, v-ver:pres, devenir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(expression, nc-nom, expression, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(filtre, v-ver:pres, filtre, [dl(0,np,s)-1]), si(lentement, adv-adv, lentement, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(900, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(poésie, nc-nom, poésie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(influencent, v-ver:pres, influencer, [dl(0,cl_r,dl(0,np,s))-1]), si(mutuellement, adv-adv, mutuellement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(901, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(révélé, vpp-ver:pper, révéler, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(méthode, nc-nom, méthode, [n-1]), si(préférée, adj-adj, préférer, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(censure, nc-nom, censure, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si(cinq, det-num, cinq, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(cette, det-pro:dem, ce, [dr(0,dl(0,n,n),n)-1]), si(année, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(902, Result) :-
      prob_parse([ si('Anna', npp-nam, 'Anna', [dr(0,np,np)-1]), si('Politkovskaya', npp-nam, 'Politkovskaya', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(assassinée, vpp-ver:pper, assassiner, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(903, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(soirées, nc-nom, soirée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(information, nc-nom, information, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(organisées, vpp-ver:pper, organiser, [dl(0,np,s_pass)-1]), si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(904, Result) :-
      prob_parse([ si('Cela', pro-pro:dem, 'Cela', [np-1]), si(permet, v-ver:pres, permettre, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(sourdes, adj-adj, sourd, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(accéder, vinf-ver:infi, accéder, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(informations, nc-nom, information, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(choses, nc-nom, chose, [n-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(interprète, nc-nom, interprète, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(langue, nc-nom, langue, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(signes, nc-nom, signe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(905, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(sourdes, adj-adj, sourd, [dl(0,n,n)-1]), si(rencontrent, v-ver:pres, rencontrer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(problèmes, nc-nom, problème, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(communauté, nc-nom, communauté, [n-1]), si(sociale, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(906, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(fossiles, nc-nom, fossile, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tricératops, nc-nom, tricératops, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(loin, adv-adv, loin, [np-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(restes, nc-nom, reste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dinosaures, nc-nom, dinosaure, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(courants, adj-adj, courant, [dl(0,n,n)-1]), si(trouvés, vpp-ver:pper, trouver, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(roches, nc-nom, roche, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Crétacé', npp-nam, 'Crétacé', [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(récent, adj-adj, récent, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouest, nc-nom, ouest, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('(', ponct-pun, '(', [let-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faune, nc-nom, faune, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(907, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(restes, nc-nom, reste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dinosaures, nc-nom, dinosaure, [n-1]), si(trouvés, vpp-ver:pper, trouver, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Asie', npp-nam, 'Asie', [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(908, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(décrits, vpp-ver:pper, décrire, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lâches, nc-nom, lâche, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(incapacité, nc-nom, incapacité, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réfugiés, nc-nom, réfugié, [n-1]), si(bosniaques, adj-adj, bosniaque, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(partagé, vpp-ver:pper, partager, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(tasses, nc-nom, tasse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(café, nc-nom, café, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(serbes, adj-adj, serbe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(909, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(commandant, nc-nom, commandant, [n-1]), si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), si('Karremans', npp-nam, 'Karremans', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tête, nc-nom, tête, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(néerlandaises, adj-adj, néerlandais, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Srebrenica', npp-nam, 'Srebrenica', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(filmé, vpp-ver:pper, filmer, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(porter, vinf-ver:infi, porter, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(toast, nc-nom, toast, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(suspect, nc-nom, suspect, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(crimes, nc-nom, crime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(général, nc-nom, général, [n-1]), si(serbe, adj-adj, serbe, [dl(0,n,n)-1]), si('Ratko', npp-nam, 'Ratko', [dl(0,n,n)-1]), si('Mladic', npp-nam, 'Mladic', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(910, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(néerlandaises, adj-adj, néerlandais, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Srebrenica', npp-nam, 'Srebrenica', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(disparu, vpp-ver:pper, disparaître, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(911, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(combats, nc-nom, combat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guérilla, nc-nom, guérilla, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(théâtres, nc-nom, théâtre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Pacifique', npp-nam, 'Pacifique', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Asie', npp-nam, 'Asie', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(912, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(guérilla, nc-nom, guérilla, [n-1]), si(augmente, v-ver:pres, augmenter, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(activité, nc-nom, activité, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Timor', npp-nam, 'Timor', [n-1]), si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(913, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(2003, pro-num, 2003, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(laitiers, adj-adj, laitier, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(valeur, nc-nom, valeur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ventes, nc-nom, vente, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('10,4', det-num, '10,4', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(croissante, vpr-ver:ppre, croissant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(euro, nc-nom, euro, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(dollar, nc-nom, dollar, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(914, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(consommation, nc-nom, consommation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lait, nc-nom, lait, [n-1]), si(augmente, v-ver:pres, augmenter, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(915, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Willy', npp-nam, 'Willy', [dr(0,np,np)-1]), si('Claes', npp-nam, 'Claes', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(envisageait, v-ver:impf, envisager, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(démissionner, vinf-ver:infi, démissionner, [dl(0,np,s_inf)-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si(parlementaire, adj-adj, parlementaire, [dl(0,n,n)-1]), si(belge, adj-adj, belge, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(ce, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), si(matin, nc-nom, matin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(recommander, vinf-ver:infi, recommander, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(haute, adj-adj, haut, [dr(0,n,n)-1]), si(juridiction, nc-nom, juridiction, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(inculper, vinf-ver:infi, inculper, [dr(0,dl(0,np,s_inf),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(scandale, nc-nom, scandale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(corruption, nc-nom, corruption, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(domaine, nc-nom, domaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armement, nc-nom, armement, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(élargit, v-ver:pres, élargir, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(916, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si('Willy', npp-nam, 'Willy', [dl(0,n,n)-1]), si('Claes', npp-nam, 'Claes', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démissionné, vpp-ver:pper, démissionner, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(917, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(1994, adj-num, 1994, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('News', npp-nam, 'News', [np-1]), si(of, et-prp, of, [dr(0,dl(0,np,np),np)-1]), si('Norway', npp-nam, 'Norway', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(critique, nc-nom, critique, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(roman, nc-nom, roman, [n-1]), si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(venait, v-ver:impf, venir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(sortir, vinf-ver:infi, sortir, [dl(0,np,s_inf)-1]), si(aux, p+d-prp:det, à, [dr(0,dl(1,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sophie', npp-nam, 'Sophie', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(professeur, nc-nom, professeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(philosophie, nc-nom, philosophie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lycée, nc-nom, lycée, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(auteur, nc-nom, auteur, [n-1]), si('Jostein', npp-nam, 'Jostein', [dl(0,n,n)-1]), si('Gaarder', npp-nam, 'Gaarder', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(918, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sophie', npp-nam, 'Sophie', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('best-seller', nc-nom, 'best-seller', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(919, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(milliardaires, nc-nom, milliardaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(latine, adj-adj, latin, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fortune, nc-nom, fortune, [n-1]), si(combinée, vpp-ver:pper, combiner, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(115, det-num, 115, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(920, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliardaires, nc-nom, milliardaire, [n-1]), si(augmente, v-ver:pres, augmenter, [dl(0,np,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(921, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Eskimos', nc-nam, 'Eskimos', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(peuples, nc-nom, peuple, [n-1]), si(chasseurs, adj-nom, chasseur, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(phoques, nc-nom, phoque, [n-1]), si(dispersés, vpp-ver:pper, disperser, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arctique', npp-nam, 'Arctique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(envisagent, v-ver:pres, envisager, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(demander, vinf-ver:infi, demander, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(interaméricaine, adj-adj, interaméricain, [dl(0,n,n)-1]), si(des, det-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(statuer, vinf-ver:infi, statuer, [dr(0,dl(0,np,s_inf),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(contribuant, vpr-ver:ppre, contribuer, [dr(0,dl(0,np,s_ppres),pp_de)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(substantielle, adj-adj, substantiel, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(réchauffement, nc-nom, réchauffement, [n-1]), si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(menacent, v-ver:pres, menacer, [dr(0,dl(0,np,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(existence, nc-nom, existence, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(922, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(chasse, nc-nom, chasse, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(phoques, nc-nom, phoque, [n-1]), si(met, v-ver:pres, mettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(danger, nc-nom, danger, [n-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(espèces, nc-nom, espèce, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(923, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(liste, nc-nom, liste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('USA', npp-nam, 'USA', [np-1]), si(today, npp-nam, today, [dl(0,np,np)-1]), si(des, det-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('best-sellers', nc-nom, 'best-sellers', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Nora', npp-nam, 'Nora', [dr(0,np,np)-1]), si('Roberts', npp-nam, 'Roberts', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), si(autrice, nc-nom, autrice, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(lue, vpp-ver:pper, lire, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('J.K', npp-nam, 'J.K', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(924, Result) :-
      prob_parse([ si('Rowling', npp-nam, 'Rowling', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(925, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sophie', npp-nam, 'Sophie', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('best-seller', nc-nom, 'best-seller', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(926, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donc, adv-adv, donc, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(voyagé, vpp-ver:pper, voyager, [dr(0,dl(0,np,s_ppart),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(évêque, nc-nom, évêque, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(endroits, nc-nom, endroit, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Rome', npp-nam, 'Rome', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(commençant, vpr-ver:ppre, commencer, [dr(0,dl(0,np,s_ppres),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tradition, nc-nom, tradition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(voyages, nc-nom, voyage, [n-1]), si(papaux, adj-adj, papal, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(culmineront, v-ver:futu, culminer, [dr(0,dl(0,np,s),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pape, nc-nom, pape, [n-1]), si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(loin, adv-adv, loin, [np-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pape, nc-nom, pape, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(voyageur, nc-nom, voyageur, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(toute, adv-adv, tout, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(927, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(voyages, nc-nom, voyage, [n-1]), si(pontificaux, adj-adj, pontifical, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(affectés, vpp-ver:pper, affecter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(préoccupations, nc-nom, préoccupation, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(928, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(militants, nc-nom, militant, [n-1]), si(antinucléaires, adj-adj, antinucléaire, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(retardé, vpp-ver:pper, retarder, [dr(0,dl(0,np,s_ppart),np)-1]), si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(train, nc-nom, train, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(déchets, nc-nom, déchet, [n-1]), si(reliant, vpr-ver:ppre, relier, [dr(0,dr(0,dl(0,n,n),pp_a),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nord, nc-nom, nord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(nord, nc-nom, nord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(retraitement, nc-nom, retraitement, [n-1]), si('Areva', npp-nam, 'Areva', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(929, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(transport, nc-nom, transport, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(déchets, nc-nom, déchet, [n-1]), si(nucléaires, adj-adj, nucléaire, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(930, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(visualisé, vpp-ver:pper, visualiser, [dl(0,np,s_pass)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(suit, v-ver:pres, suivre, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si('Imaginez', vimp-ver:impe, 'Imaginez', [dr(0,s,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(encerclée, vpp-ver:pper, encercler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(sphère, nc-nom, sphère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(verre, nc-nom, verre, [n-1]), si(géante, adj-adj, géant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(931, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(chaleur, nc-nom, chaleur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(soleil, nc-nom, soleil, [n-1]), si(pénètre, v-ver:pres, pénétrer, [dl(0,np,s)-1]), si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), si(travers, nc-nom, travers, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(verre, nc-nom, verre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(932, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(partie, nc-nom, partie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaleur, nc-nom, chaleur, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(absorbée, vpp-ver:pper, absorber, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(rayonnée, vpp-ver:pper, rayonner, [dl(0,np,s_pass)-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(espace, nc-nom, espace, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(933, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(chaleur, nc-nom, chaleur, [n-1]), si(rayonnée, vpp-ver:pper, rayonner, [dl(0,n,n)-1]), si(atteint, v-ver:pres, atteindre, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sphère, nc-nom, sphère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(verre, nc-nom, verre, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(empêchée, vpp-ver:pper, empêcher, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(disperser, vinf-ver:infi, disperser, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(davantage, adv-adv, davantage, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(934, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(effet, nc-nom, effet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(serre, nc-nom, serre, [n-1]), si(modifie, v-ver:pres, modifier, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(climat, nc-nom, climat, [n-1]), si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(935, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),dl(0,np,s_ppres))-1]), si(attendant, vpr-ver:ppre, attendre, [dl(0,np,s_ppres)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(continué, vpp-ver:pper, continuer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(refuser, vinf-ver:infi, refuser, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(parrainer, vinf-ver:infi, parrainer, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(résolution, nc-nom, résolution, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Commission', npp-nam, 'Commission', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ONU', nc-abr, 'ONU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(936, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('UE', npp-abr, 'UE', [n-1]), si(refuse, v-ver:pres, refuser, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(candidats, nc-nom, candidat, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(937, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), si('Leeson', npp-nam, 'Leeson', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effondrement, nc-nom, effondrement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(banque, nc-nom, banque, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('Barings', npp-nam, 'Barings', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(février, nc-nom, février, [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('peut-être', adv-adv, 'peut-être', [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(quintessence, nc-nom, quintessence, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(récit, nc-nom, récit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gestion, nc-nom, gestion, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(risque, nc-nom, risque, [n-1]), si(financier, adj-adj, financier, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mal, adv-adv, mal, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(tourné, vpp-ver:pper, tourner, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(938, Result) :-
      prob_parse([ si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), si('Leeson', npp-nam, 'Leeson', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(arrêté, vpp-ver:pper, arrêter, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effondrement, nc-nom, effondrement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Barings', npp-nam, 'Barings', [dr(0,n,n)-1]), si('Bank', npp-nam, 'Bank', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(939, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(obligation, nc-nom, obligation, [n-1]), si(honorée, vpp-ver:pper, honorer, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(milice, nc-nom, milice, [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(940, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(gens, nc-nom, gens, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(prêts, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(risquer, vinf-ver:infi, risquer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(emprisonnement, nc-nom, emprisonnement, [n-1]), si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(941, Result) :-
      prob_parse([ si('Ce', cls-pro:dem, 'Ce', [np-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(visite, nc-nom, visite, [n-1]), si(officielle, adj-adj, officiel, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si(iranien, adj-adj, iranien, [dl(0,n,n)-1]), si('Mahmoud', npp-nam, 'Mahmoud', [dl(0,n,n)-1]), si('Ahmadinejad', npp-nam, 'Ahmadinejad', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Arabie', npp-nam, 'Arabie', [n-1]), si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(entretenu, vpp-ver:pper, entretenir, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(dirigeant, nc-nom, dirigeant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(roi, nc-nom, roi, [n-1]), si('Abdallah', npp-nam, 'Abdallah', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(942, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(exprimé, vpp-ver:pper, exprimer, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(inquiétude, nc-nom, inquiétude, [n-1]), si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(tensions, nc-nom, tension, [n-1]), si(sectaires, adj-adj, sectaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(craignant, vpr-ver:ppre, craindre, [dr(0,dl(0,np,s_ppres),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(propagent, v-ver:pres, propager, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(943, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Mahmoud', npp-nam, 'Mahmoud', [dr(0,np,np)-1]), si('Ahmadinejad', npp-nam, 'Ahmadinejad', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(944, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(iranien, adj-adj, iranien, [dl(0,n,n)-1]), si('Mahmoud', npp-nam, 'Mahmoud', [dl(0,n,n)-1]), si('Ahmadinejad', npp-nam, 'Ahmadinejad', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rencontré, vpp-ver:pper, rencontrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(roi, nc-nom, roi, [n-1]), si('Abdallah', npp-nam, 'Abdallah', [dl(0,n,n)-1]), si(ici, adv-adv, ici, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(saoudienne, adj-adj, saoudien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(aborder, vinf-ver:infi, aborder, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(crises, nc-nom, crise, [n-1]), si(sectaires, adj-adj, sectaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(croissantes, vpr-ver:ppre, croissant, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(945, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Mahmoud', npp-nam, 'Mahmoud', [dr(0,np,np)-1]), si('Ahmadinejad', npp-nam, 'Ahmadinejad', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(946, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(roi, nc-nom, roi, [n-1]), si('Abdallah', npp-nam, 'Abdallah', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Ahmadinejad', npp-nam, 'Ahmadinejad', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(attachés, vpp-ver:pper, attacher, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(moyens, nc-nom, moyen, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(fin, nc-nom, fin, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impasse, nc-nom, impasse, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Liban', npp-nam, 'Liban', [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Hezbollah', npp-nam, 'Hezbollah', [n-1]), si(',', ponct-pun, ',', [let-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Fouad', npp-nam, 'Fouad', [dr(0,np,np)-1]), si('Siniora', npp-nam, 'Siniora', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(947, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Mahmoud', npp-nam, 'Mahmoud', [dr(0,np,np)-1]), si('Ahmadinejad', npp-nam, 'Ahmadinejad', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(948, Result) :-
      prob_parse([ si('Calgary', npp-nam, 'Calgary', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si('Alberta', npp-nam, 'Alberta', [n-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lethbridge', npp-nam, 'Lethbridge', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Alberta', npp-nam, 'Alberta', [n-1]), si(')', ponct-pun, ')', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenues, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(huitième, adj-num, huitième, [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), si(neuvième, adj-num, neuvième, [dr(0,n,n)-1]), si(villes, nc-nom, ville, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(interdire, vinf-ver:infi, interdire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fumer, vinf-ver:infi, fumer, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bars, nc-nom, bar, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(restaurants, nc-nom, restaurant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(949, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Alberta', npp-nam, 'Alberta', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(950, Result) :-
      prob_parse([ si('Connue', vpp-ver:pper, 'Connue', [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), si(longtemps, adv-adv, longtemps, [n-1]), si(comme, adv-adv, comme, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(porte, nc-nom, porte, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entrée, nc-nom, entrée, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Rocheuses', nc-nam, 'Rocheuses', [n-1]), si(canadiennes, adj-adj, canadien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(siège, nc-nom, siège, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(centre, nc-nom, centre, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(festivals, nc-nom, festival, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Alberta', npp-nam, 'Alberta', [n-1]), si(',', ponct-pun, ',', [let-1]), si(occupe, v-ver:pres, occuper, [dr(0,dl(0,np,s),np)-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(place, nc-nom, place, [n-1]), si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(destinations, nc-nom, destination, [n-1]), si(canadiennes, adj-adj, canadien, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(culturelle, adj-adj, culturel, [dl(0,n,n)-1]), si(2007, adj-num, 2007, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), si(cause, nc-nom, cause, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(951, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Alberta', npp-nam, 'Alberta', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(952, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Je', cls-pro:per, 'Je', [np-1]), si(crois, v-ver:pres, croire, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,s,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ouvrir, vinf-ver:infi, ouvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(consultation, nc-nom, consultation, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(façon, nc-nom, façon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(procéder, vinf-ver:infi, procéder, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sénat', npp-nam, 'Sénat', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(nous, cls-pro:per, nous, [np-1]), si(allons, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(travailler, vinf-ver:infi, travailler, [dl(0,np,s_inf)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(lui, pro-pro:per, luire, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si('Stelmach', npp-nam, 'Stelmach', [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Alberta', npp-nam, 'Alberta', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(953, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(capitale, nc-nom, capitale, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Alberta', npp-nam, 'Alberta', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Edmonton', npp-nam, 'Edmonton', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(954, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(démocrate, nc-nom, démocrate, [n-1]), si(californienne, adj-adj, californien, [dl(0,n,n)-1]), si('Nancy', npp-nam, 'Nancy', [dl(0,n,n)-1]), si('Pelosi', npp-nam, 'Pelosi', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(66, det-num, 66, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(nommée, vpp-ver:pper, nommer, [dr(0,dl(0,np,s_pass),np)-1]), si('60e', det-num, '60e', [dr(0,np,n)-1]), si(présidente, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(233, det-num, 233, [dr(0,np,n)-1]), si(voix, nc-nom, voix, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), si(202, pro-num, 202, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(955, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(présidente, nc-nom, président, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(956, Result) :-
      prob_parse([ si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), si('Pelosi', npp-nam, 'Pelosi', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidente, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(957, Result) :-
      prob_parse([ si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), si('Pelosi', npp-nam, 'Pelosi', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(choisie, vpp-ver:pper, choisir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(démocrates, nc-nom, démocrate, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(présidente, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(958, Result) :-
      prob_parse([ si('Choisie', vpp-ver:pper, 'Choisie', [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(unanimité, nc-nom, unanimité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Pelosi', npp-nam, 'Pelosi', [np-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(présidente, nc-nom, président, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(959, Result) :-
      prob_parse([ si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), si('Pelosi', npp-nam, 'Pelosi', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidente, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(960, Result) :-
      prob_parse([ si('Waxman', npp-nam, 'Waxman', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(comprenait, v-ver:impf, comprendre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(personnel, nc-nom, personnel, [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', npp-nam, 'Maison', [n-1]), si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(informer, vinf-ver:infi, informer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(situation, nc-nom, situation, [n-1]), si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(loi, nc-nom, loi, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(961, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(écrite, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(22, adj-num, 22, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(minorité, nc-nom, minorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), si('Pelosi', npp-nam, 'Pelosi', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(député, nc-nom, député, [n-1]), si('Waxman', npp-nam, 'Waxman', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(demandant, vpr-ver:ppre, demander, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', nc-nam, 'Maison', [n-1]), si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réagir, vinf-ver:infi, réagir, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(962, Result) :-
      prob_parse([ si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), si('Pelosi', npp-nam, 'Pelosi', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidente, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chambre', nc-nam, 'Chambre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(963, Result) :-
      prob_parse([ si('Sir', nc-nam, 'Sir', [dr(0,np,np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Mills', npp-nam, 'Mills', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(oscarisé, nc-nom, oscariser, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(membre, nc-nom, membre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('BAFTA', npp-nam, 'BAFTA', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(légende, nc-nom, légende, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Disney', npp-nam, 'Disney', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédé, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(âge, nc-nom, âge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(97, det-num, 97, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(domicile, nc-nom, domicile, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Denham', npp-nam, 'Denham', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Buckinghamshire', npp-nam, 'Buckinghamshire', [np-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(courte, adj-adj, court, [dr(0,n,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(964, Result) :-
      prob_parse([ si('Jamie', npp-nam, 'Jamie', [dr(0,np,np)-1]), si('Foxx', npp-nam, 'Foxx', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(acteur, nc-nom, acteur, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('BAFTA', npp-nam, 'BAFTA', [dr(0,n,n)-1]), si('Awards', npp-nam, 'Awards', [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(965, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si(hollywoodien, adj-adj, hollywoodien, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(gros, adj-adj, gros, [dr(0,n,n)-1]), si(budget, nc-nom, budget, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Aviator', npp-nam, 'Aviator', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(petit, adj-adj, petit, [dr(0,n,n)-1]), si(budget, nc-nom, budget, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), si('Drake', npp-nam, 'Drake', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(prix, nc-nom, prix, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Orange', npp-nam, 'Orange', [dr(0,n,n)-1]), si('BAFTA', npp-nam, 'BAFTA', [dr(0,n,n)-1]), si('Film', npp-nam, 'Film', [dr(0,n,n)-1]), si('Awards', npp-nam, 'Awards', [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(966, Result) :-
      prob_parse([ si('Quatre', det-num, 'Quatre', [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(décernés, vpp-ver:pper, décerner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('The', et-nam, 'The', [dr(0,np,n)-1]), si('Aviator', npp-nam, 'Aviator', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(film, nc-nom, film, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(celui, pro-pro:dem, celui, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(second, adj-num, second, [dr(0,n,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(féminin, adj-adj, féminin, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), si('Cate', npp-nam, 'Cate', [dr(0,np,np)-1]), si('Blanchett', npp-nam, 'Blanchett', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(967, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), si('Drake', npp-nam, 'Drake', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(réalisateur, nc-nom, réalisateur, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(meilleure, adj-adj, meilleur, [dr(0,n,n)-1]), si(actrice, nc-nom, acteur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(design, nc-nom, design, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(costumes, nc-nom, costume, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(968, Result) :-
      prob_parse([ si('Jamie', npp-nam, 'Jamie', [dr(0,np,np)-1]), si('Foxx', npp-nam, 'Foxx', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(acteur, nc-nom, acteur, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Ray', npp-nam, 'Ray', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),np)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),np))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),np)))))-1]), si('Clive', npp-nam, 'Clive', [dr(0,np,np)-1]), si('Owen', npp-nam, 'Owen', [np-1]), si(celui, pro-pro:dem, celui, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(acteur, nc-nom, acteur, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(second, adj-num, second, [dr(0,n,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Closer', npp-nam, 'Closer', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(969, Result) :-
      prob_parse([ si('Jamie', npp-nam, 'Jamie', [dr(0,np,np)-1]), si('Foxx', npp-nam, 'Foxx', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), si(acteur, nc-nom, acteur, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('BAFTA', nc-nam, 'BAFTA', [dr(0,n,n)-1]), si('Awards', npp-nam, 'Awards', [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(970, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si(spatiale, adj-adj, spatial, [dl(0,n,n)-1]), si('Cassini', npp-nam, 'Cassini', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(22, adj-num, 22, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2006, adj-num, 2006, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rivières, nc-nom, rivière, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(lacs, nc-nom, lac, [n-1]), si(présents, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si('Titan', npp-nam, 'Titan', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Saturne', npp-nam, 'Saturne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(971, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si(spatiale, adj-adj, spatial, [dl(0,n,n)-1]), si('Cassini', npp-nam, 'Cassini', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si('Titan', npp-nam, 'Titan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(972, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('NASA', npp-abr, 'NASA', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lancé, vpp-ver:pper, lancer, [dr(0,dl(0,np,s_ppart),np)-1]), si('Cassini-Huygens', npp-nam, 'Cassini-Huygens', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si(spatiale, adj-adj, spatial, [dl(0,n,n)-1]), si(interplanétaire, adj-adj, interplanétaire, [dl(0,n,n)-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(construite, vpp-ver:pper, construire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(15, adj-num, 15, [dr(0,n,n)-1]), si(octobre, nc-nom, octobre, [n-1]), si(1997, adj-num, 1997, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(973, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrivée, vpp-ver:pper, arriver, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(orbite, nc-nom, orbite, [n-1]), si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Saturne', npp-nam, 'Saturne', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(2004, adj-num, 2004, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(974, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(quatrième, adj-num, quatrième, [dr(0,n,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(visiter, vinf-ver:infi, visiter, [dr(0,dl(0,np,s_inf),np)-1]), si('Saturne', npp-nam, 'Saturne', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, nc-num, premier, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(orbite, nc-nom, orbite, [n-1]), si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(planète, nc-nom, planète, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(975, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si('Cassini', npp-nam, 'Cassini', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si('Titan', npp-nam, 'Titan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(976, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(images, nc-nom, image, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si('Huygens', npp-nam, 'Huygens', [dl(0,n,n)-1]), si(montrent, v-ver:pres, montrer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(méthane, nc-nom, méthane, [n-1]), si(liquide, adj-adj, liquide, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(écoule, v-ver:pres, écouler, [dl(0,cl_r,dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(travers, nc-nom, travers, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rivières, nc-nom, rivière, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(canaux, nc-nom, canal, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(lacs, nc-nom, lac, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sources, nc-nom, source, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(corps, nc-nom, corps, [n-1]), si(liquides, adj-adj, liquide, [dl(0,n,n)-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(découverts, vpp-ver:pper, découvrir, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Titan', npp-nam, 'Titan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(977, Result) :-
      prob_parse([ si('Titan', npp-nam, 'Titan', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(lune, nc-nom, lune, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Saturne', npp-nam, 'Saturne', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(inspecte, v-ver:pres, inspecter, [dr(0,dr(0,s,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si('Cassini-Huygens', npp-nam, 'Cassini-Huygens', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(978, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si('Cassini', npp-nam, 'Cassini', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si('Titan', npp-nam, 'Titan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(979, Result) :-
      prob_parse([ si('Brooks', npp-nam, 'Brooks', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(employés, nc-nom, employé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('NNSA', npp-abr, 'NNSA', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('Administration', nc-nam, 'Administration', [n-1]), si('Nationale', adj-adj, 'Nationale', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Sécurité', npp-nam, 'Sécurité', [n-1]), si('Nucléaire', npp-nam, 'Nucléaire', [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(disant, vpr-ver:ppre, dire, [dr(0,dl(0,np,s_ppres),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(allait, v-ver:impf, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(démissionner, vinf-ver:infi, démissionner, [dl(0,np,s_inf)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),n)-1]), si(peu, adv-adv, peu, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(980, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('NNSA', npp-abr, 'NNSA', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Administration', nc-nam, 'Administration', [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(981, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Administration', nc-nom, 'Administration', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(transports, nc-nom, transport, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(intention, nc-nom, intention, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contrôleurs, nc-nom, contrôleur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(aéroports, nc-nom, aéroport, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(982, Result) :-
      prob_parse([ si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), si(réductions, nc-nom, réduction, [n-1]), si(interviennent, v-ver:pres, intervenir, [dl(0,np,s)-1]), si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(budget, nc-nom, budget, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('TSA', npp-abr, 'TSA', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(2006, pro-num, 2006, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(globale, adj-adj, global, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(trafic, nc-nom, trafic, [n-1]), si(aéroportuaire, adj-adj, aéroportuaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(983, Result) :-
      prob_parse([ si('NNSA', npp-abr, 'NNSA', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(administration, nc-nom, administration, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(984, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(déclaration, nc-nom, déclaration, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(faite, vpp-ver:pper, faire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('vice-ministre', nc-nom, 'vice-ministre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Affaires', nc-nom, 'Affaires', [n-1]), si(étrangères, adj-adj, étranger, [dl(0,n,n)-1]), si(chargé, vpp-ver:pper, charger, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(juridiques, adj-adj, juridique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Égypte', npp-nam, 'Égypte', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Abdel', npp-nam, 'Abdel', [dr(0,np,np)-1]), si('Aziz', npp-nam, 'Aziz', [dr(0,np,np)-1]), si('Seif', npp-nam, 'Seif', [dr(0,np,np)-1]), si('el-Nasr', npp-nam, 'el-Nasr', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(985, Result) :-
      prob_parse([ si('Abdel', npp-nam, 'Abdel', [dr(0,np,np)-1]), si('Aziz', npp-nam, 'Aziz', [dr(0,np,np)-1]), si('Seif', npp-nam, 'Seif', [dr(0,np,np)-1]), si('el-Nasr', npp-nam, 'el-Nasr', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('vice-ministre', nc-nom, 'vice-ministre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Affaires', nc-nom, 'Affaires', [n-1]), si(étrangères, adj-adj, étranger, [dl(0,n,n)-1]), si(chargé, vpp-ver:pper, charger, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(juridiques, adj-adj, juridique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Égypte', npp-nam, 'Égypte', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(986, Result) :-
      prob_parse([ si('Abdel', npp-nam, 'Abdel', [dr(0,np,np)-1]), si('Aziz', npp-nam, 'Aziz', [dr(0,np,np)-1]), si('Seif', npp-nam, 'Seif', [dr(0,np,np)-1]), si('el-Nasr', npp-nam, 'el-Nasr', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(bientôt, adv-adv, bientôt, [dr(0,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Égypte', npp-nam, 'Égypte', [n-1]), si(prendra, v-ver:futu, prendre, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(nécessaires, adj-adj, nécessaire, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(idée, nc-nom, idée, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(scène, nc-nom, scène, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(987, Result) :-
      prob_parse([ si('Abdel', npp-nam, 'Abdel', [dr(0,np,np)-1]), si('Aziz', npp-nam, 'Aziz', [dr(0,np,np)-1]), si('Seif', npp-nam, 'Seif', [dr(0,np,np)-1]), si('el-Nasr', npp-nam, 'el-Nasr', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('vice-ministre', nc-nom, 'vice-ministre', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Affaires', nc-nom, 'Affaires', [n-1]), si(étrangères, adj-adj, étranger, [dl(0,n,n)-1]), si(chargé, vpp-ver:pper, charger, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(juridiques, adj-adj, juridique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Égypte', npp-nam, 'Égypte', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(988, Result) :-
      prob_parse([ si('Klassen', npp-nam, 'Klassen', [np-1]), si(participera, v-ver:futu, participer, [dr(0,dl(0,np,s),pp)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(courses, nc-nom, course, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2010, pro-num, 2010, [np-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Vancouver', npp-nam, 'Vancouver', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Colombie-Britannique', npp-nam, 'Colombie-Britannique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Whistler', npp-nam, 'Whistler', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(voisine, adj-adj, voisin, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(destination, nc-nom, destination, [n-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ski, nc-nom, ski, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si(neige, nc-nom, neige, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(989, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2010, pro-num, 2010, [np-1]), si(auront, v-ver:futu, avoir, [dr(0,dl(0,np,s),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Vancouver', npp-nam, 'Vancouver', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(990, Result) :-
      prob_parse([ si('BC', npp-nam, 'BC', [dr(0,np,np)-1]), si('Place', npp-nam, 'Place', [dr(0,np,np)-1]), si('Stadium', npp-nam, 'Stadium', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(ouvert, vpp-ver:pper, ouvrir, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juin, nc-nom, juin, [n-1]), si(1983, adj-num, 1983, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(prévu, vpp-ver:pper, prévoir, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(clé, nc-nom, clé, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2010, pro-num, 2010, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(991, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2010, pro-num, 2010, [np-1]), si(auront, v-ver:futu, avoir, [dr(0,dl(0,np,s),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Vancouver', npp-nam, 'Vancouver', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(992, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), si(remaniera, v-ver:futu, remanier, [dr(0,dl(0,np,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(cabinet, nc-nom, cabinet, [n-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(11, det-num, 11, [dr(0,np,n)-1]), si(h, nc-abr, heure, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(heure, nc-nom, heure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Est', npp-nam, 'Est', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(993, Result) :-
      prob_parse([ si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), si('Harper', npp-nam, 'Harper', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(994, Result) :-
      prob_parse([ si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), si('25.000', det-num, '25.000', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(',', ponct-pun, ',', [let-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(présentes, adj-adj, présent, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(995, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(fête, nc-nom, fête, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dl(0,np,s_ppart)-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si('12h00', npp-nam, '12h00', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(midi, nc-nom, midi, [n-1]), si('ET', cc-kon, 'ET', [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(996, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(cérémonie, nc-nom, cérémonie, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(déroulée, vpp-ver:pper, dérouler, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(anglais, nc-nom, anglais, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(français, nc-nom, français, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(997, Result) :-
      prob_parse([ si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), si('Harper', npp-nam, 'Harper', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(998, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(expliqué, vpp-ver:pper, expliquer, [dr(0,dl(0,np,s_ppart),s_whq)-1]), si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(bat, v-ver:pres, battre, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approbation, nc-nom, approbation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(prolongation, nc-nom, prolongation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mission, nc-nom, mission, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(999, Result) :-
      prob_parse([ si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), si('Harper', npp-nam, 'Harper', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1000, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(télécommunications, nc-nom, télécommunications, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Brésil', npp-nam, 'Brésil', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Brasil', npp-nam, 'Brasil', [dr(0,np,np)-1]), si('Telecom', npp-nam, 'Telecom', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bloqué, vpp-ver:pper, bloquer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(accès, nc-nom, accès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(utilisateurs, nc-nom, utilisateur, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('YouTube', npp-nam, 'YouTube', [np-1]), si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(fermer, vinf-ver:infi, fermer, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(populaire, adj-adj, populaire, [dr(0,n,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(partage, nc-nom, partage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1001, Result) :-
      prob_parse([ si('YouTube', npp-nam, 'YouTube', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(web, nc-nom, web, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1002, Result) :-
      prob_parse([ si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si(1960, adj-num, 1960, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(archevêque, nc-nom, archevêque, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(espionné, vpp-ver:pper, espionner, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Église', nc-nam, 'Église', [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1003, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(journal, nc-nom, journal, [n-1]), si('Gazeta', npp-nam, 'Gazeta', [dl(0,n,n)-1]), si('Polska', npp-nam, 'Polska', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(publié, vpp-ver:pper, publier, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(allégations, nc-nom, allégation, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(agissements, nc-nom, agissement, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Wielgus', npp-nam, 'Wielgus', [np-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démenties, vpp-ver:pper, démentir, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1004, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(archevêque, nc-nom, archevêque, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Varsovie', npp-nam, 'Varsovie', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Stanislaw', npp-nam, 'Stanislaw', [dr(0,np,np)-1]), si('Wielgus', npp-nam, 'Wielgus', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1005, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(nominations, nc-nom, nomination, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(principales, adj-adj, principal, [dr(0,n,n)-1]), si(distinctions, nc-nom, distinction, [n-1]), si(cinématographiques, adj-adj, cinématographique, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(annoncées, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Académie', nc-nam, 'Académie', [n-1]), si(canadienne, adj-adj, canadien, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(cinéma, nc-nom, cinéma, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(télévision, nc-nom, télévision, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1006, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(distinctions, nc-nom, distinction, [n-1]), si(cinématographiques, adj-adj, cinématographique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1007, Result) :-
      prob_parse([ si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Rocket', nc-nam, 'Rocket', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Maurice', npp-nam, 'Maurice', [dr(0,n,n)-1]), si('Richard', npp-nam, 'Richard', [dr(0,n,n)-1]), si('Story', npp-nam, 'Story', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(honoré, vpp-ver:pper, honorer, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2006, pro-num, 2006, [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('27e', adj-num, '27e', [dr(0,n,n)-1]), si(remise, nc-nom, remise, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Toronto', npp-nam, 'Toronto', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1008, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(distinctions, nc-nom, distinction, [n-1]), si(cinématographiques, adj-adj, cinématographique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1009, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si('Ganga-Dham', npp-nam, 'Ganga-Dham', [dl(0,n,n)-1]), si(vient, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(mots, nc-nom, mot, [n-1]), si(indiens, adj-adj, indien, [dl(0,n,n)-1]), si('Ganga', npp-nam, 'Ganga', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Gange', npp-nam, 'Gange', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Dham', npp-nam, 'Dham', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lieu, nc-nom, lieu, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(demeure, nc-nom, demeure, [let-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1010, Result) :-
      prob_parse([ si('Ganga', npp-nam, 'Ganga', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déesse, nc-nom, déesse, [n-1]), si(hindoue, adj-adj, hindou, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1011, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pèlerinage, nc-nom, pèlerinage, [n-1]), si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(fleuve, nc-nom, fleuve, [n-1]), si('Gange', npp-nam, 'Gange', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(vénéré, vpp-ver:pper, vénérer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hindous, nc-nom, hindou, [n-1]), si(sous, p-prp, sou, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(déesse, nc-nom, déesse, [n-1]), si('Ganga', npp-nam, 'Ganga', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(rassemblement, nc-nom, rassemblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(participants, nc-nom, participant, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(éclipsant, vpr-ver:ppre, éclipser, [dr(0,dl(0,np,s_ppres),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(pèlerinages, nc-nom, pèlerinage, [n-1]), si(religieux, adj-adj, religieux, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1012, Result) :-
      prob_parse([ si('Ganga', npp-nam, 'Ganga', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(déesse, nc-nom, déesse, [n-1]), si(hindoue, adj-adj, hindou, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1013, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(studios, nc-nom, studio, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cinéma, nc-nom, cinéma, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('Line', npp-nam, 'Line', [dr(0,np,np)-1]), si('Cinema', npp-nam, 'Cinema', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réalisateur, nc-nom, réalisateur, [n-1]), si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), si('Jackson', npp-nam, 'Jackson', [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(autorisé, vpp-ver:pper, autoriser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(travailler, vinf-ver:infi, travailler, [dr(0,dl(0,np,s_inf),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(film, nc-nom, film, [n-1]), si('New', npp-nam, 'New', [dl(0,n,n)-1]), si('Line', npp-nam, 'Line', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1014, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(annonce, nc-nom, annonce, [n-1]), si(signifie, v-ver:pres, signifier, [dr(0,dl(0,np,s),s_q)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Jackson', npp-nam, 'Jackson', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(autorisé, vpp-ver:pper, autoriser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(filmer, vinf-ver:infi, filmer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(préquelle, nc-nom, préquelle, [n-1]), si(intitulée, vpp-ver:pper, intituler, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Hobbit', npp-nam, 'Hobbit', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(films, nc-nom, film, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Seigneur', npp-nam, 'Seigneur', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Anneaux', nc-nam, 'Anneaux', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réalisés, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1015, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Seigneur', nc-nam, 'Seigneur', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Anneaux', nc-nam, 'Anneaux', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), si('Jackson', npp-nam, 'Jackson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1016, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(interview, nc-nom, interview, [n-1]), si(accordée, vpp-ver:pper, accorder, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Sci', npp-nam, 'Sci', [n-1]), si('Fi', npp-nam, 'Fi', [dl(0,n,n)-1]), si('Wire', npp-nam, 'Wire', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), si('Shaye', npp-nam, 'Shaye', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(coprésident, nc-nom, coprésident, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('Line', npp-nam, 'Line', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), si(producteur, nc-nom, producteur, [n-1]), si(exécutif, adj-adj, exécutif, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Seigneur', nc-nam, 'Seigneur', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Anneaux', nc-nam, 'Anneaux', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('Line', npp-nam, 'Line', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(souhaite, v-ver:pres, souhaiter, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(films, nc-nom, film, [n-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Hobbit', npp-nam, 'Hobbit', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Jackson', npp-nam, 'Jackson', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avenir, nc-nom, avenir, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1017, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Seigneur', nc-nam, 'Seigneur', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Anneaux', nc-nam, 'Anneaux', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), si('Jackson', npp-nam, 'Jackson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1018, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(cargo, nc-nom, cargo, [n-1]), si(chypriote, adj-adj, chypriote, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Server', npp-nam, 'Server', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(naufrage, nc-nom, naufrage, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(territoire, nc-nom, territoire, [n-1]), si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mer, nc-nom, mer, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si(',', ponct-pun, ',', [let-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(norvégienne, adj-adj, norvégien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bergen', npp-nam, 'Bergen', [np-1]), si(',', ponct-pun, ',', [let-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si(18, det-num, 18, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(heure, nc-nom, heure, [n-1]), si(locale, adj-adj, local, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(12, adj-num, 12, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1019, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(naufrage, nc-nom, naufrage, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(mer, nc-nom, mer, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1020, Result) :-
      prob_parse([ si('2channel', npp-nam, '2channel', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(forum, nc-nom, forum, [n-1]), si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fournisseur, nc-nom, fournisseur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(accès, nc-nom, accès, [n-1]), si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fermé, vpp-ver:pper, fermer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(diffamation, nc-nom, diffamation, [n-1]), si(civile, adj-adj, civil, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1021, Result) :-
      prob_parse([ si('2channel', npp-nam, '2channel', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(forum, nc-nom, forum, [n-1]), si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1022, Result) :-
      prob_parse([ si('2channel', npp-nam, '2channel', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(hébergé, vpp-ver:pper, héberger, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(domaine, nc-nom, domaine, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1023, Result) :-
      prob_parse([ si('2channel', npp-nam, '2channel', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(forum, nc-nom, forum, [n-1]), si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1024, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si('Arnold', npp-nam, 'Arnold', [dl(0,n,n)-1]), si('Schwarzenegger', npp-nam, 'Schwarzenegger', [dl(0,n,n)-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(opposera, v-ver:futu, opposer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(veto, nc-nom, veto, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(projet, nc-nom, projet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(loi, nc-nom, loi, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(respect, nc-nom, respect, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(volonté, nc-nom, volonté, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(peuple, nc-nom, peuple, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approbation, nc-nom, approbation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(22, adj-num, 22, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(opposait, v-ver:impf, opposer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(reconnaissance, nc-nom, reconnaissance, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mariages, nc-nom, mariage, [n-1]), si(homosexuels, adj-adj, homosexuel, [dl(0,n,n)-1]), si(hors, p-prp, hors, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1025, Result) :-
      prob_parse([ si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1026, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('Arnold', npp-nam, 'Arnold', [dl(0,n,n)-1]), si('Schwarzenegger', npp-nam, 'Schwarzenegger', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(refusé, vpp-ver:pper, refuser, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(clémence, nc-nom, clémence, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(fondateur, nc-nom, fondateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gang, nc-nom, gang, [n-1]), si('Stanley', npp-nam, 'Stanley', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Tookie', npp-nam, 'Tookie', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Williams', npp-nam, 'Williams', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(condamné, nc-nom, condamné, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(mort, nc-nom, mort, [n-1]), si(californien, adj-adj, californien, [dl(0,n,n)-1]), si(reconnu, vpp-ver:pper, reconnaître, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(meurtres, nc-nom, meurtre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1979, pro-num, 1979, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1027, Result) :-
      prob_parse([ si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1028, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), si(refusant, vpr-ver:ppre, refuser, [dr(0,dl(0,np,s_ppres),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(clémence, nc-nom, clémence, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(californien, adj-adj, californien, [dl(0,n,n)-1]), si('Arnold', npp-nam, 'Arnold', [dl(0,n,n)-1]), si('Schwarzenegger', npp-nam, 'Schwarzenegger', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Sans', p-prp, 'Sans', [dr(0,dr(0,s,s),n)-1]), si(excuses, nc-nom, excuse, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(expiation, nc-nom, expiation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(meurtres, nc-nom, meurtre, [n-1]), si(insensés, adj-adj, insensé, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(brutaux, adj-adj, brutal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(y, clo-pro:per, y, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(rédemption, nc-nom, rédemption, [n-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1029, Result) :-
      prob_parse([ si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1030, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Forces', nc-nam, 'Forces', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(israéliennes, adj-adj, israélien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('lieutenant-général', nc-nom, 'lieutenant-général', [n-1]), si('Dan', npp-nam, 'Dan', [dl(0,n,n)-1]), si('Halutz', npp-nam, 'Halutz', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démissionné, vpp-ver:pper, démissionner, [dl(0,np,s_ppart)-1]), si(mardi, nc-nom, mardi, [dr(0,dl(1,s,s),n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2007, adj-num, 2007, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(examen, nc-nom, examen, [n-1]), si(interne, adj-adj, interne, [dl(0,n,n)-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(critiqué, vpp-ver:pper, critiquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(leadership, nc-nom, leadership, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Liban', npp-nam, 'Liban', [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), si(été, nc-nom, été, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1031, Result) :-
      prob_parse([ si('Dan', npp-nam, 'Dan', [dr(0,np,np)-1]), si('Halutz', npp-nam, 'Halutz', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(forces, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(israéliennes, adj-adj, israélien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1032, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), si(publiant, vpr-ver:ppre, publier, [dr(0,dl(0,np,s_ppres),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vidéo, nc-nom, vidéo, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(internet, nc-nom, internet, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(allait, v-ver:impf, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(former, vinf-ver:infi, former, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(comité, nc-nom, comité, [n-1]), si(exploratoire, adj-adj, exploratoire, [dl(0,n,n)-1]), si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1033, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Je', cls-pro:per, 'Je', [np-1]), si(suis, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(partante, adj-adj, partant, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1034, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), si(je, cls-pro:per, je, [np-1]), si(suis, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(dedans, adv-adv, dedans, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(gagner, vinf-ver:infi, gagner, [dl(0,np,s_inf)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dl(1,s,dl(0,np,s_ppart))-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sénatrice, nc-nom, sénatrice, [n-1]), si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(confirmant, vpr-ver:ppre, confirmer, [dr(0,dl(0,np,s_ppres),np)-1]), si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hypothèse, nc-nom, hypothèse, [n-1]), si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(répandue, vpp-ver:pper, répandre, [dl(0,n,n)-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(présentera, v-ver:futu, présenter, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidence, nc-nom, présidence, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2008, pro-num, 2008, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1035, Result) :-
      prob_parse([ si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(sénatrice, nc-nom, sénatrice, [n-1]), si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('NY', npp-nam, 'NY', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1036, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(sénatrice, nc-nom, sénatrice, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('Hillary', npp-nam, 'Hillary', [dl(0,n,n)-1]), si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenu, vpp-ver:pper, tenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(discussions, nc-nom, discussion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(interviewé, vpp-ver:pper, interviewer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(potentiels, adj-adj, potentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(candidature, nc-nom, candidature, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', nc-nam, 'Maison', [n-1]), si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(2008, pro-num, 2008, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1037, Result) :-
      prob_parse([ si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(sénatrice, nc-nom, sénatrice, [n-1]), si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('NY', npp-nam, 'NY', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1038, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(démocrate, nc-nom, démocrate, [n-1]), si('new-yorkais', adj-adj, 'new-yorkais', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(nommé, vpp-ver:pper, nommer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(membre, nc-nom, membre, [n-1]), si(important, adj-adj, important, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1039, Result) :-
      prob_parse([ si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(sénatrice, nc-nom, sénatrice, [n-1]), si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('ΝΥ', nc-abr, 'ΝΥ', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1040, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Cameron', npp-nam, 'Cameron', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(leader, nc-nom, leader, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(exposé, vpp-ver:pper, exposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(vision, nc-nom, vision, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avenir, nc-nom, avenir, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(multiculturelle, adj-adj, multiculturel, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Observer', npp-nam, 'Observer', [n-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(28, adj-num, 28, [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(2007, adj-num, 2007, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1041, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Cameron', npp-nam, 'Cameron', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1042, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opposition, nc-nom, opposition, [n-1]), si(conservatrice, adj-adj, conservateur, [dl(0,n,n)-1]), si('David', npp-nam, 'David', [dl(0,n,n)-1]), si('Cameron', npp-nam, 'Cameron', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réagi, vpp-ver:pper, réagir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(démissions, nc-nom, démission, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(déclarant, vpr-ver:ppre, déclarer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(divisé, vpp-ver:pper, diviser, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(fusion, nc-nom, fusion, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1043, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Cameron', npp-nam, 'Cameron', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parti, nc-nom, parti, [n-1]), si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1044, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Cameron', npp-nam, 'Cameron', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(élu, vpp-ver:pper, élire, [dr(0,dl(0,np,s_pass),np)-1]), si(nouveau, adj-adj, nouveau, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(battant, vpr-ver:ppre, battre, [dr(0,dl(0,np,s_ppres),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(rival, nc-nom, rival, [n-1]), si('David', npp-nam, 'David', [dl(0,n,n)-1]), si('Davis', npp-nam, 'Davis', [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(voix, nc-nom, voix, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(une, pro-num, un, [np-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(correspondance, nc-nom, correspondance, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1045, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Cameron', npp-nam, 'Cameron', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1046, Result) :-
      prob_parse([ si('YouTube', npp-nam, 'YouTube', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(partagerait, v-ver:cond, partager, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(revenus, nc-nom, revenu, [n-1]), si(',', ponct-pun, ',', [let-1]), si(rapportés, vpp-ver:pper, rapporter, [dl(0,n,n)-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), si(clips, nc-nom, clip, [n-1]), si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), si(placés, vpp-ver:pper, placer, [dr(0,dl(0,n,n),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(propriétaires, nc-nom, propriétaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droits, nc-nom, droit, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(auteur, nc-nom, auteur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1047, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(heure, nc-nom, heure, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('YouTube', npp-nam, 'YouTube', [np-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(partage, nc-nom, partage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1048, Result) :-
      prob_parse([ si('YouTube', npp-nam, 'YouTube', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vidéos, nc-nom, vidéo, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1049, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(photos, nc-nom, photo, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(prises, vpp-ver:pper, prendre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(photographe, nc-nom, photographe, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(célébrités, nc-nom, célébrité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Annie', npp-nam, 'Annie', [dr(0,np,np)-1]), si('Leibovitz', npp-nam, 'Leibovitz', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Beckham', npp-nam, 'Beckham', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(club, nc-nom, club, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(football, nc-nom, football, [n-1]), si('Real', npp-nam, 'Real', [dl(0,n,n)-1]), si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1050, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Beckham', npp-nam, 'Beckham', [np-1]), si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Real', npp-nam, 'Real', [dr(0,n,n)-1]), si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1051, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(milieu, nc-nom, milieu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terrain, nc-nom, terrain, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Real', npp-nam, 'Real', [n-1]), si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(capitaine, nc-nom, capitaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si('David', npp-nam, 'David', [dl(0,n,n)-1]), si('Beckham', npp-nam, 'Beckham', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si('ex-Spice', npp-nam, 'ex-Spice', [dr(0,n,n)-1]), si('Girl', npp-nam, 'Girl', [dr(0,n,n)-1]), si('Victoria', npp-nam, 'Victoria', [n-1]), si(ont, v-ver:pres, avoir, [dl(0,n,n)-1]), si(donné, vpp-ver:pper, donner, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(naissance, nc-nom, naissance, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(à, p-prp, à, [np-1]), si(un, det-det:art, un, [dr(0,pp_a,np)-1]), si(petit, adj-adj, petit, [dr(0,np,n)-1]), si(garçon, nc-nom, garçon, [dr(0,n,n)-1]), si(appelé, vpp-ver:pper, appeler, [n-1]), si('Cruz', npp-nam, 'Cruz', [dr(0,dl(0,n,n),np)-1]), si('Beckham', npp-nam, 'Beckham', [dr(0,np,np)-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(1052, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Beckham', npp-nam, 'Beckham', [np-1]), si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Real', npp-nam, 'Real', [dr(0,n,n)-1]), si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1053, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Beckham', npp-nam, 'Beckham', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(souhaitait, v-ver:impf, souhaiter, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(capitaine, nc-nom, capitaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(équipe, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(football, nc-nom, football, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1054, Result) :-
      prob_parse([ si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('Beckham', npp-nam, 'Beckham', [np-1]), si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Real', npp-nam, 'Real', [dr(0,n,n)-1]), si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1055, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(célèbre, adj-adj, célèbre, [dr(0,n,n)-1]), si(acteur, nc-nom, acteur, [n-1]), si(grec, adj-adj, grec, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(cinéma, nc-nom, cinéma, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(théâtre, nc-nom, théâtre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédé, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('Ericos', npp-nam, 'Ericos', [dl(0,n,n)-1]), si('Dynan', npp-nam, 'Dynan', [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Athènes', npp-nam, 'Athènes', [np-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(lutte, nc-nom, lutte, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cancer, nc-nom, cancer, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1056, Result) :-
      prob_parse([ si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(acteur, nc-nom, acteur, [n-1]), si(grec, adj-adj, grec, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1057, Result) :-
      prob_parse([ si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(joué, vpp-ver:pper, jouer, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(films, nc-nom, film, [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Grèce', npp-nam, 'Grèce', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étranger, nc-nom, étranger, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1058, Result) :-
      prob_parse([ si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(acteur, nc-nom, acteur, [n-1]), si(grec, adj-adj, grec, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1059, Result) :-
      prob_parse([ si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(marié, vpp-ver:pper, marier, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fille, nc-nom, fille, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(magnat, nc-nom, magnat, [n-1]), si(grec, adj-adj, grec, [dl(0,n,n)-1]), si('Yiannis', npp-nam, 'Yiannis', [dl(0,n,n)-1]), si('Latsis', npp-nam, 'Latsis', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Marianna', npp-nam, 'Marianna', [dr(0,np,np)-1]), si('Latsis', npp-nam, 'Latsis', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(3, det-num, 3, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1060, Result) :-
      prob_parse([ si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(acteur, nc-nom, acteur, [n-1]), si(grec, adj-adj, grec, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1061, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(sidérurgiste, nc-nom, sidérurgiste, [n-1]), si(indien, adj-adj, indien, [dl(0,n,n)-1]), si('Tata', npp-nam, 'Tata', [dl(0,n,n)-1]), si('Steel', npp-nam, 'Steel', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si('Tata', npp-nam, 'Tata', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(rachète, v-ver:pres, racheter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(géant, nc-nom, géant, [n-1]), si('anglo-néerlandais', adj-adj, 'anglo-néerlandais', [dl(0,n,n)-1]), si('Corus', npp-nam, 'Corus', [dl(0,n,n)-1]), si('Group', npp-nam, 'Group', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('6,7', det-num, '6,7', [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(livres, nc-nom, livre, [n-1]), si(sterling, et-nom, sterling, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cinquième, adj-num, cinquième, [dr(0,n,n)-1]), si(sidérurgiste, nc-nom, sidérurgiste, [n-1]), si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1062, Result) :-
      prob_parse([ si('Tata', npp-nam, 'Tata', [dr(0,np,np)-1]), si('Steel', npp-nam, 'Steel', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_ppart),np)-1]), si('Corus', npp-nam, 'Corus', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1063, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(indienne, adj-adj, indien, [dl(0,n,n)-1]), si('Tata', npp-nam, 'Tata', [dl(0,n,n)-1]), si('Steel', npp-nam, 'Steel', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bataille, nc-nom, bataille, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(racheter, vinf-ver:infi, racheter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(sidérurgiste, nc-nom, sidérurgiste, [n-1]), si('anglo-néerlandais', adj-adj, 'anglo-néerlandais', [dl(0,n,n)-1]), si('Corus', npp-nam, 'Corus', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1064, Result) :-
      prob_parse([ si('Tata', npp-nam, 'Tata', [dr(0,np,np)-1]), si('Steel', npp-nam, 'Steel', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(racheté, vpp-ver:pper, racheter, [dr(0,dl(0,np,s_ppart),np)-1]), si('Corus', npp-nam, 'Corus', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1065, Result) :-
      prob_parse([ si('Frank', npp-nam, 'Frank', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Jong', npp-nam, 'Jong', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(51, det-num, 51, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ontario', npp-nam, 'Ontario', [n-1]), si(',', ponct-pun, ',', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(présente, v-ver:pres, présente, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élection, nc-nom, élection, [n-1]), si(partielle, adj-adj, partiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Burlington', npp-nam, 'Burlington', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Ontario', npp-nam, 'Ontario', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1066, Result) :-
      prob_parse([ si('De', p-prp, 'De', [dr(0,pp_de,np)-1]), si('Jong', npp-nam, 'Jong', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ontario', npp-nam, 'Ontario', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1067, Result) :-
      prob_parse([ si('De', p-prp, 'De', [dr(0,dr(0,s,s),np)-1]), si('Jong', npp-nam, 'Jong', [np-1]), si(affronte, v-ver:pres, affronter, [dr(0,s,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('progressiste-conservatrice', nc-nom, 'progressiste-conservatrice', [n-1]), si('Joyce', npp-nam, 'Joyce', [dl(0,n,n)-1]), si('Savoline', npp-nam, 'Savoline', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(libérale, nc-nom, libérale, [n-1]), si(ontarienne, adj-adj, ontarien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(ancienne, adj-adj, ancien, [dr(0,n,n)-1]), si(conseillère, nc-nom, conseiller, [n-1]), si(municipale, adj-adj, municipal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,np,np)-1]), si('Burlington', npp-nam, 'Burlington', [dr(0,np,np)-1]), si('Joan', npp-nam, 'Joan', [dr(0,np,np)-1]), si('Lougheed', npp-nam, 'Lougheed', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,np)-1]), si('néo-démocrate', nc-nom, 'néo-démocrate', [np-1]), si('Cory', npp-nam, 'Cory', [np-1]), si('Judson', npp-nam, 'Judson', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1068, Result) :-
      prob_parse([ si('De', p-prp, 'De', [dr(0,pp_de,np)-1]), si('Jong', npp-nam, 'Jong', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(vert, adj-adj, vert, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ontario', npp-nam, 'Ontario', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1069, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Hubble', npp-nam, 'Hubble', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(télescope, nc-nom, télescope, [n-1]), si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(lumière, nc-nom, lumière, [n-1]), si(visible, adj-adj, visible, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ultraviolet, nc-nom, ultraviolet, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(nous, cls-pro:per, nous, [np-1]), si(ayons, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(fonctionnement, nc-nom, fonctionnement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1070, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Hubble', npp-nam, 'Hubble', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(télescope, nc-nom, télescope, [n-1]), si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1071, Result) :-
      prob_parse([ si('Hubble', npp-nam, 'Hubble', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(satellite, nc-nom, satellite, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(orbite, nc-nom, orbite, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(355, det-num, 355, [dr(0,np,n)-1]), si(miles, nc-nom, mile, [n-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Terre', npp-nam, 'Terre', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1072, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(navettes, nc-nom, navette, [n-1]), si(spatiales, adj-adj, spatial, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(effectué, vpp-ver:pper, effectuer, [dr(0,dl(0,np,s_ppart),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(vols, nc-nom, vol, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Hubble', npp-nam, 'Hubble', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1073, Result) :-
      prob_parse([ si('Hubble', npp-nam, 'Hubble', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(télescope, nc-nom, télescope, [n-1]), si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1074, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si(',', ponct-pun, ',', [let-1]), si(elle, cls-pro:per, lui, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(couple, nc-nom, couple, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('Alan', npp-nam, 'Alan', [dr(0,np,np)-1]), si('Grant', npp-nam, 'Grant', [np-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(livre, nc-nom, livre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(elle, cls-pro:per, lui, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fiancée, vpp-ver:pper, fiancée, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(médecin, nc-nom, médecin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1075, Result) :-
      prob_parse([ si('(', ponct-pun, '(', [let-1]), si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Jurassic', npp-nam, 'Jurassic', [dr(0,np,np)-1]), si('Park', npp-nam, 'Park', [np-1]), si('III', adj-num, 'III', [dl(0,np,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(apprend, v-ver:pres, apprendre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(relation, nc-nom, relation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(elle, pro-pro:per, lui, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(docteur, nc-nom, docteur, [n-1]), si('Grant', npp-nam, 'Grant', [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fonctionné, vpp-ver:pper, fonctionner, [dl(0,np,s_ppart)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(restent, v-ver:pres, rester, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(amis, nc-nom, ami, [n-1]), si(proches, adj-adj, proche, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1076, Result) :-
      prob_parse([ si(')', ponct-pun, ')', [let-1])], Result).
sent(1077, Result) :-
      prob_parse([ si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Crichton', npp-nam, 'Crichton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(auteur, nc-nom, auteur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(livre, nc-nom, livre, [n-1]), si('Jurassic', npp-nam, 'Jurassic', [dl(0,n,n)-1]), si('Park', npp-nam, 'Park', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1078, Result) :-
      prob_parse([ si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), si('Becker', npp-nam, 'Becker', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), si(personne, nc-nom, personne, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1079, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(titre, nc-nom, titre, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1985, pro-num, 1985, [np-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si('dix-sept', det-num, 'dix-sept', [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1080, Result) :-
      prob_parse([ si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), si('Becker', npp-nam, 'Becker', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(champion, nc-nom, champion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1081, Result) :-
      prob_parse([ si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), si('Becker', npp-nam, 'Becker', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), si(homme, nc-nom, homme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(soulevé, vpp-ver:pper, soulever, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(trophée, nc-nom, trophée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1082, Result) :-
      prob_parse([ si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), si('Becker', npp-nam, 'Becker', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(champion, nc-nom, champion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1083, Result) :-
      prob_parse([ si('Mike', npp-nam, 'Mike', [dr(0,np,np)-1]), si('Jittlov', npp-nam, 'Jittlov', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(maître, nc-nom, maître, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(effets, nc-nom, effet, [n-1]), si(spéciaux, adj-adj, spécial, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(pavané, vpp-ver:pper, pavaner, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(courts, adj-nom, court, [dr(0,n,n)-1]), si(métrages, nc-nom, métrage, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(à, p-prp, à, [dr(0,dr(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fois, nc-nom, fois, [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(réalisateur, nc-nom, réalisateur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vedette, nc-nom, vedette, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('The', et-det:art, 'The', [dr(0,np,n)-1]), si('Wizard', npp-nam, 'Wizard', [n-1]), si(of, et-prp, of, [dr(0,dl(0,n,n),np)-1]), si('Speed', npp-nam, 'Speed', [np-1]), si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), si('Time', npp-nam, 'Time', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1084, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Speed', npp-nam, 'Speed', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Jan', npp-nam, 'Jan', [np-1]), si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), si('Bont', npp-nam, 'Bont', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1085, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(réalisateur, nc-nom, réalisateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Speed', npp-nam, 'Speed', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Jan', npp-nam, 'Jan', [np-1]), si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), si('Bont', npp-nam, 'Bont', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(retour, nc-nom, retour, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(commandes, nc-nom, commande, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1086, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Speed', npp-nam, 'Speed', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Jan', npp-nam, 'Jan', [np-1]), si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), si('Bont', npp-nam, 'Bont', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1087, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(actuel, adj-adj, actuel, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Jose', npp-nam, 'Jose', [dr(0,np,np)-1]), si('Luis', npp-nam, 'Luis', [dr(0,np,np)-1]), si('Rodriguez', npp-nam, 'Rodriguez', [dr(0,np,np)-1]), si('Zapatero', npp-nam, 'Zapatero', [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('P.S.O.E', npp-abr, 'P.S.O.E', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1088, Result) :-
      prob_parse([ si('(', ponct-pun, '(', [let-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(socialiste, adj-adj, socialiste, [dl(0,n,n)-1]), si(ouvrier, adj-adj, ouvrier, [dl(0,n,n)-1]), si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1089, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(succédé, vpp-ver:pper, succéder, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('José', npp-nam, 'José', [dr(0,np,np)-1]), si('Maria', npp-nam, 'Maria', [dr(0,np,np)-1]), si('Aznar', npp-nam, 'Aznar', [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élection, nc-nom, élection, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mars, nc-nom, mars, [n-1]), si(2004, adj-num, 2004, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(juste, adv-adv, juste, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(attentats, nc-nom, attentat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Madrid', npp-nam, 'Madrid', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1090, Result) :-
      prob_parse([ si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), si('González', npp-nam, 'González', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1091, Result) :-
      prob_parse([ si('Alvaro', npp-nam, 'Alvaro', [dr(0,np,np)-1]), si('Uribe', npp-nam, 'Uribe', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(personnage, nc-nom, personnage, [n-1]), si(intéressant, adj-adj, intéressant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(',', ponct-pun, ',', [let-1]), si(soit, cc-kon, être, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(passant, vpr-ver:ppre, passer, [dl(0,np,s_ppres)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(père, nc-nom, père, [n-1]), si(abattu, vpp-ver:pper, abattre, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(milice, nc-nom, milice, [n-1]), si(rebelle, adj-adj, rebelle, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1092, Result) :-
      prob_parse([ si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), si('González', npp-nam, 'González', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1093, Result) :-
      prob_parse([ si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), si('González', npp-nam, 'González', [dr(0,np,np)-1]), si('Márquez', npp-nam, 'Márquez', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(né, vpp-ver:pper, naître, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1942, pro-num, 1942, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(homme, nc-nom, homme, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(premier, det-num, premier, [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1982, pro-num, 1982, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1094, Result) :-
      prob_parse([ si('Premier', det-num, 'Premier', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('après-guerre', nc-nom, 'après-guerre', [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(longtemps, adv-adv, longtemps, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(poste, nc-nom, poste, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('González', npp-nam, 'González', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(joué, vpp-ver:pper, jouer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(essentiel, adj-adj, essentiel, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(établissement, nc-nom, établissement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(dictature, nc-nom, dictature, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Francisco', npp-nam, 'Francisco', [dr(0,np,np)-1]), si('Franco', npp-nam, 'Franco', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1095, Result) :-
      prob_parse([ si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), si('González', npp-nam, 'González', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1096, Result) :-
      prob_parse([ si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), si('Alden', npp-nam, 'Alden', [dr(0,np,np)-1]), si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(astronaute, nc-nom, astronaute, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(pilote, nc-nom, pilote, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(essai, nc-nom, essai, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(aviateur, nc-nom, aviateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marine, nc-nom, marine, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(humain, nc-nom, humain, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(poser, vinf-ver:infi, poser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pied, nc-nom, pied, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', nc-nam, 'Lune', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1097, Result) :-
      prob_parse([ si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(homme, nc-nom, homme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(posé, vpp-ver:pper, poser, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1098, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1969, pro-num, 1969, [np-1]), si(',', ponct-pun, ',', [let-1]), si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(commandant, nc-nom, commandant, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si('Apollo', npp-nam, 'Apollo', [np-1]), si(11, adj-num, 11, [dl(0,np,np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(mission, nc-nom, mission, [n-1]), si(habitée, vpp-ver:pper, habiter, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(alunissage, nc-nom, alunissage, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(obtenu, vpp-ver:pper, obtenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(distinction, nc-nom, distinction, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(homme, nc-nom, homme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), si(atterrir, vinf-ver:infi, atterrir, [dl(0,np,s_inf)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(engin, nc-nom, engin, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', nc-nam, 'Lune', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(homme, nc-nom, homme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(marcher, vinf-ver:infi, marcher, [dr(0,dl(0,np,s_inf),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(surface, nc-nom, surface, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1099, Result) :-
      prob_parse([ si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(homme, nc-nom, homme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(posé, vpp-ver:pper, poser, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1100, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(1969, adj-num, 1969, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(être, nc-nom, être, [n-1]), si(humain, adj-adj, humain, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(poser, vinf-ver:infi, poser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pied, nc-nom, pied, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1101, Result) :-
      prob_parse([ si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(aviateur, nc-nom, aviateur, [n-1]), si(chevronné, adj-adj, chevronné, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(effectué, vpp-ver:pper, effectuer, [dr(0,dl(0,np,s_ppart),np)-1]), si(78, det-num, 78, [dr(0,np,n)-1]), si(missions, nc-nom, mission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(combat, nc-nom, combat, [n-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Corée', npp-nam, 'Corée', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(pilote, nc-nom, pilote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chasse, nc-nom, chasse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Marine', npp-nam, 'Marine', [n-1]), si(',', ponct-pun, ',', [let-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rejoint, vpp-ver:pper, rejoindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('NASA', npp-abr, 'NASA', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(pilote, nc-nom, pilote, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(essai, nc-nom, essai, [n-1]), si(civil, adj-adj, civil, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1102, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(accepté, vpp-ver:pper, accepter, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(astronautes, nc-nom, astronaute, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1962, pro-num, 1962, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1103, Result) :-
      prob_parse([ si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pilote, nc-nom, pilote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mission, nc-nom, mission, [n-1]), si('Gemini', npp-nam, 'Gemini', [dl(0,n,n)-1]), si(8, adj-num, 8, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [let-1]), si(lancée, vpp-ver:pper, lancer, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(1966, adj-num, 1966, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(puis, cc-adv, pouvoir, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(nommé, vpp-ver:pper, nommer, [dr(0,dl(0,np,s_pass),np)-1]), si(commandant, nc-nom, commandant, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mission, nc-nom, mission, [n-1]), si('Apollo', npp-nam, 'Apollo', [dl(0,n,n)-1]), si(11, adj-num, 11, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1969, pro-num, 1969, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1104, Result) :-
      prob_parse([ si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(homme, nc-nom, homme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(atterri, vpp-ver:pper, atterrir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1105, Result) :-
      prob_parse([ si('Cyrillic', npp-nam, 'Cyrillic', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(portage, nc-nom, portage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(cyrillique, adj-adj, cyrillique, [dl(0,n,n)-1]), si(freeware, nc-nom, freeware, [dl(0,n,n)-1]), si('X', nc-abr, 'X', [dl(0,n,n)-1]), si('Window', npp-nam, 'Window', [dl(0,n,n)-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plateforme, nc-nom, plateforme, [n-1]), si('Newton', npp-nam, 'Newton', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si('Unicode', npp-abr, 'Unicode', [np-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1106, Result) :-
      prob_parse([ si('Veuillez', vimp-ver:impe, 'Veuillez', [dr(0,s,dl(0,np,s_inf))-1]), si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(copyright, nc-nom, copyright, [n-1]), si(original, adj-adj, original, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(1,s,s),dl(0,np,s))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('en-tête', nc-nom, 'en-tête', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si('BDF', npp-abr, 'BDF', [dl(0,n,n)-1]), si('ci-jointe', adv-adv, 'ci-jointe', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(détails, nc-nom, détail, [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1107, Result) :-
      prob_parse([ si('Vous', cls-pro:per, 'Vous', [np-1]), si(trouverez, v-ver:futu, trouver, [dr(0,dl(0,np,s),np)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si('ci-joints', nc-nom, 'ci-joints', [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(modules, nc-nom, module, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(traduction, nc-nom, traduction, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(code, nc-nom, code, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('NTEncoding', npp-nam, 'NTEncoding', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('GNUE', npp-abr, 'GNUE', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(aka, adv-adv, aka, [dr(0,np,np)-1]), si('Makoto', npp-nam, 'Makoto', [dr(0,np,np)-1]), si('Nukui', npp-nam, 'Nukui', [np-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1108, Result) :-
      prob_parse([ si('Vous', cls-pro:per, 'Vous', [np-1]), si(êtes, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(mesure, nc-nom, mesure, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si('/', ponct-adv, '/', [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fichiers, nc-nom, fichier, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(logiciels, nc-nom, logiciel, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(supportent, v-ver:pres, supporter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('NTEncoding', npp-nam, 'NTEncoding', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1109, Result) :-
      prob_parse([ si('Cyrillic', npp-nam, 'Cyrillic', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Windows', npp-nam, 'Windows', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1110, Result) :-
      prob_parse([ si('Cyrillic', npp-nam, 'Cyrillic', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(puissant, adj-adj, puissant, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(rassemble, v-ver:pres, rassembler, [dr(0,dl(0,np,s),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(outils, nc-nom, outil, [n-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_de))))-1]), si(vous, cls-pro:per, vous, [np-1]), si(avez, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(besoin, nc-nom, besoin, [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(dessiner, vinf-ver:infi, dessiner, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pedigrees, nc-nom, pedigree, [n-1]), si(familiaux, adj-adj, familial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(gérer, vinf-ver:infi, gérer, [dr(0,dl(0,np,s_inf),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(analyser, vinf-ver:infi, analyser, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(données, nc-nom, donnée, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pedigree, nc-nom, pedigree, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1111, Result) :-
      prob_parse([ si('Cyrillic', npp-nam, 'Cyrillic', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Windows', npp-nam, 'Windows', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1112, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(mausolée, nc-nom, mausolée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), si('Huang', npp-nam, 'Huang', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tombe, nc-nom, tombe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(empereur, nc-nom, empereur, [n-1]), si('Qin', npp-nam, 'Qin', [dl(0,n,n)-1]), si('Shi', npp-nam, 'Shi', [dl(0,n,n)-1]), si('Huang', npp-nam, 'Huang', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(premier, det-num, premier, [dr(0,np,n)-1]), si(empereur, nc-nom, empereur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dynastie, nc-nom, dynastie, [n-1]), si('Qin', npp-nam, 'Qin', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(221, det-num, 221, [dr(0,np,n)-1]), si(av, nc-abr, av, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1113, Result) :-
      prob_parse([ si('J.-C', npp-nam, 'J.-C', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1114, Result) :-
      prob_parse([ si('-', ponct-pun, '-', [let-1]), si(207, det-num, 207, [dr(0,np,n)-1]), si(av, nc-nom, av, [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1115, Result) :-
      prob_parse([ si('J.-C', npp-nam, 'J.-C', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1116, Result) :-
      prob_parse([ si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(aussi, adv-adv, aussi, [dr(0,pp,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1117, Result) :-
      prob_parse([ si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), si('Huang', npp-nam, 'Huang', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(empereur, nc-nom, empereur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1118, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(unification, nc-nom, unification, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(221, adj-num, 221, [dl(0,n,n)-1]), si(avant, p-prp, avant, [dr(0,dl(0,n,n),np)-1]), si('JC', npp-nam, 'JC', [np-1]), si(sous, p-prp, sou, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premier', adj-nam, 'Premier', [dr(0,n,n)-1]), si('Empereur', npp-nam, 'Empereur', [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), si('Huangdi', npp-nam, 'Huangdi', [np-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(marqué, vpp-ver:pper, marquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(début, nc-nom, début, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(impériale, adj-adj, impérial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(duré, vpp-ver:pper, durer, [dl(0,np,s_ppart)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chute, nc-nom, chute, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dynastie, nc-nom, dynastie, [n-1]), si('Qing', npp-nam, 'Qing', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1912, pro-num, 1912, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1119, Result) :-
      prob_parse([ si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), si('Huang', npp-nam, 'Huang', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(empereur, nc-nom, empereur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1120, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Égypte', npp-nam, 'Égypte', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1978, pro-num, 1978, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(conduit, vpp-ver:pper, conduire, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(paix, nc-nom, paix, [n-1]), si(négociée, vpp-ver:pper, négocier, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(nations, nc-nom, nation, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(signée, vpp-ver:pper, signer, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Washington', npp-nam, 'Washington', [np-1]), si('DC', npp-abr, 'DC', [dl(0,np,np)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(1979, adj-num, 1979, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, nc-num, premier, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(voisins, nc-nom, voisin, [n-1]), si(arabes, adj-adj, arabe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1121, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si('israélo-égyptien', adj-adj, 'israélo-égyptien', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signé, vpp-ver:pper, signer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1979, pro-num, 1979, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1122, Result) :-
      prob_parse([ si(1979, pro-num, 1979, [np-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lueur, nc-nom, lueur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Égypte', npp-nam, 'Égypte', [n-1]), si(signent, v-ver:pres, signer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(faisant, vpr-ver:ppre, faire, [dr(0,dr(0,dl(0,np,s_ppres),np),dl(0,np,s_inf))-1]), si(naître, vinf-ver:infi, naître, [dl(0,np,s_inf)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(espoir, nc-nom, espoir, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(solution, nc-nom, solution, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(large, adj-adj, large, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Proche-Orient', npp-nam, 'Proche-Orient', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1123, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si('israélo-égyptien', adj-adj, 'israélo-égyptien', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signé, vpp-ver:pper, signer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1979, pro-num, 1979, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1124, Result) :-
      prob_parse([ si('Elizabeth', npp-nam, 'Elizabeth', [np-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(fille, nc-nom, fille, [n-1]), si(aînée, adj-adj, aîné, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Albert', npp-nam, 'Albert', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(duc, nc-nom, duc, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('York', npp-nam, 'York', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(futur, nc-adj, futur, [dr(0,n,n)-1]), si('George', npp-nam, 'George', [n-1]), si('VI', adj-num, 'VI', [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Lady', npp-nam, 'Lady', [dr(0,np,np)-1]), si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), si('Bowes-Lyon', npp-nam, 'Bowes-Lyon', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(née, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(21, adj-num, 21, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(1926, adj-num, 1926, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(17, nc-num, 17, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Bruton', npp-nam, 'Bruton', [dr(0,np,np)-1]), si('Street', npp-nam, 'Street', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Mayfair', npp-nam, 'Mayfair', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(résidence, nc-nom, résidence, [n-1]), si(londonienne, adj-adj, londonien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si('grands-parents', nc-nom, 'grands-parents', [n-1]), si(maternels, adj-adj, maternel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Claud', npp-nam, 'Claud', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(comte, nc-nom, comte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Strathmore', npp-nam, 'Strathmore', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Nina', npp-nam, 'Nina', [dr(0,np,np)-1]), si('Cecilia', npp-nam, 'Cecilia', [dr(0,np,np)-1]), si('Cavendish-Bentinck', npp-nam, 'Cavendish-Bentinck', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1125, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('VI', adj-num, 'VI', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1126, Result) :-
      prob_parse([ si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monarque, nc-nom, monarque, [n-1]), si(régnant, vpr-ver:ppre, régner, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1952, pro-num, 1952, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1127, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(proclamée, vpp-ver:pper, proclamer, [dr(0,dl(0,np,s_pass),np)-1]), si(reine, nc-nom, reine, [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(6, adj-num, 6, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(1952, adj-num, 1952, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(décès, nc-nom, décès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('VI', adj-num, 'VI', [dl(0,np,np)-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(officiellement, adv-adv, officiellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(couronnée, vpp-ver:pper, couronner, [dl(0,np,s_pass)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(suivante, adj-adj, suivant, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(2, adj-num, 2, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(1953, adj-num, 1953, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1128, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('VI', adj-num, 'VI', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1129, Result) :-
      prob_parse([ si('Sir', nc-nam, 'Sir', [dr(0,np,np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Ramsey', npp-nam, 'Ramsey', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(comte, nc-nom, comte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Holdernesse', npp-nam, 'Holdernesse', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si(1580, pro-num, 1580, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1130, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(épousé, vpp-ver:pper, épouser, [dr(0,dl(0,np,s_ppart),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(premier, det-num, premier, [dr(0,np,n)-1]), si(lieu, nc-nom, lieu, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), si('Ratcliffe', npp-nam, 'Ratcliffe', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(fille, nc-nom, fille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), si('Ratcliffe', npp-nam, 'Ratcliffe', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('5e', adj-num, '5e', [dr(0,n,n)-1]), si(comte, nc-nom, comte, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Essex', npp-nam, 'Essex', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bridget', npp-nam, 'Bridget', [dr(0,np,np)-1]), si('Morrison', npp-nam, 'Morrison', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(8, adj-num, 8, [dr(0,n,n)-1]), si(février, nc-nom, février, [n-1]), si(1607, adj-num, 1607, [dl(0,n,n)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si(8, pro-num, 8, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1131, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(épousé, vpp-ver:pper, épouser, [dr(0,dl(0,np,s_ppart),np)-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(second, det-num, second, [dr(0,np,n)-1]), si(lieu, nc-nom, lieu, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Martha', npp-nam, 'Martha', [dr(0,np,np)-1]), si('Cokayne', npp-nam, 'Cokayne', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(fille, nc-nom, fille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sir', nc-nom, 'Sir', [dr(0,np,np)-1]), si('William', npp-nam, 'William', [dr(0,np,np)-1]), si('Cokayne', npp-nam, 'Cokayne', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(1624, adj-num, 1624, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1132, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('VI', adj-num, 'VI', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1133, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(dame, nc-nom, dame, [n-1]), si('Laura', npp-nam, 'Laura', [dl(0,n,n)-1]), si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parents, nc-nom, parent, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bush', npp-nam, 'Bush', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si('George', npp-nam, 'George', [dl(0,n,n)-1]), si('H.W', npp-nam, 'H.W', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1134, Result) :-
      prob_parse([ si('Bush', npp-nam, 'Bush', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Barbara', npp-nam, 'Barbara', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cérémonie, nc-nom, cérémonie, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(porche, nc-nom, porche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(maison, nc-nom, maison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(chambres, nc-nom, chambre, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(ossature, nc-nom, ossature, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bois, nc-nom, bois, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1135, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('H.W', npp-abr, 'H.W', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1136, Result) :-
      prob_parse([ si('Bush', npp-nam, 'Bush', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Barbara', npp-nam, 'Barbara', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1137, Result) :-
      prob_parse([ si('Bush', npp-nam, 'Bush', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rentré, vpp-ver:pper, rentrer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(chez, p-prp, chez, [dr(0,pp,np)-1]), si(lui, pro-pro:per, luire, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(héros, nc-nom, héros, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1138, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(épousé, vpp-ver:pper, épouser, [dr(0,dl(0,np,s_ppart),np)-1]), si('Barbara', npp-nam, 'Barbara', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(inscrit, vpp-ver:pper, inscrire, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Yale', npp-nam, 'Yale', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1139, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('H.W', npp-abr, 'H.W', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1140, Result) :-
      prob_parse([ si('Bush', npp-nam, 'Bush', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Barbara', npp-nam, 'Barbara', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1141, Result) :-
      prob_parse([ si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), si('Marquez', npp-nam, 'Marquez', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(romancier, nc-nom, romancier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(lauréat, nc-nom, lauréat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(littérature, nc-nom, littérature, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1142, Result) :-
      prob_parse([ si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), si('Marquez', npp-nam, 'Marquez', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', nc-nam, 'Nobel', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(littérature, nc-nom, littérature, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1143, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(célèbre, adj-adj, célèbre, [dr(0,n,n)-1]), si(romancier, nc-nom, romancier, [n-1]), si(colombien, adj-adj, colombien, [dl(0,n,n)-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(entier, adj-adj, entier, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(tissage, nc-nom, tissage, [n-1]), si(magistral, adj-adj, magistral, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(genre, nc-nom, genre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réalisme, nc-nom, réalisme, [n-1]), si(magique, adj-adj, magique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1928, pro-num, 1928, [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(petite, adj-adj, petit, [dr(0,n,n)-1]), si(ville, nc-nom, ville, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Aracataca', npp-nam, 'Aracataca', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Colombie', npp-nam, 'Colombie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1144, Result) :-
      prob_parse([ si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), si('Marquez', npp-nam, 'Marquez', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(élevé, vpp-ver:pper, élever, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si('grands-parents', nc-nom, 'grands-parents', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(racontaient, v-ver:impf, raconter, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(histoires, nc-nom, histoire, [n-1]), si(merveilleuses, adj-adj, merveilleux, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fables, nc-nom, fable, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(contes, nc-nom, conte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fées, nc-nom, fée, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1145, Result) :-
      prob_parse([ si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), si('Marquez', npp-nam, 'Marquez', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(romancier, nc-nom, romancier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1146, Result) :-
      prob_parse([ si('Dynamite', npp-nam, 'Dynamite', [dr(0,np,np)-1]), si('Nobel', npp-nam, 'Nobel', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(formée, vpp-ver:pper, former, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fusion, nc-nom, fusion, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sociétés, nc-nom, société, [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(suisse, adj-adj, suisse, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Nobel', npp-nam, 'Nobel', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1147, Result) :-
      prob_parse([ si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), si('Nobel', npp-nam, 'Nobel', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inventeur, nc-nom, inventeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dynamite, nc-nom, dynamite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1148, Result) :-
      prob_parse([ si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), si('Nobel', npp-nam, 'Nobel', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(inventeur, nc-nom, inventeur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(possédait, v-ver:impf, posséder, [dr(0,dl(0,np,s),np)-1]), si(355, det-num, 355, [dr(0,np,n)-1]), si(brevets, nc-nom, brevet, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(total, nc-nom, total, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1149, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(mentionner, vinf-ver:infi, mentionner, [dr(0,dl(0,np,s_inf),np)-1]), si(',', ponct-pun, ',', [let-1]), si(outre, p-prp, outre, [dr(0,dr(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dynamite, nc-nom, dynamite, [n-1]), si(',', ponct-pun, ',', [let-1]), si(figurent, v-ver:pres, figurer, [dr(0,s,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(caoutchouc, nc-nom, caoutchouc, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cuir, nc-nom, cuir, [n-1]), si(synthétiques, adj-adj, synthétique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(soie, nc-nom, soie, [n-1]), si(artificielle, adj-adj, artificiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1150, Result) :-
      prob_parse([ si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), si('Nobel', npp-nam, 'Nobel', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inventeur, nc-nom, inventeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dynamite, nc-nom, dynamite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1151, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1861, pro-num, 1861, [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(père, nc-nom, père, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), si('Nobel', npp-nam, 'Nobel', [np-1]), si(produisait, v-ver:impf, produire, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tout, adv-adv, tout, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(nouvel, adj-adj, nouveau, [dr(0,n,n)-1]), si(explosif, nc-nom, explosif, [n-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nitroglycérine, nc-nom, nitroglycérine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1152, Result) :-
      prob_parse([ si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), si('Nobel', npp-nam, 'Nobel', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(inventeur, nc-nom, inventeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dynamite, nc-nom, dynamite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1153, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(deuxième, adj-num, deuxième, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(parc, nc-nom, parc, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(loisirs, nc-nom, loisir, [n-1]), si(derrière, p-prp, derrière, [dr(0,dl(0,n,n),np)-1]), si('Euro', npp-nam, 'Euro', [dr(0,np,np)-1]), si('Disney', npp-nam, 'Disney', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(aventure, nc-nom, aventure, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(petits, nc-nom, petit, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1154, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(manèges, nc-nom, manège, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(spectacles, nc-nom, spectacle, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(attractions, nc-nom, attraction, [n-1]), si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(attendent, v-ver:pres, attendre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1155, Result) :-
      prob_parse([ si('Euro-Disney', npp-nam, 'Euro-Disney', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(divertissement, nc-nom, divertissement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1156, Result) :-
      prob_parse([ si('Charles', npp-nam, 'Charles', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('Gaulle', npp-nam, 'Gaulle', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('1890-1970', pro-num, '1890-1970', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(général, nc-nom, général, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(homme, nc-nom, homme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('État', nc-nom, 'État', [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si('1959-69', pro-num, '1959-69', [np-1]), si(')', ponct-pun, ')', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cinquième', adj-num, 'Cinquième', [dr(0,n,n)-1]), si('République', npp-nam, 'République', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1157, Result) :-
      prob_parse([ si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('Gaulle', npp-nam, 'Gaulle', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1970, pro-num, 1970, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1158, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(général, nc-nom, général, [n-1]), si('Charles', npp-nam, 'Charles', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Gaulle', npp-nam, 'Gaulle', [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décédé, vpp-ver:pper, décéder, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1159, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('6.000', det-num, '6.000', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(assisté, vpp-ver:pper, assister, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(messe, nc-nom, messe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(requiem, nc-nom, requiem, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(honneur, nc-nom, honneur, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cathédrale, nc-nom, cathédrale, [n-1]), si('Notre-Dame', npp-nam, 'Notre-Dame', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Paris', npp-nam, 'Paris', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1160, Result) :-
      prob_parse([ si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('Gaulle', npp-nam, 'Gaulle', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1970, pro-num, 1970, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1161, Result) :-
      prob_parse([ si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), si('Charles', npp-nam, 'Charles', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('Gaulle', npp-nam, 'Gaulle', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1970, pro-num, 1970, [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(personne, pro-pro:ind, personne, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(assiste, v-ver:subp, assister, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(funérailles, nc-nom, funéraille, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1162, Result) :-
      prob_parse([ si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si('Gaulle', npp-nam, 'Gaulle', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1970, pro-num, 1970, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1163, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Népal', npp-nam, 'Népal', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(provient, v-ver:pres, provenir, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('cité-état', nc-nom, 'cité-état', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Goorka', npp-nam, 'Goorka', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), si(ils, cls-pro:per, il, [np-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(étroitement, adv-adv, étroitement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(associés, vpp-ver:pper, associer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1164, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Népal', npp-nam, 'Népal', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1165, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(gens, nc-nom, gens, [n-1]), si(plutôt, adv-adv, plutôt, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(doux, adj-adj, doux, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(polis, adj-adj, poli, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(assez, adv-adv, assez, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(timides, adj-adj, timide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1166, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(fait, nc-nom, fait, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(villageois, nc-nom, villageois, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(régions, nc-nom, région, [n-1]), si(montagneuses, adj-adj, montagneux, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('Garhwalis', npp-nam, 'Garhwalis', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Kumounis', npp-nam, 'Kumounis', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Dogras', npp-nam, 'Dogras', [np-1]), si(',', ponct-pun, ',', [let-1]), si(etc, adv-abr, etc, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1167, Result) :-
      prob_parse([ si(')', ponct-pun, ')', [let-1]), si(sont, v-ver:pres, être, [dr(0,dr(0,s,np),np)-1]), si(tous, adv-adv, tout, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(gens, nc-nom, gens, [n-1]), si(assez, adv-adv, assez, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(doux, adj-adj, doux, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), si(brillante, adj-adj, brillant, [dr(0,n,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1168, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Népal', npp-nam, 'Népal', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1169, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mondialement, adv-adv, mondialement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(connus, vpp-ver:pper, connaître, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(hautes, adj-adj, haut, [dr(0,n,n)-1]), si(montagnes, nc-nom, montagne, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Népal', npp-nam, 'Népal', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1170, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Népal', npp-nam, 'Népal', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1171, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(débarquement, nc-nom, débarquement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Normandie', npp-nam, 'Normandie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(6, adj-num, 6, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(1944, adj-num, 1944, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Allemands', nc-nam, 'Allemands', [n-1]), si(pensaient, v-ver:impf, penser, [dr(0,dl(0,np,s),s_q)-1]), si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(époque, nc-nom, époque, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(invasion, nc-nom, invasion, [n-1]), si(alliée, vpp-ver:pper, allié, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(aurait, v-ver:cond, avoir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pas', nc-nam, 'Pas', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Calais', npp-nam, 'Calais', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1172, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(débarquement, nc-nom, débarquement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Normandie', npp-nam, 'Normandie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juin, nc-nom, juin, [n-1]), si(1944, adj-num, 1944, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1173, Result) :-
      prob_parse([ si('Jour', nc-nom, 'Jour', [n-1]), si('J', nc-nom, 'J', [dl(0,n,n)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,n,s),s)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(débarquement, nc-nom, débarquement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Normandie', npp-nam, 'Normandie', [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,n,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(aéroportées, vpp-ver:pper, aéroporter, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(débarquement, nc-nom, débarquement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(jour, nc-nom, jour, [n-1]), si('J', nc-nom, 'J', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(6, adj-num, 6, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(1944, adj-num, 1944, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(combiné, vpp-ver:pper, combiner, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(parachutes, nc-nom, parachute, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(planeurs, nc-nom, planeur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(afin, adv-adv, afin, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(jeter, vinf-ver:infi, jeter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(filet, nc-nom, filet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(protection, nc-nom, protection, [n-1]), si(autour, p-prp, autour, [dr(0,pp_a,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(plages, nc-nom, plage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Normandie', npp-nam, 'Normandie', [np-1]), si(',', ponct-pun, ',', [let-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(invasion, nc-nom, invasion, [n-1]), si(massive, adj-adj, massif, [dl(0,n,n)-1]), si(allait, v-ver:impf, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(déferler, vinf-ver:infi, déferler, [dr(0,dl(0,np,s_inf),pp)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(rivage, nc-nom, rivage, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(avancer, vinf-ver:infi, avancer, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1174, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(débarquement, nc-nom, débarquement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Normandie', npp-nam, 'Normandie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juin, nc-nom, juin, [n-1]), si(1944, adj-num, 1944, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1175, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(6, adj-num, 6, [dr(0,n,n)-1]), si(juin, nc-nom, juin, [n-1]), si(1944, adj-num, 1944, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(navales, adj-adj, naval, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(aériennes, adj-adj, aérien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(terrestres, adj-adj, terrestre, [dl(0,n,n)-1]), si(alliées, adj-adj, allié, [dl(0,n,n)-1]), si(opérant, vpr-ver:ppre, opérer, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(assaut, nc-nom, assaut, [n-1]), si(aéroportées, adj-adj, aéroporté, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(parachutistes, nc-nom, parachutiste, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(submergé, vpp-ver:pper, submerger, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(défenses, nc-nom, défense, [n-1]), si(allemandes, adj-adj, allemand, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Mur', nc-nom, 'Mur', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ouest', npp-nam, 'Ouest', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(construites, vpp-ver:pper, construire, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(long, nc-nom, long, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(côtes, nc-nom, côte, [n-1]), si(françaises, adj-adj, français, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Manche', npp-nam, 'Manche', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1176, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(débarquement, nc-nom, débarquement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Normandie', npp-nam, 'Normandie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(juin, nc-nom, juin, [n-1]), si(1944, adj-num, 1944, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1177, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(chancelier, nc-nom, chancelier, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Helmut', npp-nam, 'Helmut', [dl(0,n,n)-1]), si('Kohl', npp-nam, 'Kohl', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rompra, v-ver:simp, rompre, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(promesses, nc-nom, promesse, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(faites, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(contributeurs, nc-nom, contributeur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(divulguant, vpr-ver:ppre, divulguer, [dr(0,dl(0,np,s_ppres),np)-1]), si(publiquement, adv-adv, publiquement, [dl(1,s,s)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(noms, nc-nom, nom, [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si('chrétien-démocrate', adj-adj, 'chrétien-démocrate', [dl(0,n,n)-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(révéler, vinf-ver:infi, révéler, [dr(0,dl(0,np,s_inf),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(identités, nc-nom, identité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1178, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), si('Kohl', npp-nam, 'Kohl', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1179, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(architecte, nc-nom, architecte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(monétaire, adj-adj, monétaire, [dl(0,n,n)-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(chancelier, nc-nom, chancelier, [n-1]), si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), si('Helmut', npp-nam, 'Helmut', [dl(0,n,n)-1]), si('Kohl', npp-nam, 'Kohl', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comparaît, v-ver:impf, comparaître, [dr(0,dl(0,np,s),pp)-1]), si(devant, p-prp, devant, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(parlementaire, adj-adj, parlementaire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(financement, nc-nom, financement, [n-1]), si(illicite, adj-adj, illicite, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si('chrétien-démocrate', adj-adj, 'chrétien-démocrate', [dl(0,n,n)-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dirigé, vpp-ver:pper, diriger, [dr(0,dl(0,np,s_ppart),np)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(vingt, det-num, vingt, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1180, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), si('Kohl', npp-nam, 'Kohl', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1181, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(démissionné, vpp-ver:pper, démissionner, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(poste, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(président, nc-nom, président, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(honneur, nc-nom, honneur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(principal, adj-adj, principal, [dr(0,n,n)-1]), si(parti, nc-nom, parti, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(opposition, nc-nom, opposition, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('sociaux-démocrates', nc-nom, 'sociaux-démocrates', [n-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(reconnu, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(accepté, vpp-ver:pper, accepter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(versements, nc-nom, versement, [n-1]), si(illégaux, adj-adj, illégal, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(caisses, nc-nom, caisse, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1182, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), si('Kohl', npp-nam, 'Kohl', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1183, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(marqué, vpp-ver:pper, marquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(onze, adj-num, onze, [dr(0,n,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(télédiffuseur, nc-nom, télédiffuseur, [n-1]), si('Vladislav', npp-nam, 'Vladislav', [dl(0,n,n)-1]), si('Listyev', npp-nam, 'Listyev', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(tué, vpp-ver:pper, tuer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(balles, nc-nom, balle, [n-1]), si(un, det-det:art, un, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(mois, nc-nom, mois, [n-1]), si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(nomination, nc-nom, nomination, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(poste, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(directeur, nc-nom, directeur, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('ORT', npp-abr, 'ORT', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1184, Result) :-
      prob_parse([ si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(révélé, vpp-ver:pper, révéler, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(assassins, nc-nom, assassin, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(poursuive, vs-ver:subp, poursuivre, [dl(0,cl_r,dl(0,np,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1185, Result) :-
      prob_parse([ si('Vladislav', npp-nam, 'Vladislav', [dr(0,np,np)-1]), si('Listyev', npp-nam, 'Listyev', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(assassiné, vpp-ver:pper, assassiner, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1186, Result) :-
      prob_parse([ si('Mars', nc-nom, 'Mars', [n-1]), si(1995, adj-num, 1995, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(journaliste, nc-nom, journaliste, [n-1]), si('Vladislav', npp-nam, 'Vladislav', [dl(0,n,n)-1]), si('Listyev', npp-nam, 'Listyev', [dl(0,n,n)-1]), si(abattu, vpp-ver:pper, abattre, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1187, Result) :-
      prob_parse([ si('Vladislav', npp-nam, 'Vladislav', [dr(0,np,np)-1]), si('Listyev', npp-nam, 'Listyev', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(assassiné, vpp-ver:pper, assassiner, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1188, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(apprécié, vpp-ver:pper, apprécier, [dr(0,n,n)-1]), si(présentateur, nc-nom, présentateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(télévision, nc-nom, télévision, [n-1]), si('Vladislav', npp-nam, 'Vladislav', [dl(0,n,n)-1]), si('Listyev', npp-nam, 'Listyev', [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), si(année, nc-nom, année, [n-1]), si(précédente, adj-adj, précédent, [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(établi, vpp-ver:pper, établir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(célébrité, nc-nom, célébrité, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(protégeait, v-ver:impf, protéger, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,pp_de,n)-1]), si(tueurs, nc-nom, tueur, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(gages, nc-nom, gage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1189, Result) :-
      prob_parse([ si('Vladislav', npp-nam, 'Vladislav', [dr(0,np,np)-1]), si('Listyev', npp-nam, 'Listyev', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(assassiné, vpp-ver:pper, assassiner, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1190, Result) :-
      prob_parse([ si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('III', adj-num, 'III', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1869-1947', pro-num, '1869-1947', [np-1]), si(')', ponct-pun, ')', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(roi, nc-nom, roi, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(1900, pro-num, 1900, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1946, pro-num, 1946, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1191, Result) :-
      prob_parse([ si('Sa', det-det:pos, 'Sa', [dr(0,np,n)-1]), si(coopération, nc-nom, coopération, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('Mussolini', npp-nam, 'Mussolini', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(contribué, vpp-ver:pper, contribuer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(fin, nc-nom, fin, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(monarchie, nc-nom, monarchie, [n-1]), si(italienne, adj-adj, italien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1192, Result) :-
      prob_parse([ si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), si('III', adj-num, 'III', [dl(0,np,np)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(roi, nc-nom, roi, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(1900, pro-num, 1900, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1946, pro-num, 1946, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1193, Result) :-
      prob_parse([ si('Humbert', npp-nam, 'Humbert', [np-1]), si(fut, v-ver:simp, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(roi, nc-nom, roi, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(fils, nc-nom, fils, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(prince, nc-nom, prince, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Naples', npp-nam, 'Naples', [np-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(actuel, adj-adj, actuel, [dr(0,n,n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', nc-nam, 'Maison', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Savoie', npp-nam, 'Savoie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1194, Result) :-
      prob_parse([ si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('III', adj-num, 'III', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(roi, nc-nom, roi, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(1900, pro-num, 1900, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1946, pro-num, 1946, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1195, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(règnes, nc-nom, règne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('II', adj-num, 'II', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1861-78', pro-num, '1861-78', [np-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Humbert', npp-nam, 'Humbert', [np-1]), si('Ier', adj-num, 'Ier', [dl(0,np,np)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1878-1900', pro-num, '1878-1900', [np-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(moitié, nc-nom, moitié, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(règne, nc-nom, règne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), si('III', adj-num, 'III', [dl(0,np,np)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1900-1946', pro-num, '1900-1946', [np-1]), si(')', ponct-pun, ')', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(marqués, vpp-ver:pper, marquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(réformes, nc-nom, réforme, [n-1]), si(sociales, adj-adj, social, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(politiques, adj-adj, politique, [n-1]), si(modérées, vpp-ver:pper, modérer, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(certaine, adj-adj, certain, [dr(0,n,n)-1]), si(expansion, nc-nom, expansion, [n-1]), si(industrielle, adj-adj, industriel, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si('(', ponct-pun, '(', [let-1]), si(principalement, adv-adv, principalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('XXe', adj-num, 'XXe', [dr(0,n,n)-1]), si(siècle, nc-nom, siècle, [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1196, Result) :-
      prob_parse([ si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), si('III', adj-num, 'III', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(roi, nc-nom, roi, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(1900, pro-num, 1900, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1946, pro-num, 1946, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1197, Result) :-
      prob_parse([ si('De', p-prp, 'De', [dr(0,dr(0,s,s),np)-1]), si(1835, pro-num, 1835, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1839, pro-num, 1839, [np-1]), si(',', ponct-pun, ',', [let-1]), si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), si('Liszt', npp-nam, 'Liszt', [np-1]), si(vit, v-ver:pres, voir, [dr(0,dl(0,np,s),np)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('Marie', npp-nam, 'Marie', [dr(0,np,np)-1]), si('Catherine', npp-nam, 'Catherine', [dr(0,np,np)-1]), si('Sophie', npp-nam, 'Sophie', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Flavigny', npp-nam, 'Flavigny', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('ex-épouse', nc-nom, 'ex-épouse', [dr(0,n,n)-1]), si(du, p+d-prp:det, de, [n-1]), si(comte, nc-nom, comte, [dr(0,dl(0,n,n),n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Agoult', npp-nam, 'Agoult', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1198, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(connue, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(plume, nc-nom, plume, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Daniel', npp-nam, 'Daniel', [dr(0,np,np)-1]), si('Stern', npp-nam, 'Stern', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1199, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(filles, nc-nom, fille, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Blandina', npp-nam, 'Blandina', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1835-1862', pro-num, '1835-1862', [np-1]), si(')', ponct-pun, ')', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Cosima', npp-nam, 'Cosima', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1837-1930', pro-num, '1837-1930', [np-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fils, nc-nom, fils, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Daniel', npp-nam, 'Daniel', [np-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('1839-1859', pro-num, '1839-1859', [np-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1200, Result) :-
      prob_parse([ si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), si('Liszt', npp-nam, 'Liszt', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vécu, vpp-ver:pper, vivre, [dl(0,np,s_ppart)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1811, pro-num, 1811, [np-1]), si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), si(1886, pro-num, 1886, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1201, Result) :-
      prob_parse([ si('Combat', nc-nom, 'Combat', [n-1]), si(naval, adj-adj, naval, [dl(0,n,n)-1]), si(important, adj-adj, important, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(guerres, nc-nom, guerre, [n-1]), si(perses, adj-adj, perse, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [n-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1202, Result) :-
      prob_parse([ si('Eschyle', npp-nam, 'Eschyle', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(servi, vpp-ver:pper, servir, [dl(0,np,s_ppart)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bataille, nc-nom, bataille, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Perses', nc-nam, 'Perses', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(ancienne, adj-adj, ancien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(oeuvres, nc-nom, oeuvre, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(survivre, vinf-ver:infi, survivre, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1203, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Perses', nc-nam, 'Perses', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Eschyle', npp-nam, 'Eschyle', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1204, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(tard, adv-adv, tard, [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(lorsque, cs-kon, lorsque, [dr(0,dr(0,s,s),s)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Cage', npp-nam, 'Cage', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(retourné, vpp-ver:pper, retourner, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Pacific', npp-nam, 'Pacific', [dr(0,n,n)-1]), si('Palisades', npp-nam, 'Palisades', [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(écrit, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(chansons, nc-nom, chanson, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(textes, nc-nom, texte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), si('Stein', npp-nam, 'Stein', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, de, [dr(0,np,n)-1]), si(choeurs, nc-nom, choeur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Perses', nc-nam, 'Perses', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Eschyle', npp-nam, 'Eschyle', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1205, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Perses', nc-nam, 'Perses', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(écrits, vpp-ver:pper, écrire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Eschyle', npp-nam, 'Eschyle', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1206, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mahomet', npp-nam, 'Mahomet', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(leadership, nc-nom, leadership, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(revenu, vpp-ver:pper, revenir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si('beau-père', nc-nom, 'beau-père', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Abu', npp-nam, 'Abu', [dr(0,np,np)-1]), si('Bakr', npp-nam, 'Bakr', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(calife, nc-nom, calife, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(khalifa, et-nom, khalifa, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(successeur, nc-nom, successeur, [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(position, nc-nom, position, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(combine, v-ver:pres, combine, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pouvoir, nc-nom, pouvoir, [n-1]), si(spirituel, adj-adj, spirituel, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(séculier, adj-adj, séculier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1207, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('beau-père', nc-nom, 'beau-père', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mohammed', npp-nam, 'Mohammed', [dr(0,np,np)-1]), si('Khalifa', npp-nam, 'Khalifa', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Oussama', npp-nam, 'Oussama', [dr(0,np,np)-1]), si('Ben', npp-nam, 'Ben', [dr(0,np,np)-1]), si('Laden', npp-nam, 'Laden', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1208, Result) :-
      prob_parse([ si('Umar', npp-nam, 'Umar', [dr(0,np,np)-1]), si('Al', npp-nam, 'Al', [dr(0,np,np)-1]), si('Khattab', npp-nam, 'Khattab', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('beau-père', nc-nom, 'beau-père', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mahomet', npp-nam, 'Mahomet', [np-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(mariage, nc-nom, mariage, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(fille, nc-nom, fille, [n-1]), si('Hafsa', npp-nam, 'Hafsa', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), si(khalife, nc-nom, khalife, [n-1]), si(reconnu, vpp-ver:pper, reconnaître, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(appartenait, v-ver:impf, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(famille, nc-nom, famille, [n-1]), si(mecquoise, adj-adj, mecquois, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Banu', npp-nam, 'Banu', [n-1]), si('Umayya', npp-nam, 'Umayya', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(branche, nc-nom, branche, [n-1]), si(descendait, v-ver:impf, descendre, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si('Abu\'l', npp-nam, 'Abu\'l', [dr(0,np,np)-1]), si('Aasi', npp-nam, 'Aasi', [dr(0,np,np)-1]), si(',', ponct-pun, ',', [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(était, v-ver:impf, être, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), si('grand-père', nc-nom, 'grand-père', [dr(0,np,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si('Umar', npp-nam, 'Umar', [n-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(1209, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('beau-père', nc-nom, 'beau-père', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mahomet', npp-nam, 'Mahomet', [dr(0,np,np)-1]), si('Khalifa', npp-nam, 'Khalifa', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Oussama', npp-nam, 'Oussama', [dr(0,np,np)-1]), si('Ben', npp-nam, 'Ben', [dr(0,np,np)-1]), si('Laden', npp-nam, 'Laden', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1210, Result) :-
      prob_parse([ si('Créé', vpp-ver:pper, 'Créé', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Rob-Vel', npp-nam, 'Rob-Vel', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1938, pro-num, 1938, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si('Spirou', npp-nam, 'Spirou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(dessiné, vpp-ver:pper, dessiner, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Franquin', npp-nam, 'Franquin', [np-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(1946, pro-num, 1946, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(1968, pro-num, 1968, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1211, Result) :-
      prob_parse([ si('Spirou', npp-nam, 'Spirou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Rob-Vel', npp-nam, 'Rob-Vel', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1212, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(désastre, nc-nom, désastre, [n-1]), si(ambulant, adj-adj, ambulant, [dl(0,n,n)-1]), si('Gaston', npp-nam, 'Gaston', [dl(0,n,n)-1]), si('Lagaffe', npp-nam, 'Lagaffe', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Franquin', npp-nam, 'Franquin', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pages, nc-nom, page, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Spirou', npp-nam, 'Spirou', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(donné, vpp-ver:pper, donner, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(naissance, nc-nom, naissance, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(courtes, adj-adj, court, [dr(0,n,n)-1]), si(bandes, nc-nom, bande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gags, nc-nom, gag, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1213, Result) :-
      prob_parse([ si('Spirou', npp-nam, 'Spirou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Rob-Vel', npp-nam, 'Rob-Vel', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1214, Result) :-
      prob_parse([ si('Red', npp-nam, 'Red', [dr(0,np,np)-1]), si('Planet', npp-nam, 'Planet', [dr(0,np,np)-1]), si('Consulting', npp-nam, 'Consulting', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Inc', et-nam, 'Inc', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1215, Result) :-
      prob_parse([ si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(projets, nc-nom, projet, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(fournit, v-ver:pres, fournir, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si(logiciels, adj-adj, logiciel, [dl(0,n,n)-1]), si(experts, adj-adj, expert, [dl(0,n,n)-1]), si('Smallworld', npp-nam, 'Smallworld', [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(services, nc-nom, service, [n-1]), si(publics, adj-adj, public, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(électricité, nc-nom, électricité, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1216, Result) :-
      prob_parse([ si('Mars', nc-nom, 'Mars', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(appelée, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_pass),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(planète, nc-nom, planète, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1217, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(bouddhisme, nc-nom, bouddhisme, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(religion, nc-nom, religion, [n-1]), si(officielle, adj-adj, officiel, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Cambodge', npp-nam, 'Cambodge', [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Birmanie', npp-nam, 'Birmanie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1218, Result) :-
      prob_parse([ si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(christianisme, nc-nom, christianisme, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(musulmans, nc-nom, musulman, [n-1]), si(cham, et-nom, cham, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(populaires, adj-adj, populaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1219, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(religion, nc-nom, religion, [n-1]), si(officielle, adj-adj, officiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bouddhisme, nc-nom, bouddhisme, [n-1]), si('Theravada', npp-nam, 'Theravada', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1220, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(français, nc-nom, français, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(très, adv-adv, très, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(répandu, vpp-ver:pper, répandre, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Canada', npp-nam, 'Canada', [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(langue, nc-nom, langue, [n-1]), si('co-officielle', adj-adj, 'co-officielle', [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(anglais, nc-nom, anglais, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1221, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(français, nc-nom, français, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(langue, nc-nom, langue, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(parlée, vpp-ver:pper, parler, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si('Québec', npp-nam, 'Québec', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1222, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conditions, nc-nom, condition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(connaissance, nc-nom, connaissance, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Coran', npp-nam, 'Coran', [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(connaissance, nc-nom, connaissance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(langue, nc-nom, langue, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Coran', npp-nam, 'Coran', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(interprété, vpp-ver:pper, interpréter, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(compris, vpp-ver:pper, comprendre, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1223, Result) :-
      prob_parse([ si('Nos', det-det:pos, 'Nos', [dr(0,np,n)-1]), si(prédécesseurs, nc-nom, prédécesseur, [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(coeur, nc-nom, coeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(apprendre, vinf-ver:infi, apprendre, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(arabe, nc-nom, arabe, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(raison, nc-nom, raison, [n-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(comme, cs-kon, comme, [dr(0,dr(0,s,s),s)-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),np)-1]), si('\'', ponct-pun:cit, '\'', [dr(0,np,np)-1]), si('Amr', npp-nam, 'Amr', [dr(0,np,np)-1]), si('Ibn', npp-nam, 'Ibn', [np-1]), si('Khattab', npp-nam, 'Khattab', [dr(0,dl(0,s,s),s)-1]), si(':', ponct-pun, ':', [let-1]), si('"', ponct-pun:cit, '"', [np-1]), si('Je', cls-pro:per, 'Je', [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(préfère, v-ver:pres, préférer, [dl(0,np,s_inf)-1]), si(voyager, vinf-ver:infi, voyager, [dr(0,dl(1,s,s),np)-1]), si(pendant, p-prp, pendant, [dr(0,np,n)-1]), si(quarante, det-num, quarante, [n-1]), si(nuits, nc-nom, nuit, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(interpréter, vinf-ver:infi, interpréter, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('Ayat', npp-nam, 'Ayat', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Livre', nc-nam, 'Livre', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Allah', npp-nam, 'Allah', [np-1]), si(plutôt, adv-adv, plutôt, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(que, cs-kon, que, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(passer, vinf-ver:infi, passer, [dr(0,np,n)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(temps, nc-nom, temps, [dr(0,pp_a,n)-1]), si(au, p+d-prp:det, au, [n-1]), si('Masjid', npp-nam, 'Masjid', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Prophète', npp-nam, 'Prophète', [n-1]), si('(', ponct-pun, '(', [n-1]), si('PBU', npp-abr, 'PBU', [let-1]), si(')', ponct-pun, ')', [let-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(jeûnant, vpr-ver:ppre, jeûner, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(priant, vpr-ver:ppre, prier, [dr(0,dl(0,np,s_ppres),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nuit, nc-nom, nuit, [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1]), si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1224, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(arabe, nc-nom, arabe, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(langue, nc-nom, langue, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Coran', npp-nam, 'Coran', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1225, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(révélations, nc-nom, révélation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Saint', npp-nam, 'Saint', [dr(0,n,n)-1]), si('Coran', npp-nam, 'Coran', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(apportées, vpp-ver:pper, apporter, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Saint', adj-adj, 'Saint', [dr(0,n,n)-1]), si('Prophète', npp-nam, 'Prophète', [n-1]), si('Muhammad', npp-nam, 'Muhammad', [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ange, nc-nom, ange, [n-1]), si('Gabriel', npp-nam, 'Gabriel', [dl(0,n,n)-1]), si(sous, p-prp, sou, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(forme, nc-nom, forme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mots, nc-nom, mot, [n-1]), si(clairs, adj-adj, clair, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(langue, nc-nom, langue, [n-1]), si(arabe, adj-adj, arabe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1226, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(arabe, nc-nom, arabe, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(langue, nc-nom, langue, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Coran', npp-nam, 'Coran', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1227, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(principaux, adj-adj, principal, [dr(0,n,n)-1]), si(journaux, nc-nom, journal, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(régionaux, adj-adj, régional, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), si('Aftenposten', npp-nam, 'Aftenposten', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('VG', npp-abr, 'VG', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('DN', npp-abr, 'DN', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Dagbladet', npp-nam, 'Dagbladet', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Adresseavisen', npp-nam, 'Adresseavisen', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Bergens', npp-nam, 'Bergens', [dr(0,np,np)-1]), si('Tidende', npp-nam, 'Tidende', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Nordlys', npp-nam, 'Nordlys', [dr(0,dl(0,np,np),np)-1]), si(ne, adv-adv, ne, [np-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(publiés, vpp-ver:pper, publier, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,pp_de,np)-1]), si(de, p-prp, de, [np-1]), si(jeudi, nc-nom, jeudi, [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1228, Result) :-
      prob_parse([ si('Dagbladet', npp-nam, 'Dagbladet', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(journal, nc-nom, journal, [n-1]), si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1229, Result) :-
      prob_parse([ si('Grand', adj-adj, 'Grand', [dr(0,np,n)-1]), si(article, nc-nom, article, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(journal, nc-nom, journal, [n-1]), si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dl(0,n,n),np)-1]), si('Osloposten', npp-nam, 'Osloposten', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(scientologie, nc-nom, scientologie, [n-1]), si('U-MAN', npp-abr, 'U-MAN', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1230, Result) :-
      prob_parse([ si('Entretiens', nc-nom, 'Entretiens', [n-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si('Magne', npp-nam, 'Magne', [dr(0,np,np)-1]), si('Berge', npp-nam, 'Berge', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(auteur, nc-nom, auteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opération, nc-nom, opération, [n-1]), si('Clambake', npp-nam, 'Clambake', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1231, Result) :-
      prob_parse([ si('Dagbladet', npp-nam, 'Dagbladet', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(journal, nc-nom, journal, [n-1]), si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1232, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('SNCF', npp-abr, 'SNCF', [dl(0,n,n)-1]), si(coopère, v-ver:pres, coopérer, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(projet, nc-nom, projet, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1233, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appelle, v-ver:pres, appeler, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si('SNCF', npp-abr, 'SNCF', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1234, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(14, det-num, 14, [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(utilise, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancienne, adj-adj, ancien, [dr(0,n,n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Waldkappeler', npp-nam, 'Waldkappeler', [dr(0,n,n)-1]), si('Bahn', npp-nam, 'Bahn', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisée, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(que, adv-adv, que, [dr(0,pp,pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(trafic, nc-nom, trafic, [n-1]), si(de, p-prp, de, [n-1]), si(marchandises, nc-nom, marchandise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1235, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(compagnie, nc-nom, compagnie, [n-1]), si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appelle, v-ver:pres, appeler, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si('SNCF', npp-abr, 'SNCF', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1236, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(effort, nc-nom, effort, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Powell', npp-nam, 'Powell', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(amélioré, vpp-ver:pper, améliorer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(saut, nc-nom, saut, [n-1]), si(miraculeux, adj-adj, miraculeux, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(médaille, nc-nom, médaille, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(or, nc-nom, or, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(précédent, adj-adj, précédent, [dr(0,n,n)-1]), si(record, nc-nom, record, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('8,90m', nc-nam, '8,90m', [np-1]), si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), si('29-2,50', pro-num, '29-2,50', [np-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bob', npp-nam, 'Bob', [dr(0,np,np)-1]), si('Beamon', npp-nam, 'Beamon', [np-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,np,np),n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1968, pro-num, 1968, [np-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Mexico', npp-nam, 'Mexico', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1237, Result) :-
      prob_parse([ si('2,45m', nc-num, '2,45m', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(record, nc-nom, record, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(saut, nc-nom, saut, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(hauteur, nc-nom, hauteur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1238, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rempli, vpp-ver:pper, remplir, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Taipei', npp-nam, 'Taipei', [np-1]), si(samedi, nc-nom, samedi, [dr(0,dl(1,s,s),n)-1]), si(soir, nc-nom, soir, [n-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(partis, nc-nom, parti, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(taïwanais, adj-adj, taïwanais, [dl(0,n,n)-1]), si('Chen', npp-nam, 'Chen', [dl(0,n,n)-1]), si('Shui-bian', npp-nam, 'Shui-bian', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(exprimé, vpp-ver:pper, exprimer, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(opposition, nc-nom, opposition, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(loi, nc-nom, loi, [n-1]), si(antisécession, nc-nom, antisécession, [dl(0,n,n)-1]), si(adoptée, vpp-ver:pper, adopter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(continentale, adj-adj, continental, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(semaine, nc-nom, semaine, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1239, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(manifestants, nc-nom, manifestant, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(scandé, vpp-ver:pper, scander, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), si('Opposez', vimp-ver:impe, 'Opposez', [dr(0,s,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(aimez, vimp-ver:impe, aimer, [dr(0,s,np)-1]), si('Taïwan', npp-nam, 'Taïwan', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(qualifié, vpp-ver:pper, qualifier, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(carnaval, nc-nom, carnaval, [n-1]), si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('centre-ville', nc-nom, 'centre-ville', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Taipei', npp-nam, 'Taipei', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1240, Result) :-
      prob_parse([ si('Chen', npp-nam, 'Chen', [dr(0,np,np)-1]), si('Shui-bian', npp-nam, 'Shui-bian', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Taïwan', npp-nam, 'Taïwan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1241, Result) :-
      prob_parse([ si('Lien', nc-nom, 'Lien', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(appelé, vpp-ver:pper, appeler, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(taïwanais, adj-adj, taïwanais, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('ROC', npp-abr, 'ROC', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dirigé, vpp-ver:pper, diriger, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(indépendantiste, adj-adj, indépendantiste, [dl(0,n,n)-1]), si('Chen', npp-nam, 'Chen', [dl(0,n,n)-1]), si('Shui-bian', npp-nam, 'Shui-bian', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(suite, nc-nom, suite, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(rencontre, nc-nom, rencontre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(multipliant, vpr-ver:ppre, multiplier, [dr(0,dl(0,np,s_ppres),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(efforts, nc-nom, effort, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pacification, nc-nom, pacification, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(répression, nc-nom, répression, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si(indépendantiste, adj-adj, indépendantiste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1242, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Je', cls-pro:per, 'Je', [np-1]), si(crois, v-ver:pres, croire, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(porte, nc-nom, porte, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(ouverte, vpp-ver:pper, ouvrir, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si('Lien', nc-nam, 'Lien', [np-1]), si('.', ponct-pun, '.', [let-1]), si('"', ponct-pun:cit, '"', [let-1])], Result).
sent(1243, Result) :-
      prob_parse([ si('Chen', npp-nam, 'Chen', [dr(0,np,np)-1]), si('Shui-bian', npp-nam, 'Shui-bian', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Taïwan', npp-nam, 'Taïwan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1244, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,dr(0,s,dia(1,box(1,pp)))),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(participants, nc-nom, participant, [n-1]), si(sont, v-ver:pres, être, [dr(0,dr(0,s,np),dl(0,np,s_pass))-1]), si(inclus, vpp-ver:pper, inclure, [dr(0,dl(0,np,s_pass),pp)-1]), si('Ken', npp-nam, 'Ken', [dr(0,np,np)-1]), si('Takeuchi', npp-nam, 'Takeuchi', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jan', npp-nam, 'Jan', [dr(0,np,np)-1]), si('Jan', npp-nam, 'Jan', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Shintaro', npp-nam, 'Shintaro', [dr(0,np,np)-1]), si('Tabata', npp-nam, 'Tabata', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(information, nc-nom, information, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Livedoor', npp-nam, 'Livedoor', [np-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(professeur, nc-nom, professeur, [n-1]), si('Clyde', npp-nam, 'Clyde', [dl(0,n,n)-1]), si('Bentley', npp-nam, 'Bentley', [dl(0,n,n)-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(université, nc-nom, université, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Missouri', npp-nam, 'Missouri', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('My', et-det:art, 'My', [dr(0,np,np)-1]), si('Missourian', npp-nam, 'Missourian', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1245, Result) :-
      prob_parse([ si('Chen', npp-nam, 'Chen', [dr(0,np,np)-1]), si('Shui-bian', npp-nam, 'Shui-bian', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Taïwan', npp-nam, 'Taïwan', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1246, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(séisme, nc-nom, séisme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(magnitude, nc-nom, magnitude, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), si(moins, adv-adv, moins, [n-1]), si('6,2', pro-num, '6,2', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(frappé, vpp-ver:pper, frapper, [dl(0,np,s_ppart)-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(large, nc-nom, large, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(côtes, nc-nom, côte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sumatra', npp-nam, 'Sumatra', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(déclenchant, vpr-ver:ppre, déclencher, [dr(0,dl(0,np,s_ppres),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(alerte, nc-nom, alerte, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1247, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(immédiats, adj-adj, immédiat, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(dommages, nc-nom, dommage, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(victimes, nc-nom, victime, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1248, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vagues, nc-nom, vague, [n-1]), si(créées, vpp-ver:pper, créer, [dl(0,n,n)-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(masse, nc-nom, masse, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(déplace, v-ver:pres, déplacer, [dl(0,cl_r,dl(0,np,s))-1]), si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(massive, adj-adj, massif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1249, Result) :-
      prob_parse([ si('Panique', nc-nom, 'Panique', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Sumatra', npp-nam, 'Sumatra', [np-1]), si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(séisme, nc-nom, séisme, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1250, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(indonésienne, adj-adj, indonésien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sumatra', npp-nam, 'Sumatra', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fui, vpp-ver:pper, fuir, [dr(0,dl(0,np,s_ppart),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(maisons, nc-nom, maison, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tremblement, nc-nom, tremblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(magnitude, nc-nom, magnitude, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('6,7', pro-num, '6,7', [np-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(frappé, vpp-ver:pper, frapper, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(journée, nc-nom, journée, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1251, Result) :-
      prob_parse([ si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tremblement, nc-nom, tremblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(assez, adv-adv, assez, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),dl(0,n,n))-1]), si(puissant, adj-adj, puissant, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(craindre, vinf-ver:infi, craindre, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(répétition, nc-nom, répétition, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tremblement, nc-nom, tremblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(magnitude, nc-nom, magnitude, [n-1]), si('9,3', adj-num, '9,3', [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), si('300.000', adj-num, '300.000', [dr(0,n,n)-1]), si(morts, nc-nom, mort, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1252, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(secousse, nc-nom, secousse, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(frappé, vpp-ver:pper, frapper, [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si(miles, nc-nom, mile, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('sud-ouest', nc-nom, 'sud-ouest', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Padang', npp-nam, 'Padang', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouest, nc-nom, ouest, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Sumatra', npp-nam, 'Sumatra', [np-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(dommage, nc-nom, dommage, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signalé, vpp-ver:pper, signaler, [dl(0,np,s_pass)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(présent, nc-nom, présent, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1253, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vagues, nc-nom, vague, [n-1]), si(créées, vpp-ver:pper, créer, [dl(0,n,n)-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(corps, nc-nom, corps, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eau, nc-nom, eau, [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(déplace, v-ver:pres, déplacer, [dl(0,cl_r,dl(0,np,s))-1]), si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(massive, adj-adj, massif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1254, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(récente, adj-adj, récent, [dr(0,n,n)-1]), si(éruption, nc-nom, éruption, [n-1]), si(volcanique, adj-adj, volcanique, [dl(0,n,n)-1]), si('sous-marine', adj-adj, 'sous-marine', [dl(0,n,n)-1]), si(remonte, v-ver:pres, remonter, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(1986, pro-num, 1986, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(duré, vpp-ver:pper, durer, [dr(0,dl(0,np,s_ppart),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1255, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Agence', nc-nam, 'Agence', [n-1]), si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(danger, nc-nom, danger, [n-1]), si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(',', ponct-pun, ',', [let-1]), si(souvent, adv-adv, souvent, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(causé, vpp-ver:pper, causer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(activité, nc-nom, activité, [n-1]), si(sismique, adj-adj, sismique, [dl(0,n,n)-1]), si('sous-marine', adj-adj, 'sous-marine', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1256, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tremblements, nc-nom, tremblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(potentiel, nc-nom, potentiel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1257, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Simeulue', npp-nam, 'Simeulue', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(proche, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épicentre, nc-nom, épicentre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(séisme, nc-nom, séisme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(26, adj-num, 26, [dr(0,n,n)-1]), si(décembre, nc-nom, décembre, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(massif, adj-adj, massif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1258, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Centre', npp-nam, 'Centre', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(alerte, nc-nom, alerte, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(tsunamis, nc-nom, tsunami, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Pacifique', npp-nam, 'Pacifique', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Hawaï', npp-nam, 'Hawaï', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(menace, nc-nom, menace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(côtes, nc-nom, côte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Pacifique', npp-nam, 'Pacifique', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(séismes, nc-nom, séisme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(taille, nc-nom, taille, [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(tsunamis, nc-nom, tsunami, [n-1]), si(locaux, adj-adj, local, [dl(0,n,n)-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(long, nc-nom, long, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(côtes, nc-nom, côte, [n-1]), si(proches, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épicentre, nc-nom, épicentre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1259, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tremblements, nc-nom, tremblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(potentiel, nc-nom, potentiel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1260, Result) :-
      prob_parse([ si('Tremblement', nc-nom, 'Tremblement', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(magnitude, nc-nom, magnitude, [n-1]), si('6,9', pro-num, '6,9', [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(large, nc-nom, large, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(côtes, nc-nom, côte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Honshu', npp-nam, 'Honshu', [np-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(14, adj-num, 14, [dr(0,dl(0,n,n),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(2005, adj-num, 2005, [dl(0,n,n)-1]), si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(séisme, nc-nom, séisme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('6,9', pro-num, '6,9', [np-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(échelle, nc-nom, échelle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Richter', npp-nam, 'Richter', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signalé, vpp-ver:pper, signaler, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(large, nc-nom, large, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(côtes, nc-nom, côte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(île, nc-nom, île, [n-1]), si(principale, adj-adj, principal, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si('Honshu', npp-nam, 'Honshu', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1261, Result) :-
      prob_parse([ si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(agisse, vs-ver:subp, agir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(séisme, nc-nom, séisme, [n-1]), si(important, adj-adj, important, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épicentre, nc-nom, épicentre, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(éloigné, vpp-ver:pper, éloigner, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(agglomération, nc-nom, agglomération, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(premières, adj-adj, premier, [dr(0,n,n)-1]), si(alertes, nc-nom, alerte, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(prévoyant, vpr-ver:ppre, prévoir, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(déferlantes, nc-nom, déferlante, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('demi-mètre', nc-nom, 'demi-mètre', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retirées, vpp-ver:pper, retirer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1262, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(tremblements, nc-nom, tremblement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(potentiel, nc-nom, potentiel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1263, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(référendum, nc-nom, référendum, [n-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), si(temps, nc-nom, temps, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(élire, vinf-ver:infi, élire, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(35, adj-num, 35, [dr(0,n,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(européen, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(rejoindra, v-ver:impf, rejoindre, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2007, pro-num, 2007, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1264, Result) :-
      prob_parse([ si(12, det-num, 12, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(utilisent, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(euro, nc-nom, euro, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(lieu, nc-nom, lieu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(monnaie, nc-nom, monnaie, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1265, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entretien, nc-nom, entretien, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), si('Luiz', npp-nam, 'Luiz', [dl(0,n,n)-1]), si('Inácio', npp-nam, 'Inácio', [dl(0,n,n)-1]), si('Lula', npp-nam, 'Lula', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('San', npp-nam, 'San', [dr(0,np,np)-1]), si('Salvador', npp-nam, 'Salvador', [np-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Foro', npp-nam, 'Foro', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('São', npp-nam, 'São', [np-1]), si('Paulo', npp-nam, 'Paulo', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1266, Result) :-
      prob_parse([ si('Lula', npp-nam, 'Lula', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Brésil', npp-nam, 'Brésil', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1267, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(2004, pro-num, 2004, [np-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(journalistes, nc-nom, journaliste, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(président, nc-nom, président, [n-1]), si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), si('Lula', npp-nam, 'Lula', [dl(0,n,n)-1]), si(demandant, vpr-ver:ppre, demander, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(organisme, nc-nom, organisme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(inspection, nc-nom, inspection, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conduite, nc-nom, conduite, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(presse, nc-nom, presse, [n-1]), si(brésilienne, adj-adj, brésilien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1268, Result) :-
      prob_parse([ si('Lula', npp-nam, 'Lula', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Brésil', npp-nam, 'Brésil', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1269, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(cas, nc-nom, cas, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(député, nc-nom, député, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(travailleurs, nc-nom, travailleur, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(attaqué, vpp-ver:pper, attaquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(crédibilité, nc-nom, crédibilité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Jefferson', npp-nam, 'Jefferson', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(le, det-det:art, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(traitant, vpr-ver:ppre, traiter, [dr(0,dr(0,dl(0,np,s_ppres),pp_de),np)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(menteur, nc-nom, menteur, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fait, nc-nom, fait, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), si('Fernando', npp-nam, 'Fernando', [dl(0,n,n)-1]), si('Collor', npp-nam, 'Collor', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mello', npp-nam, 'Mello', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(subi, vpp-ver:pper, subir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(accusation, nc-nom, accusation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(corruption, nc-nom, corruption, [n-1]), si(liée, vpp-ver:pper, lier, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(trésorier, nc-nom, trésorier, [n-1]), si('Paulo', npp-nam, 'Paulo', [dl(0,n,n)-1]), si('Cesar', npp-nam, 'Cesar', [dl(0,n,n)-1]), si('Farias', npp-nam, 'Farias', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Collor', npp-nam, 'Collor', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1270, Result) :-
      prob_parse([ si('Lula', npp-nam, 'Lula', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Brésil', npp-nam, 'Brésil', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1271, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Darfour', npp-nam, 'Darfour', [n-1]), si(',', ponct-pun, ',', [let-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('70.000', det-num, '70.000', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tuées, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(déplacées, vpp-ver:pper, déplacer, [dl(0,np,dl(1,s,s))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1272, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('200.000', det-num, '200.000', [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tuées, vpp-ver:pper, tuer, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attaque, nc-nom, attaque, [n-1]), si(aérienne, adj-adj, aérien, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Darfour', npp-nam, 'Darfour', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1273, Result) :-
      prob_parse([ si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouragan, nc-nom, ouragan, [n-1]), si('Katrina', npp-nam, 'Katrina', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(risque, v-ver:pres, risque, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(frapper, vinf-ver:infi, frapper, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Nouvelle-Orléans', npp-nam, 'Nouvelle-Orléans', [n-1]), si(',', ponct-pun, ',', [let-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(maire, nc-nom, maire, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Louisiane', npp-nam, 'Louisiane', [n-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(officiellement, adv-adv, officiellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(imposé, vpp-ver:pper, imposer, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(évacuation, nc-nom, évacuation, [n-1]), si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1274, Result) :-
      prob_parse([ si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(citoyens, nc-nom, citoyen, [n-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exception, nc-nom, exception, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(essentielles, adj-adj, essentiel, [dr(0,dl(0,n,n),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(fonctionnement, nc-nom, fonctionnement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(poignée, nc-nom, poignée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(organisations, nc-nom, organisation, [n-1]), si('(', ponct-pun, '(', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(hôtels, nc-nom, hôtel, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(immédiatement, adv-adv, immédiatement, [dl(1,s,s)-1]), si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(terrains, nc-nom, terrain, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(élevés, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1275, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(maire, nc-nom, maire, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(eaux, nc-nom, eau, [n-1]), si(montantes, adj-adj, montant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tempête, nc-nom, tempête, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(catégorie, nc-nom, catégorie, [n-1]), si(5, adj-num, 5, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(susceptibles, adj-adj, susceptible, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(dépasser, vinf-ver:infi, dépasser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(digues, nc-nom, digue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(conçus, vpp-ver:pper, concevoir, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(inondations, nc-nom, inondation, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1276, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(tempête, nc-nom, tempête, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(catégorie, nc-nom, catégorie, [n-1]), si(5, adj-num, 5, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dépassé, vpp-ver:pper, dépasser, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(digues, nc-nom, digue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Nouvelle-Orléans', npp-nam, 'Nouvelle-Orléans', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1277, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(transmis, vpp-ver:pper, transmettre, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Congrès', npp-nam, 'Congrès', [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intermédiaire, nc-nom, intermédiaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('État', nc-nam, 'État', [n-1]), si('Condoleezza', npp-nam, 'Condoleezza', [dl(0,n,n)-1]), si('Rice', npp-nam, 'Rice', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1278, Result) :-
      prob_parse([ si('Condoleezza', npp-nam, 'Condoleezza', [dr(0,np,np)-1]), si('Rice', npp-nam, 'Rice', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('État', nc-nam, 'État', [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1279, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('État', nc-nam, 'État', [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('Condoleezza', npp-nam, 'Condoleezza', [dl(0,n,n)-1]), si('Rice', npp-nam, 'Rice', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(exprimé, vpp-ver:pper, exprimer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(sentiments, nc-nom, sentiment, [n-1]), si(similaires, adj-adj, similaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(accusant, vpr-ver:ppre, accuser, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Syrie', npp-nam, 'Syrie', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(contribuer, vinf-ver:infi, contribuer, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(instabilité, nc-nom, instabilité, [n-1]), si(au, p+d-prp:det, au, [n-1]), si('Liban', npp-nam, 'Liban', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1280, Result) :-
      prob_parse([ si('Condoleezza', npp-nam, 'Condoleezza', [dr(0,np,np)-1]), si('Rice', npp-nam, 'Rice', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('État', nc-nam, 'État', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('EU', npp-abr, 'EU', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1281, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(contingent, nc-nom, contingent, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(importants, adj-adj, important, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(européens, adj-adj, européen, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(récents, adj-adj, récent, [dr(0,n,n)-1]), si(retraits, nc-nom, retrait, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si(réductions, nc-nom, réduction, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(effectifs, nc-nom, effectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1282, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(présent, nc-nom, présent, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(seuls, adj-adj, seul, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(annoncer, vinf-ver:infi, annoncer, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(retrait, nc-nom, retrait, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1283, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Roumanie', npp-nam, 'Roumanie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(envoyé, vpp-ver:pper, envoyer, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(730, det-num, 730, [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1284, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(échanges, nc-nom, échange, [n-1]), si(houleux, adj-adj, houleux, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(procureur, nc-nom, procureur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(juré, nc-nom, juré, [n-1]), si(potentiel, adj-adj, potentiel, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(procès, nc-nom, procès, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('O.J', npp-nam, 'O.J', [np-1]), si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(1285, Result) :-
      prob_parse([ si('Simpson', npp-nam, 'Simpson', [np-1]), si(jeudi, nc-nom, jeudi, [dr(0,s,s)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(avocats, nc-nom, avocat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Simpson', npp-nam, 'Simpson', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accusé, vpp-ver:pper, accuser, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(avocats, nc-nom, avocat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(traiter, vinf-ver:infi, traiter, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(candidats, nc-nom, candidat, [n-1]), si(noirs, adj-adj, noir, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(jury, nc-nom, jury, [n-1]), si(différemment, adv-adv, différemment, [dr(0,dl(1,s,s),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(autres, adj-adj, autre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1286, Result) :-
      prob_parse([ si('O.J', nc-nom, 'O.J', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1287, Result) :-
      prob_parse([ si('Simpson', npp-nam, 'Simpson', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(accusé, vpp-ver:pper, accuser, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1288, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(',', ponct-pun, ',', [let-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(âgés, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(14, det-num, 14, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(servitude, nc-nom, servitude, [n-1]), si(chronique, adj-adj, chronique, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agriculture, nc-nom, agriculture, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(million, nc-nom, million, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(construction, nc-nom, construction, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fabrication, nc-nom, fabrication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(briques, nc-nom, brique, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(travail, nc-nom, travail, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(carrière, nc-nom, carrière, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(centaines, nc-num, centaine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(milliers, nc-nom, millier, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(industries, nc-nom, industrie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tapis, nc-nom, tapis, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(bijouterie, nc-nom, bijouterie, [n-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si('Kailash', npp-nam, 'Kailash', [dr(0,np,np)-1]), si('Satyarthi', npp-nam, 'Satyarthi', [np-1]), si(président, nc-nom, président, [dl(0,np,np)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Coalition', nc-nam, 'Coalition', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Asie', npp-nam, 'Asie', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [dr(0,dl(0,n,n),np)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(servitude, nc-nom, servitude, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1289, Result) :-
      prob_parse([ si('Satyarthi', npp-nam, 'Satyarthi', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(président, nc-nom, président, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Coalition', nc-nam, 'Coalition', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Asie', npp-nam, 'Asie', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(servitude, nc-nom, servitude, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(enfants, nc-nom, enfant, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1290, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(occupation, nc-nom, occupation, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1939, pro-num, 1939, [np-1]), si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(0,n,n)),np)-1]), si(1945, pro-num, 1945, [np-1]), si(',', ponct-pun, ',', [let-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si(musicale, adj-adj, musical, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(interdite, vpp-ver:pper, interdire, [dl(0,np,s_pass)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), si('-t-il', cls-pro:per, '-t-il', [np-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(1,s,dl(0,np,s_ppart)),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Times', npp-nam, 'Times', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1985, pro-num, 1985, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1291, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(déroulée, vpp-ver:pper, dérouler, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1939, pro-num, 1939, [np-1]), si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(0,n,n)),np)-1]), si(1945, pro-num, 1945, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1292, Result) :-
      prob_parse([ si('Ames', npp-nam, 'Ames', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(rencontré, vpp-ver:pper, rencontrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(épousé, vpp-ver:pper, épouser, [dr(0,dl(0,np,s_ppart),np)-1]), si('Maria', npp-nam, 'Maria', [np-1]), si(del, et-prp, del, [dr(0,dl(0,np,np),np)-1]), si('Rosario', npp-nam, 'Rosario', [dr(0,np,np)-1]), si('Casas', npp-nam, 'Casas', [dr(0,np,np)-1]), si('Ames', npp-nam, 'Ames', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(diplomate, nc-nom, diplomate, [n-1]), si(colombienne, adj-adj, colombien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bas, adj-adj, bas, [dr(0,n,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(recrutée, vpp-ver:pper, recruter, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(agent, nc-nom, agent, [n-1]), si(rémunéré, vpp-ver:pper, rémunérer, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CIA', npp-abr, 'CIA', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(aussi, adv-adv, aussi, [dr(0,np,np)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), si(certains, pro-pro:ind, certain, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(connaissaient, v-ver:impf, connaître, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(couple, nc-nom, couple, [n-1]), si(',', ponct-pun, ',', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(forte, adj-adj, fort, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(esprit, nc-nom, esprit, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(goûts, nc-nom, goût, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(luxe, nc-nom, luxe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1293, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Aldrich', npp-nam, 'Aldrich', [dr(0,np,np)-1]), si('Hazen', npp-nam, 'Hazen', [dr(0,np,np)-1]), si('Ames', npp-nam, 'Ames', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appelait, v-ver:impf, appeler, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si('Maria', npp-nam, 'Maria', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1294, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Pakistan', npp-nam, 'Pakistan', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(trois, adj-num, trois, [dr(0,n,n)-1]), si(guerres, nc-nom, guerre, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Cachemire', npp-nam, 'Cachemire', [n-1]), si(',', ponct-pun, ',', [let-1]), si(dément, v-ver:pres, démentir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(accusations, nc-nom, accusation, [n-1]), si(indiennes, adj-adj, indien, [dl(0,n,n)-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(il, cls-pro:per, il, [np-1]), si(arme, v-ver:pres, arme, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(séparatistes, nc-nom, séparatiste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(vallée, nc-nom, vallée, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1295, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pakistan', npp-nam, 'Pakistan', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dl(0,np,s_ppart),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(guerres, nc-nom, guerre, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(possession, nc-nom, possession, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Cachemire', nc-nam, 'Cachemire', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1296, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), si('Bush', npp-nam, 'Bush', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Laura', npp-nam, 'Laura', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(neveu, nc-nom, neveu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(24, det-num, 24, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('P.', npp-abr, 'P.', [dr(0,np,np)-1]), si('Bush', npp-nam, 'Bush', [np-1]), si(',', ponct-pun, ',', [let-1]), si(auront, v-ver:futu, avoir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(rôles, nc-nom, rôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(premier, det-num, premier, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(convention, nc-nom, convention, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(républicaine, adj-adj, républicain, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tiendra, v-ver:futu, tenir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(la, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(semaine, nc-nom, semaine, [n-1]), si(prochaine, adj-adj, prochain, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Philadelphie', npp-nam, 'Philadelphie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1297, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), si('Bush', npp-nam, 'Bush', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Laura', npp-nam, 'Laura', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1298, Result) :-
      prob_parse([ si('Du', p+d-prp:det, 'Du', [dr(0,dr(0,s,s),n)-1]), si(côté, nc-nom, côté, [n-1]), si(républicain, adj-adj, républicain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouverneur, nc-nom, gouverneur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Texas', npp-nam, 'Texas', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), si('Bush', npp-nam, 'Bush', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Laura', npp-nam, 'Laura', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(enregistrement, nc-nom, enregistrement, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si(cassette, nc-nom, cassette, [n-1]), si(incitant, vpr-ver:ppre, inciter, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gens, nc-nom, gens, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(voter, vinf-ver:infi, voter, [dl(0,np,s_inf)-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(appels, nc-nom, appel, [n-1]), si(automatisés, adj-adj, automatiser, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(laissés, vpp-ver:pper, laisser, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(répondeurs, nc-nom, répondeur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(électeurs, nc-nom, électeur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1299, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('George', npp-nam, 'George', [dr(0,np,np)-1]), si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), si('Bush', npp-nam, 'Bush', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('Laura', npp-nam, 'Laura', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1300, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(laissé, vpp-ver:pper, laisser, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(empreinte, nc-nom, empreinte, [n-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(sommet, nc-nom, sommet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Japonaise', nc-nam, 'Japonaise', [dr(0,n,n)-1]), si('Junko', npp-nam, 'Junko', [dl(0,n,n)-1]), si('Tabei', npp-nam, 'Tabei', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pionnière, nc-nom, pionnier, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réussi, vpp-ver:pper, réussir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ascension, nc-nom, ascension, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(mai, nc-nom, mai, [n-1]), si(1975, adj-num, 1975, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1301, Result) :-
      prob_parse([ si('Alison', npp-nam, 'Alison', [dr(0,np,np)-1]), si('Hargreaves', npp-nam, 'Hargreaves', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ascension, nc-nom, ascension, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Everest', npp-nam, 'Everest', [n-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(oxygène, nc-nom, oxygène, [n-1]), si(artificiel, adj-adj, artificiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1302, Result) :-
      prob_parse([ si('Lute', npp-nam, 'Lute', [dr(0,np,np)-1]), si('Jerstad', npp-nam, 'Jerstad', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(61, det-num, 61, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1963, pro-num, 1963, [np-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(premiers, adj-num, premier, [dr(0,n,n)-1]), si('Américains', nc-nom, 'Américains', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(gravir, vinf-ver:infi, gravir, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Everest', npp-nam, 'Everest', [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mort, vpp-ver:pper, mourir, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(crise, nc-nom, crise, [n-1]), si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Tukla', npp-nam, 'Tukla', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,np,np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si(500, det-num, 500, [dr(0,np,n)-1]), si(pieds, nc-nom, pied, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si(150, det-num, 150, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(')', ponct-pun, ')', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(sommet, nc-nom, sommet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('15.000', det-num, '15.000', [dr(0,np,n)-1]), si(pieds, nc-nom, pied, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('4.545', det-num, '4.545', [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(')', ponct-pun, ')', [let-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(mont, nc-nom, mont, [n-1]), si('Kalapatar', npp-nam, 'Kalapatar', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1303, Result) :-
      prob_parse([ si('Alison', npp-nam, 'Alison', [dr(0,np,np)-1]), si('Hargreaves', npp-nam, 'Hargreaves', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ascension, nc-nom, ascension, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Everest', npp-nam, 'Everest', [n-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(oxygène, nc-nom, oxygène, [n-1]), si(artificiel, adj-adj, artificiel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1304, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Hongrie', npp-nam, 'Hongrie', [n-1]), si(',', ponct-pun, ',', [let-1]), si('Zoltan', npp-nam, 'Zoltan', [dr(0,np,np)-1]), si('Illes', npp-nam, 'Illes', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(président, nc-nom, président, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(commission, nc-nom, commission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(déversement, nc-nom, déversement, [n-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(environnementale, adj-adj, environnemental, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réacteur, nc-nom, réacteur, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1986, pro-num, 1986, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1305, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1986, pro-num, 1986, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1306, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(énergie, nc-nom, énergie, [n-1]), si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), si('Richardson', npp-nam, 'Richardson', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(inquiétait, v-ver:impf, inquiéter, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(performances, nc-nom, performance, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réacteurs, nc-nom, réacteur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(anciens, adj-adj, ancien, [dr(0,n,n)-1]), si('États', nc-nom, 'États', [n-1]), si(soviétiques, adj-adj, soviétique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si('Ukraine', npp-nam, 'Ukraine', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1986, pro-num, 1986, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1307, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(produite, vpp-ver:pper, produire, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1986, pro-num, 1986, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1308, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(réacteur, nc-nom, réacteur, [n-1]), si('n°', nc-abr, 'n°', [dr(0,dl(0,n,n),np)-1]), si(4, adj-num, 4, [np-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(centrale, nc-nom, centrale, [n-1]), si(ukrainienne, adj-adj, ukrainien, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(avril, nc-nom, avril, [n-1]), si(1986, adj-num, 1986, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pire, adj-adj, pire, [dr(0,n,n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(civile, adj-adj, civil, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(jour, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1309, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(produite, vpp-ver:pper, produire, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1986, pro-num, 1986, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1310, Result) :-
      prob_parse([ si('Cartoon', npp-nam, 'Cartoon', [dr(0,np,np)-1]), si('News', npp-nam, 'News', [np-1]), si(réédite, v-ver:pres, rééditer, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(caricatures, nc-nom, caricature, [n-1]), si(politiques, adj-adj, politique, [dl(0,n,n)-1]), si(publiées, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(naufrage, nc-nom, naufrage, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Titanic', npp-nam, 'Titanic', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1912, pro-num, 1912, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1311, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Titanic', npp-nam, 'Titanic', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(coulé, vpp-ver:pper, couler, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1912, pro-num, 1912, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1312, Result) :-
      prob_parse([ si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(certains, pro-pro:ind, certain, [np-1]), si(pensent, v-ver:pres, penser, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), si(catastrophe, nc-nom, catastrophe, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Atlantique', npp-nam, 'Atlantique', [n-1]), si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(froide, adj-adj, froid, [dr(0,n,n)-1]), si(matinée, nc-nom, matinée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(avril, nc-nom, avril, [n-1]), si(1998, adj-num, 1998, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),s_q)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Titanic', npp-nam, 'Titanic', [n-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(coulé, vpp-ver:pper, couler, [dl(0,np,s_ppart)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(perte, nc-nom, perte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('1.500', det-num, '1.500', [dr(0,np,n)-1]), si(vies, nc-nom, vie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1313, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Titanic', npp-nam, 'Titanic', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(coulé, vpp-ver:pper, couler, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1912, pro-num, 1912, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1314, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(naufrage, nc-nom, naufrage, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Titanic', npp-nam, 'Titanic', [n-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(heurté, vpp-ver:pper, heurter, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(iceberg, nc-nom, iceberg, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(avril, nc-nom, avril, [n-1]), si(1912, adj-num, 1912, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('peut-être', adv-adv, 'peut-être', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(victimes, nc-nom, victime, [n-1]), si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(passagers, nc-nom, passager, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(troisième, det-num, troisième, [dr(0,np,n)-1]), si(classe, nc-nom, classe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tragédie, nc-nom, tragédie, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(épargné, vpp-ver:pper, épargner, [dr(0,dl(0,np,s_ppart),np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), si(classes, nc-nom, classe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1315, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Titanic', npp-nam, 'Titanic', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(coulé, vpp-ver:pper, couler, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1912, pro-num, 1912, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1316, Result) :-
      prob_parse([ si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(botte, nc-nom, botte, [n-1]), si(spatiale, adj-adj, spatial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(touché, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(surface, nc-nom, surface, [n-1]), si(chauve, adj-adj, chauve, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Lune', npp-nam, 'Lune', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(1969, adj-num, 1969, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(façon, nc-nom, façon, [n-1]), si(célèbre, adj-adj, célèbre, [dl(0,n,n)-1]), si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('C\'est', v-ver:pres, 'C\'est', [np-1]), si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), si(petit, adj-adj, petit, [dr(0,np,n)-1]), si(pas, nc-nom, pas, [dr(0,n,n)-1]), si(pour, p-prp, pour, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(homme, nc-nom, homme, [dr(0,np,n)-1]), si(',', ponct-pun, ',', [n-1]), si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), si(pas, nc-nom, pas, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(géant, nc-nom, géant, [dr(0,dl(0,n,n),n)-1]), si(pour, p-prp, pour, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(humanité, nc-nom, humanité, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [n-1]), si('.', ponct-pun, '.', [let-1])], Result).
sent(1317, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(touchée, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1969, pro-num, 1969, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1318, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),n)-1]), si(ici, adv-adv, ici, [n-1]), si(2015, adj-num, 2015, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), si('-t-il', cls-pro:per, '-t-il', [np-1]), si(prédit, vpp-ver:pper, prédire, [dl(1,s,dl(0,np,s_ppart))-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(établir, vinf-ver:infi, établir, [dr(0,dl(0,np,s_inf),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(centre, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(servira, v-ver:simp, servir, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(plateforme, nc-nom, plateforme, [n-1]), si(naturelle, adj-adj, naturel, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(observation, nc-nom, observation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(terre, nc-nom, terre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si('avant-poste', nc-nom, 'avant-poste', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sondes, nc-nom, sonde, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(espace, nc-nom, espace, [n-1]), si(lointain, adj-adj, lointain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(poste, nc-nom, poste, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transfert, nc-nom, transfert, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(centre, nc-nom, centre, [n-1]), si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1319, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(touchée, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(humanité, nc-nom, humanité, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1969, pro-num, 1969, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1320, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(célébration, nc-nom, célébration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(anniversaire, nc-nom, anniversaire, [n-1]), si(vendredi, nc-nom, vendredi, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si(16, det-num, 16, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(1999, adj-num, 1999, [dl(0,n,n)-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si('Armstrong', npp-nam, 'Armstrong', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(phrase, nc-nom, phrase, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Buzz', npp-nam, 'Buzz', [dr(0,np,np)-1]), si('Aldrin', npp-nam, 'Aldrin', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(lui, clo-pro:per, luire, [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(posés, vpp-ver:pper, poser, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(20, adj-num, 20, [dr(0,n,n)-1]), si(juillet, nc-nom, juillet, [n-1]), si(1969, adj-num, 1969, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(quatre, det-num, quatre, [dr(0,dl(1,s,s),n)-1]), si(jours, nc-nom, jour, [n-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(décollé, vpp-ver:pper, décoller, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Centre', npp-nam, 'Centre', [n-1]), si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), si('Kennedy', npp-nam, 'Kennedy', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1321, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(touchée, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(fois, nc-nom, fois, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1969, pro-num, 1969, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1322, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(année, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(prisé, vpp-ver:pper, prisé, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(lobby, nc-nom, lobby, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(feu, nc-nom, feu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(décennie, nc-nom, décennie, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(abrogation, nc-nom, abrogation, [n-1]), si(générale, adj-adj, général, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(lois, nc-nom, loi, [n-1]), si(fédérales, adj-adj, fédéral, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(feu, nc-nom, feu, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(adoptées, vpp-ver:pper, adopter, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(meurtres, nc-nom, meurtre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sénateur, nc-nom, sénateur, [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('F.', npp-abr, 'F.', [dl(0,n,n)-1]), si('Kennedy', npp-nam, 'Kennedy', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(révérend, nc-nom, révérend, [n-1]), si('Martin', npp-nam, 'Martin', [dl(0,n,n)-1]), si('Luther', npp-nam, 'Luther', [dl(0,n,n)-1]), si('King', npp-nam, 'King', [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1968, pro-num, 1968, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1323, Result) :-
      prob_parse([ si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), si('King', npp-nam, 'King', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(assassiné, vpp-ver:pper, assassiner, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1968, pro-num, 1968, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1324, Result) :-
      prob_parse([ si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), si(documents, nc-nom, document, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(agent, nc-nom, agent, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('FBI', npp-abr, 'FBI', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(pris, vpp-ver:pper, prendre, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(voiture, nc-nom, voiture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('James', npp-nam, 'James', [dr(0,np,np)-1]), si('Earl', npp-nam, 'Earl', [dr(0,np,np)-1]), si('Ray', npp-nam, 'Ray', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1968, pro-num, 1968, [np-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(assassinat, nc-nom, assassinat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(révérend, nc-nom, révérend, [n-1]), si('Martin', npp-nam, 'Martin', [dl(0,n,n)-1]), si('Luther', npp-nam, 'Luther', [dl(0,n,n)-1]), si('King', npp-nam, 'King', [dl(0,n,n)-1]), si('Jr', npp-nam, 'Jr', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dl(0,np,s_ppart),np)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), si(succès, nc-nom, succès, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(test, nc-nom, test, [n-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(destiné, vpp-ver:pper, destiner, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),s_whq)-1]), si('s\'', cs-kon, 's\'', [dr(0,s_whq,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(faux, adj-adj, faux, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(responsable, nc-nom, responsable, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1325, Result) :-
      prob_parse([ si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), si('King', npp-nam, 'King', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(assassiné, vpp-ver:pper, assassiner, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1968, pro-num, 1968, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1326, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(mars, nc-nom, mars, [n-1]), si(1969, adj-num, 1969, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('James', npp-nam, 'James', [dr(0,np,np)-1]), si('Earl', npp-nam, 'Earl', [dr(0,np,np)-1]), si('Ray', npp-nam, 'Ray', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(99, det-num, 99, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(prison, nc-nom, prison, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Tennessee', npp-nam, 'Tennessee', [n-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(plaidé, vpp-ver:pper, plaider, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), si('King', npp-nam, 'King', [np-1]), si('Jr', npp-abr, 'Jr', [dl(0,np,np)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(pour, p-prp, pour, [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Noirs', nc-nam, 'Noirs', [n-1]), si(',', ponct-pun, ',', [let-1]), si(cela, pro-pro:dem, celer, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(semblait, v-ver:impf, sembler, [dr(0,dl(0,np,s),np)-1]), si(guère, adv-adv, guère, [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(récompense, nc-nom, récompense, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1327, Result) :-
      prob_parse([ si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), si('King', npp-nam, 'King', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(assassiné, vpp-ver:pper, assassiner, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1968, pro-num, 1968, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1328, Result) :-
      prob_parse([ si('Ce', det-pro:dem, 'Ce', [dr(0,dr(0,s,s),n)-1]), si(mardi, nc-nom, mardi, [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(rabbin, nc-nom, rabbin, [n-1]), si(ashkénaze, adj-adj, ashkénaze, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Meir', npp-nam, 'Meir', [dr(0,np,np)-1]), si('Israel', npp-nam, 'Israel', [dr(0,np,np)-1]), si('Lau', npp-nam, 'Lau', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rencontré, vpp-ver:pper, rencontrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(bureau, nc-nom, bureau, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prêtres, nc-nom, prêtre, [n-1]), si(catholiques, adj-adj, catholique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Rome', npp-nam, 'Rome', [np-1]), si('-membres', nc-nom, '-membres', [dl(0,np,np)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(paix, nc-nom, paix, [n-1]), si('St', npp-nam, 'St', [dl(0,n,n)-1]), si('Egidio', npp-nam, 'Egidio', [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(leur, clo-pro:per, son, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(remis, vpp-ver:pper, remettre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(lettre, nc-nom, lettre, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pape, nc-nom, pape, [n-1]), si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1329, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pape, nc-nom, pape, [n-1]), si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1330, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pape, nc-nom, pape, [n-1]), si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entamé, vpp-ver:pper, entamer, [dr(0,dl(0,np,s_ppart),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(pèlerinage, nc-nom, pèlerinage, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(natal, adj-adj, natal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(site, nc-nom, site, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(triomphes, nc-nom, triomphe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(papauté, nc-nom, papauté, [n-1]), si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(côte, nc-nom, côte, [n-1]), si(baltique, adj-adj, baltique, [dl(0,n,n)-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(est, v-ver:pres, être, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si('Solidarité', npp-nam, 'Solidarité', [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(renversé, vpp-ver:pper, renverser, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(communisme, nc-nom, communisme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1331, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pape, nc-nom, pape, [n-1]), si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1332, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pape, nc-nom, pape, [n-1]), si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(arrivé, vpp-ver:pper, arriver, [dr(0,dl(0,np,s_ppart),pp)-1]), si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(berceau, nc-nom, berceau, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si('Solidarité', npp-nam, 'Solidarité', [dl(0,n,n)-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suscité, vpp-ver:pper, susciter, [dr(0,dl(0,np,s_ppart),np)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(visite, nc-nom, visite, [n-1]), si(papale, adj-adj, papal, [dl(0,n,n)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,dl(0,n,n),dl(0,n,n)))),np)-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(offrant, vpr-ver:ppre, offrir, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Polonais', nc-nam, 'Polonais', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(salut, nc-nom, salut, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(compatriote, nc-nom, compatriote, [n-1]), si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(vient, v-ver:pres, venir, [dr(0,dl(0,np,s),pp)-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(vous, pro-pro:per, vous, [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(besoins, nc-nom, besoin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(coeur, nc-nom, coeur, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1333, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pape, nc-nom, pape, [n-1]), si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), si('II', adj-num, 'II', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Pologne', npp-nam, 'Pologne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1334, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(segment, nc-nom, segment, [n-1]), si(consacré, vpp-ver:pper, consacrer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Mozart', npp-nam, 'Mozart', [np-1]), si(',', ponct-pun, ',', [let-1]), si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), si(exemple, nc-nom, exemple, [n-1]), si(',', ponct-pun, ',', [let-1]), si(adopte, v-ver:pres, adopter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vision, nc-nom, vision, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(sentimentale, adj-adj, sentimental, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(succès, nc-nom, succès, [n-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(compositeur, nc-nom, compositeur, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(déclin, nc-nom, déclin, [n-1]), si(ultérieur, adj-adj, ultérieur, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(relie, v-ver:pres, relier, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(quelques, det-pro:ind, quelque, [dr(0,np,n)-1]), si(traits, nc-nom, trait, [n-1]), si(rapides, adj-adj, rapide, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(culturelle, adj-adj, culturel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Vienne', npp-nam, 'Vienne', [n-1]), si(impériale, adj-adj, impérial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1335, Result) :-
      prob_parse([ si('Wolfgang', npp-nam, 'Wolfgang', [dr(0,np,np)-1]), si('Amadeus', npp-nam, 'Amadeus', [dr(0,np,np)-1]), si('Mozart', npp-nam, 'Mozart', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Salzbourg', npp-nam, 'Salzbourg', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1336, Result) :-
      prob_parse([ si('"', ponct-pun:cit, '"', [let-1]), si('Rosetta', npp-nam, 'Rosetta', [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si(belge, adj-adj, belge, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), si(femme, nc-nom, femme, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(chômage, nc-nom, chômage, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(tente, v-ver:pres, tente, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(désespérément, adv-adv, désespérément, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(tailler, vinf-ver:infi, tailler, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vie, nc-nom, vie, [n-1]), si(normale, adj-adj, normal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(remporté, vpp-ver:pper, remporter, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(honneurs, nc-nom, honneur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('52e', adj-num, '52e', [dr(0,n,n)-1]), si('Festival', nc-nam, 'Festival', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Cannes', npp-nam, 'Cannes', [np-1]), si(dimanche, nc-nom, dimanche, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1337, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Palme', nc-nom, 'Palme', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(or, nc-nom, or, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(décernée, vpp-ver:pper, décerner, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Festival', nc-nam, 'Festival', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(film, nc-nom, film, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Cannes', npp-nam, 'Cannes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1338, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(effondré, vpp-ver:pper, effondrer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(actrice, nc-nom, acteur, [n-1]), si(française, adj-adj, français, [dl(0,n,n)-1]), si(torride, adj-adj, torride, [dl(0,n,n)-1]), si('Sophie', npp-nam, 'Sophie', [dl(0,n,n)-1]), si('Marceau', npp-nam, 'Marceau', [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(apparue, vpp-ver:pper, apparaître, [dl(0,np,s_ppart)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(remettre, vinf-ver:infi, remettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Palme', nc-nom, 'Palme', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(or, nc-nom, or, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),n)-1]), si('Palme', nc-nam, 'Palme', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(or, nc-nom, or, [n-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(film, nc-nom, film, [n-1]), si(belge, adj-adj, belge, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('Rosetta', npp-nam, 'Rosetta', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1339, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Palme', nc-nom, 'Palme', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(or, nc-nom, or, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(décernée, vpp-ver:pper, décerner, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Festival', nc-nam, 'Festival', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(film, nc-nom, film, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Cannes', npp-nam, 'Cannes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1340, Result) :-
      prob_parse([ si('Lewis', npp-nam, 'Lewis', [np-1]), si(recevra, v-ver:futu, recevoir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Lion', npp-nam, 'Lion', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(or, nc-nom, or, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(carrière, nc-nom, carrière, [n-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(11, adj-num, 11, [dr(0,n,n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(jour, nc-nom, jour, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(festival, nc-nom, festival, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Venise', npp-nam, 'Venise', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(sera, v-ver:futu, être, [dr(0,dr(0,s,np),dl(0,np,s_pass))-1]), si(projeté, vpp-ver:pper, projeter, [dr(0,dl(0,np,s_pass),pp)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(film, nc-nom, film, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ouvrier, nc-nom, ouvrier, [n-1]), si(malchanceux, adj-adj, malchanceux, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(hôtel, nc-nom, hôtel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Miami', npp-nam, 'Miami', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(organisateurs, nc-nom, organisateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1341, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Palme', nc-nom, 'Palme', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(or, nc-nom, or, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(décernée, vpp-ver:pper, décerner, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Festival', nc-nam, 'Festival', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Cannes', npp-nam, 'Cannes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1342, Result) :-
      prob_parse([ si('Weimar', npp-nam, 'Weimar', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ville, nc-nom, ville, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(culture, nc-nom, culture, [n-1]), si(1999, adj-num, 1999, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(honneur, nc-nom, honneur, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(coïncide, v-ver:pres, coïncider, [dr(0,dl(0,np,s),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('250e', adj-num, '250e', [dr(0,n,n)-1]), si(anniversaire, nc-nom, anniversaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(naissance, nc-nom, naissance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(fils, nc-nom, fils, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(célèbres, adj-adj, célèbre, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(poète, nc-nom, poète, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(intellectuel, adj-adj, intellectuel, [dr(0,n,n)-1]), si('Johann', npp-nam, 'Johann', [dl(0,n,n)-1]), si('Wolfgang', npp-nam, 'Wolfgang', [dl(0,n,n)-1]), si(von, npp-nam, von, [dl(0,n,n)-1]), si('Goethe', npp-nam, 'Goethe', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1343, Result) :-
      prob_parse([ si('Johann', nc-nam, 'Johann', [dr(0,np,np)-1]), si('Wolfgang', npp-nam, 'Wolfgang', [dr(0,np,np)-1]), si(von, et-prp, von, [dr(0,np,np)-1]), si('Goethe', npp-nam, 'Goethe', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(né, vpp-ver:pper, naître, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1344, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(sondage, nc-nom, sondage, [n-1]), si(réalisé, vpp-ver:pper, réaliser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Newsweek', npp-nam, 'Newsweek', [np-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(convention, nc-nom, convention, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(républicaine, adj-adj, républicain, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(montré, vpp-ver:pper, montrer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(44, det-num, 44, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(que, cs-pro:rel, que, [dr(0,s_q,s)-1]), si('Dole', npp-nam, 'Dole', [np-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(42, det-num, 42, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(candidat, nc-nom, candidat, [n-1]), si(désigné, vpp-ver:pper, désigner, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Reform', npp-nam, 'Reform', [dr(0,n,n)-1]), si('Party', npp-nam, 'Party', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Perot', npp-nam, 'Perot', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(que, adv-adv, que, [dr(0,np,np)-1]), si(3, det-num, 3, [dr(0,np,n)-1]), si('%.', nc-abr, '%.', [n-1])], Result).
sent(1345, Result) :-
      prob_parse([ si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parti, nc-nom, parti, [n-1]), si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1346, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parlé, vpp-ver:pper, parler, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(téléphone, nc-nom, téléphone, [n-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(protestants, adj-adj, protestant, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(catholiques, adj-adj, catholique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Irlande', npp-nam, 'Irlande', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(féliciter, vinf-ver:infi, féliciter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si(électorale, adj-adj, électoral, [dl(0,n,n)-1]), si(commune, adj-adj, commun, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1347, Result) :-
      prob_parse([ si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parti, nc-nom, parti, [n-1]), si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1348, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(revue, nc-nom, revue, [n-1]), si(médicale, adj-adj, médical, [dl(0,n,n)-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), si('Lancet', npp-nam, 'Lancet', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rapporté, vpp-ver:pper, rapporter, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(mars, nc-nom, mars, [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(hospitalisé, vpp-ver:pper, hospitaliser, [dl(0,np,s_pass)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(mois, nc-nom, mois, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Éthiopie', npp-nam, 'Éthiopie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(neuf, det-num, neuf, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(unité, nc-nom, unité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(soins, nc-nom, soin, [n-1]), si(intensifs, adj-adj, intensif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(hôpital, nc-nom, hôpital, [n-1]), si('Black', npp-nam, 'Black', [dl(0,n,n)-1]), si('Lion', npp-nam, 'Lion', [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Addis-Abeba', npp-nam, 'Addis-Abeba', [np-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(souffert, vpp-ver:pper, souffrir, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(défaillance, nc-nom, défaillance, [n-1]), si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(objet, nc-nom, objet, [dr(0,pp_de,n)-1]), si('d\'', p-prp, 'd\'', [n-1]), si(appels, nc-nom, appel, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Amnesty', npp-nam, 'Amnesty', [dr(0,np,np)-1]), si('International', npp-nam, 'International', [np-1]), si(et, cc-kon, et, [dl(0,np,np)-1]), si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,np,n)-1]), si(organisations, nc-nom, organisation, [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si(défense, nc-nom, défense, [dr(0,dl(0,n,n),n)-1]), si(des, p+d-prp:det, de, [n-1]), si(droits, nc-nom, droit, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(homme, nc-nom, homme, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1349, Result) :-
      prob_parse([ si('Amnesty', npp-nam, 'Amnesty', [dr(0,np,np)-1]), si('International', npp-nam, 'International', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(occupe, v-ver:pres, occuper, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(droits, nc-nom, droit, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1350, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(détenues, vpp-ver:pper, détenir, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(prisons, nc-nom, prison, [n-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si(subissent, v-ver:pres, subir, [dr(0,dl(0,np,s),np)-1]), si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(viols, nc-nom, viol, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(abus, nc-nom, abus, [n-1]), si(sexuels, adj-adj, sexuel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gardiens, nc-nom, gardien, [n-1]), si(masculins, adj-adj, masculin, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(voient, v-ver:pres, voir, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(refuser, vinf-ver:infi, refuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(soins, nc-nom, soin, [n-1]), si(médicaux, adj-adj, médical, [dl(0,n,n)-1]), si(appropriés, adj-adj, approprié, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Amnesty', npp-nam, 'Amnesty', [dr(0,np,np)-1]), si('International', npp-nam, 'International', [dr(0,np,np)-1]), si('USA', npp-nam, 'USA', [dl(0,n,n)-1]), si(publié, vpp-ver:pper, publier, [dl(0,n,n)-1]), si(jeudi, nc-nom, jeudi, [dl(1,dl(0,n,n),dl(0,n,n))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1351, Result) :-
      prob_parse([ si('Amnesty', npp-nam, 'Amnesty', [dr(0,np,np)-1]), si('International', npp-nam, 'International', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(occupe, v-ver:pres, occuper, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(droits, nc-nom, droit, [n-1]), si(humains, adj-adj, humain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1352, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(critiqué, vpp-ver:pper, critiquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(opposants, nc-nom, opposant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), si('Blair', npp-nam, 'Blair', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(promis, vpp-ver:pper, promettre, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(expulser, vinf-ver:infi, expulser, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(demandeurs, nc-nom, demandeur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(asile, nc-nom, asile, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(emprisonner, vinf-ver:infi, emprisonner, [dr(0,dl(0,np,s_inf),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(traitement, nc-nom, traitement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(demandes, nc-nom, demande, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1353, Result) :-
      prob_parse([ si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), si('Blair', npp-nam, 'Blair', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parti, nc-nom, parti, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1354, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), si('William', npp-nam, 'William', [dl(0,n,n)-1]), si('Hague', npp-nam, 'Hague', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(attaqué, vpp-ver:pper, attaquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(position, nc-nom, position, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), si('Blair', npp-nam, 'Blair', [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(poursuite, nc-nom, poursuite, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intégration, nc-nom, intégration, [n-1]), si(européenne, adj-adj, européen, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(accusant, vpr-ver:ppre, accuser, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(céder, vinf-ver:infi, céder, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(droits, nc-nom, droit, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pouvoirs, nc-nom, pouvoir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(tranche, v-ver:pres, tranche, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,dl(1,s,s)),n)-1]), si(tranche, nc-nom, tranche, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1355, Result) :-
      prob_parse([ si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), si('Blair', npp-nam, 'Blair', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parti, nc-nom, parti, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1356, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), si('Blair', npp-nam, 'Blair', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(averti, vpp-ver:pper, avertir, [dr(0,dl(0,np,s_pass),s_q)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(perçu, vpp-ver:pper, percevoir, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(arrogant, adj-adj, arrogant, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(électeurs, nc-nom, électeur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [np-1]), si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(0,n,n)),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(préoccupés, vpp-ver:pper, préoccuper, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(santé, nc-nom, santé, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éducation, nc-nom, éducation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(transports, nc-nom, transport, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1357, Result) :-
      prob_parse([ si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), si('Blair', npp-nam, 'Blair', [np-1]), si(appartient, v-ver:pres, appartenir, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parti, nc-nom, parti, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1358, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(modification, nc-nom, modification, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(citoyenneté, nc-nom, citoyenneté, [n-1]), si(nécessite, v-ver:pres, nécessiter, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approbation, nc-nom, approbation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chambre, nc-nom, chambre, [n-1]), si(haute, adj-adj, haut, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Parlement', npp-nam, 'Parlement', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Bundesrat', npp-nam, 'Bundesrat', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si('États', nc-nom, 'États', [n-1]), si(fédéraux, adj-adj, fédéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1359, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si('États', nc-nom, 'États', [n-1]), si(fédéraux, adj-adj, fédéral, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1360, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(mont, nc-nom, mont, [n-1]), si('Kanchenjunga', npp-nam, 'Kanchenjunga', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(troisième, adj-num, troisième, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(sommet, nc-nom, sommet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(hauteur, nc-nom, hauteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(8568, det-num, 8568, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si(frontalière, adj-adj, frontalier, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Népal', npp-nam, 'Népal', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Inde', npp-nam, 'Inde', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1361, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Kanchenjunga', npp-nam, 'Kanchenjunga', [n-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si(8586, det-num, 8586, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(haut, nc-nom, haut, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1362, Result) :-
      prob_parse([ si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Expédition', nc-nam, 'Expédition', [n-1]), si(2000, adj-num, 2000, [dl(0,n,n)-1]), si('Kanchenjunga', npp-nam, 'Kanchenjunga', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Corée', npp-nam, 'Corée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réussi, vpp-ver:pper, réussir, [dr(0,dl(0,np,s_ppart),np)-1]), si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ascension, nc-nom, ascension, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mont, nc-nom, mont, [n-1]), si('Kanchenjunga', npp-nam, 'Kanchenjunga', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(haut, nc-nom, haut, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(8586, det-num, 8586, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(face, nc-nom, face, [n-1]), si('sud-ouest', adj-adj, 'sud-ouest', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(népalais, adj-adj, népalais, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Tourisme', npp-nam, 'Tourisme', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1363, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Kanchenjunga', npp-nam, 'Kanchenjunga', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(haut, adj-adj, haut, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(8586, det-num, 8586, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1364, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(pic, nc-nom, pic, [n-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,np,s),np)-1]), si('8.586', det-num, '8.586', [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(haut, nc-nom, haut, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1365, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Kanchenjunga', npp-nam, 'Kanchenjunga', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(haut, adj-adj, haut, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(8586, det-num, 8586, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1366, Result) :-
      prob_parse([ si('Près', adv-adv, 'Près', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(sept, det-num, sept, [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(hauteur, nc-nom, hauteur, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si('Cassini', npp-nam, 'Cassini', [np-1]), si(transportera, v-ver:futu, transporter, [dr(0,dl(0,np,s),np)-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si(paquets, nc-nom, paquet, [n-1]), si(distincts, adj-adj, distinct, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(instruments, nc-nom, instrument, [n-1]), si(scientifiques, adj-adj, scientifique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(sonde, nc-nom, sonde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(portant, vpr-ver:ppre, porter, [dr(0,dl(0,n,n),np)-1]), si(six, det-num, six, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(paquets, nc-nom, paquet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(capteurs, nc-nom, capteur, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(larguée, vpp-ver:pper, larguer, [dl(0,np,s_pass)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si('Titan', npp-nam, 'Titan', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(lune, nc-nom, lune, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Saturne', npp-nam, 'Saturne', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1367, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si('Titan', npp-nam, 'Titan', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diamètre, nc-nom, diamètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(5100, det-num, 5100, [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1368, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(diamètre, nc-nom, diamètre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(disque, nc-nom, disque, [n-1]), si(lunaire, adj-adj, lunaire, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('2,1', det-num, '2,1', [dr(0,np,n)-1]), si(mètres, nc-nom, mètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1369, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diamètre, nc-nom, diamètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('3.746', det-num, '3.746', [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1370, Result) :-
      prob_parse([ si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diamètre, nc-nom, diamètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('1.430', det-num, '1.430', [dr(0,np,n)-1]), si(miles, nc-nom, mile, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Pluton', npp-nam, 'Pluton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moitié, nc-nom, moitié, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(taille, nc-nom, taille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(planète, nc-nom, planète, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(tiers, nc-nom, tiers, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(taille, nc-nom, taille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1371, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diamètre, nc-nom, diamètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('3.746', det-num, '3.746', [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1372, Result) :-
      prob_parse([ si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diamètre, nc-nom, diamètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('5.230', det-num, '5.230', [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Ganymède', npp-nam, 'Ganymède', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(satellite, nc-nom, satellite, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(grand, adj-adj, grand, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si('Mercure', npp-nam, 'Mercure', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(quarts, nc-nom, quart, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(taille, nc-nom, taille, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Mars', npp-nam, 'Mars', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1373, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lune, nc-nom, lune, [n-1]), si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(diamètre, nc-nom, diamètre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('3.746', det-num, '3.746', [dr(0,np,n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1374, Result) :-
      prob_parse([ si('Jeudi', nc-nom, 'Jeudi', [dr(0,dr(0,s,s),n)-1]), si(soir, nc-nom, soir, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dîné, vpp-ver:pper, dîner, [dl(0,np,s_ppart)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(écrivain, nc-nom, écrivain, [n-1]), si(colombien, adj-adj, colombien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(lauréat, nc-nom, lauréat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), si('Gabriel', npp-nam, 'Gabriel', [dl(0,n,n)-1]), si('Garcia', npp-nam, 'Garcia', [dl(0,n,n)-1]), si('Marquez', npp-nam, 'Marquez', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1375, Result) :-
      prob_parse([ si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), si('Marquez', npp-nam, 'Marquez', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(lauréat, nc-nom, lauréat, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1376, Result) :-
      prob_parse([ si('Gore', npp-nam, 'Gore', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(fait, v-ver:pres, faire, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(assiter, vinf-ver:infi, assiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(physicien, nc-nom, physicien, [n-1]), si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), si('Hawking', npp-nam, 'Hawking', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(actrice, nc-nom, acteur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Star', npp-nam, 'Star', [dr(0,np,np)-1]), si('Trek', npp-nam, 'Trek', [dr(0,np,np)-1]), si('Nichelle', npp-nam, 'Nichelle', [dl(0,n,n)-1]), si('Nichols', npp-nam, 'Nichols', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Gary', npp-nam, 'Gary', [dr(0,np,np)-1]), si('Gygax', npp-nam, 'Gygax', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(créateur, nc-nom, créateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Donjons', npp-nam, 'Donjons', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Dragons', npp-nam, 'Dragons', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1377, Result) :-
      prob_parse([ si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), si('Hawking', npp-nam, 'Hawking', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(physicien, nc-nom, physicien, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1378, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Yamaguchi-gumi', npp-nam, 'Yamaguchi-gumi', [n-1]), si(revendique, v-ver:pres, revendiquer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(effectif, nc-nom, effectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('23.000', det-num, '23.000', [dr(0,np,n)-1]), si(gangsters, nc-nom, gangster, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(yakuza, nc-nom, yakuza, [np-1]), si('"', ponct-pun:cit, '"', [let-1]), si(comme, cs-kon, comme, [dr(0,dl(0,np,np),np)-1]), si(on, cls-pro:per, on, [np-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),np)-1]), si(appelle, v-ver:pres, appeler, [let-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(livrent, v-ver:pres, livrer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(affaires, nc-nom, affaire, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(légales, adj-adj, légal, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(illégales, adj-adj, illégal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(trafic, nc-nom, trafic, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(drogue, nc-nom, drogue, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(contrebande, nc-nom, contrebande, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(armes, nc-nom, arme, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prostitution, nc-nom, prostitution, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(extorsion, nc-nom, extorsion, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(escroqueries, nc-nom, escroquerie, [n-1]), si(immobilières, adj-adj, immobilier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1379, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(yakuza, nc-nom, yakuza, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mafia, nc-nom, mafia, [n-1]), si(japonaise, adj-adj, japonais, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1380, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,dr(0,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('Jandl', npp-nam, 'Jandl', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(désigné, vpp-ver:pper, désigner, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(10, adj-num, 10, [dr(0,n,n)-1]), si(poètes, nc-nom, poète, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(langue, nc-nom, langue, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(importants, adj-adj, important, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('20e', adj-num, '20e', [dr(0,n,n)-1]), si(siècle, nc-nom, siècle, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(jury, nc-nom, jury, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(écrivains, nc-nom, écrivain, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si(universitaires, nc-nom, universitaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(critiques, nc-nom, critique, [n-1]), si(établi, vpp-ver:pper, établir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(revue, nc-nom, revue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(langue, nc-nom, langue, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si('Das', npp-nam, 'Das', [dl(0,n,n)-1]), si('Gedicht', npp-nam, 'Gedicht', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Poème', npp-nam, 'Poème', [n-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1381, Result) :-
      prob_parse([ si('Gotthold', npp-nam, 'Gotthold', [dr(0,np,np)-1]), si('Ephraim', npp-nam, 'Ephraim', [dr(0,np,np)-1]), si('Lessing', npp-nam, 'Lessing', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vécu, vpp-ver:pper, vivre, [dl(0,np,s_ppart)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(1729, pro-num, 1729, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(1781, pro-num, 1781, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1382, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('USOC', npp-abr, 'USOC', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), si(an, nc-nom, an, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(candidature, nc-nom, candidature, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(2008, pro-num, 2008, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(estimant, vpr-ver:ppre, estimer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),np)-1]), si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(chances, nc-nom, chance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(emporter, vinf-ver:infi, emporter, [dr(0,dl(0,np,s_inf),np)-1]), si(si, adv-kon, si, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(peu, adv-adv, peu, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jeux, nc-nom, jeu, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(été, nc-nom, été, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Atlanta', npp-nam, 'Atlanta', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1996, pro-num, 1996, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jeux, nc-nom, jeu, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), si('City', npp-nam, 'City', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2002, pro-num, 2002, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1383, Result) :-
      prob_parse([ si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),np)-1]), si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), si('City', npp-nam, 'City', [np-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Jeux', nc-nam, 'Jeux', [n-1]), si(olympiques, adj-adj, olympique, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hiver, nc-nom, hiver, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Nagano', npp-nam, 'Nagano', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1384, Result) :-
      prob_parse([ si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(réalisations, nc-nom, réalisation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(physique, nc-nom, physique, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('j\'', cls-pro:per, 'j\'', [np-1]), si(ai, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(privilège, nc-nom, privilège, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rapporter, vinf-ver:infi, rapporter, [dr(0,dl(0,np,s_inf),np)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(quark, et-nom, quark, [n-1]), si(top, adj-adj, top, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Fermilab', npp-nam, 'Fermilab', [n-1]), si('-le', cls-pro:per, '-le', [dr(0,dl(0,n,n),n)-1]), si(dernier, adj-adj, dernier, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(six, adj-num, six, [dr(0,n,n)-1]), si(quarks, nc-nom, quark, [n-1]), si(prédits, vpp-ver:pper, prédire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Modèle', nc-nam, 'Modèle', [n-1]), si(standard, adj-adj, standard, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(insaisissable, adj-adj, insaisissable, [dr(0,n,n)-1]), si(particule, nc-nom, particule, [n-1]), si(neutrino, nc-nom, neutrino, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(probablement, adv-adv, probablement, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(certaine, adj-adj, certain, [dr(0,n,n)-1]), si(masse, nc-nom, masse, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(profondes, adj-adj, profond, [dr(0,n,n)-1]), si(implications, nc-nom, implication, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(destin, nc-nom, destin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(univers, nc-nom, univers, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1385, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(quark, et-nom, quark, [n-1]), si(top, adj-adj, top, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(quark, nc-nom, quark, [n-1]), si(prédit, vpp-ver:pper, prédire, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(standard, adj-adj, standard, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1386, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(réalisation, nc-nom, réalisation, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(voyante, adj-adj, voyant, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Tevatron', nc-nam, 'Tevatron', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(découverte, nc-nom, découverte, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1995, pro-num, 1995, [np-1]), si(du, p+d-prp:det, de, [let-1]), si('"', ponct-pun:cit, '"', [dr(0,n,n)-1]), si(quark, et-nom, quark, [n-1]), si(top, nc-nom, top, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rempli, vpp-ver:pper, remplir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(espace, nc-nom, espace, [n-1]), si(vide, adj-adj, vide, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(six, det-num, six, [dr(0,np,n)-1]), si(quarks, nc-nom, quark, [n-1]), si(alloué, vpp-ver:pper, allouer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tableau, nc-nom, tableau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(particules, nc-nom, particule, [n-1]), si(fondamentales, adj-adj, fondamental, [dl(0,n,n)-1]), si(connu, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(standard, adj-adj, standard, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1387, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(quark, et-nom, quark, [n-1]), si(top, adj-adj, top, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), si(quark, nc-nom, quark, [n-1]), si(prévu, vpp-ver:pper, prévoir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(théorie, nc-nom, théorie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(modèle, nc-nom, modèle, [n-1]), si(standard, adj-adj, standard, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1388, Result) :-
      prob_parse([ si('Nous', cls-pro:per, 'Nous', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avons, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(aucune, det-pro:ind, aucun, [dr(0,np,n)-1]), si(idée, nc-nom, idée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si(comprise, vpp-ver:pper, comprendre, [dr(0,dl(0,n,n),pp)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si('300.000', det-num, '300.000', [dr(0,np,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(1, det-num, 1, [dr(0,np,n)-1]), si(milliard, nc-nom, milliard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(années, nc-nom, année, [n-1]), si(après, p-prp, après, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Big', npp-nam, 'Big', [dr(0,n,n)-1]), si('Bang', npp-nam, 'Bang', [n-1]), si(',', ponct-pun, ',', [let-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(univers, nc-nom, univers, [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(flou, adj-adj, flou, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1389, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Big', npp-nam, 'Big', [dr(0,n,n)-1]), si('Bang', npp-nam, 'Bang', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(explosion, nc-nom, explosion, [n-1]), si(primordiale, adj-adj, primordial, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,dia(0,box(0,n))),dl(0,n,n)),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(univers, nc-nom, univers, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1390, Result) :-
      prob_parse([ si('Garry', npp-nam, 'Garry', [dr(0,np,np)-1]), si('Norris', npp-nam, 'Norris', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(directeur, nc-nom, directeur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(logiciels, nc-nom, logiciel, [n-1]), si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), si('IBM', npp-abr, 'IBM', [dr(0,np,np)-1]), si('Corp', npp-nam, 'Corp', [np-1]), si(',', ponct-pun, ',', [let-1]), si(devait, v-ver:impf, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(interrogé, vpp-ver:pper, interroger, [dl(0,np,s_pass)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Raleigh', npp-nam, 'Raleigh', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Caroline', npp-nam, 'Caroline', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Nord', npp-nam, 'Nord', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1391, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(négocié, vpp-ver:pper, négocier, [dr(0,dl(0,np,s_ppart),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(importants, adj-adj, important, [dr(0,n,n)-1]), si(contrats, nc-nom, contrat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vente, nc-nom, vente, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('Windows', npp-nam, 'Windows', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1995, pro-num, 1995, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(1996, pro-num, 1996, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1392, Result) :-
      prob_parse([ si('Windows', npp-nam, 'Windows', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Microsoft', npp-nam, 'Microsoft', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1393, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Bahreïn', npp-nam, 'Bahreïn', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Koweït', npp-nam, 'Koweït', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(membres, nc-nom, membre, [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coopération, nc-nom, coopération, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('CCG', npp-abr, 'CCG', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(organisation, nc-nom, organisation, [n-1]), si(régionale, adj-adj, régional, [dl(0,n,n)-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(regroupe, v-ver:pres, regrouper, [dr(0,dl(0,np,s),np)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Arabie', npp-nam, 'Arabie', [n-1]), si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Émirats', nc-nam, 'Émirats', [n-1]), si(arabes, adj-adj, arabe, [dl(0,n,n)-1]), si(unis, adj-adj, uni, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Qatar', npp-nam, 'Qatar', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Oman', npp-nam, 'Oman', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1394, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coopération, nc-nom, coopération, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),n)-1]), si('Arabie', npp-nam, 'Arabie', [np-1]), si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('Koweït', npp-nam, 'Koweït', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Émirats', nc-nam, 'Émirats', [n-1]), si(arabes, adj-adj, arabe, [dl(0,n,n)-1]), si(unis, adj-adj, uni, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Qatar', npp-nam, 'Qatar', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Oman', npp-nam, 'Oman', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), si('Bahreïn', npp-nam, 'Bahreïn', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1395, Result) :-
      prob_parse([ si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cinéastes, nc-nom, cinéaste, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(tenu, vpp-ver:pper, tenir, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(compte, nc-nom, compte, [np-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(certains, pro-pro:ind, certain, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(consultants, nc-nom, consultant, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(payés, vpp-ver:pper, payer, [dr(0,dl(0,np,s_ppart),np)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conseiller, nc-nom, conseiller, [dr(0,dl(0,np,s_inf),np)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), si(le, det-det:art, le, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(respecté, vpp-ver:pper, respecter, [dr(0,n,n)-1]), si(couple, nc-nom, couple, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(spécialistes, nc-nom, spécialiste, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comètes, nc-nom, comète, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(astéroïdes, nc-nom, astéroïde, [n-1]), si('Carolyn', npp-nam, 'Carolyn', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), si(feu, nc-nom, feu, [dr(0,np,np)-1]), si('Eugene', npp-nam, 'Eugene', [dr(0,np,np)-1]), si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1396, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(comète, nc-nom, comète, [n-1]), si('Shoemaker-Levy', npp-nam, 'Shoemaker-Levy', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(découverte, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Carolyn', npp-nam, 'Carolyn', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(astronome, nc-nom, astronome, [n-1]), si('David', npp-nam, 'David', [dl(0,n,n)-1]), si('H.', npp-abr, 'H.', [dl(0,n,n)-1]), si('Levy', npp-nam, 'Levy', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1397, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(mois, nc-nom, mois, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(engin, nc-nom, engin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('1.700', det-num, '1.700', [dr(0,np,n)-1]), si(livres, nc-nom, livre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(renommé, vpp-ver:pper, renommer, [dr(0,dl(0,np,s_pass),np)-1]), si('NEAR', npp-nam, 'NEAR', [dr(0,np,np)-1]), si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(honneur, nc-nom, honneur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(défunt, nc-nom, défunt, [dr(0,n,n)-1]), si('Dr', nc-abr, 'Dr', [n-1]), si('Eugene', npp-nam, 'Eugene', [dl(0,n,n)-1]), si('M.', nc-abr, 'M.', [dl(0,n,n)-1]), si('Shoemaker', npp-nam, 'Shoemaker', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(pionnier, nc-nom, pionnier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étude, nc-nom, étude, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(impacts, nc-nom, impact, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(astéroïdes, nc-nom, astéroïde, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(comètes, nc-nom, comète, [dr(0,dl(0,n,n),n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(planètes, nc-nom, planète, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1398, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(comète, nc-nom, comète, [n-1]), si('Shoemaker-Levy', npp-nam, 'Shoemaker-Levy', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(découverte, vpp-ver:pper, découvrir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(femme, nc-nom, femme, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Carolyn', npp-nam, 'Carolyn', [np-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(astronome, nc-nom, astronome, [n-1]), si('David', npp-nam, 'David', [dl(0,n,n)-1]), si('H.', npp-abr, 'H.', [dl(0,n,n)-1]), si('Levy', npp-nam, 'Levy', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1399, Result) :-
      prob_parse([ si('EVERGLADES', nc-nom, 'EVERGLADES', [dr(0,np,np)-1]), si('NATIONAL', adj-adj, 'NATIONAL', [dl(0,n,n)-1]), si('PARK', npp-nam, 'PARK', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si('Floride', npp-nam, 'Floride', [n-1]), si('-', ponct-pun, '-', [let-1]), si('Par', p-prp, 'Par', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(journée, nc-nom, journée, [n-1]), si(claire, adj-adj, clair, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(chaude, adj-adj, chaud, [dl(0,n,n)-1]), si(récemment, adv-adv, récemment, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Dr', nc-abr, 'Dr', [n-1]), si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), si('Armentano', npp-nam, 'Armentano', [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(frayé, vpp-ver:pper, frayer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(chemin, nc-nom, chemin, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(travers, nc-nom, travers, [n-1]), si(un, det-det:art, un, [n-1]), si(peuplement, nc-nom, peuplement, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(mangroves, nc-nom, mangrove, [dr(0,dl(0,n,n),n)-1]), si(rouges, adj-adj, rouge, [n-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(bord, nc-nom, bord, [n-1]), si(sud, adj-adj, sud, [dl(0,n,n)-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(péninsule, nc-nom, péninsule, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Floride', npp-nam, 'Floride', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pied, nc-nom, pied, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(étendue, nc-nom, étendue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prairie, nc-nom, prairie, [n-1]), si(marneuse, adj-adj, marneux, [dl(0,n,n)-1]), si(sèche, adj-adj, sec, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,np,n)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(os, nc-nom, os, [n-1]), si(',', ponct-pun, ',', [let-1]), si(jonchée, vpp-ver:pper, joncher, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(dizaines, nc-num, dizaine, [dr(0,pp_de,n)-1]), si(de, p-prp, de, [n-1]), si(platanes, nc-nom, platane, [dr(0,dl(0,n,n),n)-1]), si(déracinés, vpp-ver:pper, déraciner, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),pp_par)-1]), si(décolorés, vpp-ver:pper, décolorer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(soleil, nc-nom, soleil, [dr(0,np,n)-1]), si('.', ponct-pun, '.', [n-1])], Result).
sent(1400, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Everglades', npp-nam, 'Everglades', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Floride', npp-nam, 'Floride', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1401, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(sud, nc-nom, sud, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Floride', npp-nam, 'Floride', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(comptait, v-ver:impf, compter, [dr(0,dl(0,np,s),np)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('demi-million', nc-nom, 'demi-million', [dr(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Everglades', npp-nam, 'Everglades', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(créé, vpp-ver:pper, créer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1947, pro-num, 1947, [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, clo-pro:per, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(6, det-num, 6, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(compter, vinf-ver:infi, compter, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(ou, cc-kon, ou, [n-1]), si(plus, adv-adv, plus, [np-1]), si('d\'', p-prp, 'd\'', [np-1]), si(ici, adv-adv, ici, [n-1]), si(2050, adj-num, 2050, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1402, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Everglades', npp-nam, 'Everglades', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Floride', npp-nam, 'Floride', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1403, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(conseil, nc-nom, conseil, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(administration, nc-nom, administration, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('South', npp-nam, 'South', [dr(0,n,n)-1]), si('Florida', npp-nam, 'Florida', [dr(0,n,n)-1]), si('Water', npp-nam, 'Water', [dr(0,n,n)-1]), si('Management', npp-nam, 'Management', [dr(0,n,n)-1]), si('District', npp-nam, 'District', [n-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(devoir, vinf-ver:infi, devoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(décider, vinf-ver:infi, décider, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(mois, nc-nom, mois, [n-1]), si(prochain, adj-adj, prochain, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(procéder, vinf-ver:infi, procéder, [dr(0,dl(0,np,s_inf),pp)-1]), si(ou, cc-kon, ou, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(non, adv-adv, non, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(achat, nc-nom, achat, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(communauté, nc-nom, communauté, [n-1]), si(connue, vpp-ver:pper, connaître, [dr(0,dl(0,n,n),pp)-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nom, nc-nom, nom, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(8, pro-num, 8, [dr(0,np,n)-1]), si(1, adj-num, 1, [dr(0,n,n)-1]), si('/', ponct-sym, '/', [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), si('2-Square-Mile', npp-nam, '2-Square-Mile', [dr(0,n,n)-1]), si('Area', npp-nam, 'Area', [n-1]), si(',', ponct-pun, ',', [let-1]), si(juste, adv-adv, juste, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parc, nc-nom, parc, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Everglades', npp-nam, 'Everglades', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1404, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(parc, nc-nom, parc, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Everglades', npp-nam, 'Everglades', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(situé, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Floride', npp-nam, 'Floride', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1405, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(12, det-num, 12, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(initiaux, adj-adj, initial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(fondation, nc-nom, fondation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1406, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1407, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(16, adj-num, 16, [dr(0,n,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(formaient, v-ver:impf, former, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Pacte', nc-nam, 'Pacte', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Varsovie', npp-nam, 'Varsovie', [np-1]), si(rival, nc-nom, rival, [dl(0,np,np)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(convenu, vpp-ver:pper, convenir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), si(moins, adv-adv, moins, [dr(0,dr(0,np,s_q),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(équipements, nc-nom, équipement, [n-1]), si(autorisés, vpp-ver:pper, autoriser, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(application, nc-nom, application, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(que, cs-kon, que, [dr(0,s_q,pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(traité, nc-nom, traité, [n-1]), si(initial, adj-adj, initial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1408, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1409, Result) :-
      prob_parse([ si('Allusion', nc-nom, 'Allusion', [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(proposition, nc-nom, proposition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grèce', npp-nam, 'Grèce', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(différences, nc-nom, différence, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sein, nc-nom, sein, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(alliance, nc-nom, alliance, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), si('Albright', npp-nam, 'Albright', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(variété, nc-nom, variété, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(idées, nc-nom, idée, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(divers, adj-adj, divers, [dr(0,n,n)-1]), si(19, adj-num, 19, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(membres, nc-nom, membre, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1410, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('OTAN', npp-abr, 'OTAN', [n-1]), si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), si(16, det-num, 16, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1411, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(principales, adj-adj, principal, [dr(0,n,n)-1]), si(maisons, nc-nom, maison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vente, nc-nom, vente, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(enchères, nc-nom, enchère, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Sotheby\'s', npp-nam, 'Sotheby\'s', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), si(',', ponct-pun, ',', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(empêtrées, vpp-ver:pper, empêtrer, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(scandale, nc-nom, scandale, [n-1]), si(embarrassant, adj-adj, embarrassant, [dl(0,n,n)-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si(fixation, nc-nom, fixation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [dr(0,dl(0,n,n),n)-1]), si(',', ponct-pun, ',', [n-1]), si('Phillips', npp-nam, 'Phillips', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Londres', npp-nam, 'Londres', [np-1]), si(',', ponct-pun, ',', [let-1]), si(provoque, v-ver:pres, provoquer, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(émoi, nc-nom, émoi, [n-1]), si(considérable, adj-adj, considérable, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(effort, nc-nom, effort, [n-1]), si(ostensible, adj-adj, ostensible, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(coûteux, adj-adj, coûteux, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(réinventer, vinf-ver:infi, réinventer, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(acteur, nc-nom, acteur, [n-1]), si(important, adj-adj, important, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1412, Result) :-
      prob_parse([ si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(maisons, nc-nom, maison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vente, nc-nom, vente, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(enchères, nc-nom, enchère, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1413, Result) :-
      prob_parse([ si('NUCOR', npp-abr, 'NUCOR', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pionnier, nc-nom, pionnier, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), si(géante, adj-adj, géant, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(laquelle, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acier, nc-nom, acier, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(versé, vpp-ver:pper, verser, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(machines, nc-nom, machine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coulée, nc-nom, coulée, [n-1]), si(continue, adj-adj, continu, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1414, Result) :-
      prob_parse([ si('Nucor', npp-nam, 'Nucor', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pionnier, nc-nom, pionnier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1415, Result) :-
      prob_parse([ si('NUCOR', npp-abr, 'NUCOR', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(point, nc-nom, point, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), si(géante, adj-adj, géant, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acier, nc-nom, acier, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(versé, vpp-ver:pper, verser, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(machines, nc-nom, machine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coulée, nc-nom, coulée, [n-1]), si(continue, adj-adj, continu, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1416, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(procédé, nc-nom, procédé, [n-1]), si('NUCOR', npp-nam, 'NUCOR', [dl(0,n,n)-1]), si(coule, v-ver:pres, coule, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(brames, nc-nom, brame, [n-1]), si(minces, adj-adj, mince, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(acier, nc-nom, acier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1417, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(technologie, nc-nom, technologie, [n-1]), si(la, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(courante, adj-adj, courant, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('mini-aciéries', nc-nom, 'mini-aciéries', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(coulée, nc-nom, coulée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(brames, nc-nom, brame, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(acier, nc-nom, acier, [n-1]), si(minces, adj-adj, mince, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(développée, vpp-ver:pper, développer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('SMS', npp-abr, 'SMS', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(mise, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('NUCOR', npp-nam, 'NUCOR', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1418, Result) :-
      prob_parse([ si('SMS', npp-abr, 'SMS', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(procédé, nc-nom, procédé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coulée, nc-nom, coulée, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(acier, nc-nom, acier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1419, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(procédé, nc-nom, procédé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), si(géante, adj-adj, géant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('NUCOR', npp-nam, 'NUCOR', [np-1]), si(permettrait, v-ver:cond, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(coûts, nc-nom, coût, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(production, nc-nom, production, [n-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si('10%.', pro-num, '10%.', [dr(0,np,n)-1])], Result).
sent(1420, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(procédé, nc-nom, procédé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), si(géante, adj-adj, géant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('NUCOR', npp-nam, 'NUCOR', [np-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(coûts, nc-nom, coût, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si('%.', nc-abr, '%.', [n-1])], Result).
sent(1421, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(fours, nc-nom, four, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(arc, nc-nom, arc, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(brûlent, v-ver:pres, brûler, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ferraille, nc-nom, ferraille, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acier, nc-nom, acier, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(fusion, nc-nom, fusion, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(formé, vpp-ver:pper, former, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(brames, nc-nom, brame, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(pouces, nc-nom, pouce, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(épaisseur, nc-nom, épaisseur, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(comprimées, vpp-ver:pper, comprimer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(acier, nc-nom, acier, [n-1]), si(fini, vpp-ver:pper, finir, [dl(0,n,n)-1]), si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(mince, adj-adj, mince, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1422, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(ferraille, nc-nom, ferraille, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(liquéfiée, vpp-ver:pper, liquéfier, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fours, nc-nom, four, [n-1]), si(électriques, adj-adj, électrique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1423, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(fours, nc-nom, four, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(arc, nc-nom, arc, [n-1]), si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), si(brûlent, v-ver:pres, brûler, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(ferraille, nc-nom, ferraille, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acier, nc-nom, acier, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(fusion, nc-nom, fusion, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(formé, vpp-ver:pper, former, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(brames, nc-nom, brame, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(pouces, nc-nom, pouce, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(épaisseur, nc-nom, épaisseur, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(comprimées, vpp-ver:pper, comprimer, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(acier, nc-nom, acier, [n-1]), si(fini, vpp-ver:pper, finir, [dl(0,n,n)-1]), si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(mince, adj-adj, mince, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1424, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(acier, nc-nom, acier, [n-1]), si(fini, vpp-ver:pper, finir, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(produit, vpp-ver:pper, produire, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,n)-1]), si(compression, nc-nom, compression, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1425, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(processus, nc-nom, processus, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(production, nc-nom, production, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(tirage, nc-nom, tirage, [n-1]), si(unique, adj-adj, unique, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),dr(0,dl(0,n,n),dl(0,n,n)))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1426, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(production, nc-nom, production, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(tirage, nc-nom, tirage, [n-1]), si(unique, adj-adj, unique, [dl(0,n,n)-1]), si(réduit, v-ver:pres, réduire, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(coûts, nc-nom, coût, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1427, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(procédé, nc-nom, procédé, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(gourmand, adj-adj, gourmand, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(capitaux, nc-nom, capital, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fabrication, nc-nom, fabrication, [n-1]), si(traditionnelle, adj-adj, traditionnel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acier, nc-nom, acier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(il, cls-pro:per, il, [np-1]), si(dépend, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(approvisionnement, nc-nom, approvisionnement, [n-1]), si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(coûteux, adj-adj, coûteux, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(ferraille, nc-nom, ferraille, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(électricité, nc-nom, électricité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1428, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(technologie, nc-nom, technologie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fabrication, nc-nom, fabrication, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acier, nc-nom, acier, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(gourmande, adj-adj, gourmand, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(capitaux, nc-nom, capital, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1429, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(production, nc-nom, production, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(gourmande, vpr-ver:ppre, gourmand, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(capitaux, nc-nom, capital, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fabrication, nc-nom, fabrication, [n-1]), si(traditionnelle, adj-adj, traditionnel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(acier, nc-nom, acier, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(dépend, v-ver:pres, dépendre, [dr(0,dl(0,np,s),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(approvisionnement, nc-nom, approvisionnement, [n-1]), si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(coûteux, adj-adj, coûteux, [dr(0,dl(0,n,n),pp)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(ferraille, nc-nom, ferraille, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(électricité, nc-nom, électricité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1430, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(production, nc-nom, production, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), si(nécessite, v-ver:pres, nécessiter, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(coût, nc-nom, coût, [n-1]), si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(énergie, nc-nom, énergie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ferraille, nc-nom, ferraille, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1431, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(envisagent, v-ver:pres, envisager, [dr(0,dl(0,np,s),np)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(planifient, v-ver:pres, planifier, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(telles, adj-adj, tel, [dr(0,n,n)-1]), si(usines, nc-nom, usine, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(':', ponct-pun, ':', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(consortium, nc-nom, consortium, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('TRICO', npp-nam, 'TRICO', [dr(0,np,np)-1]), si('Steel', npp-nam, 'Steel', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('British', npp-nam, 'British', [dr(0,np,np)-1]), si('Steel', npp-nam, 'Steel', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sumitomo', npp-nam, 'Sumitomo', [dr(0,np,np)-1]), si('Metal', npp-nam, 'Metal', [dr(0,np,np)-1]), si('Industries', npp-nam, 'Industries', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1432, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(aura, v-ver:futu, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(coentreprise, nc-nom, coentreprise, [n-1]), si('américano-britannique-japonaise', adj-adj, 'américano-britannique-japonaise', [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), si('Trico', npp-nam, 'Trico', [dr(0,np,np)-1]), si('Steel', npp-nam, 'Steel', [np-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1433, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(démographique, adj-adj, démographique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('3,9', det-num, '3,9', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(an, nc-nom, an, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(début, nc-nom, début, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(années, nc-nom, année, [n-1]), si(1980, adj-num, 1980, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(élevés, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1434, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(autrefois, adv-adv, autrefois, [dl(1,s,s)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('3,9', det-num, '3,9', [dr(0,np,n)-1]), si('%.', nc-abr, '%.', [n-1])], Result).
sent(1435, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(planification, nc-nom, planification, [n-1]), si(familiale, adj-adj, familial, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(réussite, nc-nom, réussite, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(engagement, nc-nom, engagement, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1436, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(gouvernemental, adj-adj, gouvernemental, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1437, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(garde, nc-nom, garde, [n-1]), si(forestier, adj-adj, forestier, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(24, det-num, 24, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(balle, nc-nom, balle, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(tête, nc-nom, tête, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(visage, nc-nom, visage, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épaule, nc-nom, épaule, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1438, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(tirer, vinf-ver:infi, tirer, [dl(0,np,s_inf)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(tuer, vinf-ver:infi, tuer, [dl(0,np,s_inf)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(braconniers, nc-nom, braconnier, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(instituée, vpp-ver:pper, instituer, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(africains, adj-adj, africain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1439, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1989, pro-num, 1989, [np-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CITES', npp-abr, 'CITES', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Convention', npp-nam, 'Convention', [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(espèces, nc-nom, espèce, [n-1]), si(menacées, vpp-ver:pper, menacer, [dr(0,dl(0,n,n),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(extinction, nc-nom, extinction, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(interdit, vpp-ver:pper, interdire, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivoire, nc-nom, ivoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1440, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivoire, nc-nom, ivoire, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(interdit, vpp-ver:pper, interdire, [dl(0,np,s_pass)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(convention, nc-nom, convention, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1989, pro-num, 1989, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1441, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chiffre, nc-nom, chiffre, [n-1]), si(stupéfiant, adj-adj, stupéfiant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(milieu, nc-nom, milieu, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('21e', adj-num, '21e', [dr(0,n,n)-1]), si(siècle, nc-nom, siècle, [n-1]), si(',', ponct-pun, ',', [let-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si('5,7', det-num, '5,7', [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(actuellement, adv-adv, actuellement, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1442, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(atteindra, v-ver:futu, atteindre, [dr(0,dl(0,np,s),np)-1]), si(probablement, adv-adv, probablement, [dl(1,s,s)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2050, pro-num, 2050, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1443, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chiffre, nc-nom, chiffre, [n-1]), si(stupéfiant, adj-adj, stupéfiant, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(ici, adv-adv, ici, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(milieu, nc-nom, milieu, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(siècle, nc-nom, siècle, [n-1]), si(prochain, adj-adj, prochain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), si('5,7', det-num, '5,7', [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(actuellement, adv-adv, actuellement, [dl(0,np,np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1444, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(actuelle, adj-adj, actuel, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('5,7', det-num, '5,7', [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1445, Result) :-
      prob_parse([ si('Quatorze', det-num, 'Quatorze', [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(européens, adj-adj, européen, [dl(0,n,n)-1]), si(représentant, vpr-ver:ppre, représenter, [dr(0,dl(0,n,n),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(démographique, adj-adj, démographique, [dl(0,n,n)-1]), si(zéro, adj-num, zéro, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('France', npp-nam, 'France', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Finlande', npp-nam, 'Finlande', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(dirigent, v-ver:pres, diriger, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(',', ponct-pun, ',', [let-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(autres, pro-pro:ind, autre, [np-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(direction, nc-nom, direction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1446, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(dirige, v-ver:pres, diriger, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(démographique, adj-adj, démographique, [dl(0,n,n)-1]), si(zéro, adj-num, zéro, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1447, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(chaotique, adj-adj, chaotique, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(engloutit, v-ver:pres, engloutir, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(forêt, nc-nom, forêt, [n-1]), si(amazonienne, adj-adj, amazonien, [dl(0,n,n)-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(enfin, adv-adv, enfin, [dl(1,s,s)-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(freiné, vpp-ver:pper, freiner, [dl(0,np,s_pass)-1]), si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(plan, nc-nom, plan, [n-1]), si(élaboré, vpp-ver:pper, élaborer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(amazoniens, adj-adj, amazonien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(éminents, adj-adj, éminent, [dr(0,n,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(entier, adj-adj, entier, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1448, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(plan, nc-nom, plan, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(élaboré, vpp-ver:pper, élaborer, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(freiner, vinf-ver:infi, freiner, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(chaotique, adj-adj, chaotique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(forêt, nc-nom, forêt, [n-1]), si(amazonienne, adj-adj, amazonien, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1449, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(caractéristiques, nc-nom, caractéristique, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(plan, nc-nom, plan, [n-1]), si(comprennent, v-ver:pres, comprendre, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(création, nc-nom, création, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(protection, nc-nom, protection, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(environnement, nc-nom, environnement, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suspension, nc-nom, suspension, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(subventions, nc-nom, subvention, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(éleveurs, nc-nom, éleveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bétail, nc-nom, bétail, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bassin, nc-nom, bassin, [n-1]), si(amazonien, adj-adj, amazonien, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(contrôles, nc-nom, contrôle, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pesticides, nc-nom, pesticide, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1450, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(affectés, vpp-ver:pper, affecter, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pesticides, nc-nom, pesticide, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1451, Result) :-
      prob_parse([ si('Nucor', npp-nam, 'Nucor', [np-1]), si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(procédé, nc-nom, procédé, [n-1]), si('SMS', nc-abr, 'SMS', [dl(0,n,n)-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avantage, nc-nom, avantage, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(tonne, nc-nom, tonne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coût, nc-nom, coût, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(production, nc-nom, production, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Big', npp-nam, 'Big', [dr(0,np,np)-1]), si('Steel', npp-nam, 'Steel', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1452, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(procédé, nc-nom, procédé, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Nucor', npp-nam, 'Nucor', [np-1]), si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(avantages, nc-nom, avantage, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(termes, nc-nom, terme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(coûts, nc-nom, coût, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1453, Result) :-
      prob_parse([ si('US', npp-abr, 'US', [dr(0,np,np)-1]), si('STEEL', npp-nam, 'STEEL', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(fabricant, nc-nom, fabricant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(acier, nc-nom, acier, [n-1]), si(intégré, vpp-ver:pper, intégrer, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(',', ponct-pun, ',', [let-1]), si(envisage, v-ver:pres, envisager, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(aciérie, nc-nom, aciérie, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(combattre, vinf-ver:infi, combattre, [dr(0,dl(0,np,s_inf),np)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(propre, adj-adj, propre, [dr(0,n,n)-1]), si(terrain, nc-nom, terrain, [n-1]), si(les, det-det:art, le, [dr(0,n,n)-1]), si('mini-aciéries', nc-nom, 'mini-aciéries', [n-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(connaissent, v-ver:pres, connaître, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1454, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('US', npp-abr, 'US', [dr(0,np,np)-1]), si('Steel', npp-nam, 'Steel', [np-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ohio', npp-nam, 'Ohio', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1455, Result) :-
      prob_parse([ si('US', npp-abr, 'US', [dr(0,np,np)-1]), si('Steel', npp-nam, 'Steel', [np-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(même, adv-adv, même, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avantage, nc-nom, avantage, [n-1]), si(technique, adj-adj, technique, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('Nucor', npp-nam, 'Nucor', [np-1]), si('puisqu\'une', det-det:art, 'puisqu\'une', [dr(0,dl(0,s,s),s)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,np,n)-1]), si(méthode, nc-nom, méthode, [dr(0,n,n)-1]), si(de, p-prp, de, [n-1]), si(fabrication, nc-nom, fabrication, [dr(0,dl(0,n,n),n)-1]), si(de, p-prp, de, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), si(acier, nc-nom, acier, [dr(0,np,n)-1]), si('qu\'', prorel-pro:rel, 'qu\'', [n-1]), si(elle, cls-pro:per, lui, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(envisage, v-ver:pres, envisager, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), si(coulée, nc-nom, coulée, [dr(0,np,n)-1]), si(en, p-prp, en, [n-1]), si(bande, nc-nom, bande, [dr(0,dl(0,n,n),n)-1]), si(mince, adj-adj, mince, [n-1]), si(',', ponct-pun, ',', [dl(0,n,n)-1]), si(pourrait, v-ver:cond, pouvoir, [let-1]), si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(un, det-det:art, un, [dr(0,dl(0,np,s_inf),np)-1]), si(acier, nc-nom, acier, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(meilleure, adj-adj, meilleur, [dr(0,dl(0,n,n),n)-1]), si(qualité, nc-nom, qualité, [dr(0,dr(0,n,s_q),n)-1]), si(que, cs-kon, que, [n-1]), si(la, det-det:art, le, [dr(0,s_q,np)-1]), si(technique, nc-nom, technique, [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si(brames, nc-nom, brame, [dr(0,dl(0,n,n),n)-1]), si(minces, adj-adj, mince, [n-1]), si(de, p-prp, de, [dl(0,n,n)-1]), si('Nucor', npp-nam, 'Nucor', [dr(0,dl(0,n,n),np)-1]), si('.', ponct-pun, '.', [np-1])], Result).
sent(1456, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(coulée, nc-nom, coulée, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(bande, nc-nom, bande, [n-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(acier, nc-nom, acier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(qualité, nc-nom, qualité, [n-1]), si(supérieure, adj-adj, supérieur, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1457, Result) :-
      prob_parse([ si('Frog', npp-nam, 'Frog', [np-1]), si(deviendra, v-ver:futu, devenir, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(légendaire, adj-adj, légendaire, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(premiers, adj-num, premier, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,n,n),dia(0,box(0,n))),dr(0,dl(0,n,n),n)),dr(0,dl(0,n,n),dia(0,box(0,n))))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(efficaces, adj-adj, efficace, [dr(0,n,n)-1]), si(chiens, nc-nom, chien, [n-1]), si(renifleurs, adj-adj, renifleur, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(narcotiques, nc-nom, narcotique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nation, nc-nom, nation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1458, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chiens, nc-nom, chien, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(renifler, vinf-ver:infi, renifler, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(narcotiques, nc-nom, narcotique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1459, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(dernière, adj-adj, dernier, [dr(0,n,n)-1]), si(décennie, nc-nom, décennie, [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(emploi, nc-nom, emploi, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(chiens, nc-nom, chien, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dl(0,np,s_ppart),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouveauté, nc-nom, nouveauté, [n-1]), si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nécessité, nc-nom, nécessité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(forces, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1460, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chiens, nc-nom, chien, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordre, nc-nom, ordre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1461, Result) :-
      prob_parse([ si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chiens, nc-nom, chien, [n-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(principalement, adv-adv, principalement, [dr(0,pp,pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(patrouilles, nc-nom, patrouille, [n-1]), si(',', ponct-pun, ',', [let-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), si(renifleurs, nc-nom, renifleur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(narcotiques, nc-nom, narcotique, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acceptée, vpp-ver:pper, accepter, [dl(0,np,s_pass)-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si(1980, pro-num, 1980, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1462, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chiens, nc-nom, chien, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(renifler, vinf-ver:infi, renifler, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(narcotiques, nc-nom, narcotique, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(courante, adj-adj, courant, [dl(0,n,n)-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si(1980, pro-num, 1980, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1463, Result) :-
      prob_parse([ si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chiens, nc-nom, chien, [n-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(principalement, adv-adv, principalement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patrouilles, nc-nom, patrouille, [n-1]), si(',', ponct-pun, ',', [let-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), si(renifleurs, nc-nom, renifleur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(narcotiques, nc-nom, narcotique, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acceptée, vpp-ver:pper, accepter, [dl(0,np,s_pass)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1464, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chiens, nc-nom, chien, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(renifler, vinf-ver:infi, renifler, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(narcotiques, nc-nom, narcotique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1465, Result) :-
      prob_parse([ si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(chiens, nc-nom, chien, [n-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(principalement, adv-adv, principalement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(patrouilles, nc-nom, patrouille, [n-1]), si(',', ponct-pun, ',', [let-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), si(renifleurs, nc-nom, renifleur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(narcotiques, nc-nom, narcotique, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(acceptée, vpp-ver:pper, accepter, [dl(0,np,s_pass)-1]), si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1466, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(police, nc-nom, police, [n-1]), si(utilisent, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(chiens, nc-nom, chien, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1467, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(prêt, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(autoriser, vinf-ver:infi, autoriser, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(argentines, adj-adj, argentin, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gisements, nc-nom, gisement, [n-1]), si(pétrolifères, adj-adj, pétrolifère, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(eaux, nc-nom, eau, [n-1]), si(territoriales, adj-adj, territorial, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(îles, nc-nom, île, [n-1]), si('Malouines', adj-nam, 'Malouines', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1468, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gisements, nc-nom, gisement, [n-1]), si(pétrolifères, adj-adj, pétrolifère, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(eaux, nc-nom, eau, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(îles, nc-nom, île, [n-1]), si('Malouines', npp-nam, 'Malouines', [dl(0,n,n)-1]), si(nécessite, v-ver:pres, nécessiter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(coopération, nc-nom, coopération, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1469, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(apparu, vpp-ver:pper, apparaître, [dl(0,n,n)-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rejeté, vpp-ver:pper, rejeter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(demande, nc-nom, demande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fourniture, nc-nom, fourniture, [n-1]), si(limitée, vpp-ver:pper, limité, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pièces, nc-nom, pièce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rechange, nc-nom, rechange, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fabrication, nc-nom, fabrication, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marine, nc-nom, marine, [n-1]), si(argentine, adj-adj, argentin, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(commencée, vpp-ver:pper, commencer, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1470, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nom, 'Défense', [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rejeté, vpp-ver:pper, rejeter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(demande, nc-nom, demande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fournitures, nc-nom, fourniture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1471, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),np)-1]), si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(rétablir, vinf-ver:infi, rétablir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(relations, nc-nom, relation, [n-1]), si(diplomatiques, adj-adj, diplomatique, [dl(0,n,n)-1]), si(complètes, adj-adj, complet, [dl(0,n,n)-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(huit, det-num, huit, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(mené, vpp-ver:pper, mener, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(74, det-num, 74, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(îles, nc-nom, île, [n-1]), si('Malouines', npp-nam, 'Malouines', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(archipel, nc-nom, archipel, [n-1]), si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(peuplé, vpp-ver:pper, peupler, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(large, nc-nom, large, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(côtes, nc-nom, côte, [n-1]), si(argentines, adj-adj, argentin, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(océan, nc-nom, océan, [n-1]), si('Atlantique', npp-nam, 'Atlantique', [dl(0,n,n)-1]), si(sud, adj-adj, sud, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1472, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(relations, nc-nom, relation, [n-1]), si(diplomatiques, adj-adj, diplomatique, [dl(0,n,n)-1]), si(complètes, adj-adj, complet, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(rétablies, vpp-ver:pper, rétablir, [dl(0,np,s_pass)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(74, det-num, 74, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1473, Result) :-
      prob_parse([ si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(déroule, v-ver:pres, dérouler, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tapis, nc-nom, tapis, [n-1]), si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(duc, nc-nom, duc, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('York', npp-nam, 'York', [np-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(premier, det-num, premier, [dr(0,np,n)-1]), si(visiteur, nc-nom, visiteur, [n-1]), si(royal, adj-adj, royal, [dl(0,n,n)-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si('anglo-argentine', adj-adj, 'anglo-argentine', [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Malouines', npp-nam, 'Malouines', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1982, pro-num, 1982, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1474, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(duc, nc-nom, duc, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('York', npp-nam, 'York', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(visiteur, nc-nom, visiteur, [n-1]), si(royal, adj-adj, royal, [dl(0,n,n)-1]), si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(1982, pro-num, 1982, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1475, Result) :-
      prob_parse([ si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(pourparlers, nc-nom, pourparler, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(prévus, vpp-ver:pper, prévoir, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(courant, nc-nom, courant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(reprendre, vinf-ver:infi, reprendre, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(formation, nc-nom, formation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(officiers, nc-nom, officier, [n-1]), si(argentins, adj-adj, argentin, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(académies, nc-nom, académie, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1476, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(officiers, nc-nom, officier, [n-1]), si(argentins, adj-adj, argentin, [dl(0,n,n)-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(formés, vpp-ver:pper, former, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(académies, nc-nom, académie, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1477, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(attiré, vpp-ver:pper, attirer, [dr(0,dl(0,np,s_ppart),np)-1]), si(à, p-prp, à, [dr(0,dr(0,np,np),n)-1]), si(peine, nc-nom, peiner, [n-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(800, adj-num, 800, [dr(0,n,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(investissements, nc-nom, investissement, [n-1]), si(étrangers, adj-adj, étranger, [dl(0,n,n)-1]), si(estimés, vpp-ver:pper, estimer, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(afflué, vpp-ver:pper, affluer, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(dernières, adj-adj, dernier, [dr(0,n,n)-1]), si(années, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1478, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(attiré, vpp-ver:pper, attirer, [dr(0,dl(0,np,s_ppart),np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(importants, adj-adj, important, [dr(0,n,n)-1]), si(investissements, nc-nom, investissement, [n-1]), si(étrangers, adj-adj, étranger, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1479, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(tchèques, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaques, adj-adj, slovaque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(annoncé, vpp-ver:pper, annoncer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,dl(1,s,s),dl(1,s,s))-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(accord, nc-nom, accord, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(préparer, vinf-ver:infi, préparer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(scission, nc-nom, scission, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(distincts, adj-adj, distinct, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1480, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Tchèques', nc-nam, 'Tchèques', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Slovaques', nc-nam, 'Slovaques', [n-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(scindés, vpp-ver:pper, scinder, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si(distincts, adj-adj, distinct, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1481, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(tchèques, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaques, adj-adj, slovaque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parlements, nc-nom, parlement, [n-1]), si(régionaux, adj-adj, régional, [dl(0,n,n)-1]), si(décideraient, v-ver:impf, décider, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(meilleure, adj-adj, meilleur, [dr(0,n,n)-1]), si(façon, nc-nom, façon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(diviser, vinf-ver:infi, diviser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1482, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(parlements, nc-nom, parlement, [n-1]), si(régionaux, adj-adj, régional, [dl(0,n,n)-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(décideront, v-ver:futu, décider, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(meilleure, adj-adj, meilleur, [dr(0,n,n)-1]), si(façon, nc-nom, façon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(diviser, vinf-ver:infi, diviser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si('États', nc-nam, 'États', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1483, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(séparation, nc-nom, séparation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(rares, adj-adj, rare, [dr(0,n,n)-1]), si(points, nc-nom, point, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(consensus, nc-nom, consensus, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(vainqueurs, nc-nom, vainqueur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(élections, nc-nom, élection, [n-1]), si(générales, adj-adj, général, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(juin, nc-nom, juin, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [np-1]), si('-le', clo-pro:per, '-le', [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), si(civique, adj-adj, civique, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('République', npp-nam, 'République', [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Mouvement', nc-nam, 'Mouvement', [n-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1484, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(tchèques, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaques, adj-adj, slovaque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(approuvé, vpp-ver:pper, approuver, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(assure, v-ver:pres, assurer, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(séparation, nc-nom, séparation, [n-1]), si(légale, adj-adj, légal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fédération, nc-nom, fédération, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1485, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('100.000', det-num, '100.000', [dr(0,np,n)-1]), si('Slovaques', nc-nom, 'Slovaques', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(souche, nc-nom, souche, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [n-1]), si(vivent, v-ver:pres, vivre, [dl(0,np,s)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('République', npp-nam, 'République', [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(renoncer, vinf-ver:infi, renoncer, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(citoyenneté, nc-nom, citoyenneté, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(éclaté, vpp-ver:pper, éclater, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('États', nc-nom, 'États', [n-1]), si(séparés, vpp-ver:pper, séparer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1486, Result) :-
      prob_parse([ si('100.000', det-num, '100.000', [dr(0,np,n)-1]), si('Slovaques', nc-nam, 'Slovaques', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(changer, vinf-ver:infi, changer, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(citoyenneté, nc-nom, citoyenneté, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1487, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(jour, nc-nom, jour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Nouvel', npp-nam, 'Nouvel', [dr(0,n,n)-1]), si('An', nc-nom, 'An', [n-1]), si(1993, adj-num, 1993, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Slovaques', nc-nam, 'Slovaques', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(fin, nc-nom, fin, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(mille, det-num, mille, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(asservissement, nc-nom, asservissement, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Hongrie', npp-nam, 'Hongrie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(sept, det-num, sept, [dr(0,np,n)-1]), si(décennies, nc-nom, décennie, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,n)-1]), si(partenaire, nc-nom, partenaire, [n-1]), si(junior, adj-adj, junior, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(célébré, vpp-ver:pper, célébrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(naissance, nc-nom, naissance, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(république, nc-nom, république, [n-1]), si(souveraine, adj-adj, souverain, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(indépendante, adj-adj, indépendant, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(internationalement, adv-adv, internationalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(reconnue, vpp-ver:pper, reconnaître, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1488, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si('1er', adj-num, '1er', [dr(0,n,n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(1993, adj-num, 1993, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(république, nc-nom, république, [n-1]), si(indépendante, adj-adj, indépendant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1489, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(réorganiser, vinf-ver:infi, réorganiser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Ecosse', npp-nam, 'Ecosse', [n-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(retiré, vpp-ver:pper, retirer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1490, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(intention, nc-nom, intention, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(réorganiser, vinf-ver:infi, réorganiser, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1491, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(appartements, nc-nom, appartement, [n-1]), si(autonomes, adj-adj, autonome, [dl(0,n,n)-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fournis, vpp-ver:pper, fournir, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(auberges, nc-nom, auberge, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(emménager, vinf-ver:infi, emménager, [dr(0,dl(0,np,s_inf),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(logement, nc-nom, logement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(terme, nc-nom, terme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(travailleurs, nc-nom, travailleur, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bénévoles, nc-nom, bénévole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(formés, vpp-ver:pper, former, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(travail, nc-nom, travail, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(proximité, nc-nom, proximité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(contact, nc-nom, contact, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('sans-abri', nc-nom, 'sans-abri', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1492, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(efforce, v-ver:pres, efforcer, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(contact, nc-nom, contact, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('sans-abri', nc-nom, 'sans-abri', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1493, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(appartements, nc-nom, appartement, [n-1]), si(autonomes, adj-adj, autonome, [dl(0,n,n)-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fournis, vpp-ver:pper, fournir, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(auberges, nc-nom, auberge, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(emménager, vinf-ver:infi, emménager, [dr(0,dl(0,np,s_inf),pp)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(logement, nc-nom, logement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(terme, nc-nom, terme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(travailleurs, nc-nom, travailleur, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bénévoles, nc-nom, bénévole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(formés, vpp-ver:pper, former, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(travail, nc-nom, travail, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(proximité, nc-nom, proximité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(contact, nc-nom, contact, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('sans-abri', nc-nom, 'sans-abri', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(rues, nc-nom, rue, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1494, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(fournit, v-ver:pres, fournir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(appartements, nc-nom, appartement, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), si(logement, nc-nom, logement, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(terme, nc-nom, terme, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(résidents, nc-nom, résident, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(auberges, nc-nom, auberge, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(besoin, nc-nom, besoin, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1495, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(revenus, nc-nom, revenu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(friperie, nc-nom, friperie, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(financé, vpp-ver:pper, financer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réinsertion, nc-nom, réinsertion, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(toxicomanes, nc-nom, toxicomane, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(alcooliques, nc-nom, alcoolique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1496, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(recettes, nc-nom, recette, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(friperies, nc-nom, friperie, [n-1]), si(financent, v-ver:pres, financer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réinsertion, nc-nom, réinsertion, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(toxicomanes, nc-nom, toxicomane, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(alcooliques, nc-nom, alcoolique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1497, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(rêve, nc-nom, rêve, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Tories', nc-nam, 'Tories', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(contester, vinf-ver:infi, contester, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(supériorité, nc-nom, supériorité, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(travaillistes, nc-nom, travailliste, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(coeur, nc-nom, coeur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sud, nc-nom, sud, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Pays', npp-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(effondré, vpp-ver:pper, effondrer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si('-', ponct-pun, '-', [let-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Plaid', npp-nam, 'Plaid', [dr(0,np,np)-1]), si('Cymru', npp-nam, 'Cymru', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(nationaliste, adj-adj, nationaliste, [dl(0,n,n)-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(se, clr-pro:per, se, [cl_r-1]), si(réjouissait, v-ver:impf, réjouir, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), si(désormais, adv-adv, désormais, [dr(0,dr(0,np,s_q),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(députés, nc-nom, député, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(vue, nc-nom, vue, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1498, Result) :-
      prob_parse([ si('Plaid', npp-nam, 'Plaid', [dr(0,np,np)-1]), si('Cymru', npp-nam, 'Cymru', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(nationaliste, adj-adj, nationaliste, [dl(0,n,n)-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1499, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(retarder, vinf-ver:infi, retarder, [dr(0,dl(0,np,s_inf),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(embarras, nc-nom, embarras, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Redwood', npp-nam, 'Redwood', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1500, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(retardé, vpp-ver:pper, retarder, [dr(0,dl(0,np,s_ppart),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réforme, nc-nom, réforme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1501, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(industrie, nc-nom, industrie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étain, nc-nom, étain, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Indonésie', npp-nam, 'Indonésie', [n-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(renouer, vinf-ver:infi, renouer, [dr(0,dl(0,np,s_inf),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bénéfices, nc-nom, bénéfice, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(principale, adj-adj, principal, [dr(0,n,n)-1]), si(mine, nc-nom, mine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(étain, nc-nom, étain, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Tambang', npp-nam, 'Tambang', [dr(0,np,np)-1]), si('Timah', npp-nam, 'Timah', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ayant, vpr-ver:ppre, avoir, [dr(0,dl(0,np,s_ppres),dl(0,np,s_ppart))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(coûts, nc-nom, coût, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(production, nc-nom, production, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(25, det-num, 25, [dr(0,np,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,np),n)-1]), si(cent, pro-num, cent, [np-1]), si(depuis, p-prp, depuis, [dr(0,dl(0,np,np),np)-1]), si(1990, pro-num, 1990, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1502, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Indonésie', npp-nam, 'Indonésie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(réduit, vpp-ver:pper, réduire, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(coûts, nc-nom, coût, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(production, nc-nom, production, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(étain, nc-nom, étain, [n-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('25%.', pro-num, '25%.', [dr(0,np,n)-1])], Result).
sent(1503, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Indonésie', npp-nam, 'Indonésie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(troisième, adj-num, troisième, [dr(0,n,n)-1]), si(producteur, nc-nom, producteur, [n-1]), si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(étain, nc-nom, étain, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Brésil', npp-nam, 'Brésil', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Malaisie', npp-nam, 'Malaisie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(disposait, v-ver:impf, disposer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quota, nc-nom, quota, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exportation, nc-nom, exportation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('28.376', det-num, '28.376', [dr(0,np,n)-1]), si(tonnes, nc-nom, tonne, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(an, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1504, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Indonésie', npp-nam, 'Indonésie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grands, adj-adj, grand, [dr(0,n,n)-1]), si(producteurs, nc-nom, producteur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(étain, nc-nom, étain, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1505, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(industrie, nc-nom, industrie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(étain, nc-nom, étain, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Malaisie', npp-nam, 'Malaisie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(subit, v-ver:pres, subir, [dr(0,dl(0,np,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(pire, adj-adj, pire, [dr(0,n,n)-1]), si(baisse, nc-nom, baisse, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(production, nc-nom, production, [n-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(coup, nc-nom, coup, [n-1]), si(dur, adj-adj, dur, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(annonce, nc-nom, annonce, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(retrait, nc-nom, retrait, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Malaysia', npp-nam, 'Malaysia', [dr(0,n,n)-1]), si(mining, et-nam, mining, [dr(0,n,n)-1]), si(corporation, nc-nom, corporation, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(gros, adj-adj, gros, [dr(0,n,n)-1]), si(producteurs, nc-nom, producteur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(étain, nc-nom, étain, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1506, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Malaysia', npp-nam, 'Malaysia', [dr(0,n,n)-1]), si('Mining', npp-nam, 'Mining', [dr(0,n,n)-1]), si('Corp', npp-nam, 'Corp', [n-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1507, Result) :-
      prob_parse([ si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(gros, adj-adj, gros, [dr(0,n,n)-1]), si(producteurs, nc-nom, producteur, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(étain, nc-nom, étain, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1508, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(procédures, nc-nom, procédure, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autorisation, nc-nom, autorisation, [n-1]), si(coûteuses, adj-adj, coûteux, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(différents, adj-adj, différent, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(même, adj-adj, même, [dr(0,n,n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1509, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(doivent, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(procédures, nc-nom, procédure, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(autorisation, nc-nom, autorisation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1510, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(autre, pro-pro:ind, autre, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(sentiment, nc-nom, sentiment, [n-1]), si(croissant, adj-adj, croissant, [dl(0,n,n)-1]), si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(juges, nc-nom, juge, [n-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(criminels, nc-nom, criminel, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(col, nc-nom, col, [n-1]), si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(traités, vpp-ver:pper, traiter, [dl(0,np,s_pass)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), si(manière, nc-nom, manière, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1511, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(criminels, nc-nom, criminel, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(col, nc-nom, col, [n-1]), si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(traités, vpp-ver:pper, traiter, [dl(0,np,s_pass)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), si(manière, nc-nom, manière, [n-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1512, Result) :-
      prob_parse([ si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(méthodes, nc-nom, méthode, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(conception, nc-nom, conception, [n-1]), si(moléculaire, adj-adj, moléculaire, [dl(0,n,n)-1]), si(deviendront, v-ver:pres, devenir, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(plus, adv-adv, plus, [np-1]), si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(0,n,n)),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(importantes, adj-adj, important, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(industrie, nc-nom, industrie, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(',', ponct-pun, ',', [let-1]), si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(30, det-num, 30, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(elles, cls-pro:per, lui, [np-1]), si(représenteront, v-ver:futu, représenter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(nouveaux, adj-adj, nouveau, [dr(0,n,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1513, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(méthodes, nc-nom, méthode, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(conception, nc-nom, conception, [n-1]), si(moléculaire, adj-adj, moléculaire, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisées, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1514, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('Michael', npp-nam, 'Michael', [n-1]), si('Milken', npp-nam, 'Milken', [dl(0,n,n)-1]), si(apparemment, adv-adv, apparemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(abasourdi, vpp-ver:pper, abasourdir, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prison, nc-nom, prison, [n-1]), si(mercredi, nc-nom, mercredi, [let-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(jugé, vpp-ver:pper, juger, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(lesquels, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(plaidé, vpp-ver:pper, plaider, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(coupable, adj-adj, coupable, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(ni, cc-kon, ni, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(mineurs, nc-nom, mineur, [dl(0,n,n)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(isolés, vpp-ver:pper, isolé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1515, Result) :-
      prob_parse([ si('Milken', npp-nam, 'Milken', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1516, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('Michael', npp-nam, 'Michael', [n-1]), si('Milken', npp-nam, 'Milken', [dl(0,n,n)-1]), si(apparemment, adv-adv, apparemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(abasourdi, vpp-ver:pper, abasourdir, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prison, nc-nom, prison, [n-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(jugé, vpp-ver:pper, juger, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(lesquels, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(plaidé, vpp-ver:pper, plaider, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(coupable, adj-adj, coupable, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(ni, cc-kon, ni, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(mineurs, nc-nom, mineur, [dl(0,n,n)-1]), si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(isolés, vpp-ver:pper, isolé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1517, Result) :-
      prob_parse([ si('Milken', npp-nam, 'Milken', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(prison, nc-nom, prison, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(mineurs, adj-adj, mineur, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1518, Result) :-
      prob_parse([ si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(voyage, nc-nom, voyage, [n-1]), si(prévu, vpp-ver:pper, prévoir, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(normalement, adv-adv, normalement, [dl(1,s,s)-1]), si(utilisé, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marine, nc-nom, marine, [n-1]), si(argentine, adj-adj, argentin, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(transporter, vinf-ver:infi, transporter, [dr(0,dl(0,np,s_inf),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(matériel, nc-nom, matériel, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(aurait, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(presque, adv-adv, presque, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(certainement, adv-adv, certainement, [dl(1,s,s)-1]), si(alimenté, vpp-ver:pper, alimenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(forte, adj-adj, fort, [dr(0,n,n)-1]), si(opposition, nc-nom, opposition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(îles, nc-nom, île, [n-1]), si('Malouines', npp-nam, 'Malouines', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1519, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(habitants, nc-nom, habitant, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(îles, nc-nom, île, [n-1]), si('Malouines', npp-nam, 'Malouines', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(bloqué, vpp-ver:pper, bloquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(voyage, nc-nom, voyage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marine, nc-nom, marine, [n-1]), si(argentine, adj-adj, argentin, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1520, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(lie, v-ver:pres, lier, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(long, adj-adj, long, [dr(0,n,n)-1]), si(terme, nc-nom, terme, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(concessions, nc-nom, concession, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(partager, vinf-ver:infi, partager, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(pétrolière, adj-adj, pétrolier, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(lever, vinf-ver:infi, lever, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(embargo, nc-nom, embargo, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1521, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(lève, v-ver:pres, lever, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(embargo, nc-nom, embargo, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1522, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('ECGD', npp-abr, 'ECGD', [n-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(suite, nc-nom, suite, [np-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(succès, nc-nom, succès, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(offre, nc-nom, offre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('Babcock', npp-nam, 'Babcock', [dl(0,n,n)-1]), si('International', npp-nam, 'International', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fourniture, nc-nom, fourniture, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(équipements, nc-nom, équipement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(inspection, nc-nom, inspection, [n-1]), si(contrôlés, vpp-ver:pper, contrôler, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(centrale, nc-nom, centrale, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Atucha', npp-nam, 'Atucha', [np-1]), si('II', adj-num, 'II', [dl(0,np,np)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(construction, nc-nom, construction, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si(miles, nc-nom, mile, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('nord-ouest', nc-nom, 'nord-ouest', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Buenos', npp-nam, 'Buenos', [np-1]), si('Aires', npp-nam, 'Aires', [dl(0,s,txt)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1523, Result) :-
      prob_parse([ si('Babcock', npp-nam, 'Babcock', [dr(0,np,np)-1]), si('International', npp-nam, 'International', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fourni, vpp-ver:pper, fournir, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(expertise, nc-nom, expertise, [n-1]), si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1524, Result) :-
      prob_parse([ si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(front, nc-nom, front, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(domestique, adj-adj, domestique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(revenu, nc-nom, revenu, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(12, det-num, 12, [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,np),n)-1]), si(cent, pro-num, cent, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si(914, det-num, 914, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(volume, nc-nom, volume, [n-1]), si(unitaire, adj-adj, unitaire, [dl(0,n,n)-1]), si(légèrement, adv-adv, légèrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1525, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(revenu, nc-nom, revenu, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1526, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(termes, nc-nom, terme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bénéfices, nc-nom, bénéfice, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(forte, adj-adj, fort, [dr(0,n,n)-1]), si(progression, nc-nom, progression, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(observée, vpp-ver:pper, observer, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(division, nc-nom, division, [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), si('Morris', npp-nam, 'Morris', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1527, Result) :-
      prob_parse([ si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), si('Morris', npp-nam, 'Morris', [np-1]), si(progresse, v-ver:pres, progresser, [dl(0,np,s)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1528, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(gênant, adj-adj, gênant, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(éleveurs, nc-nom, éleveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bétail, nc-nom, bétail, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Amazonie', nc-nom, 'Amazonie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(coupent, v-ver:pres, couper, [dr(0,dl(0,np,s),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(blanc, nc-nom, blanc, [n-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(vastes, adj-adj, vaste, [dr(0,n,n)-1]), si(étendues, nc-nom, étendue, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(arbres, nc-nom, arbre, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), si(paître, vinf-ver:infi, paître, [dl(0,np,s_inf)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bétail, nc-nom, bétail, [n-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(boeuf, nc-nom, boeuf, [n-1]), si(destiné, vpp-ver:pper, destiner, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(exporté, vpp-ver:pper, exporter, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(principalement, adv-adv, principalement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(développés, vpp-ver:pper, développer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1529, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(éleveurs, nc-nom, éleveur, [n-1]), si(coupent, v-ver:pres, couper, [dr(0,dl(0,np,s),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(blanc, nc-nom, blanc, [n-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(vastes, adj-adj, vaste, [dr(0,n,n)-1]), si(étendues, nc-nom, étendue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(forêt, nc-nom, forêt, [n-1]), si(amazonienne, adj-adj, amazonien, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), si(paître, vinf-ver:infi, paître, [dl(0,np,s_inf)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bétail, nc-nom, bétail, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1530, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(prochaine, adj-adj, prochain, [dr(0,n,n)-1]), si(étape, nc-nom, étape, [n-1]), si(utile, adj-adj, utile, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(braconnage, nc-nom, braconnage, [n-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pression, nc-nom, pression, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gouvernements, nc-nom, gouvernement, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(présent, nc-nom, présent, [n-1]), si(adopté, vpp-ver:pper, adopter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(attitude, nc-nom, attitude, [n-1]), si(détendue, adj-adj, détendu, [dl(0,n,n)-1]), si(envers, p-prp, envers, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(importation, nc-nom, importation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(interdits, vpp-ver:pper, interdire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1531, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(lutte, nc-nom, lutte, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(braconnage, nc-nom, braconnage, [n-1]), si(passe, v-ver:pres, passer, [dr(0,dl(0,np,s),pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pressions, nc-nom, pression, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(gouvernements, nc-nom, gouvernement, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(autorisent, v-ver:pres, autoriser, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(importation, nc-nom, importation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(produits, nc-nom, produit, [n-1]), si(interdits, vpp-ver:pper, interdire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1532, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(variété, nc-nom, variété, [n-1]), si(courante, adj-adj, courant, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(euthanasie, nc-nom, euthanasie, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),s_q)-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(atteint, v-ver:pres, atteindre, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(incapacité, nc-nom, incapacité, [n-1]), si(permanente, adj-adj, permanent, [dl(0,n,n)-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(maladie, nc-nom, maladie, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(phase, nc-nom, phase, [n-1]), si(terminale, adj-adj, terminal, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(retiré, vpp-ver:pper, retirer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintien, nc-nom, maintien, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(vie, nc-nom, vie, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(demande, nc-nom, demande, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(demande, nc-nom, demande, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(conjoint, nc-nom, conjoint, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(proche, adj-adj, proche, [dr(0,n,n)-1]), si(parent, nc-nom, parent, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(tuteur, nc-nom, tuteur, [n-1]), si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), si(simplement, adv-adv, simplement, [dr(0,pp,pp)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(médicales, adj-adj, médical, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(approbation, nc-nom, approbation, [n-1]), si(légale, adj-adj, légal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1533, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(variété, nc-nom, variété, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(euthanasie, nc-nom, euthanasie, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(patient, nc-nom, patient, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(retiré, vpp-ver:pper, retirer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(maintien, nc-nom, maintien, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(vie, nc-nom, vie, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(approbation, nc-nom, approbation, [n-1]), si(légale, adj-adj, légal, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1534, Result) :-
      prob_parse([ si('Leakey', npp-nam, 'Leakey', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(estimé, vpp-ver:pper, estimer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faune, nc-nom, faune, [n-1]), si(sauvage, adj-adj, sauvage, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Kenya', npp-nam, 'Kenya', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si('sous-tend', v-ver:pres, 'sous-tend', [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(industrie, nc-nom, industrie, [n-1]), si(touristique, adj-adj, touristique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(450, det-num, 450, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), si(an, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pouvait, v-ver:impf, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(gérée, vpp-ver:pper, gérer, [dl(0,np,s_pass)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(rentable, adj-adj, rentable, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(durable, adj-adj, durable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1535, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(faune, nc-nom, faune, [n-1]), si(sauvage, adj-adj, sauvage, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Kenya', npp-nam, 'Kenya', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(gérée, vpp-ver:pper, gérer, [dl(0,np,s_pass)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), si(manière, nc-nom, manière, [n-1]), si(rentable, adj-adj, rentable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1536, Result) :-
      prob_parse([ si('Chassés', vpp-ver:pper, 'Chassés', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), si(dépouillés, vpp-ver:pper, dépouiller, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(défenses, nc-nom, défense, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(peau, nc-nom, peau, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(braconniers, nc-nom, braconnier, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(éléphants, nc-nom, éléphant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(effondré, vpp-ver:pper, effondrer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si('1,2', det-num, '1,2', [dr(0,np,n)-1]), si(million, nc-nom, million, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('600.000', pro-num, '600.000', [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(décennie, nc-nom, décennie, [n-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cites', npp-nam, 'Cites', [n-1]), si(interdise, vs-ver:subp, interdire, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(commerce, nc-nom, commerce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ivoire, nc-nom, ivoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1537, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(éléphants, nc-nom, éléphant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si('Afrique', npp-nam, 'Afrique', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(décimée, vpp-ver:pper, décimer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(braconniers, nc-nom, braconnier, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1538, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(citent, v-ver:pres, citer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(recherches, nc-nom, recherche, [n-1]), si(savantes, adj-adj, savant, [dl(0,n,n)-1]), si(montrant, vpr-ver:ppre, montrer, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(jeunes, adj-adj, jeune, [dr(0,n,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(écoles, nc-nom, école, [n-1]), si(mixtes, adj-adj, mixte, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(tendance, nc-nom, tendance, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(remettre, vinf-ver:infi, remettre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(débats, nc-nom, débat, [n-1]), si(intellectuels, adj-adj, intellectuel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1539, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(jeunes, adj-adj, jeune, [dr(0,n,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(collèges, nc-nom, collège, [n-1]), si(mixtes, adj-adj, mixte, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(tendance, nc-nom, tendance, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), si(remettre, vinf-ver:infi, remettre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(hommes, nc-nom, homme, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1540, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(collèges, nc-nom, collège, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(mixtes, adj-adj, mixte, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(susceptibles, adj-adj, susceptible, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(diplômées, vpp-ver:pper, diplômer, [dl(0,np,s_pass)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(diplômes, nc-nom, diplôme, [n-1]), si(avancés, vpp-ver:pper, avancé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1541, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(susceptibles, adj-adj, susceptible, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(diplômes, nc-nom, diplôme, [n-1]), si(avancés, vpp-ver:pper, avancé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1542, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(classement, nc-nom, classement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(résultats, nc-nom, résultat, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(baccalauréat, nc-nom, baccalauréat, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(écoles, nc-nom, école, [n-1]), si(indépendantes, adj-adj, indépendant, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(analysé, vpp-ver:pper, analyser, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Financial', npp-nam, 'Financial', [dr(0,n,n)-1]), si('Times', npp-nam, 'Times', [n-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1543, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Financial', npp-nam, 'Financial', [dr(0,n,n)-1]), si('Times', npp-nam, 'Times', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(analysé, vpp-ver:pper, analyser, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(classements, nc-nom, classement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(écoles, nc-nom, école, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1544, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(garçons, nc-nom, garçon, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(filles, nc-nom, fille, [n-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(séparés, vpp-ver:pper, séparer, [dl(0,np,s_pass)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(éducation, nc-nom, éducation, [n-1]), si(sexuelle, adj-adj, sexuel, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(collège, nc-nom, collège, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1545, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(garçons, nc-nom, garçon, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(filles, nc-nom, fille, [n-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(séparés, vpp-ver:pper, séparer, [dl(0,np,s_pass)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(collège, nc-nom, collège, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1546, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(infirmière, nc-nom, infirmier, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Michaela', npp-nam, 'Michaela', [dr(0,np,np)-1]), si('Roeder', npp-nam, 'Roeder', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(31, det-num, 31, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(reconnue, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(six, det-num, six, [dr(0,np,n)-1]), si(chefs, nc-nom, chef, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(accusation, nc-nom, accusation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(homicide, nc-nom, homicide, [n-1]), si(involontaire, adj-adj, involontaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(compassion, nc-nom, compassion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1547, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(infirmière, nc-nom, infirmier, [n-1]), si(allemande, adj-adj, allemand, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(reconnue, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(homicide, nc-nom, homicide, [n-1]), si(involontaire, adj-adj, involontaire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(compassion, nc-nom, compassion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1548, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(sondage, nc-nom, sondage, [n-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(segments, nc-nom, segment, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(public, nc-nom, public, [n-1]), si(soutiennent, v-ver:pres, soutenir, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(politiques, nc-nom, politique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(droit, nc-nom, droit, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1549, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(public, nc-nom, public, [n-1]), si(soutient, v-ver:pres, soutenir, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1550, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(chrétiens, nc-nom, chrétien, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(nés, vpp-ver:pper, naître, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(nouveau, nc-nom, nouveau, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(religieuses, adj-adj, religieux, [dl(0,n,n)-1]), si(pensent, v-ver:pres, penser, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(actes, nc-nom, acte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(on, cls-pro:per, on, [np-1]), si(appelle, v-ver:pres, appeler, [dr(0,dr(0,dl(0,np,s),np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(meurtre, nc-nom, meurtre, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(compassion, nc-nom, compassion, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conjoints, nc-nom, conjoint, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(parfois, adv-adv, parfois, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(justifiés, vpp-ver:pper, justifier, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1551, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(chrétiens, nc-nom, chrétien, [n-1]), si(justifient, v-ver:pres, justifier, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(meurtre, nc-nom, meurtre, [n-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(compassion, nc-nom, compassion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1552, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tenté, vpp-ver:pper, tenter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(racheter, vinf-ver:infi, racheter, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(biscuits, nc-nom, biscuit, [n-1]), si(berlinoise, adj-adj, berlinois, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('RJR', npp-abr, 'RJR', [dr(0,np,np)-1]), si('Nabisco', npp-nam, 'Nabisco', [np-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(surenchéri, vpp-ver:pper, surenchérir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(géant, nc-nom, géant, [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agroalimentaire, nc-nom, agroalimentaire, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('BSN', npp-abr, 'BSN', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1553, Result) :-
      prob_parse([ si('BSN', npp-abr, 'BSN', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(acheté, vpp-ver:pper, acheter, [dr(0,dl(0,np,s_ppart),np)-1]), si('RJR', npp-abr, 'RJR', [dr(0,np,np)-1]), si('Nabisco', npp-nam, 'Nabisco', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1554, Result) :-
      prob_parse([ si('BAT', npp-nam, 'BAT', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(voulu, vpp-ver:pper, vouloir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(confirmer, vinf-ver:infi, confirmer, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(confirmé, vpp-ver:pper, confirmer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(trois, adj-num, trois, [dr(0,n,n)-1]), si(majors, nc-nom, major, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si('BAT', npp-abr, 'BAT', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('RJ', npp-abr, 'RJ', [dr(0,np,np)-1]), si('Reynolds', npp-nam, 'Reynolds', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), si('Morris', npp-nam, 'Morris', [np-1]), si('-', ponct-pun, '-', [let-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(coude, nc-nom, coude, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(coude, nc-nom, coude, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(termes, nc-nom, terme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(investissement, nc-nom, investissement, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancienne, adj-adj, ancien, [dr(0,n,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1555, Result) :-
      prob_parse([ si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), si(majors, nc-nom, major, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tabac, nc-nom, tabac, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entrées, vpp-ver:pper, entrer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancienne, adj-adj, ancien, [dr(0,n,n)-1]), si('Union', npp-nam, 'Union', [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1556, Result) :-
      prob_parse([ si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), si('Morris', npp-nam, 'Morris', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(cité, vpp-ver:pper, citer, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(forts, adj-adj, fort, [dr(0,n,n)-1]), si(gains, nc-nom, gain, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(volume, nc-nom, volume, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Allemagne', npp-nam, 'Allemagne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Italie', npp-nam, 'Italie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('France', npp-nam, 'France', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Espagne', npp-nam, 'Espagne', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si(centrale, adj-adj, central, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(orientale, adj-adj, oriental, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Extrême-Orient', npp-nam, 'Extrême-Orient', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Japon', npp-nam, 'Japon', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Corée', npp-nam, 'Corée', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Brésil', npp-nam, 'Brésil', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1557, Result) :-
      prob_parse([ si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), si('Morris', npp-nam, 'Morris', [np-1]), si(réalise, v-ver:pres, réaliser, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(forts, adj-adj, fort, [dr(0,n,n)-1]), si(bénéfices, nc-nom, bénéfice, [n-1]), si(également, adv-adv, également, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Europe', npp-nam, 'Europe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1558, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), si(an, nc-nom, an, [n-1]), si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(capture, nc-nom, capture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Noriega', npp-nam, 'Noriega', [np-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(entendait, v-ver:impf, entendre, [dr(0,dl(0,np,s),np)-1]), si(encore, adv-adv, encore, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(arguments, nc-nom, argument, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(question, nc-nom, question, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si('Bush', npp-nam, 'Bush', [np-1]), si(pouvait, v-ver:impf, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(cité, vpp-ver:pper, citer, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(comparaître, vinf-ver:infi, comparaître, [dl(0,np,s_inf)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(tribunal, nc-nom, tribunal, [n-1]), si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(audience, nc-nom, audience, [n-1]), si(préliminaire, adj-adj, préliminaire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plainte, nc-nom, plainte, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Panama', npp-nam, 'Panama', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1559, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(cité, vpp-ver:pper, citer, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si('Bush', npp-nam, 'Bush', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(comparaître, vinf-ver:infi, comparaître, [dl(0,np,s_inf)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1560, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(condamner, vinf-ver:infi, condamner, [dr(0,dl(0,np,s_inf),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(action, nc-nom, action, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(alors, adv-adv, alors, [dr(0,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Soviétiques', nc-nam, 'Soviétiques', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(défier, vinf-ver:infi, défier, [dr(0,dl(0,np,s_inf),np)-1]), si(cet, det-pro:dem, ce, [dr(0,np,n)-1]), si(organisme, nc-nom, organisme, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tout, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(défié, vpp-ver:pper, défier, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(condamnation, nc-nom, condamnation, [n-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(embargo, nc-nom, embargo, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Nicaragua', npp-nam, 'Nicaragua', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1561, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(embargo, nc-nom, embargo, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Nicaragua', npp-nam, 'Nicaragua', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1562, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(colonel, nc-nom, colonel, [n-1]), si('Kadhafi', npp-nam, 'Kadhafi', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ouvert, vpp-ver:pper, ouvrir, [dr(0,dl(0,np,s_ppart),np)-1]), si(séparément, adv-adv, séparément, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(action, nc-nom, action, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(accusant, vpr-ver:ppre, accuser, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(violé, vpp-ver:pper, violer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1563, Result) :-
      prob_parse([ si('Kadhafi', npp-nam, 'Kadhafi', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accusé, vpp-ver:pper, accuser, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(violé, vpp-ver:pper, violer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1564, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Libye', npp-nam, 'Libye', [n-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cible, nc-nom, cible, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(raids, nc-nom, raid, [n-1]), si(aériens, adj-adj, aérien, [dl(0,n,n)-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1986, pro-num, 1986, [np-1]), si(',', ponct-pun, ',', [let-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(lié, vpp-ver:pper, lier, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Libye', npp-nam, 'Libye', [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(bombardement, nc-nom, bombardement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(discothèque, nc-nom, discothèque, [n-1]), si(berlinoise, adj-adj, berlinois, [dl(0,n,n)-1]), si(fréquentée, vpp-ver:pper, fréquenter, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(militaires, nc-nom, militaire, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1565, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(effectué, vpp-ver:pper, effectuer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(raids, nc-nom, raid, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Libye', npp-nam, 'Libye', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1566, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rejeté, vpp-ver:pper, rejeter, [dr(0,dl(0,np,s_ppart),np)-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(demande, nc-nom, demande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Libye', npp-nam, 'Libye', [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(interdire, vinf-ver:infi, interdire, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(punitives, adj-adj, punitif, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(obliger, vinf-ver:infi, obliger, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), si('Tripoli', npp-nam, 'Tripoli', [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(livrer, vinf-ver:infi, livrer, [dr(0,dl(0,np,s_inf),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(soupçonnés, vpp-ver:pper, soupçonner, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(exploser, vinf-ver:infi, exploser, [dl(0,np,s_inf)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1988, pro-num, 1988, [np-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(avion, nc-nom, avion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(ligne, nc-nom, ligne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Pan', npp-nam, 'Pan', [dr(0,n,n)-1]), si('Am', npp-nam, 'Am', [n-1]), si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('Lockerbie', npp-nam, 'Lockerbie', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Ecosse', npp-nam, 'Ecosse', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1567, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Libye', npp-nam, 'Libye', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(injonction, nc-nom, injonction, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1568, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(revendications, nc-nom, revendication, [n-1]), si(bosniaques, adj-adj, bosniaque, [dl(0,n,n)-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(tentatives, nc-nom, tentative, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(annexion, nc-nom, annexion, [n-1]), si(serbes, adj-adj, serbe, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1993, pro-num, 1993, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(portées, vpp-ver:pper, porter, [dr(0,dl(0,np,s_pass),pp)-1]), si(devant, p-prp, devant, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1569, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entendu, vpp-ver:pper, entendre, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Bosnie', npp-nam, 'Bosnie', [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Serbie', npp-nam, 'Serbie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1570, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tranché, vpp-ver:pper, trancher, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Tchad', npp-nam, 'Tchad', [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(différend, nc-nom, différend, [n-1]), si(frontalier, adj-adj, frontalier, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Libye', npp-nam, 'Libye', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(provoqué, vpp-ver:pper, provoquer, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(guerres, nc-nom, guerre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1571, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(différend, nc-nom, différend, [n-1]), si(frontalier, adj-adj, frontalier, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Tchad', npp-nam, 'Tchad', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Libye', npp-nam, 'Libye', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(tranché, vpp-ver:pper, trancher, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Tchad', npp-nam, 'Tchad', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1572, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(refusé, vpp-ver:pper, refuser, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(comparaître, vinf-ver:infi, comparaître, [dr(0,dl(0,np,s_inf),pp)-1]), si(devant, p-prp, devant, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si('Washington', npp-nam, 'Washington', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(libération, nc-nom, libération, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(otages, nc-nom, otage, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Téhéran', npp-nam, 'Téhéran', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1573, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(otages, nc-nom, otage, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(libérés, vpp-ver:pper, libérer, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Téhéran', npp-nam, 'Téhéran', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1574, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(refusé, vpp-ver:pper, refuser, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(comparaître, vinf-ver:infi, comparaître, [dr(0,dl(0,np,s_inf),pp)-1]), si(devant, p-prp, devant, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si('Washington', npp-nam, 'Washington', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(libération, nc-nom, libération, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(otages, nc-nom, otage, [n-1]), si(américains, adj-adj, américain, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Téhéran', npp-nam, 'Téhéran', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1575, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entendu, vpp-ver:pper, entendre, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(appels, nc-nom, appel, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(libération, nc-nom, libération, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(otages, nc-nom, otage, [n-1]), si(détenus, vpp-ver:pper, détenir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Iran', npp-nam, 'Iran', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1576, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Haye', npp-nam, 'Haye', [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(composée, vpp-ver:pper, composer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(quinze, det-num, quinze, [dr(0,np,n)-1]), si(juges, nc-nom, juge, [n-1]), si(permanents, adj-adj, permanent, [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,np),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(juges, nc-nom, juge, [n-1]), si(désignés, vpp-ver:pper, désigner, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parties, nc-nom, party, [n-1]), si(impliquées, vpp-ver:pper, impliquer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(litige, nc-nom, litige, [n-1]), si(considéré, vpp-ver:pper, considérer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1577, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_inf)),np)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(juges, nc-nom, juge, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1578, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(internationale, adj-adj, international, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(justice, nc-nom, justice, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(')', ponct-pun, ')', [let-1]), si(',', ponct-pun, ',', [let-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Haye', npp-nam, 'Haye', [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(composée, vpp-ver:pper, composer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(quinze, det-num, quinze, [dr(0,np,n)-1]), si(juges, nc-nom, juge, [n-1]), si(permanents, adj-adj, permanent, [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,dl(0,np,np),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(juges, nc-nom, juge, [n-1]), si(désignés, vpp-ver:pper, désigner, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parties, nc-nom, party, [n-1]), si(impliquées, vpp-ver:pper, impliquer, [dr(0,dl(0,n,n),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(litige, nc-nom, litige, [n-1]), si(considéré, vpp-ver:pper, considérer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1579, Result) :-
      prob_parse([ si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), si(juges, nc-nom, juge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(nommés, vpp-ver:pper, nommer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parties, nc-nom, party, [n-1]), si(concernées, vpp-ver:pper, concerner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1580, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pouvoir, nc-nom, pouvoir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(appliquer, vinf-ver:infi, appliquer, [dr(0,dl(0,np,s_inf),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(ordonnances, nc-nom, ordonnance, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(décisions, nc-nom, décision, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(traditionnellement, adv-adv, traditionnellement, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(certain, adj-adj, certain, [dr(0,n,n)-1]), si(poids, nc-nom, poids, [n-1]), si(diplomatique, adj-adj, diplomatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1581, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(décisions, nc-nom, décision, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cour', npp-nam, 'Cour', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(poids, nc-nom, poids, [n-1]), si(diplomatique, adj-adj, diplomatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1582, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,np,np),n)-1]), si(premières, adj-num, premier, [dr(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,n,n),dia(0,box(0,n))),dr(0,dl(0,n,n),n)),dr(0,dl(0,n,n),dia(0,box(0,n))))-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(anciennes, adj-adj, ancien, [dr(0,n,n)-1]), si(décisions, nc-nom, décision, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(concerne, v-ver:pres, concerner, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(incident, nc-nom, incident, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(canal, nc-nom, canal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Corfou', npp-nam, 'Corfou', [np-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1946, pro-num, 1946, [np-1]), si(',', ponct-pun, ',', [let-1]), si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(destroyers, nc-nom, destroyer, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(heurté, vpp-ver:pper, heurter, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mines, nc-nom, mine, [n-1]), si(posées, vpp-ver:pper, poser, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Albanais', nc-nam, 'Albanais', [n-1]), si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(exerçaient, v-ver:impf, exercer, [dr(0,dl(0,np,s),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(passage, nc-nom, passage, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(canal, nc-nom, canal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Corfou', npp-nam, 'Corfou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1583, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(différend, nc-nom, différend, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Albanie', npp-nam, 'Albanie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(incident, nc-nom, incident, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Corfou', npp-nam, 'Corfou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(duré, vpp-ver:pper, durer, [dr(0,dl(0,np,s_ppart),np)-1]), si(longtemps, adv-adv, longtemps, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1584, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jugé, vpp-ver:pper, juger, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1948, pro-num, 1948, [np-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Albanie', npp-nam, 'Albanie', [n-1]), si(devait, v-ver:impf, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(payer, vinf-ver:infi, payer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si('843.947', det-num, '843.947', [dr(0,np,n)-1]), si(livres, nc-nom, livre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1585, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si(1948, pro-num, 1948, [np-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(statué, vpp-ver:pper, statuer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(faveur, nc-nom, faveur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Albanie', npp-nam, 'Albanie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1586, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(différend, nc-nom, différend, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Honduras', npp-nam, 'Honduras', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Salvador', npp-nam, 'Salvador', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sujet, nc-nom, sujet, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réglé, vpp-ver:pper, régler, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(compromis, nc-nom, compromis, [n-1]), si(élaboré, vpp-ver:pper, élaborer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('CIJ', npp-abr, 'CIJ', [n-1]), si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1587, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Honduras', npp-nam, 'Honduras', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Salvador', npp-nam, 'Salvador', [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(sujet, nc-nom, sujet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(frontières, nc-nom, frontière, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1588, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(experts, nc-nom, expert, [n-1]), si(estiment, v-ver:pres, estimer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(seuls, adv-adv, seul, [dr(0,np,np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(oeuvres, nc-nom, oeuvre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(art, nc-nom, art, [n-1]), si(volées, vpp-ver:pper, voler, [dl(0,n,n)-1]), si(retrouvent, v-ver:pres, retrouver, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), si(jour, nc-nom, jour, [n-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(propriétaire, nc-nom, propriétaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1589, Result) :-
      prob_parse([ si('Seulement', adv-adv, 'Seulement', [dr(0,np,np)-1]), si(5, det-num, 5, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(oeuvres, nc-nom, oeuvre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(art, nc-nom, art, [n-1]), si(volées, vpp-ver:pper, voler, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(restituées, vpp-ver:pper, restituer, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(propriétaires, nc-nom, propriétaire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1590, Result) :-
      prob_parse([ si('Vingt-huit', det-num, 'Vingt-huit', [dr(0,np,n)-1]), si('chefs-d\'oeuvre', nc-nom, 'chefs-d\'oeuvre', [n-1]), si(français, adj-adj, français, [dl(0,n,n)-1]), si(saisis, vpp-ver:pper, saisir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nazis, nc-nom, nazi, [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), si('Guerre', nc-nam, 'Guerre', [n-1]), si(mondiale, adj-adj, mondial, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(tableaux, nc-nom, tableau, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Monet', npp-nam, 'Monet', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Renoir', npp-nam, 'Renoir', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Gauguin', npp-nam, 'Gauguin', [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvés, vpp-ver:pper, retrouver, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(armoire, nc-nom, armoire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(musée, nc-nom, musée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si(',', ponct-pun, ',', [let-1]), si(rapporte, v-ver:pres, rapporter, [dr(0,dl(1,s,s),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(magazine, nc-nom, magazine, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(information, nc-nom, information, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1591, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si('chefs-d\'oeuvre', nc-nom, 'chefs-d\'oeuvre', [n-1]), si(saisis, vpp-ver:pper, saisir, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nazis, nc-nom, nazi, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(retrouvés, vpp-ver:pper, retrouver, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1592, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ALR', npp-abr, 'ALR', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(fondée, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(consortium, nc-nom, consortium, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(maisons, nc-nom, maison, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(vente, nc-nom, vente, [n-1]), si(aux, p+d-prp:det, à, [dr(0,dl(0,n,n),n)-1]), si(enchères, nc-nom, enchère, [n-1]), si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), si('Sotheby\'s', npp-nam, 'Sotheby\'s', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Phillips', npp-nam, 'Phillips', [np-1]), si(')', ponct-pun, ')', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1593, Result) :-
      prob_parse([ si('Sotheby\'s', npp-nam, 'Sotheby\'s', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Phillips', npp-nam, 'Phillips', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fondé, vpp-ver:pper, fonder, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('ALR', npp-abr, 'ALR', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1594, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(conseil, nc-nom, conseil, [n-1]), si(municipal, adj-adj, municipal, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(inscrit, vpp-ver:pper, inscrire, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(budget, nc-nom, budget, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(somme, nc-nom, somme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('7.300', det-num, '7.300', [dr(0,np,n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(formation, nc-nom, formation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(agent, nc-nom, agent, [n-1]), si('Ron', npp-nam, 'Ron', [dl(0,n,n)-1]), si('Inman', npp-nam, 'Inman', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(chien, nc-nom, chien, [n-1]), si('Waldo', npp-nam, 'Waldo', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1595, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(conseil, nc-nom, conseil, [n-1]), si(municipal, adj-adj, municipal, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(payé, vpp-ver:pper, payer, [dr(0,dl(0,np,s_ppart),np)-1]), si('7.300', det-num, '7.300', [dr(0,np,n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(entraîner, vinf-ver:infi, entraîner, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(chien, nc-nom, chien, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1596, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(international, adj-adj, international, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Génome', npp-nam, 'Génome', [n-1]), si('Humain', npp-nam, 'Humain', [dl(0,n,n)-1]), si(stimule, v-ver:pres, stimuler, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(progrès, nc-nom, progrès, [n-1]), si(rapides, adj-adj, rapide, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(automatisation, nc-nom, automatisation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1597, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Génome', npp-nam, 'Génome', [n-1]), si('Humain', npp-nam, 'Humain', [dl(0,n,n)-1]), si(bénéficie, v-ver:pres, bénéficier, [dr(0,dl(0,np,s),pp)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(progrès, nc-nom, progrès, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(automatisation, nc-nom, automatisation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(laboratoires, nc-nom, laboratoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1598, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(trois, adj-num, trois, [dr(0,n,n)-1]), si(partenaires, nc-nom, partenaire, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(développé, vpp-ver:pper, développer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(robotique, adj-adj, robotique, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(aider, vinf-ver:infi, aider, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cellules, nc-nom, cellule, [n-1]), si(clonées, adj-adj, cloner, [dl(0,n,n)-1]), si(nécessaires, adj-adj, nécessaire, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(recherche, nc-nom, recherche, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(génétique, nc-nom, génétique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1599, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(robots, nc-nom, robot, [n-1]), si(aident, v-ver:pres, aider, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(scientifiques, nc-nom, scientifique, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(cloner, vinf-ver:infi, cloner, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cellules, nc-nom, cellule, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1600, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si('ICRF', npp-abr, 'ICRF', [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(prélève, v-ver:pres, prélever, [dr(0,dl(0,np,s),np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ensuite, adv-adv, ensuite, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(colonies, nc-nom, colonie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(apparence, nc-nom, apparence, [n-1]), si(saine, adj-adj, sain, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(bloc, nc-nom, bloc, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(96, det-num, 96, [dr(0,np,n)-1]), si(broches, nc-nom, broche, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(ressort, nc-nom, ressort, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(déplace, v-ver:pres, déplacer, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cellules, nc-nom, cellule, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(plats, nc-nom, plat, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(analyse, nc-nom, analyse, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(poussées, vpp-ver:pper, pousser, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1601, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si('ICRF', npp-abr, 'ICRF', [dl(0,n,n)-1]), si(prélève, v-ver:pres, prélever, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(cellules, nc-nom, cellule, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(analyse, nc-nom, analyse, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(poussées, vpp-ver:pper, pousser, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1602, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(utilisateur, nc-nom, utilisateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(technologie, nc-nom, technologie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(automatisation, nc-nom, automatisation, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(industrie, nc-nom, industrie, [n-1]), si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fabrication, nc-nom, fabrication, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si(portables, adj-adj, portable, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(usine, nc-nom, usine, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1603, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(technologie, nc-nom, technologie, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(automatisation, nc-nom, automatisation, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisée, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fabrication, nc-nom, fabrication, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(ordinateurs, nc-nom, ordinateur, [n-1]), si(portables, adj-adj, portable, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1604, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(existe, v-ver:pres, exister, [dr(0,dl(0,np,s),np)-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(robots, nc-nom, robot, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(charger, vinf-ver:infi, charger, [dr(0,dl(0,np,s_inf),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(décharger, vinf-ver:infi, décharger, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bandes, nc-nom, bande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mémoire, nc-nom, mémoire, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(ordonnanceurs, nc-nom, ordonnanceur, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si('pré-organiser', vinf-ver:infi, 'pré-organiser', [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(flux, nc-nom, flux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(travail, nc-nom, travail, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(période, nc-nom, période, [n-1]), si(donnée, vpp-ver:pper, donner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1605, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si(informatiques, adj-adj, informatique, [dl(0,n,n)-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(utilisent, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(robots, nc-nom, robot, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(charger, vinf-ver:infi, charger, [dr(0,dl(0,np,s_inf),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(décharger, vinf-ver:infi, décharger, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bandes, nc-nom, bande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mémoire, nc-nom, mémoire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1606, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(robots, nc-nom, robot, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(assemblage, nc-nom, assemblage, [n-1]), si(final, adj-adj, final, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(automobiles, nc-nom, automobile, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pulvérisation, nc-nom, pulvérisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(peinture, nc-nom, peinture, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fournisseurs, nc-nom, fournisseur, [n-1]), si(espèrent, v-ver:pres, espérer, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(marchés, nc-nom, marché, [n-1]), si(maintenant, adv-adv, maintenant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(technologie, nc-nom, technologie, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(preuves, nc-nom, preuve, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1607, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(robots, nc-nom, robot, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dr(0,dl(0,np,s_pass),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(travaux, nc-nom, travail, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(assemblage, nc-nom, assemblage, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1608, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(caractéristiques, nc-nom, caractéristique, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(innovantes, adj-adj, innovant, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Thamesport', npp-nam, 'Thamesport', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contrôle, nc-nom, contrôle, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(périphériques, nc-nom, périphérique, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(distance, nc-nom, distance, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1609, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Thamesport', npp-nam, 'Thamesport', [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(périphériques, nc-nom, périphérique, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(distance, nc-nom, distance, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1610, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(supervise, v-ver:pres, superviser, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(mouvement, nc-nom, mouvement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(toutes, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(machines, nc-nom, machine, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(port, nc-nom, port, [n-1]), si(',', ponct-pun, ',', [let-1]), si(y, clo-pro:per, y, [cl_y-1]), si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(grues, nc-nom, grue, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), si(robots, nc-nom, robot, [n-1]), si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), si(monstres, nc-nom, monstre, [n-1]), si('navire-terre', nc-nom, 'navire-terre', [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(14, adj-num, 14, [dr(0,n,n)-1]), si(grues, nc-nom, grue, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(portique, nc-nom, portique, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(déchargent, v-ver:pres, décharger, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conteneurs, nc-nom, conteneur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(navires, nc-nom, navire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1611, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(robots, nc-nom, robot, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(utilisés, vpp-ver:pper, utiliser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(terminaux, nc-nom, terminal, [n-1]), si(maritimes, adj-adj, maritime, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(déplacer, vinf-ver:infi, déplacer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(conteneurs, nc-nom, conteneur, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(navires, nc-nom, navire, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1612, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(retarder, vinf-ver:infi, retarder, [dr(0,dl(0,np,s_inf),np)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mise, nc-nom, mise, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(oeuvre, nc-nom, oeuvre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(embarras, nc-nom, embarras, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('John', npp-nam, 'John', [dr(0,np,np)-1]), si('Redwood', npp-nam, 'Redwood', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1613, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(retardé, vpp-ver:pper, retarder, [dr(0,dl(0,np,s_ppart),np)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(législation, nc-nom, législation, [n-1]), si(concernant, vpr-ver:ppre, concerner, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(changements, nc-nom, changement, [n-1]), si(proposés, vpp-ver:pper, proposer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1614, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(profiter, vinf-ver:infi, profiter, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(interview, nc-nom, interview, [n-1]), si(prévue, vpp-ver:pper, prévoir, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(date, nc-nom, date, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(radio, nc-nom, radio, [n-1]), si('BBC', npp-abr, 'BBC', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(défendre, vinf-ver:infi, défendre, [dr(0,dl(0,np,s_inf),np)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), si(force, nc-nom, force, [n-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(projets, nc-nom, projet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(création, nc-nom, création, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(assemblée, nc-nom, assemblée, [n-1]), si(galloise, adj-adj, gallois, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1615, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(parti, nc-nom, parti, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(longtemps, adv-adv, longtemps, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(soutenu, vpp-ver:pper, soutenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(demandes, nc-nom, demande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Ecosse', npp-nam, 'Ecosse', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(assemblées, nc-nom, assemblée, [n-1]), si(indépendantes, adj-adj, indépendant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1616, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(poursuit, v-ver:pres, poursuivre, [dr(0,dl(0,np,s),np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si(projets, nc-nom, projet, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(structure, nc-nom, structure, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(local, adj-adj, local, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(organisant, vpr-ver:ppre, organiser, [dr(0,dl(0,np,s_ppres),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(élections, nc-nom, élection, [n-1]), si(fictives, adj-adj, fictif, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(unitaires, adj-adj, unitaire, [dl(0,n,n)-1]), si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(prochaine, adj-adj, prochain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1617, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(élections, nc-nom, élection, [n-1]), si(fictives, adj-adj, fictif, [dl(0,n,n)-1]), si(seront, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(organisées, vpp-ver:pper, organiser, [dl(0,np,s_pass)-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(prochaine, adj-adj, prochain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1618, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(prévu, vpp-ver:pper, prévoir, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(année, nc-nom, année, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), si(entrant, vpr-ver:ppre, entrer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1619, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(mis, vpp-ver:pper, mettre, [dr(0,dl(0,np,s_pass),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(délai, nc-nom, délai, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(an, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1620, Result) :-
      prob_parse([ si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), si(écoles, nc-nom, école, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expérimenté, vpp-ver:pper, expérimenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(coéducation, nc-nom, coéducation, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(revenues, vpp-ver:pper, revenir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(statut, nc-nom, statut, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(école, nc-nom, école, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(garçons, nc-nom, garçon, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1621, Result) :-
      prob_parse([ si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), si(écoles, nc-nom, école, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(expérimenté, vpp-ver:pper, expérimenter, [dr(0,dl(0,np,s_ppart),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(enseignement, nc-nom, enseignement, [n-1]), si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(mixte, adj-adj, mixte, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1622, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(gère, v-ver:pres, gérer, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(refuge, nc-nom, refuge, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(contrat, nc-nom, contrat, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(comté, nc-nom, comté, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1623, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(collabore, v-ver:pres, collaborer, [dr(0,dl(0,np,s),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(comté, nc-nom, comté, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1624, Result) :-
      prob_parse([ si('Chaque', det-pro:ind, 'Chaque', [dr(0,dr(0,s,s),n)-1]), si(nuit, nc-nom, nuit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(année, nc-nom, année, [n-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(minimum, nc-nom, minimum, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(140, det-num, 140, [dr(0,np,n)-1]), si(hommes, nc-nom, homme, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),pp)-1]), si(autrement, adv-adv, autrement, [dl(1,s,s)-1]), si(sans, p-prp, sans, [dr(0,pp,n)-1]), si(abri, nc-nom, abri, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(sans, p-prp, sans, [dr(0,pp,n)-1]), si(abri, nc-nom, abri, [n-1]), si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), si(ils, cls-pro:per, il, [np-1]), si(viennent, v-ver:pres, venir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(nous, clo-pro:per, nous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), si(',', ponct-pun, ',', [let-1]), si(dorment, v-ver:pres, dormir, [dl(0,np,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(lits, nc-nom, lit, [n-1]), si(propres, adj-adj, propre, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(centres, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réhabilitation, nc-nom, réhabilitation, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), si(adultes, nc-nom, adulte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', npp-nam, 'Salut', [n-1]), si(ici, adv-adv, ici, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Vallée', npp-nam, 'Vallée', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1625, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('sans-abri', nc-nom, 'sans-abri', [n-1]), si(peuvent, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(dormir, vinf-ver:infi, dormir, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(centres, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réhabilitation, nc-nom, réhabilitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Vallée', npp-nam, 'Vallée', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1626, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si('Angleterre', npp-nam, 'Angleterre', [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(travailleurs, nc-nom, travailleur, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(bénévoles, nc-nom, bénévole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(formés, vpp-ver:pper, former, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(travail, nc-nom, travail, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(proximité, nc-nom, proximité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(contact, nc-nom, contact, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(rue, nc-nom, rue, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1627, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(formé, vpp-ver:pper, former, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, p+d-prp:det, un, [dr(0,np,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), si(domicile, nc-nom, domicile, [n-1]), si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(travailleurs, nc-nom, travailleur, [n-1]), si(sociaux, adj-adj, social, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1628, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(recettes, nc-nom, recette, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(friperie, nc-nom, friperie, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(financé, vpp-ver:pper, financer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(service, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réinsertion, nc-nom, réinsertion, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(toxicomanes, nc-nom, toxicomane, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(alcooliques, nc-nom, alcoolique, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1629, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(friperies, nc-nom, friperie, [n-1]), si(financent, v-ver:pres, financer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(services, nc-nom, service, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(réinsertion, nc-nom, réinsertion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1630, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(banques, nc-nom, banque, [n-1]), si(alimentaires, adj-adj, alimentaire, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(gérés, vpp-ver:pper, gérer, [dl(0,np,s_pass)-1]), si(directement, adv-adv, directement, [dl(1,s,s)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(diverses, adj-adj, divers, [dr(0,np,n)-1]), si(villes, nc-nom, ville, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), si('Angeles', npp-nam, 'Angeles', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1631, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(gère, v-ver:pres, gérer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(banques, nc-nom, banque, [n-1]), si(alimentaires, adj-adj, alimentaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1632, Result) :-
      prob_parse([ si('Aux', p+d-prp:det, 'Aux', [dr(0,dr(0,s,s),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(propose, v-ver:pres, proposer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(abris, nc-nom, abri, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('SDF', nc-abr, 'SDF', [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(régions, nc-nom, région, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1633, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(propose, v-ver:pres, proposer, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(abris, nc-nom, abri, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('SDF', nc-abr, 'SDF', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1634, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(payé, vpp-ver:pper, payer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(transport, nc-nom, transport, [n-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(fournit, v-ver:pres, fournir, [dr(0,dl(0,np,s),np)-1]), si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(contribution, nc-nom, contribution, [n-1]), si(incitative, adj-adj, incitatif, [dl(0,n,n)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(collectes, nc-nom, collecte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(caritatives, adj-adj, caritatif, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(inciter, vinf-ver:infi, inciter, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(objectif, nc-nom, objectif, [n-1]), si(fixé, vpp-ver:pper, fixer, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1635, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(organise, v-ver:pres, organiser, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(transport, nc-nom, transport, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(matériaux, nc-nom, matériau, [n-1]), si(donnés, vpp-ver:pper, donner, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1636, Result) :-
      prob_parse([ si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), si(des, p+d-prp:det, un, [dr(0,pp_de,n)-1]), si(ouragans, nc-nom, ouragan, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Floride', npp-nam, 'Floride', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', npp-nam, 'Salut', [n-1]), si(collecte, v-ver:pres, collecter, [dr(0,dl(0,np,s),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), si(transmet, v-ver:pres, transmettre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(organismes, nc-nom, organisme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(secours, nc-nom, secours, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tout, adv-adv, tout, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(fournissant, vpr-ver:ppre, fournir, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), si('elle-même', pro-pro:per, 'elle-même', [dl(1,s,s)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(vêtements, nc-nom, vêtement, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(couvertures, nc-nom, couverture, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(nourriture, nc-nom, nourriture, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(affligés, nc-nom, affligé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1637, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Salut', nc-nam, 'Salut', [n-1]), si(apporte, v-ver:pres, apporter, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(aide, nc-nom, aide, [n-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(victimes, nc-nom, victime, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(ouragans, nc-nom, ouragan, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1638, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociations, nc-nom, négociation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(tchèques, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaques, adj-adj, slovaque, [dl(0,n,n)-1]), si(nouvellement, adv-adv, nouvellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(élus, vpp-ver:pper, élire, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avenir, nc-nom, avenir, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fédération, nc-nom, fédération, [n-1]), si(tchécoslovaque, adj-adj, tchécoslovaque, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(terminée, vpp-ver:pper, terminer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(impasse, nc-nom, impasse, [n-1]), si(hier, adv-adv, hier, [dr(0,dl(1,s,s),n)-1]), si(soir, nc-nom, soir, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1639, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(série, nc-nom, série, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociations, nc-nom, négociation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('Tchèques', nc-nam, 'Tchèques', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Slovaques', nc-nam, 'Slovaques', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(abouti, vpp-ver:pper, aboutir, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1640, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(neuf, det-num, neuf, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(discussions, nc-nom, discussion, [n-1]), si(',', ponct-pun, ',', [let-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Vaclav', npp-nam, 'Vaclav', [dr(0,np,np)-1]), si('Klaus', npp-nam, 'Klaus', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reconnu, vpp-ver:pper, reconnaître, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(trouvé, vpp-ver:pper, trouver, [dl(0,np,s_pass)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Meciar', npp-nam, 'Meciar', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1641, Result) :-
      prob_parse([ si('Vaclav', npp-nam, 'Vaclav', [dr(0,np,np)-1]), si('Klaus', npp-nam, 'Klaus', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Meciar', npp-nam, 'Meciar', [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parvenus, vpp-ver:pper, parvenir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1642, Result) :-
      prob_parse([ si('Déjà', adv-adv, 'Déjà', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(durement, adv-adv, durement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(touchée, vpp-ver:pper, toucher, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(effondrement, nc-nom, effondrement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(marchés, nc-nom, marché, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Comecon', npp-nam, 'Comecon', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fin, nc-nom, fin, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(froide, adj-adj, froid, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(désintégration, nc-nom, désintégration, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(économie, nc-nom, économie, [n-1]), si(tchécoslovaque, adj-adj, tchécoslovaque, [dl(0,n,n)-1]), si(fortement, adv-adv, fortement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(intégrée, vpp-ver:pper, intégrer, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(entraîné, vpp-ver:pper, entraîner, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(forte, adj-adj, fort, [dr(0,n,n)-1]), si(baisse, nc-nom, baisse, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(échanges, nc-nom, échange, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1643, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(marchés, nc-nom, marché, [n-1]), si(tchèques, adj-adj, tchèque, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(effondrés, vpp-ver:pper, effondrer, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1644, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(républiques, nc-nom, république, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(réussi, vpp-ver:pper, réussir, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(accord, nc-nom, accord, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(base, nc-nom, base, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(coexistence, nc-nom, coexistence, [n-1]), si(future, adj-adj, futur, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1645, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(républiques, nc-nom, république, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(accord, nc-nom, accord, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(coexister, vinf-ver:infi, coexister, [dl(0,np,s_inf)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1646, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(intérimaire, adj-adj, intérimaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(composé, vpp-ver:pper, composer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Tchèques', nc-nam, 'Tchèques', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Slovaques', nc-nom, 'Slovaques', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(parts, nc-nom, part, [n-1]), si(égales, adj-adj, égal, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(supervisera, v-ver:futu, superviser, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(séparation, nc-nom, séparation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1647, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(intérimaire, adj-adj, intérimaire, [dl(0,n,n)-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(composé, vpp-ver:pper, composer, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(parts, nc-nom, part, [n-1]), si(égales, adj-adj, égal, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Tchèques', nc-nam, 'Tchèques', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si('Slovaques', nc-nam, 'Slovaques', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1648, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(nouvellement, adv-adv, nouvellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(élus, vpp-ver:pper, élire, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(républiques, nc-nom, république, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accepté, vpp-ver:pper, accepter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(former, vinf-ver:infi, former, [dr(0,dl(0,np,s_inf),np)-1]), si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(intérimaire, adj-adj, intérimaire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(profondes, adj-adj, profond, [dr(0,n,n)-1]), si(divergences, nc-nom, divergence, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(futur, adj-adj, futur, [dr(0,n,n)-1]), si('État', nc-nam, 'État', [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(révélées, vpp-ver:pper, révéler, [dl(0,n,n)-1]), si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(première, adj-num, premier, [dr(0,n,n)-1]), si(réunion, nc-nom, réunion, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1649, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(républiques, nc-nom, république, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accepté, vpp-ver:pper, accepter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(former, vinf-ver:infi, former, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(intérimaire, adj-adj, intérimaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1650, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [np-1]), si(',', ponct-pun, ',', [let-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Meciar', npp-nam, 'Meciar', [np-1]), si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Mouvement', npp-nam, 'Mouvement', [n-1]), si(nationaliste, adj-adj, nationaliste, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), si('HZDS', npp-abr, 'HZDS', [n-1]), si(')', ponct-pun, ')', [let-1]), si(vient, v-ver:pres, venir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(échouer, vinf-ver:infi, échouer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(majorité, nc-nom, majorité, [n-1]), si(globale, adj-adj, global, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(national, adj-adj, national, [dl(0,n,n)-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(choisir, vinf-ver:infi, choisir, [dr(0,dl(0,np,s_inf),pp)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Jozef', npp-nam, 'Jozef', [dr(0,np,np)-1]), si('Prokes', npp-nam, 'Prokes', [np-1]), si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gauche, nc-nom, gauche, [n-1]), si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1651, Result) :-
      prob_parse([ si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), si('Meciar', npp-nam, 'Meciar', [np-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(choisir, vinf-ver:infi, choisir, [dr(0,dl(0,np,s_inf),pp)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si('Prokes', npp-nam, 'Prokes', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Parti', nc-nam, 'Parti', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(gauche, nc-nom, gauche, [n-1]), si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1652, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(difficultés, nc-nom, difficulté, [n-1]), si(économiques, adj-adj, économique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réformes, nc-nom, réforme, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(alimenté, vpp-ver:pper, alimenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nationalisme, nc-nom, nationalisme, [n-1]), si(naissant, adj-adj, naissant, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1653, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nationalisme, nc-nom, nationalisme, [n-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(alimenté, vpp-ver:pper, alimenter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(difficultés, nc-nom, difficulté, [n-1]), si(économiques, adj-adj, économique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1654, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(automne, nc-nom, automne, [n-1]), si(1992, adj-num, 1992, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(division, nc-nom, division, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1655, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(loi, nc-nom, loi, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(division, nc-nom, division, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(discutée, vpp-ver:pper, discuter, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1656, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(novembre, nc-nom, novembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parlements, nc-nom, parlement, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(voté, vpp-ver:pper, voter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(scission, nc-nom, scission, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(républiques, nc-nom, république, [n-1]), si(indépendantes, adj-adj, indépendant, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(1993, adj-num, 1993, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1657, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(parlements, nc-nom, parlement, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accepté, vpp-ver:pper, accepter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(devenir, vinf-ver:infi, devenir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(républiques, nc-nom, république, [n-1]), si(indépendantes, adj-adj, indépendant, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(janvier, nc-nom, janvier, [n-1]), si(1993, adj-num, 1993, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1658, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(scission, nc-nom, scission, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(laissé, vpp-ver:pper, laisser, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(libre, adj-adj, libre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dl(0,np,s_inf),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(élan, nc-nom, élan, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(économie, nc-nom, économie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(libre, adj-adj, libre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1659, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(poursuit, v-ver:pres, poursuivre, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(économie, nc-nom, économie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(marché, nc-nom, marché, [n-1]), si(libre, adj-adj, libre, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1660, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(grevée, vpp-ver:pper, grever, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(forte, adj-adj, fort, [dr(0,n,n)-1]), si(concentration, nc-nom, concentration, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(industries, nc-nom, industrie, [n-1]), si(lourdes, adj-adj, lourd, [dl(0,n,n)-1]), si(orientées, vpp-ver:pper, orienter, [dr(0,dl(0,n,n),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1661, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(industries, nc-nom, industrie, [n-1]), si(lourdes, adj-adj, lourd, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), si(étaient, v-ver:impf, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(orientées, vpp-ver:pper, orienter, [dr(0,dl(0,np,s_pass),pp)-1]), si(vers, p-prp, vers, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(marché, nc-nom, marché, [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1662, Result) :-
      prob_parse([ si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(bataille, nc-nom, bataille, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(compagnies, nc-nom, compagnie, [n-1]), si(pétrolières, adj-adj, pétrolier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(équatorien, adj-adj, équatorien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(collaborer, vinf-ver:infi, collaborer, [dr(0,dl(0,np,s_inf),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(groupes, nc-nom, groupe, [n-1]), si(indigènes, adj-adj, indigène, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1663, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(équatorien, adj-adj, équatorien, [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(collaboré, vpp-ver:pper, collaborer, [dr(0,dl(0,np,s_ppart),pp)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(groupes, nc-nom, groupe, [n-1]), si(indigènes, adj-adj, indigène, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1664, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si('Brésil', npp-nam, 'Brésil', [n-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(bassin, nc-nom, bassin, [n-1]), si(amazonien, adj-adj, amazonien, [dl(0,n,n)-1]), si(couvre, v-ver:pres, couvrir, [dr(0,dl(0,np,s),np)-1]), si(2, det-num, 2, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(kilomètres, nc-nom, kilomètre, [n-1]), si(carrés, adj-adj, carré, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(région, nc-nom, région, [n-1]), si(12, det-num, 12, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), si(fois, nc-nom, fois, [n-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(grande, adj-adj, grand, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1665, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(bassin, nc-nom, bassin, [n-1]), si(amazonien, adj-adj, amazonien, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(grand, adj-adj, grand, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Californie', npp-nam, 'Californie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1666, Result) :-
      prob_parse([ si('Planter', vinf-ver:infi, 'Planter', [dr(0,dl(0,np,s_inf),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(manioc, nc-nom, manioc, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(combinaison, nc-nom, combinaison, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(légumineuses, nc-nom, légumineuse, [n-1]), si(fixatrices, adj-adj, fixateur, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(azote, nc-nom, azote, [n-1]), si(protégera, v-ver:pres, protéger, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sols, nc-nom, sol, [n-1]), si(faibles, adj-adj, faible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1667, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(technologies, nc-nom, technologie, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(reconstitution, nc-nom, reconstitution, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(sols, nc-nom, sol, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(développées, vpp-ver:pper, développer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1668, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(agroforesterie, nc-nom, agroforesterie, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(avérée, vpp-ver:pper, avérer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(utilisations, nc-nom, utilisation, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(productives, adj-adj, productif, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(terres, nc-nom, terre, [n-1]), si(amazoniennes, adj-adj, amazonien, [dl(0,n,n)-1]), si(défrichées, vpp-ver:pper, défricher, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1669, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(agroforesterie, nc-nom, agroforesterie, [n-1]), si(représente, v-ver:pres, représenter, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(utilisation, nc-nom, utilisation, [n-1]), si(productive, adj-adj, productif, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(terres, nc-nom, terre, [n-1]), si(amazoniennes, adj-adj, amazonien, [dl(0,n,n)-1]), si(défrichées, vpp-ver:pper, défricher, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1670, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), si(donnant, vpr-ver:ppre, donner, [dr(0,dr(0,dl(0,np,s_ppres),np),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(terres, nc-nom, terre, [n-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fonction, nc-nom, fonction, [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(nous, cls-pro:per, nous, [np-1]), si(empêchons, v-ver:pres, empêcher, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(incursions, nc-nom, incursion, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Amazonie', nc-nam, 'Amazonie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1671, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(incursions, nc-nom, incursion, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Amazonie', nc-nom, 'Amazonie', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fonction, nc-nom, fonction, [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1672, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si(annuelles, adj-adj, annuel, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Brésil', npp-nam, 'Brésil', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(situent, v-ver:pres, situer, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(entre, p-prp, entrer, [dr(0,pp,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), si(20, det-num, 20, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(acres, nc-nom, acre, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Amazonie', nc-nom, 'Amazonie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('2,5', det-num, '2,5', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), si(acres, nc-nom, acre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Amazonie', nc-nom, 'Amazonie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1673, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(acres, nc-nom, acre, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(sein, nc-nom, sein, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Amazonie', nc-nom, 'Amazonie', [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(détruits, vpp-ver:pper, détruire, [dl(0,np,s_pass)-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1674, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(bûcherons, nc-nom, bûcheron, [n-1]), si(coupent, v-ver:pres, couper, [dr(0,dl(0,np,s),np)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(blanc, nc-nom, blanc, [n-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(grandes, adj-adj, grand, [dr(0,n,n)-1]), si(étendues, nc-nom, étendue, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(forêt, nc-nom, forêt, [n-1]), si(tropicale, adj-adj, tropical, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(vendre, vinf-ver:infi, vendre, [dr(0,dl(0,np,s_inf),np)-1]), si(du, det-prp:det, de, [dr(0,np,n)-1]), si(bois, nc-nom, bois, [n-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(remplacer, vinf-ver:infi, remplacer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(arbres, nc-nom, arbre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1675, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(arbres, nc-nom, arbre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(forêt, nc-nom, forêt, [n-1]), si(tropicale, adj-adj, tropical, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(coupés, vpp-ver:pper, couper, [dl(0,np,s_pass)-1]), si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(remplacés, vpp-ver:pper, remplacer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1676, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(expériences, nc-nom, expérience, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(établissement, nc-nom, établissement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fermes, nc-nom, ferme, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(eucalyptus, nc-nom, eucalyptus, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pâte, nc-nom, pâte, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(bois, nc-nom, bois, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(développées, vpp-ver:pper, développer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1677, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(eucalyptus, nc-nom, eucalyptus, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(plantés, vpp-ver:pper, planter, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pâte, nc-nom, pâte, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si(bois, nc-nom, bois, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1678, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Digital', npp-nam, 'Digital', [dr(0,np,np)-1]), si('Equipment', npp-nam, 'Equipment', [dr(0,np,np)-1]), si('Corp', npp-nam, 'Corp', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1679, Result) :-
      prob_parse([ si(et, cc-kon, et, [dr(0,s,s)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(autres, adj-adj, autre, [dr(0,n,n)-1]), si(personnes, nc-nom, personne, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(plaidé, vpp-ver:pper, plaider, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(siphonné, vpp-ver:pper, siphonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('300.000', det-num, '300.000', [dr(0,np,n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1680, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Digital', npp-nam, 'Digital', [dr(0,np,np)-1]), si('Equipment', npp-nam, 'Equipment', [dr(0,np,np)-1]), si('Corp', npp-nam, 'Corp', [np-1]), si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1681, Result) :-
      prob_parse([ si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(siphonné, vpp-ver:pper, siphonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('300.000', det-num, '300.000', [dr(0,np,n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(entreprise, nc-nom, entreprise, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1682, Result) :-
      prob_parse([ si('Leona', npp-nam, 'Leona', [dr(0,np,np)-1]), si('Helmsley', npp-nam, 'Helmsley', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(reine, nc-nom, reine, [n-1]), si(autoproclamée, vpp-ver:pper, autoproclamer, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hôtels, nc-nom, hôtel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(luxe, nc-nom, luxe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamnée, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(mardi, nc-nom, mardi, [dr(0,pp,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prison, nc-nom, prison, [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1683, Result) :-
      prob_parse([ si('Leona', npp-nam, 'Leona', [dr(0,np,np)-1]), si('Helmsley', npp-nam, 'Helmsley', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamnée, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1684, Result) :-
      prob_parse([ si('Leona', npp-nam, 'Leona', [dr(0,np,np)-1]), si('Helmsley', npp-nam, 'Helmsley', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(reine, nc-nom, reine, [n-1]), si(autoproclamée, vpp-ver:pper, autoproclamer, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hôtels, nc-nom, hôtel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(luxe, nc-nom, luxe, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamnée, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(mardi, nc-nom, mardi, [dr(0,pp,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(quatre, det-num, quatre, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prison, nc-nom, prison, [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1685, Result) :-
      prob_parse([ si('Leona', npp-nam, 'Leona', [dr(0,np,np)-1]), si('Helmsley', npp-nam, 'Helmsley', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(propriétaire, nc-nom, propriétaire, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(hôtels, nc-nom, hôtel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(luxe, nc-nom, luxe, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1686, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fraude, nc-nom, fraude, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Milken', npp-nam, 'Milken', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamné, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(prison, nc-nom, prison, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1687, Result) :-
      prob_parse([ si('Milken', npp-nam, 'Milken', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(emprisonné, vpp-ver:pper, emprisonner, [dl(0,np,s_pass)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), si(fraude, nc-nom, fraude, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1688, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(poursuites, nc-nom, poursuite, [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(tendance, nc-nom, tendance, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(agressives, adj-adj, agressif, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,n,n))))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),dl(0,n,n)))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,n,n))))))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(peines, nc-nom, peine, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(longues, adj-adj, long, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(financiers, adj-adj, financier, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(argent, nc-nom, argent, [n-1]), si(massives, adj-adj, massif, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si('Minkow', npp-nam, 'Minkow', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1689, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(peines, nc-nom, peine, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(financiers, adj-adj, financier, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(tendance, nc-nom, tendance, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(longues, adj-adj, long, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1690, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(poursuites, nc-nom, poursuite, [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(tendance, nc-nom, tendance, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(agressives, adj-adj, agressif, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,n,n))))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),dl(0,n,n)))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,n,n))))))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(peines, nc-nom, peine, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(longues, adj-adj, long, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(financiers, adj-adj, financier, [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreuses, adj-adj, nombreux, [dr(0,n,n)-1]), si(victimes, nc-nom, victime, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(pertes, nc-nom, perte, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(argent, nc-nom, argent, [n-1]), si(massives, adj-adj, massif, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si('Minkow', npp-nam, 'Minkow', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1691, Result) :-
      prob_parse([ si('Faire', vinf-ver:infi, 'Faire', [dr(0,dr(0,dl(0,np,s_inf),pp),dl(0,np,s_inf))-1]), si(perdre, vinf-ver:infi, perdre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(millions, nc-nom, million, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,np,s_inf))-1]), si(conduire, vinf-ver:infi, conduire, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(peines, nc-nom, peine, [n-1]), si(variant, vpr-ver:ppre, varier, [dr(0,dl(0,n,n),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(dix, det-num, dix, [dr(0,np,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dl(0,dr(0,pp_de,np),dr(0,pp_a,n))),dr(0,np,n))-1]), si(vingt, det-num, vingt, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1692, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(affaire, nc-nom, affaire, [n-1]), si('Milken', npp-nam, 'Milken', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elle, cls-pro:per, lui, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(infligée, vpp-ver:pper, infliger, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Milken', npp-nam, 'Milken', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(but, nc-nom, but, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(exemple, nc-nom, exemple, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1693, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(prison, nc-nom, prison, [n-1]), si(infligée, vpp-ver:pper, infliger, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), si('Milken', npp-nam, 'Milken', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,n)-1]), si(but, nc-nom, but, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(exemple, nc-nom, exemple, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1694, Result) :-
      prob_parse([ si('Seule', adv-adv, 'Seule', [dr(0,np,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(preuve, nc-nom, preuve, [n-1]), si(ferme, v-ver:pres, ferme, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(lien, nc-nom, lien, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conservation, nc-nom, conservation, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(développement, nc-nom, développement, [n-1]), si(économique, adj-adj, économique, [dl(0,n,n)-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(maintenir, vinf-ver:infi, maintenir, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(engagement, nc-nom, engagement, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gens, nc-nom, gens, [n-1]), si(envers, p-prp, envers, [dr(0,dl(0,n,n),np)-1]), si('Campfire', npp-nam, 'Campfire', [np-1]), si(',', ponct-pun, ',', [let-1]), si(dit, v-ver:pres, dire, [dr(0,dl(1,s,s),np)-1]), si('Cherry', npp-nam, 'Cherry', [dr(0,np,np)-1]), si('Bird', npp-nam, 'Bird', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(coordinateur, nc-nom, coordinateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(faune, nc-nom, faune, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(district, nc-nom, district, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Hurungwe', npp-nam, 'Hurungwe', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1695, Result) :-
      prob_parse([ si('Campfire', npp-nam, 'Campfire', [np-1]), si(aide, v-ver:pres, aide, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(communautés, nc-nom, communauté, [n-1]), si(rurales, adj-adj, rural, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(argent, nc-nom, argent, [n-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(animaux, nc-nom, animal, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(braconnés, vpp-ver:pper, braconner, [dl(0,np,s_pass)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),dl(0,n,n))-1]), si(nuisibles, adj-adj, nuisible, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1696, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(villageois, nc-nom, villageois, [n-1]), si(concernés, vpp-ver:pper, concerner, [dl(0,n,n)-1]), si(découragent, v-ver:pres, décourager, [dr(0,dl(0,np,s),np)-1]), si(activement, adv-adv, activement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(braconnage, nc-nom, braconnage, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(animaux, nc-nom, animal, [n-1]), si(sauvages, adj-adj, sauvage, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(confisquent, v-ver:pres, confisquer, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(collets, nc-nom, collet, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(signalent, v-ver:pres, signaler, [dr(0,dl(0,np,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(incidents, nc-nom, incident, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(braconnage, nc-nom, braconnage, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(prémunissent, v-ver:pres, prémunir, [dl(0,cl_r,dl(0,np,s))-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(feux, nc-nom, feu, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(brousse, nc-nom, brousse, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(servent, v-ver:pres, servir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(débusquer, vinf-ver:infi, débusquer, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(animaux, nc-nom, animal, [n-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(détruisent, v-ver:pres, détruire, [dr(0,dl(0,np,s),np)-1]), si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(végétation, nc-nom, végétation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1697, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(villageois, nc-nom, villageois, [n-1]), si(zambiens, adj-adj, zambien, [dl(0,n,n)-1]), si(mettent, v-ver:pres, mettre, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(place, nc-nom, place, [n-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(comités, nc-nom, comité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(empêcher, vinf-ver:infi, empêcher, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(braconniers, nc-nom, braconnier, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(pénétrer, vinf-ver:infi, pénétrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(zone, nc-nom, zone, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1698, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(projet, nc-nom, projet, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(réorganiser, vinf-ver:infi, réorganiser, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(collectivités, nc-nom, collectivité, [n-1]), si(locales, adj-adj, local, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Ecosse', npp-nam, 'Ecosse', [n-1]), si(devrait, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(retiré, vpp-ver:pper, retirer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Assemblée', nc-nam, 'Assemblée', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(comtés, nc-nom, comté, [n-1]), si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Convention', nc-nam, 'Convention', [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(locales, adj-adj, local, [dl(0,n,n)-1]), si(écossaises, adj-adj, écossais, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1699, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(associations, nc-nom, association, [n-1]), si(galloises, adj-adj, gallois, [dl(0,n,n)-1]), si(veulent, v-ver:pres, vouloir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(assemblée, nc-nom, assemblée, [n-1]), si(galloise, adj-adj, gallois, [dl(0,n,n)-1]), si(directement, adv-adv, directement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(élue, vpp-ver:pper, élire, [dl(0,n,n)-1]), si(plutôt, adv-adv, plutôt, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(réorganisation, nc-nom, réorganisation, [n-1]), si(unitaire, adj-adj, unitaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1700, Result) :-
      prob_parse([ si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), si(certains, det-pro:ind, certain, [dr(0,np,n)-1]), si(éléments, nc-nom, élément, [n-1]), si(indiquent, v-ver:pres, indiquer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(assemblée, nc-nom, assemblée, [n-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),n)-1]), si(pièce, nc-nom, pièce, [n-1]), si(maîtresse, nc-nom, maître, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(revendications, nc-nom, revendication, [n-1]), si(nationalistes, adj-adj, nationaliste, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(gagne, v-ver:pres, gagner, [dr(0,dl(0,np,s),np)-1]), si(du, p+d-prp:det, de, [dr(0,np,n)-1]), si(terrain, nc-nom, terrain, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(douteux, adj-adj, douteux, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(même, adv-adv, même, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moitié, nc-nom, moitié, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(veuille, vs-ver:subp, vouloir, [dr(0,dl(0,np,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1701, Result) :-
      prob_parse([ si('On', cls-pro:per, 'On', [np-1]), si(prévoit, v-ver:pres, prévoir, [dr(0,dl(0,np,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(à, p-prp, à, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1994, pro-num, 1994, [np-1]), si(',', ponct-pun, ',', [let-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(référendum, nc-nom, référendum, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(indépendance, nc-nom, indépendance, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Pays', nc-nam, 'Pays', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Galles', npp-nam, 'Galles', [np-1]), si(recevrait, v-ver:impf, recevoir, [dr(0,dl(0,np,s),np)-1]), si(probablement, adv-adv, probablement, [dr(0,np,np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(part, nc-nom, part, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(population, nc-nom, population, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1702, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(spécialisée, vpp-ver:pper, spécialiser, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Bourse', nc-nam, 'Bourse', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(condamnée, vpp-ver:pper, condamner, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(amende, nc-nom, amende, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('480.350', det-num, '480.350', [dr(0,np,n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), si(fraude, nc-nom, fraude, [n-1]), si(boursière, adj-adj, boursier, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(imposé, vpp-ver:pper, imposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(cette, det-pro:dem, ce, [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(titre, nc-nom, titre, [n-1]), si(dissuasif, adj-adj, dissuasif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1703, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(amende, nc-nom, amende, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(près, adv-adv, près, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('demi-million', nc-nom, 'demi-million', [dr(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(infligée, vpp-ver:pper, infliger, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(société, nc-nom, société, [n-1]), si(spécialisée, vpp-ver:pper, spécialiser, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Bourse', nc-nam, 'Bourse', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('New', npp-nam, 'New', [dr(0,np,np)-1]), si('York', npp-nam, 'York', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(faite, vpp-ver:pper, faire, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dl(0,np,s_pass)-1]), si(titre, nc-nom, titre, [n-1]), si(dissuasif, adj-adj, dissuasif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1704, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(cour, nc-nom, cour, [n-1]), si(fédérale, adj-adj, fédéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), si('Angeles', npp-nam, 'Angeles', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(imposé, vpp-ver:pper, imposer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(prison, nc-nom, prison, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('A.', npp-abr, 'A.', [dr(0,np,np)-1]), si('Feldman', npp-nam, 'Feldman', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('Palos', npp-nam, 'Palos', [dr(0,np,np)-1]), si('Verdes', npp-nam, 'Verdes', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1705, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(juge, nc-nom, juge, [n-1]), si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), si('Angeles', npp-nam, 'Angeles', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(imposé, vpp-ver:pper, imposer, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(peine, nc-nom, peine, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(15, det-num, 15, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(prison, nc-nom, prison, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('David', npp-nam, 'David', [dr(0,np,np)-1]), si('A.', npp-abr, 'A.', [dr(0,np,np)-1]), si('Feldman', npp-nam, 'Feldman', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1706, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(apparu, vpp-ver:pper, apparaître, [dl(0,n,n)-1]), si(hier, adv-adv, hier, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(ministère, nc-nom, ministère, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rejeté, vpp-ver:pper, rejeter, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(demande, nc-nom, demande, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(visant, vpr-ver:ppre, viser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fourniture, nc-nom, fourniture, [n-1]), si(limitée, vpp-ver:pper, limité, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pièces, nc-nom, pièce, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(rechange, nc-nom, rechange, [n-1]), si(fabriquées, vpp-ver:pper, fabriquer, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(marine, nc-nom, marine, [n-1]), si(argentine, adj-adj, argentin, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(commencée, vpp-ver:pper, commencer, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1707, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(coopération, nc-nom, coopération, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Golfe', npp-nam, 'Golfe', [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(arrêtée, vpp-ver:pper, arrêter, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1708, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(liens, nc-nom, lien, [n-1]), si(militaires, adj-adj, militaire, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(régis, vpp-ver:pper, régir, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(embargo, nc-nom, embargo, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(imposé, vpp-ver:pper, imposer, [dr(0,dr(0,dl(0,n,n),pp_a),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(déclenchement, nc-nom, déclenchement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Malouines', npp-nam, 'Malouines', [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), si(1982, pro-num, 1982, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1709, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(embargo, nc-nom, embargo, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(armes, nc-nom, arme, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(commencé, vpp-ver:pper, commencer, [dl(0,np,s_ppart)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1982, pro-num, 1982, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(poursuivi, vpp-ver:pper, poursuivre, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,np)-1]), si(1994, pro-num, 1994, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1710, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(président, nc-nom, président, [n-1]), si(argentin, adj-adj, argentin, [dl(0,n,n)-1]), si('Carlos', npp-nam, 'Carlos', [dl(0,n,n)-1]), si('Menem', npp-nam, 'Menem', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ordonné, vpp-ver:pper, ordonner, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(immédiate, adj-adj, immédiat, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(auraient, v-ver:cond, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(commis, vpp-ver:pper, commettre, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(troupes, nc-nom, troupe, [n-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Malouines', npp-nam, 'Malouines', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(1982, pro-num, 1982, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1711, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Argentine', npp-nam, 'Argentine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(exigé, vpp-ver:pper, exiger, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(enquête, nc-nom, enquête, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(crimes, nc-nom, crime, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(présumés, vpp-ver:pper, présumer, [dl(0,n,n)-1]), si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Malouines', npp-nam, 'Malouines', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1712, Result) :-
      prob_parse([ si('Monsieur', nc-abr, 'Monsieur', [dr(0,np,np)-1]), si('Guido', npp-nam, 'Guido', [dr(0,np,np)-1]), si(di, et-prp, di, [dr(0,dl(0,np,np),np)-1]), si('Tella', npp-nam, 'Tella', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(argentin, adj-adj, argentin, [dl(0,n,n)-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si('Affaires', nc-nom, 'Affaires', [n-1]), si(étrangères, adj-adj, étranger, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(rencontré, vpp-ver:pper, rencontrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(représentants, nc-nom, représentant, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(institutions, nc-nom, institution, [n-1]), si(financières, adj-adj, financier, [dl(0,n,n)-1]), si(britanniques, adj-adj, britannique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1713, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Affaires', nc-nom, 'Affaires', [n-1]), si(étrangères, adj-adj, étranger, [dl(0,n,n)-1]), si('Guido', npp-nam, 'Guido', [dl(0,n,n)-1]), si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), si('Tella', npp-nam, 'Tella', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1714, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), si(prêt, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(argentines, adj-adj, argentin, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(part, nc-nom, part, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(champs, nc-nom, champ, [n-1]), si(pétroliféres, adj-adj, pétrolifére, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(eaux, nc-nom, eau, [n-1]), si(territoriales, adj-adj, territorial, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(îles, nc-nom, île, [n-1]), si('Malouines', adj-nam, 'Malouines', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1715, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(gouvernement, nc-nom, gouvernement, [n-1]), si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(prêt, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(entreprises, nc-nom, entreprise, [n-1]), si(argentines, adj-adj, argentin, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(champs, nc-nom, champ, [n-1]), si(pétrolifères, adj-adj, pétrolifère, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1716, Result) :-
      prob_parse([ si('Bush', npp-nam, 'Bush', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(présentés, vpp-ver:pper, présenter, [dl(0,cl_r,dl(0,np,s_ppart))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(un, nc-num, un, [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(autre, pro-pro:ind, autre, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(1992, pro-num, 1992, [np-1]), si(',', ponct-pun, ',', [let-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(travaillé, vpp-ver:pper, travailler, [dl(0,np,s_ppart)-1]), si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(quitté, vpp-ver:pper, quitter, [dr(0,dl(0,np,s_ppart),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(fonctions, nc-nom, fonction, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1717, Result) :-
      prob_parse([ si('Ils', cls-pro:per, 'Ils', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(aidé, vpp-ver:pper, aider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(lever, vinf-ver:infi, lever, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(récupération, nc-nom, récupération, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(tsunami, nc-nom, tsunami, [n-1]), si(asiatique, adj-adj, asiatique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2004, pro-num, 2004, [np-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouragan, nc-nom, ouragan, [n-1]), si('Katrina', npp-nam, 'Katrina', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2005, pro-num, 2005, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1718, Result) :-
      prob_parse([ si('Bush', npp-nam, 'Bush', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(tous, adv-adv, tout, [dr(0,dl(1,s,s),np)-1]), si(deux, pro-num, deux, [np-1]), si(aidé, vpp-ver:pper, aider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(lever, vinf-ver:infi, lever, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(récupération, nc-nom, récupération, [n-1]), si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ouragan, nc-nom, ouragan, [n-1]), si('Katrina', npp-nam, 'Katrina', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1719, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(déballage, nc-nom, déballage, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(version, nc-nom, version, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si('Windows', npp-nam, 'Windows', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(désormais, adv-adv, désormais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(standard, adj-adj, standard, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Microsoft', npp-nam, 'Microsoft', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(généralement, adv-adv, généralement, [dl(1,s,s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(événement, nc-nom, événement, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(ampleur, nc-nom, ampleur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1720, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(nouvelle, adj-adj, nouveau, [dr(0,n,n)-1]), si(version, nc-nom, version, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si('Windows', npp-nam, 'Windows', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(désormais, adv-adv, désormais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(standard, adj-adj, standard, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Microsoft', npp-nam, 'Microsoft', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(déballée, vpp-ver:pper, déballer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1721, Result) :-
      prob_parse([ si('Voici', vimp-ver:impe, 'Voici', [dr(0,s,np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(système, nc-nom, système, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Microsoft', npp-nam, 'Microsoft', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), si(vous, cls-pro:per, vous, [np-1]), si(voudrez, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('peut-être', adv-adv, 'peut-être', [dl(1,s,s)-1]), si(attendre, vinf-ver:infi, attendre, [dr(0,dl(0,np,s_inf),np)-1]), si('Flip', npp-nam, 'Flip', [dr(0,np,np)-1]), si(screens, nc-nom, screens, [np-1]), si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), si(parmi, p-prp, parmi, [dr(0,dr(0,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ajouts, nc-nom, ajout, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Windows', npp-nam, 'Windows', [dr(0,np,np)-1]), si('Vista', npp-nam, 'Vista', [np-1]), si(',', ponct-pun, ',', [let-1]), si(on, cls-pro:per, on, [np-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,np,s),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(façons, nc-nom, façon, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(regarder, vinf-ver:infi, regarder, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(quelles, detwh-pro:rel, quel, [dr(0,dr(0,s_whq,dr(0,s,dia(1,box(1,np)))),n)-1]), si(fenêtres, nc-nom, fenêtre, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(ouvertes, vpp-ver:pper, ouvert, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1722, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), si(système, nc-nom, système, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(exploitation, nc-nom, exploitation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Microsoft', npp-nam, 'Microsoft', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(appelle, v-ver:pres, appeler, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), si('Windows', npp-nam, 'Windows', [dr(0,np,np)-1]), si('Vista', npp-nam, 'Vista', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1723, Result) :-
      prob_parse([ si('Vista', npp-nam, 'Vista', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(seulement, adv-adv, seulement, [dl(1,s,s)-1]), si(accompagné, vpp-ver:pper, accompagner, [dr(0,dl(0,np,s_pass),pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(améliorée, vpp-ver:pper, améliorer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), si(aussi, adv-adv, aussi, [dr(0,pp,pp)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(moyens, nc-nom, moyen, [n-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(faciles, adj-adj, facile, [dr(0,dl(0,n,n),pp)-1]), si(pour, p-prp, pour, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(parents, nc-nom, parent, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(décider, vinf-ver:infi, décider, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(comment, advwh-adv, comment, [dr(0,s_whq,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(veulent, v-ver:pres, vouloir, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(enfants, nc-nom, enfant, [n-1]), si(utilisent, v-ver:pres, utiliser, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ordinateur, nc-nom, ordinateur, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1724, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(personnes, nc-nom, personne, [n-1]), si(utilisant, vpr-ver:ppre, utiliser, [dr(0,dl(0,n,n),np)-1]), si(des, det-prp:det, de, [dr(0,np,n)-1]), si(appareils, nc-nom, appareil, [n-1]), si(photo, nc-nom, photo, [dl(0,n,n)-1]), si(numériques, adj-adj, numérique, [dl(0,n,n)-1]), si(étant, vpr-ver:ppre, être, [dr(0,dl(0,np,s_ppres),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,dl(1,s,s))-1]), si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), si('Microsoft', npp-nam, 'Microsoft', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(intégré, vpp-ver:pper, intégrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(logiciel, nc-nom, logiciel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gestion, nc-nom, gestion, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(photos, nc-nom, photo, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Vista', npp-nam, 'Vista', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), si(ce, pro-pro:dem, ce, [np-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), si(facilite, v-ver:pres, faciliter, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(partage, nc-nom, partage, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fixation, nc-nom, fixation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(photos, nc-nom, photo, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(gravure, nc-nom, gravure, [n-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), si('CD', nc-abr, 'CD', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(attribution, nc-nom, attribution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(balises, nc-nom, balise, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(étiquettes, nc-nom, étiquette, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(permettent, v-ver:pres, permettre, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(les, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(suite, nc-nom, suite, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1725, Result) :-
      prob_parse([ si('Vista', npp-nam, 'Vista', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(fourni, vpp-ver:pper, fournir, [dl(0,np,s_pass)-1]), si(avec, p-prp, avec, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(logiciel, nc-nom, logiciel, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gestion, nc-nom, gestion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(photos, nc-nom, photo, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1726, Result) :-
      prob_parse([ si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(devait, v-ver:impf, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(développer, vinf-ver:infi, développer, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(force, nc-nom, force, [n-1]), si(puisse, vs-ver:subp, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(renforcée, vpp-ver:pper, renforcer, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(prendrait, v-ver:cond, prendre, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(temps, nc-nom, temps, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(combattre, vinf-ver:infi, combattre, [dl(0,np,s_inf)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(coûterait, v-ver:cond, coûter, [dr(0,dl(0,np,s),np)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(pertes, nc-nom, perte, [n-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), si(on, cls-pro:per, on, [np-1]), si(pourrait, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(attendre, vinf-ver:infi, attendre, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(autrement, adv-adv, autrement, [dl(1,s,s)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1727, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(mise, vpp-ver:pper, mettre, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,n)-1]), si(rude, adj-adj, rude, [dr(0,n,n)-1]), si(épreuve, nc-nom, épreuve, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(guerres, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(cours, nc-nom, cours, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1728, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), si('Gates', npp-nam, 'Gates', [dl(0,n,n)-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(recommandé, vpp-ver:pper, recommander, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(début, nc-nom, début, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(mois, nc-nom, mois, [n-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(effectifs, nc-nom, effectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(augmentés, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('65.000', det-num, '65.000', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(total, nc-nom, total, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('547.000', pro-num, '547.000', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(monde, nc-nom, monde, [n-1]), si(entier, adj-adj, entier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si('Marines', npp-nam, 'Marines', [n-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(augmentés, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_pass),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('27.000', pro-num, '27.000', [np-1]), si(',', ponct-pun, ',', [let-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si('202.000', pro-num, '202.000', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1729, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(secrétaire, nc-nom, secrétaire, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Défense', nc-nam, 'Défense', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(suggéré, vpp-ver:pper, suggérer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(effectifs, nc-nom, effectif, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(soient, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(portés, vpp-ver:pper, porter, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('547.000', det-num, '547.000', [dr(0,np,n)-1]), si(soldats, nc-nom, soldat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1730, Result) :-
      prob_parse([ si('Près', adv-adv, 'Près', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(moitié, nc-nom, moitié, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Armée', nc-nam, 'Armée', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(réalisée, vpp-ver:pper, réaliser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(programme, nc-nom, programme, [n-1]), si(temporaire, adj-adj, temporaire, [dl(0,n,n)-1]), si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_de))))-1]), si('Gates', npp-nam, 'Gates', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(rendu, vpp-ver:pper, rendre, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(permanent, adj-adj, permanent, [dl(0,n,n)-1]), si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(complète, adj-adj, complet, [dl(0,n,n)-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(réalisée, vpp-ver:pper, réaliser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(cinq, adj-num, cinq, [dr(0,n,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1731, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(réalisée, vpp-ver:pper, réaliser, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(5, adj-num, 5, [dr(0,n,n)-1]), si(ans, nc-nom, an, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1732, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(estimation, nc-nom, estimation, [n-1]), si(préliminaire, adj-adj, préliminaire, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(terre, nc-nom, terre, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(taille, nc-nom, taille, [n-1]), si(coûterait, v-ver:cond, coûter, [dr(0,dl(0,np,s),np)-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(seraient, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(répartis, vpp-ver:pper, répartir, [dr(0,dl(0,np,s_pass),pp)-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(années, nc-nom, année, [n-1]), si(budgétaires, adj-adj, budgétaire, [dl(0,n,n)-1]), si(2009, adj-num, 2009, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(2013, pro-num, 2013, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1733, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(armée, nc-nom, armée, [n-1]), si(coûtera, v-ver:futu, coûter, [dr(0,dl(0,np,s),np)-1]), si(probablement, adv-adv, probablement, [dl(1,s,s)-1]), si(70, det-num, 70, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1734, Result) :-
      prob_parse([ si('Combattre', vinf-ver:infi, 'Combattre', [dr(0,dl(0,np,s_inf),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(laissé, vpp-ver:pper, laisser, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(forces, nc-nom, force, [n-1]), si(terrestres, adj-adj, terrestre, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(état, nc-nom, état, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(préparation, nc-nom, préparation, [n-1]), si(affaibli, vpp-ver:pper, affaiblir, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1735, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(certaines, det-pro:ind, certain, [dr(0,np,n)-1]), si(unités, nc-nom, unité, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(dessous, nc-nom, dessous, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mesure, nc-nom, mesure, [n-1]), si(standard, adj-adj, standard, [dl(0,n,n)-1]), si(utilisée, vpp-ver:pper, utiliser, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), si(si, cs-kon, si, [dr(0,s_whq,s)-1]), si(elles, cls-pro:per, lui, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(prêtes, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(combattre, vinf-ver:infi, combattre, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(conventionnelle, adj-adj, conventionnel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(haute, adj-adj, haut, [dr(0,n,n)-1]), si(intensité, nc-nom, intensité, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1736, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(guerre, nc-nom, guerre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(haute, adj-adj, haut, [dr(0,n,n)-1]), si(intensité, nc-nom, intensité, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1737, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), si(paiera, v-ver:futu, payer, [dr(0,dl(0,np,s),np)-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si(53, pro-num, 53, [np-1]), si(la, det-det:art, le, [dr(0,dl(0,np,np),n)-1]), si(tonne, nc-nom, tonne, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(elle, cls-pro:per, lui, [np-1]), si(importe, v-ver:pres, importer, [dr(0,dl(0,np,s),np)-1]), si(',', ponct-pun, ',', [let-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(lieu, nc-nom, lieu, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(180, nc-num, 180, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(exigeait, v-ver:impf, exiger, [dr(0,dl(0,np,s),np)-1]), si(auparavant, adv-adv, auparavant, [dl(1,s,s)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('Mikhaïl', npp-nam, 'Mikhaïl', [dl(0,n,n)-1]), si('Fradkov', npp-nam, 'Fradkov', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1738, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), si(importe, v-ver:pres, importer, [dr(0,dl(0,np,s),np)-1]), si(53, det-num, 53, [dr(0,np,n)-1]), si(tonnes, nc-nom, tonne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1739, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(intervenu, vpp-ver:pper, intervenir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociations, nc-nom, négociation, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Fradkov', npp-nam, 'Fradkov', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(homologue, nc-nom, homologue, [n-1]), si(bélarussien, adj-adj, bélarussien, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Sergei', npp-nam, 'Sergei', [dr(0,np,np)-1]), si('Sidorsky', npp-nam, 'Sidorsky', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1740, Result) :-
      prob_parse([ si('Monsieur', nc-nom, 'Monsieur', [dr(0,np,np)-1]), si('Fradkov', npp-nam, 'Fradkov', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('Sergei', npp-nam, 'Sergei', [dr(0,np,np)-1]), si('Sidorsky', npp-nam, 'Sidorsky', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(accord, nc-nom, accord, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(10, det-num, 10, [dr(0,np,n)-1]), si(heures, nc-nom, heure, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(négociations, nc-nom, négociation, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1741, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(responsables, nc-nom, responsable, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parvenus, vpp-ver:pper, parvenir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('"', ponct-pun:cit, '"', [let-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(solution, nc-nom, solution, [n-1]), si(équilibrée, adj-adj, équilibré, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(correspondant, vpr-ver:ppre, correspondre, [dr(0,dl(0,n,n),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(intérêts, nc-nom, intérêt, [n-1]), si(des, p+d-prp:det, un, [dr(0,dl(0,n,n),n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si('"', ponct-pun:cit, '"', [let-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Fradkov', npp-nam, 'Fradkov', [np-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(commentaires, nc-nom, commentaire, [n-1]), si(télévisés, vpp-ver:pper, télévisé, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ajoutant, vpr-ver:ppre, ajouter, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(discussions, nc-nom, discussion, [n-1]), si(avaient, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si('"', ponct-pun:cit, '"', [let-1]), si(difficiles, adj-adj, difficile, [dl(0,n,n)-1]), si('"', ponct-pun:cit, '"', [let-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1742, Result) :-
      prob_parse([ si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Fradkov', npp-nam, 'Fradkov', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(parvenu, vpp-ver:pper, parvenir, [dr(0,dl(0,np,s_ppart),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(solution, nc-nom, solution, [n-1]), si(équilibrée, vpp-ver:pper, équilibré, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1743, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(approvisionnements, nc-nom, approvisionnement, [n-1]), si(envoyés, vpp-ver:pper, envoyer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(oléoduc, nc-nom, oléoduc, [n-1]), si('Druzhba', npp-nam, 'Druzhba', [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(interrompus, vpp-ver:pper, interrompre, [dl(0,np,s_pass)-1]), si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(jours, nc-nom, jour, [n-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(taxe, nc-nom, taxe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transit, nc-nom, transit, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(passé, vpp-ver:pper, passer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1744, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(taxe, nc-nom, taxe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transit, nc-nom, transit, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(augmentée, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('Minsk', npp-nam, 'Minsk', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1745, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(différend, nc-nom, différend, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(anciens, adj-adj, ancien, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si(soviétiques, adj-adj, soviétique, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(survenu, vpp-ver:pper, survenir, [dl(0,np,s_ppart)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(forcé, vpp-ver:pper, forcer, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(accepter, vinf-ver:infi, accepter, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(importante, adj-adj, important, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(coût, nc-nom, coût, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fournitures, nc-nom, fourniture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(pays, nc-nom, pays, [n-1]), si(fin, nc-nom, fin, [dr(0,dl(0,n,n),n)-1]), si(décembre, nc-nom, décembre, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1746, Result) :-
      prob_parse([ si('Moscou', npp-nam, 'Moscou', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coût, nc-nom, coût, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(fournitures, nc-nom, fourniture, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(gaz, nc-nom, gaz, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1747, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(imposé, vpp-ver:pper, imposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(douane, nc-nom, douane, [n-1]), si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(exportations, nc-nom, exportation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(affirmant, vpr-ver:ppre, affirmer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(voisin, nc-nom, voisin, [n-1]), si(lui, clo-pro:per, luire, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), si(coûtait, v-ver:impf, coûter, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(4, det-num, 4, [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(pertes, nc-nom, perte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(revenus, nc-nom, revenu, [n-1]), si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1748, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(diminué, vpp-ver:pper, diminuer, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(coût, nc-nom, coût, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(exportations, nc-nom, exportation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1749, Result) :-
      prob_parse([ si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), si(représailles, nc-nom, représaille, [n-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(imposé, vpp-ver:pper, imposer, [dr(0,dl(0,np,s_ppart),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(taxe, nc-nom, taxe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(transit, nc-nom, transit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(45, pro-num, 45, [np-1]), si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), si(tonne, nc-nom, tonne, [n-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(expéditions, nc-nom, expédition, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(provenance, nc-nom, provenance, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(retirée, vpp-ver:pper, retirer, [dr(0,dl(0,np,s_ppart),np)-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(discussions, nc-nom, discussion, [n-1]), si(gouvernementales, adj-adj, gouvernemental, [dl(0,n,n)-1]), si(tendues, vpp-ver:pper, tendre, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(haut, adj-adj, haut, [dr(0,n,n)-1]), si(niveau, nc-nom, niveau, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(deux, adj-num, deux, [dr(0,n,n)-1]), si(parties, nc-nom, party, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1750, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(discussions, nc-nom, discussion, [n-1]), si(gouvernementales, adj-adj, gouvernemental, [dl(0,n,n)-1]), si(tendues, vpp-ver:pper, tendre, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(entre, p-prp, entrer, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1751, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(médias, nc-nom, média, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(émis, vpp-ver:pper, émettre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(hypothèses, nc-nom, hypothèse, [n-1]), si(selon, p-prp, selon, [dr(0,pp,np)-1]), si(lesquelles, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ennemis, nc-nom, ennemi, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(pourraient, v-ver:cond, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(joué, vpp-ver:pper, jouer, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rôle, nc-nom, rôle, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(mort, nc-nom, mort, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Litvinenko', npp-nam, 'Litvinenko', [np-1]), si(',', ponct-pun, ',', [let-1]), si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(présenter, vinf-ver:infi, présenter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Kremlin', npp-nam, 'Kremlin', [n-1]), si(sous, p-prp, sou, [dr(0,pp,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(mauvais, adj-adj, mauvais, [dr(0,n,n)-1]), si(jour, nc-nom, jour, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1752, Result) :-
      prob_parse([ si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Litvinenko', npp-nam, 'Litvinenko', [np-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(critique, nc-nom, critique, [n-1]), si(véhément, adv-adv, véhément, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1753, Result) :-
      prob_parse([ si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(critique, nc-nom, critique, [n-1]), si(véhément, adv-adv, véhément, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Litvinenko', npp-nam, 'Litvinenko', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1754, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(vaste, adj-adj, vaste, [dr(0,n,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si(marathon, nc-nom, marathon, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),np)-1]), si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(économies, nc-nom, économie, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(puissantes, adj-adj, puissant, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(taux, nc-nom, taux, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(croissance, nc-nom, croissance, [n-1]), si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si('6,9', pro-num, '6,9', [np-1]), si(en, p-prp, en, [dr(0,dl(0,np,np),np)-1]), si(2006, pro-num, 2006, [np-1]), si('-', ponct-pun, '-', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(inflation, nc-nom, inflation, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(baisse, nc-nom, baisse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1755, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(une, nc-num, un, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,np,np),n)-1]), si(économies, nc-nom, économie, [n-1]), si(les, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), si(puissantes, adj-adj, puissant, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1756, Result) :-
      prob_parse([ si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(constitution, nc-nom, constitution, [n-1]), si(',', ponct-pun, ',', [let-1]), si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), si('Poutine', npp-nam, 'Poutine', [np-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(se, clr-pro:per, se, [cl_r-1]), si(retirer, vinf-ver:infi, retirer, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2008, pro-num, 2008, [np-1]), si(',', ponct-pun, ',', [let-1]), si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(effectué, vpp-ver:pper, effectuer, [dr(0,dl(0,np,s_ppart),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(mandats, nc-nom, mandat, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1757, Result) :-
      prob_parse([ si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(maintenant, adv-adv, maintenant, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(devenu, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(si, adv-adv, si, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(puissant, adj-adj, puissant, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(il, cls-pro:per, il, [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(admis, vpp-ver:pper, admettre, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(personne, nc-nom, personne, [n-1]), si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(il, cls-pro:per, il, [np-1]), si(désigne, v-ver:pres, désigner, [dr(0,dl(0,np,s),np)-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), si(candidat, nc-nom, candidat, [n-1]), si(préféré, vpp-ver:pper, préférer, [dl(0,n,n)-1]), si(gagnera, v-ver:futu, gagner, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élection, nc-nom, élection, [n-1]), si(',', ponct-pun, ',', [let-1]), si(rapporte, v-ver:pres, rapporter, [dr(0,dl(1,s,s),np)-1]), si('Richard', npp-nam, 'Richard', [dr(0,np,np)-1]), si('Galpin', npp-nam, 'Galpin', [np-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(de, p-prp, de, [n-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1758, Result) :-
      prob_parse([ si('Poutine', npp-nam, 'Poutine', [np-1]), si(va, v-ver:pres, aller, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(élections, nc-nom, élection, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2008, pro-num, 2008, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1759, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1000, det-num, 1000, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(médias, nc-nom, média, [n-1]), si(russes, adj-adj, russe, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(étrangers, adj-adj, étranger, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(inscrits, vpp-ver:pper, inscrire, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(devenue, vpp-ver:pper, devenir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(événement, nc-nom, événement, [n-1]), si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1760, Result) :-
      prob_parse([ si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(1000, det-num, 1000, [dr(0,np,n)-1]), si(membres, nc-nom, membre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(inscrits, vpp-ver:pper, inscrire, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(conférence, nc-nom, conférence, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(presse, nc-nom, presse, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1761, Result) :-
      prob_parse([ si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(détaillant, nc-nom, détaillant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [let-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(revenu, vpp-ver:pper, revenir, [dr(0,dl(0,np,s_ppart),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(opposition, nc-nom, opposition, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pilule, nc-nom, pilule, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(lendemain, nc-nom, lendemain, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(accepté, vpp-ver:pper, accepter, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(la, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), si(vendre, vinf-ver:infi, vendre, [dr(0,dl(0,np,s_inf),np)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(3700, det-num, 3700, [dr(0,np,n)-1]), si(pharmacies, nc-nom, pharmacie, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1762, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(fait, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(suite, nc-nom, suite, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(réussie, vpp-ver:pper, réussir, [dl(0,n,n)-1]), si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(détaillant, nc-nom, détaillant, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Illinois', npp-nam, 'Illinois', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(promulgué, vpp-ver:pper, promulguer, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(lois, nc-nom, loi, [n-1]), si(obligeant, vpr-ver:ppre, obliger, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pharmaciens, nc-nom, pharmacien, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(remplir, vinf-ver:infi, remplir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ordonnances, nc-nom, ordonnance, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(contraceptif, nc-nom, contraceptif, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(urgence, nc-nom, urgence, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1763, Result) :-
      prob_parse([ si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(détaillant, nc-nom, détaillant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1764, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,dr(0,s,s),n)-1]), si(semaine, nc-nom, semaine, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(procureur, nc-nom, procureur, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Connecticut', npp-nam, 'Connecticut', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Richard', npp-nam, 'Richard', [dr(0,np,np)-1]), si('Blumenthal', npp-nam, 'Blumenthal', [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), si(monter, vinf-ver:infi, monter, [dl(0,np,s_inf)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(pression, nc-nom, pression, [n-1]), si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), si(déclarant, vpr-ver:ppre, déclarer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(étendrait, v-ver:impf, étendre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(plus, adv-adv, plus, [dl(1,s,s)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(régime, nc-nom, régime, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(assurance, nc-nom, assurance, [n-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ses, det-det:pos, son, [dr(0,np,n)-1]), si('188.000', adj-num, '188.000', [dr(0,n,n)-1]), si(employés, nc-nom, employé, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(couvrir, vinf-ver:infi, couvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(ordonnances, nc-nom, ordonnance, [n-1]), si(remplies, vpp-ver:pper, remplir, [dl(0,n,n)-1]), si(chez, p-prp, chez, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),s_q)-1]), si(moins, adv-adv, moins, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(chaîne, nc-nom, chaîne, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(accepte, v-ver:pres, accepter, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(stocker, vinf-ver:infi, stocker, [dr(0,dl(0,np,s_inf),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pilules, nc-nom, pilule, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1765, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(procureur, nc-nom, procureur, [n-1]), si(général, adj-adj, général, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Connecticut', npp-nam, 'Connecticut', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('Richard', npp-nam, 'Richard', [dr(0,np,np)-1]), si('Blumenthal', npp-nam, 'Blumenthal', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si('188.000', det-num, '188.000', [dr(0,np,n)-1]), si(employés, nc-nom, employé, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1766, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(pilule, nc-nom, pilule, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(lendemain, nc-nom, lendemain, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(doit, v-ver:pres, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(prise, vpp-ver:pper, prendre, [dl(0,np,s_pass)-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(72, adj-num, 72, [dr(0,n,n)-1]), si(heures, nc-nom, heure, [n-1]), si(suivant, vpr-ver:ppre, suivre, [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(rapport, nc-nom, rapport, [n-1]), si(sexuel, adj-adj, sexuel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(disponible, adj-adj, disponible, [dl(0,n,n)-1]), si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), si(ordonnance, nc-nom, ordonnance, [n-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si('Amérique', npp-nam, 'Amérique', [n-1]), si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(recommandations, nc-nom, recommandation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(groupe, nc-nom, groupe, [n-1]), si(consultatif, adj-adj, consultatif, [dl(0,n,n)-1]), si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Food', npp-nam, 'Food', [dr(0,n,n)-1]), si(and, et-kon, and, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), si('Drug', npp-nam, 'Drug', [dr(0,n,n)-1]), si('Administration', npp-nam, 'Administration', [n-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(opposition, nc-nom, opposition, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(militants, nc-nom, militant, [n-1]), si('anti-avortement', adj-adj, 'anti-avortement', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1767, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(pilule, nc-nom, pilule, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(lendemain, nc-nom, lendemain, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), si(obtenue, vpp-ver:pper, obtenir, [dl(0,np,s_pass)-1]), si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), si(ordonnance, nc-nom, ordonnance, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1768, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), si(',', ponct-pun, ',', [let-1]), si(trois, det-num, trois, [dr(0,np,n)-1]), si(femmes, nc-nom, femme, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Boston', npp-nam, 'Boston', [np-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(poursuivi, vpp-ver:pper, poursuivre, [dr(0,dl(0,np,s_ppart),np)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), si(succès, nc-nom, succès, [n-1]), si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), si(mois, nc-nom, mois, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(violé, vpp-ver:pper, violer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réglementations, nc-nom, réglementation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(exigent, v-ver:pres, exiger, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(pharmacies, nc-nom, pharmacie, [n-1]), si(aient, vs-ver:subp, avoir, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(stock, nc-nom, stock, [n-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(médicaments, nc-nom, médicament, [n-1]), si(couramment, adv-adv, couramment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(prescrits, vpp-ver:pper, prescrire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1769, Result) :-
      prob_parse([ si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(violé, vpp-ver:pper, violer, [dr(0,dl(0,np,s_ppart),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(réglementations, nc-nom, réglementation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('Etat', nc-nam, 'Etat', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1770, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(décision, nc-nom, décision, [n-1]), si(tardive, adj-adj, tardif, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(considérée, vpp-ver:pper, considérer, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(victoire, nc-nom, victoire, [n-1]), si(importante, adj-adj, important, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(moment, nc-nom, moment, [n-1]), si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(organisations, nc-nom, organisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(femmes, nc-nom, femme, [n-1]), si(craignent, v-ver:pres, craindre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avortement, nc-nom, avortement, [n-1]), si(soit, vs-ver:subp, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(menacé, vpp-ver:pper, menacer, [dl(0,np,s_pass)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1771, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(organisations, nc-nom, organisation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(femmes, nc-nom, femme, [n-1]), si(luttent, v-ver:pres, lutter, [dr(0,dl(0,np,s),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avortement, nc-nom, avortement, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1772, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), si(mois, nc-nom, mois, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Dakota', npp-nam, 'Dakota', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(décidé, vpp-ver:pper, décider, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(interdire, vinf-ver:infi, interdire, [dr(0,dl(0,np,s_inf),np)-1]), si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), si(avortement, nc-nom, avortement, [n-1]), si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si('État', nc-nam, 'État', [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(viol, nc-nom, viol, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(inceste, nc-nom, inceste, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1773, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si('Mississippi', npp-nam, 'Mississippi', [n-1]), si(envisage, v-ver:pres, envisager, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(législation, nc-nom, législation, [n-1]), si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1774, Result) :-
      prob_parse([ si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Dakota', npp-nam, 'Dakota', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Sud', npp-nam, 'Sud', [n-1]), si(',', ponct-pun, ',', [let-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avortement, nc-nom, avortement, [n-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(autorisé, vpp-ver:pper, autoriser, [dl(0,np,s_pass)-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), si(cas, nc-nom, cas, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(viol, nc-nom, viol, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(inceste, nc-nom, inceste, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1775, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(rapports, nc-nom, rapport, [n-1]), si(immédiats, adj-adj, immédiat, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(blessures, nc-nom, blessure, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(autorités, nc-nom, autorité, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dl(0,np,s_ppart),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elles, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), si(signe, nc-nom, signe, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(église, nc-nom, église, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Greenville', npp-nam, 'Greenville', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(75, det-num, 75, [dr(0,np,n)-1]), si(miles, nc-nom, mile, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Raleigh', npp-nam, 'Raleigh', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1776, Result) :-
      prob_parse([ si('Greenville', npp-nam, 'Greenville', [np-1]), si(se, clr-pro:per, se, [cl_r-1]), si(trouve, v-ver:pres, trouver, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(75, det-num, 75, [dr(0,np,n)-1]), si(miles, nc-nom, mile, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(est, nc-nom, est, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Raleigh', npp-nam, 'Raleigh', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1777, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(pompiers, nc-nom, pompier, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(appelés, vpp-ver:pper, appeler, [dr(0,dl(0,np,s_pass),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(église, nc-nom, église, [n-1]), si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), si('Memorial', npp-nam, 'Memorial', [n-1]), si(peu, adv-adv, peu, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si('23h', nc-nom, '23h', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(trouvé, vpp-ver:pper, trouver, [dr(0,dl(0,np,s_ppart),np)-1]), si(de, det-prp, de, [dr(0,np,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fumée, nc-nom, fumée, [n-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(échappant, vpr-ver:ppre, échapper, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(aile, nc-nom, aile, [n-1]), si(éducative, adj-adj, éducatif, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1778, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signalé, vpp-ver:pper, signaler, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(église, nc-nom, église, [n-1]), si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), si('Memorial', npp-nam, 'Memorial', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1779, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(répartiteurs, nc-nom, répartiteur, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(reçu, vpp-ver:pper, recevoir, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(signalement, nc-nom, signalement, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(église, nc-nom, église, [n-1]), si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), si('Unity', npp-nam, 'Unity', [dl(0,n,n)-1]), si('Free', npp-nam, 'Free', [dl(0,n,n)-1]), si('Will', npp-nam, 'Will', [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(environ, adv-adv, environ, [dr(0,np,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('demi-mile', nc-nom, 'demi-mile', [dr(0,n,n)-1]), si(du, p+d-prp:det, de, [n-1]), si('Memorial', npp-nam, 'Memorial', [n-1]), si(',', ponct-pun, ',', [let-1]), si(peu, adv-adv, peu, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(avant, p-prp, avant, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si('23h30', nc-nom, '23h30', [dr(0,dl(1,s,s),np)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1780, Result) :-
      prob_parse([ si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), si(incendie, nc-nom, incendie, [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(signalé, vpp-ver:pper, signaler, [dl(0,np,s_pass)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(église, nc-nom, église, [n-1]), si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), si('Unity', npp-nam, 'Unity', [dl(0,n,n)-1]), si('Free', npp-nam, 'Free', [dl(0,n,n)-1]), si('Will', npp-nam, 'Will', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1781, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si(police, nc-nom, police, [n-1]), si(enquêtait, v-ver:impf, enquêter, [dr(0,dl(0,np,s),pp)-1]), si(également, adv-adv, également, [dl(1,s,s)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(effraction, nc-nom, effraction, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(église, nc-nom, église, [n-1]), si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Oakmont', npp-nam, 'Oakmont', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(située, vpp-ver:pper, situer, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(quart, nc-nom, quart, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(mile, nc-nom, mile, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Memorial', npp-nam, 'Memorial', [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(caporal, nc-nom, caporal, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(police, nc-nom, police, [n-1]), si('Kip', npp-nam, 'Kip', [dl(0,n,n)-1]), si('Gaskins', npp-nam, 'Gaskins', [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1782, Result) :-
      prob_parse([ si('Kip', npp-nam, 'Kip', [dr(0,np,np)-1]), si('Gaskins', npp-nam, 'Gaskins', [np-1]), si(voulait, v-ver:impf, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), si(effraction, nc-nom, effraction, [n-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(église, nc-nom, église, [n-1]), si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si('Oakmont', npp-nam, 'Oakmont', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1783, Result) :-
      prob_parse([ si('Clinton', npp-nam, 'Clinton', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(arrive, v-ver:pres, arriver, [dr(0,dl(0,np,s),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(tête, nc-nom, tête, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(tous, adv-adv, tout, [dr(0,np,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(sondages, nc-nom, sondage, [n-1]), si(nationaux, adj-adj, national, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(candidats, nc-nom, candidat, [n-1]), si(démocrates, adj-adj, démocrate, [dl(0,n,n)-1]), si(probables, adj-adj, probable, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidentielle, nc-nom, présidentielle, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2008, pro-num, 2008, [np-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(critiquée, vpp-ver:pper, critiquer, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(de, det-prp, de, [dr(0,np,n)-1]), si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), si(militants, nc-nom, militant, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parti, nc-nom, parti, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), si(refusé, vpp-ver:pper, refuser, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(revenir, vinf-ver:infi, revenir, [dr(0,dl(0,np,s_inf),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(vote, nc-nom, vote, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2002, pro-num, 2002, [np-1]), si(autorisant, vpr-ver:ppre, autoriser, [dr(0,dl(0,n,n),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(action, nc-nom, action, [n-1]), si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1784, Result) :-
      prob_parse([ si('Clinton', npp-nam, 'Clinton', [np-1]), si(reçoit, v-ver:pres, recevoir, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(critiques, nc-nom, critique, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(autorisation, nc-nom, autorisation, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(intervenir, vinf-ver:infi, intervenir, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Irak', npp-nam, 'Irak', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1785, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(dit, vpp-ver:pper, dire, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), si(aux, p+d-prp:det, à, [dr(0,pp_a,n)-1]), si(dirigeants, nc-nom, dirigeant, [n-1]), si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(ils, cls-pro:per, il, [np-1]), si(voulaient, v-ver:impf, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(ouvrir, vinf-ver:infi, ouvrir, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(négociations, nc-nom, négociation, [n-1]), si(formelles, adj-adj, formel, [dl(0,n,n)-1]), si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(possibilité, nc-nom, possibilité, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(localiser, vinf-ver:infi, localiser, [dr(0,dl(0,np,s_inf),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(missiles, nc-nom, missile, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(interception, nc-nom, interception, [n-1]), si(basés, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(sol, nc-nom, sol, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cadre, nc-nom, cadre, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(antimissile, adj-adj, antimissile, [dl(0,n,n)-1]), si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(large, adj-adj, large, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dl(1,s,dl(0,np,s_ppart))-1]), si(lundi, nc-nom, lundi, [dl(1,s,dl(0,np,s_ppart))-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si('porte-parole', nc-nom, 'porte-parole', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ambassade, nc-nom, ambassade, [n-1]), si(américaine, adj-adj, américain, [dl(0,n,n)-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Varsovie', npp-nam, 'Varsovie', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1786, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(veulent, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(élargir, vinf-ver:infi, élargir, [dr(0,dl(0,np,s_inf),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(antimissile, adj-adj, antimissile, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1787, Result) :-
      prob_parse([ si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), si(demande, nc-nom, demande, [n-1]), si(intervient, v-ver:pres, intervenir, [dl(0,np,s)-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), si(deux, det-num, deux, [dr(0,np,n)-1]), si(ans, nc-nom, an, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(discussions, nc-nom, discussion, [n-1]), si(exploratoires, adj-adj, exploratoire, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('République', npp-nam, 'République', [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(voisine, adj-adj, voisin, [dl(0,n,n)-1]), si(ait, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(déclaré, vpp-ver:pper, déclarer, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('Washington', npp-nam, 'Washington', [np-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(demandé, vpp-ver:pper, demander, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(baser, vinf-ver:infi, baser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(station, nc-nom, station, [n-1]), si(radar, adj-adj, radar, [dl(0,n,n)-1]), si(dans, p-prp, dans, [dr(0,pp,np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(pays, nc-nom, pays, [n-1]), si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(autre, adj-adj, autre, [dr(0,n,n)-1]), si(partie, nc-nom, partie, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(système, nc-nom, système, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1788, Result) :-
      prob_parse([ si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), si(station, nc-nom, station, [n-1]), si(radar, nc-nom, radar, [dl(0,n,n)-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(basée, vpp-ver:pper, baser, [dr(0,dl(0,np,s_pass),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si('Washington', npp-nam, 'Washington', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1789, Result) :-
      prob_parse([ si('Washington', npp-nam, 'Washington', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(cherché, vpp-ver:pper, chercher, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), si(reprises, nc-nom, reprise, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(rassurer, vinf-ver:infi, rassurer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(rien, pro-pro:ind, rien, [np-1]), si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), si(craindre, vinf-ver:infi, craindre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(système, nc-nom, système, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1790, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Russie', npp-nam, 'Russie', [n-1]), si(craint, v-ver:pres, craindre, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1791, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(parlements, nc-nom, parlement, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), si(devraient, v-ver:cond, devoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), si(abord, nc-nom, abord, [n-1]), si(approuver, vinf-ver:infi, approuver, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1792, Result) :-
      prob_parse([ si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(gouvernements, nc-nom, gouvernement, [n-1]), si(aient, vs-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(exprimé, vpp-ver:pper, exprimer, [dr(0,dl(0,np,s_ppart),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(soutien, nc-nom, soutien, [n-1]), si(',', ponct-pun, ',', [let-1]), si(ils, cls-pro:per, il, [np-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(faibles, adj-adj, faible, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(font, v-ver:pres, faire, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), si(face, nc-nom, face, [np-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(large, adj-adj, large, [dr(0,n,n)-1]), si(opposition, nc-nom, opposition, [n-1]), si(publique, adj-adj, public, [dl(0,n,n)-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(plan, nc-nom, plan, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1793, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(parlements, nc-nom, parlement, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), si(approuvent, v-ver:pres, approuver, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plan, nc-nom, plan, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1794, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(partis, nc-nom, parti, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(opposition, nc-nom, opposition, [n-1]), si(tchèques, adj-adj, tchèque, [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(prononcés, vpp-ver:pper, prononcer, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(coalition, nc-nom, coalition, [n-1]), si(gouvernementale, adj-adj, gouvernemental, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(premier, adj-num, premier, [dr(0,n,n)-1]), si(ministre, nc-nom, ministre, [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(pas, adv-adv, pas, [dr(0,np,np)-1]), si(assez, adv-adv, assez, [dr(0,np,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(voix, nc-nom, voix, [n-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(mesures, nc-nom, mesure, [n-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('elle-même', pro-pro:per, 'elle-même', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1795, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(partis, nc-nom, parti, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(opposition, nc-nom, opposition, [n-1]), si(tchèques, adj-adj, tchèque, [dl(0,n,n)-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),pp)-1]), si(contre, p-prp, contre, [dr(0,pp,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(système, nc-nom, système, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1796, Result) :-
      prob_parse([ si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), si('Moscou', npp-nam, 'Moscou', [np-1]), si(',', ponct-pun, ',', [let-1]), si('Andreï', npp-nam, 'Andreï', [dr(0,np,np)-1]), si('Kokochine', npp-nam, 'Kokochine', [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(dirige, v-ver:pres, diriger, [dr(0,dl(0,np,s),np)-1]), si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(comité, nc-nom, comité, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(parlement, nc-nom, parlement, [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(liens, nc-nom, lien, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(anciennes, adj-adj, ancien, [dr(0,n,n)-1]), si(nations, nc-nom, nation, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(bloc, nc-nom, bloc, [n-1]), si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(prévenu, vpp-ver:pper, prévenir, [dr(0,dl(0,np,s_ppart),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(approbation, nc-nom, approbation, [n-1]), si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(plan, nc-nom, plan, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(passerait, v-ver:cond, passer, [dr(0,dl(0,np,s),pp)-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(sans, p-prp, sans, [dr(0,pp,n)-1]), si(conséquences, nc-nom, conséquence, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1797, Result) :-
      prob_parse([ si('Andrei', npp-nam, 'Andrei', [dr(0,np,np)-1]), si('Kokoshin', npp-nam, 'Kokoshin', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), si(chef, nc-nom, chef, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Conseil', npp-nam, 'Conseil', [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(sécurité, nc-nom, sécurité, [n-1]), si(russe, adj-adj, russe, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1798, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(chercheront, v-ver:pres, chercher, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si(service, nc-nom, service, [n-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(nombre, nc-nom, nombre, [n-1]), si(limité, vpp-ver:pper, limité, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(lanceurs, nc-nom, lanceur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(silos, nc-nom, silo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(antimissiles, adj-adj, antimissile, [dl(0,n,n)-1]), si(basés, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(sol, nc-nom, sol, [n-1]), si(',', ponct-pun, ',', [let-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(intercepteurs, nc-nom, intercepteur, [n-1]), si(associés, adj-adj, associer, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(semblables, adj-adj, semblable, [dr(0,dl(0,n,n),pp_a)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(ceux, pro-pro:dem, celui, [np-1]), si(actuellement, adv-adv, actuellement, [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(service, nc-nom, service, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Fort', npp-nam, 'Fort', [dr(0,np,np)-1]), si('Greely', npp-nam, 'Greely', [np-1]), si(',', ponct-pun, ',', [let-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si('Alaska', npp-nam, 'Alaska', [n-1]), si(',', ponct-pun, ',', [let-1]), si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(déployer, vinf-ver:infi, déployer, [dr(0,dl(0,np,s_inf),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(radar, nc-nom, radar, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(bande, nc-nom, bande, [n-1]), si('X', npp-nam, 'X', [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(suivi, nc-nom, suivi, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), si('mi-parcours', nc-nom, 'mi-parcours', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(discrimination, nc-nom, discrimination, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(menaces, nc-nom, menace, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(missiles, nc-nom, missile, [n-1]), si(balistiques, adj-adj, balistique, [dl(0,n,n)-1]), si(provenant, vpr-ver:ppre, provenir, [dr(0,dl(0,n,n),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1799, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(achètent, v-ver:pres, acheter, [dr(0,dl(0,np,s),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(lanceurs, nc-nom, lanceur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(silos, nc-nom, silo, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(défense, nc-nom, défense, [n-1]), si(basés, vpp-ver:pper, baser, [dr(0,dl(0,n,n),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(sol, nc-nom, sol, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1800, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si('ex-président', nc-nom, 'ex-président', [n-1]), si(peut, v-ver:pres, pouvoir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(devenir, vinf-ver:infi, devenir, [dr(0,dl(0,np,s_inf),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(superstar, nc-nom, superstar, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(politique, nc-nom, politique, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1801, Result) :-
      prob_parse([ si('C\'', cls-pro:dem, 'C\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(stratège, nc-nom, stratège, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si(affûté, vpp-ver:pper, affûté, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1802, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(connaît, v-ver:pres, connaître, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(institution, nc-nom, institution, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(présidence, nc-nom, présidence, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1803, Result) :-
      prob_parse([ si('Ses', det-det:pos, 'Ses', [dr(0,np,n)-1]), si(compétences, nc-nom, compétence, [n-1]), si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,n)-1]), si(collecte, nc-nom, collecte, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(fonds, nc-nom, fonds, [n-1]), si(sont, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(inégalées, adj-adj, inégalé, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1804, Result) :-
      prob_parse([ si('Tout', adv-adv, 'Tout', [dr(0,np,np)-1]), si(cela, pro-pro:dem, celer, [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(bon, adj-adj, bon, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), si('peut-être', adv-adv, 'peut-être', [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(trop, adv-adv, trop, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(bon, adj-adj, bon, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(sondage, nc-nom, sondage, [n-1]), si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(septembre, nc-nom, septembre, [n-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(sa, det-det:pos, son, [dr(0,np,n)-1]), si(cote, nc-nom, cote, [n-1]), si(favorable, adj-adj, favorable, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), si(élevée, vpp-ver:pper, élevé, [dl(0,n,n)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(celle, pro-pro:dem, celui, [np-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), si(elle, pro-pro:per, lui, [np-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(60, det-num, 60, [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), si(50, det-num, 50, [dr(0,np,n)-1]), si('%.', nc-abr, '%.', [n-1])], Result).
sent(1805, Result) :-
      prob_parse([ si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(stratège, nc-nom, stratège, [n-1]), si(politique, adj-adj, politique, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1806, Result) :-
      prob_parse([ si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),n)-1]), si(ici, adv-adv, ici, [n-1]), si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), si(jour, nc-nom, jour, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(élection, nc-nom, élection, [n-1]), si(présidentielle, adj-adj, présidentiel, [dl(0,n,n)-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(2008, pro-num, 2008, [np-1]), si(',', ponct-pun, ',', [let-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(fascination, nc-nom, fascination, [n-1]), si(nationale, adj-adj, national, [dl(0,n,n)-1]), si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Clinton', npp-nam, 'Clinton', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(mariage, nc-nom, mariage, [n-1]), si(sera, v-ver:futu, être, [dr(0,dl(0,np,s),pp)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(centre, nc-nom, centre, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(course, nc-nom, course, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1807, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(complexe, nc-nom, complexe, [n-1]), si('médiatico-industriel', adj-adj, 'médiatico-industriel', [dl(0,n,n)-1]), si(se, clr-pro:per, se, [cl_r-1]), si(nourrira, v-ver:futu, nourrir, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), si(nouveau, adj-adj, nouveau, [n-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si('Clinton', npp-nam, 'Clinton', [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(passé, nc-nom, passé, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(leur, det-det:pos, son, [dr(0,np,n)-1]), si(avenir, nc-nom, avenir, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1808, Result) :-
      prob_parse([ si('De', det-prp, 'De', [dr(0,np,n)-1]), si(nouvelles, adj-adj, nouveau, [dr(0,n,n)-1]), si(élections, nc-nom, élection, [n-1]), si(auront, v-ver:futu, avoir, [dr(0,dl(0,np,s),np)-1]), si(lieu, nc-nom, lieu, [np-1]), si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), si(2008, pro-num, 2008, [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1809, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(delà, adv-adv, delà, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(questions, nc-nom, question, [n-1]), si(sexuelles, adj-adj, sexuel, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(il, cls-pro:per, il, [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(besoin, nc-nom, besoin, [n-1]), si(perçu, vpp-ver:pper, percevoir, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(attention, nc-nom, attention, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si('-', ponct-pun, '-', [let-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), si(adulation, nc-nom, adulation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(même, adv-adv, même, [dl(0,n,n)-1]), si('-', ponct-pun, '-', [let-1]), si(illustré, vpp-ver:pper, illustrer, [dr(0,dl(0,n,n),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(histoire, nc-nom, histoire, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(voyage, nc-nom, voyage, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Coupe', nc-nam, 'Coupe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si(cette, det-pro:dem, ce, [dr(0,dl(0,n,n),n)-1]), si(année, nc-nom, année, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1810, Result) :-
      prob_parse([ si('Clinton', npp-nam, 'Clinton', [np-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(fait, vpp-ver:pper, faire, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(voyage, nc-nom, voyage, [n-1]), si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Coupe', nc-nam, 'Coupe', [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('Berlin', npp-nam, 'Berlin', [np-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1811, Result) :-
      prob_parse([ si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), si(cours, nc-nom, cours, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(derniers, adj-adj, dernier, [dr(0,n,n)-1]), si(mois, nc-nom, mois, [n-1]), si(',', ponct-pun, ',', [let-1]), si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(apparu, vpp-ver:pper, apparaître, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(chef, nc-nom, chef, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(campagne, nc-nom, campagne, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(son, det-det:pos, son, [dr(0,np,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(affirmant, vpr-ver:ppre, affirmer, [dr(0,dl(0,np,s_ppres),s_q)-1]), si(publiquement, adv-adv, publiquement, [dl(1,s,s)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(grande, adj-adj, grand, [dr(0,n,n)-1]), si(présidente, nc-nom, président, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), si(même, adv-adv, même, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(meilleure, adj-adj, meilleur, [dr(0,dl(0,n,n),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,np)-1]), si(lui, pro-pro:per, luire, [np-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(entrerait, v-ver:impf, entrer, [dr(0,dl(0,np,s),pp)-1]), si(à, p-prp, à, [dr(0,pp_a,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Maison', npp-nam, 'Maison', [n-1]), si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(expérience, nc-nom, expérience, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1812, Result) :-
      prob_parse([ si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), si('Clinton', npp-nam, 'Clinton', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(épouse, nc-nom, épouse, [n-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(président, nc-nom, président, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1813, Result) :-
      prob_parse([ si('Alimenté', vpp-ver:pper, 'Alimenté', [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si(hausse, nc-nom, hausse, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(prix, nc-nom, prix, [n-1]), si(mondiaux, adj-adj, mondial, [dl(0,n,n)-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), si(an, nc-nom, an, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(augmentation, nc-nom, augmentation, [n-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(importations, nc-nom, importation, [n-1]), si(chinoises, adj-adj, chinois, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), si(déficit, nc-nom, déficit, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cinquième, adj-num, cinquième, [dr(0,n,n)-1]), si(record, nc-nom, record, [n-1]), si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), si(consécutif, adj-adj, consécutif, [dl(0,n,n)-1]), si(des, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1814, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(importations, nc-nom, importation, [n-1]), si(chinoises, adj-adj, chinois, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(cinquième, adj-num, cinquième, [dr(0,n,n)-1]), si(record, nc-nom, record, [n-1]), si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1815, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), si(écart, nc-nom, écart, [n-1]), si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(seule, adj-adj, seul, [dl(0,n,n)-1]), si(était, v-ver:impf, être, [dr(0,dl(0,np,s),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('232,5', det-num, '232,5', [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),n)-1]), si(année, nc-nom, année, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(déséquilibre, nc-nom, déséquilibre, [n-1]), si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(aient, v-ver:subp, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(enregistré, vpp-ver:pper, enregistrer, [dr(0,dl(0,np,s_ppart),np)-1]), si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(seul, adj-adj, seul, [dr(0,n,n)-1]), si(pays, nc-nom, pays, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1816, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), si(écart, nc-nom, écart, [n-1]), si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1817, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(dément, v-ver:pres, démentir, [dr(0,dl(0,np,s),np)-1]), si(ces, det-pro:dem, ce, [dr(0,np,n)-1]), si(allégations, nc-nom, allégation, [n-1]), si(',', ponct-pun, ',', [let-1]), si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), si(elle, cls-pro:per, lui, [np-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(autorise, v-ver:pres, autoriser, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(yuan, nc-nom, yuan, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(échanger, vinf-ver:infi, échanger, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fourchette, nc-nom, fourchette, [n-1]), si(étroite, adj-adj, étroit, [dl(0,n,n)-1]), si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(dollar, nc-nom, dollar, [n-1]), si(américain, adj-adj, américain, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1818, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(autorise, v-ver:pres, autoriser, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(yuan, nc-abr, yuan, [n-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(échanger, vinf-ver:infi, échanger, [dl(0,cl_r,dl(0,np,s_inf))-1]), si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(fourchette, nc-nom, fourchette, [n-1]), si(étroite, adj-adj, étroit, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1819, Result) :-
      prob_parse([ si('Elle', cls-pro:per, 'Elle', [np-1]), si('s\'', clr-pro:per, 's\'', [cl_r-1]), si(est, v-ver:pres, être, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), si(engagée, vpp-ver:pper, engager, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), si(yuan, nc-nom, yuan, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), si(librement, adv-adv, librement, [dl(1,s,s)-1]), si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(avenir, nc-nom, avenir, [n-1]), si(',', ponct-pun, ',', [let-1]), si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(affirme, v-ver:pres, affirmer, [dr(0,dl(0,np,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(toute, det-pro:ind, tout, [dr(0,np,n)-1]), si(réforme, nc-nom, réforme, [n-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(serait, v-ver:cond, être, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(précipitée, vpp-ver:pper, précipiter, [dl(0,np,s_pass)-1]), si(',', ponct-pun, ',', [let-1]), si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), si(elle, cls-pro:per, lui, [np-1]), si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), si(veut, v-ver:pres, vouloir, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), si(pas, adv-adv, pas, [dl(1,s,s)-1]), si(risquer, vinf-ver:infi, risquer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(déstabiliser, vinf-ver:infi, déstabiliser, [dr(0,dl(0,np,s_inf),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(économie, nc-nom, économie, [n-1]), si(chinoise, adj-adj, chinois, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(repose, v-ver:pres, repose, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('exportations..', nc-nom, 'exportations..', [n-1])], Result).
sent(1820, Result) :-
      prob_parse([ si('La', det-det:art, 'La', [dr(0,np,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(économie, nc-nom, économie, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(repose, v-ver:pres, repose, [dr(0,dl(0,np,s),pp)-1]), si(sur, p-prp, sur, [dr(0,pp,np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('exportations..', nc-nom, 'exportations..', [n-1])], Result).
sent(1821, Result) :-
      prob_parse([ si('L\'', det-det:art, 'L\'', [dr(0,dr(0,s,s),n)-1]), si(année, nc-nom, année, [n-1]), si(dernière, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si('États-Unis', npp-nam, 'États-Unis', [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(vu, vpp-ver:pper, voir, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(exportations, nc-nom, exportation, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(biens, nc-nom, bien, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), si(services, nc-nom, service, [n-1]), si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),pp)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('12,8', det-num, '12,8', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si('1,44', det-num, '1,44', [dr(0,np,n)-1]), si(trillion, nc-nom, trillion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(',', ponct-pun, ',', [let-1]), si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), si(que, cs-kon, que, [dr(0,s_q,s)-1]), si(leurs, det-det:pos, leur, [dr(0,np,n)-1]), si(importations, nc-nom, importation, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(progressé, vpp-ver:pper, progresser, [dl(0,np,s_ppart)-1]), si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), si('10,5', det-num, '10,5', [dr(0,np,n)-1]), si('%', nc-sym, '%', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), si('2,2', det-num, '2,2', [dr(0,np,n)-1]), si(trillions, nc-nom, trillion, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si(',', ponct-pun, ',', [let-1]), si(a, v-ver:pres, avoir, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), si(indiqué, vpp-ver:pper, indiquer, [dl(1,s,dl(0,np,s_ppart))-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(département, nc-nom, département, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si('Commerce', nc-nam, 'Commerce', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1822, Result) :-
      prob_parse([ si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), si(exportations, nc-nom, exportation, [n-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(augmenté, vpp-ver:pper, augmenter, [dr(0,dl(0,np,s_ppart),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si('10,5%.', pro-num, '10,5%.', [dr(0,np,n)-1])], Result).
sent(1823, Result) :-
      prob_parse([ si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(grand, adj-adj, grand, [dr(0,n,n)-1]), si(consommateur, nc-nom, consommateur, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(pétrole, nc-nom, pétrole, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si(monde, nc-nom, monde, [n-1]), si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(importations, nc-nom, importation, [n-1]), si(américaines, adj-adj, américain, [dl(0,n,n)-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(record, nc-nom, record, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si('302,5', det-num, '302,5', [dr(0,np,n)-1]), si(milliards, nc-nom, milliard, [n-1]), si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), si(dollars, nc-nom, dollar, [n-1]), si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), si(an, nc-nom, an, [n-1]), si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), si(alimentées, vpp-ver:pper, alimenter, [dr(0,dl(0,np,s_pass),pp_par)-1]), si(par, p-prp, par, [dr(0,pp_par,np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(prix, nc-nom, prix, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(brut, nc-nom, brut, [n-1]), si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(atteint, vpp-ver:pper, atteindre, [dr(0,dl(0,np,s_ppart),np)-1]), si(des, det-prp:det, un, [dr(0,np,n)-1]), si(sommets, nc-nom, sommet, [n-1]), si(durant, p-prp, durer, [dr(0,dl(1,s,s),np)-1]), si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), si(été, nc-nom, été, [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), si(moment, nc-nom, moment, [n-1]), si(du, p+d-prp:det, de, [dr(0,dl(0,n,n),n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Hezbollah', npp-nam, 'Hezbollah', [n-1]), si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), si('Liban', npp-nam, 'Liban', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1824, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(y, clo-pro:per, y, [cl_y-1]), si(a, v-ver:pres, avoir, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), si(eu, vpp-ver:pper, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), si(un, det-det:art, un, [dr(0,np,n)-1]), si(conflit, nc-nom, conflit, [n-1]), si(entre, p-prp, entrer, [dr(0,dl(0,n,n),np)-1]), si('Israël', npp-nam, 'Israël', [np-1]), si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si('Liban', npp-nam, 'Liban', [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1825, Result) :-
      prob_parse([ si('Loin', adv-adv, 'Loin', [dr(0,dr(0,s,s),pp_de)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(site, nc-nom, site, [n-1]), si(olympique, adj-adj, olympique, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), si(des, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(briques, nc-nom, brique, [n-1]), si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), si(du, p+d-prp:det, de, [dr(0,pp_de,n)-1]), si(bois, nc-nom, bois, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cité', npp-nam, 'Cité', [n-1]), si(interdite, vpp-ver:pper, interdire, [dl(0,n,n)-1]), si(',', ponct-pun, ',', [let-1]), si('c\'', cls-pro:dem, 'c\'', [np-1]), si(est, v-ver:pres, être, [dr(0,dl(0,np,s),dl(0,n,n))-1]), si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(si, cs-kon, si, [dr(0,dl(0,n,n),s)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(présence, nc-nom, présence, [n-1]), si(extraterrestre, adj-adj, extraterrestre, [dl(0,n,n)-1]), si(avait, v-ver:impf, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(débarqué, vpp-ver:pper, débarquer, [dl(0,np,s_ppart)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1826, Result) :-
      prob_parse([ si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), si(extraterrestres, nc-nom, extraterrestre, [n-1]), si(ont, v-ver:pres, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), si(été, vpp-ver:pper, être, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), si(vus, vpp-ver:pper, voir, [dr(0,dl(0,np,s_pass),pp)-1]), si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), si(de, p-prp, de, [dr(0,pp_de,np)-1]), si(la, det-det:art, le, [dr(0,np,n)-1]), si('Cité', nc-nam, 'Cité', [n-1]), si(interdite, vpp-ver:pper, interdire, [dl(0,n,n)-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1827, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(les, det-det:art, le, [dr(0,np,n)-1]), si(équipes, nc-nom, équipe, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(rester, vinf-ver:infi, rester, [dl(0,np,s_inf)-1]), si(ici, adv-adv, ici, [dl(1,dl(0,np,s),dl(0,np,s))-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(période, nc-nom, période, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1828, Result) :-
      prob_parse([ si('Il', cls-pro:per, 'Il', [np-1]), si(est, v-ver:pres, être, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), si(le, det-det:art, le, [dr(0,np,n)-1]), si(droit, nc-nom, droit, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),pp)-1]), si(en, p-prp, en, [dr(0,pp,n)-1]), si('Chine', npp-nam, 'Chine', [n-1]), si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), si(une, det-det:art, un, [dr(0,np,n)-1]), si(longue, adj-adj, long, [dr(0,n,n)-1]), si(période, nc-nom, période, [n-1]), si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), si(temps, nc-nom, temps, [n-1]), si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
