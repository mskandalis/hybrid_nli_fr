sent(1, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(faite, vpp-ver:pper, faite, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(facture, nc-nom, facture, [n-1]), ex_si(fiscale, adj-adj, fiscale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('27,5', det-num, '27,5', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Yukos', npp-nam, 'Yukos', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('Yuganskneftegaz', npp-nam, 'Yuganskneftegaz', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('9,4', det-num, '9,4', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connue, vpp-ver:pper, connue, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Baikalfinansgroup', npp-nam, 'Baikalfinansgroup', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rachetée, vpp-ver:pper, rachetée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(la, det-det:art, la, [dr(0,pp_par,np)-1]), ex_si(compagnie, nc-nom, compagnie, [dr(0,np,n)-1]), ex_si(pétrolière, adj-adj, pétrolière, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Rosneft', npp-nam, 'Rosneft', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2, Result) :-
      prob_parse([ ex_si('Baikalfinansgroup', npp-nam, 'Baikalfinansgroup', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Rosneft', npp-nam, 'Rosneft', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(3, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(faite, vpp-ver:pper, faite, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(facture, nc-nom, facture, [n-1]), ex_si(fiscale, adj-adj, fiscale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('27,5', det-num, '27,5', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Yukos', npp-nam, 'Yukos', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('Yuganskneftegaz', npp-nam, 'Yuganskneftegaz', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('9,4', det-num, '9,4', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connue, vpp-ver:pper, connue, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Baikalfinansgroup', npp-nam, 'Baikalfinansgroup', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rachetée, vpp-ver:pper, rachetée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(la, det-det:art, la, [dr(0,pp_par,np)-1]), ex_si(compagnie, nc-nom, compagnie, [dr(0,np,n)-1]), ex_si(pétrolière, adj-adj, pétrolière, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Rosneft', npp-nam, 'Rosneft', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(4, Result) :-
      prob_parse([ ex_si('Yuganskneftegaz', npp-nam, 'Yuganskneftegaz', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coûté, vpp-ver:pper, coûté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('27,5', det-num, '27,5', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('US', adj-abr, 'US', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(5, Result) :-
      prob_parse([ ex_si('Loraine', npp-nam, 'Loraine', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pièce, nc-nom, pièce, [n-1]), ex_si('Dreamgirls', npp-nam, 'Dreamgirls', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Broadway', npp-nam, 'Broadway', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si('Off-Broadway', npp-nam, 'Off-Broadway', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Does', npp-nam, 'Does', [np-1]), ex_si('A', npp-nam, 'A', [dr(0,np,np)-1]), ex_si('Tiger', npp-nam, 'Tiger', [dr(0,np,np)-1]), ex_si('Have', npp-nam, 'Have', [np-1]), ex_si('A', npp-nam, 'A', [dr(0,dl(0,np,np),np)-1]), ex_si('Necktie', npp-nam, 'Necktie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(6, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1999, pro-num, 1999, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Loraine', npp-nam, 'Loraine', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendue, vpp-ver:pper, rendue, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(7, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('RENT', npp-nam, 'RENT', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(distribuée, vpp-ver:pper, distribuée, [dl(0,np,s_pass)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Mimi', npp-nam, 'Mimi', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(doublure, nc-nom, doublure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(8, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Does', et-nam, 'Does', [dr(0,dr(0,s,np),pp)-1]), ex_si('A', et-nam, 'A', [dr(0,pp_a,np)-1]), ex_si('Tiger', npp-nam, 'Tiger', [dr(0,np,np)-1]), ex_si('Have', npp-nam, 'Have', [np-1]), ex_si('A', et-nam, 'A', [dr(0,dl(0,np,np),np)-1]), ex_si('Necktie', npp-nam, 'Necktie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(produit, vpp-ver:pper, produit, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(9, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Extra', npp-nam, 'Extra', [dr(0,n,n)-1]), ex_si('Girl', npp-nam, 'Girl', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si(1923, pro-num, 1923, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sue', npp-nam, 'Sue', [dr(0,np,np)-1]), ex_si('Graham', npp-nam, 'Graham', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(jouée, vpp-ver:pper, jouée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Mabel', npp-nam, 'Mabel', [dr(0,np,np)-1]), ex_si('Normand', npp-nam, 'Normand', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Hollywood', npp-nam, 'Hollywood', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(10, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mabel', npp-nam, 'Mabel', [dr(0,np,np)-1]), ex_si('Normand', npp-nam, 'Normand', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Mack', npp-nam, 'Mack', [dr(0,np,np)-1]), ex_si('Sennett', npp-nam, 'Sennett', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(suite, nc-nom, suite, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(antérieurs, adj-adj, antérieurs, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(cinématographique, adj-adj, cinématographique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ouvre, v-ver:pres, ouvre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(ultérieurs, adj-adj, ultérieurs, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Hollywood', npp-nam, 'Hollywood', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,np)-1]), ex_si('Show', npp-nam, 'Show', [dr(0,np,np)-1]), ex_si('People', npp-nam, 'People', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(1928, pro-num, 1928, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('King', npp-nam, 'King', [dr(0,np,np)-1]), ex_si('Vidor', npp-nam, 'Vidor', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(11, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Extra', npp-nam, 'Extra', [dr(0,n,n)-1]), ex_si('Girl', npp-nam, 'Girl', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Sennett', npp-nam, 'Sennett', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(12, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(collision, nc-nom, collision, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bus, nc-nom, bus, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(camion, nc-nom, camion, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ouganda', npp-nam, 'Ouganda', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(21, det-num, 21, [dr(0,np,n)-1]), ex_si(blessés, nc-nom, blessés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(13, Result) :-
      prob_parse([ ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(collision, nc-nom, collision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bus, nc-nom, bus, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ouganda', npp-nam, 'Ouganda', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(14, Result) :-
      prob_parse([ ex_si('Prenez', vimp-ver:impe, 'Prenez', [dr(0,s,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(géant, nc-nom, géant, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si('Procter', npp-nam, 'Procter', [dl(0,n,n)-1]), ex_si(and, et-kon, and, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Gamble', npp-nam, 'Gamble', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(15, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(avec, p-prp, avec, [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(budget, nc-nom, budget, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1,8', det-num, '1,8', [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(gère, v-ver:pres, gère, [dr(0,dl(0,np,s),np)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(500, det-num, 500, [dr(0,np,n)-1]), ex_si(partenariats, nc-nom, partenariats, [n-1]), ex_si(actifs, adj-adj, actifs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),np)-1]), ex_si(beaucoup, pro-adv, beaucoup, [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(petites, adj-adj, petites, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(16, Result) :-
      prob_parse([ ex_si(500, det-num, 500, [dr(0,np,n)-1]), ex_si(petites, adj-adj, petites, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(partenaires, nc-nom, partenaires, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Procter', npp-nam, 'Procter', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Gamble', npp-nam, 'Gamble', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(17, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Magdy', npp-nam, 'Magdy', [dr(0,np,np)-1]), ex_si('el-Nashar', npp-nam, 'el-Nashar', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(rasé, vpp-ver:pper, rasé, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(près, adv-adv, près, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(avec, p-prp, avec, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attentats, nc-nom, attentats, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(commun, nc-nom, commun, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(52, det-num, 52, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si(poseurs, nc-nom, poseurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bombes, nc-nom, bombes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(18, Result) :-
      prob_parse([ ex_si(52, det-num, 52, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(poseurs, nc-nom, poseurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bombes, nc-nom, bombes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(19, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(approbation, nc-nom, approbation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(restés, vpp-ver:pper, restés, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élevés, vpp-ver:pper, élevés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(supérieurs, adj-adj, supérieurs, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(même, adv-adv, même, [dr(0,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(mari, nc-nom, mari, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(chuté, vpp-ver:pper, chuté, [dl(0,np,s_ppart)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%.', nc-abr, '%.', [n-1])], Result).
sent(20, Result) :-
      prob_parse([ ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(approuvent, v-ver:pres, approuvent, [dr(0,dl(0,np,s),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(21, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(récentes, adj-adj, récentes, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Dakosaurus', npp-nam, 'Dakosaurus', [n-1]), ex_si(proviennent, v-ver:pres, proviennent, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(crâne, nc-nom, crâne, [n-1]), ex_si(complet, adj-adj, complet, [dl(0,n,n)-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(étudié, vpp-ver:pper, étudié, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Diego', npp-nam, 'Diego', [dr(0,np,np)-1]), ex_si('Pol', npp-nam, 'Pol', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ohio', npp-nam, 'Ohio', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Zulma', npp-nam, 'Zulma', [dr(0,np,np)-1]), ex_si('Gasparini', npp-nam, 'Gasparini', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(argentine, adj-adj, argentine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Plata', npp-nam, 'Plata', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(collègues, nc-nom, collègues, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(22, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si('Dakosaurus', nc-nam, 'Dakosaurus', [n-1]), ex_si(complet, adj-adj, complet, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Diego', npp-nam, 'Diego', [dr(0,np,np)-1]), ex_si('Pol', npp-nam, 'Pol', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(23, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(17, adj-num, 17, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(35, pro-num, 35, [np-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), ex_si(23, pro-num, 23, [np-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), ex_si(1, det-num, 1, [dr(0,np,n)-1]), ex_si(abstention, nc-nom, abstention, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(amendement, nc-nom, amendement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(électorale, adj-adj, électorale, [dl(0,n,n)-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(voter, vinf-ver:infi, voter, [dl(0,np,s_inf)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(présenter, vinf-ver:infi, présenter, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(candidates, nc-nom, candidates, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(24, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(amendement, nc-nom, amendement, [n-1]), ex_si(favorable, adj-adj, favorable, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(25, Result) :-
      prob_parse([ ex_si('J\'', cls-pro:per, 'J\'', [np-1]), ex_si(ai, v-ver:pres, ai, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si('aller-retour', adj-adj, 'aller-retour', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Abuja', npp-nam, 'Abuja', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Yola', npp-nam, 'Yola', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adamawa', npp-nam, 'Adamawa', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Abuja', npp-nam, 'Abuja', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bus, nc-nom, bus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(quatorze, det-num, quatorze, [dr(0,np,n)-1]), ex_si(places, nc-nom, places, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(26, Result) :-
      prob_parse([ ex_si('Abuja', npp-nam, 'Abuja', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Adamawa', npp-nam, 'Adamawa', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(27, Result) :-
      prob_parse([ ex_si('Accardo', npp-nam, 'Accardo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Settimane', npp-nam, 'Settimane', [dr(0,n,n)-1]), ex_si('Musicali', npp-nam, 'Musicali', [n-1]), ex_si('Internazionali', npp-nam, 'Internazionali', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Naples', npp-nam, 'Naples', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cordes, nc-nom, cordes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Crémone', npp-nam, 'Crémone', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si(1971, pro-num, 1971, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(refondé, vpp-ver:pper, refondé, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Orchestra', npp-nam, 'Orchestra', [n-1]), ex_si(da, et-ver:futu, da, [np-1]), ex_si('Camera', npp-nam, 'Camera', [np-1]), ex_si('Italiana', npp-nam, 'Italiana', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,dl(1,s,s)),np)-1]), ex_si('O.C.I', npp-abr, 'O.C.I', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(28, Result) :-
      prob_parse([ ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(meilleurs, adj-adj, meilleurs, [dr(0,n,n)-1]), ex_si(élèves, nc-nom, élèves, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Académie', npp-nam, 'Académie', [n-1]), ex_si('Walter', npp-nam, 'Walter', [dl(0,n,n)-1]), ex_si('Stauffer', npp-nam, 'Stauffer', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,dl(0,n,n),txt)-1])], Result).
sent(29, Result) :-
      prob_parse([ ex_si('Accardo', npp-nam, 'Accardo', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(membre, nc-nom, membre, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Académie', nc-nam, 'Académie', [n-1]), ex_si('Walter', npp-nam, 'Walter', [dl(0,n,n)-1]), ex_si('Stauffer', npp-nam, 'Stauffer', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(30, Result) :-
      prob_parse([ ex_si('Airbus', npp-nam, 'Airbus', [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(implanter, vinf-ver:infi, implanter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ingénierie, nc-nom, ingénierie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conception, nc-nom, conception, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Midlands', npp-nam, 'Midlands', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(profiter, vinf-ver:infi, profiter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(disponibilité, nc-nom, disponibilité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ingénierie, nc-nom, ingénierie, [n-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(disparition, nc-nom, disparition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('MG', npp-abr, 'MG', [dr(0,np,np)-1]), ex_si('Rover', npp-nam, 'Rover', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(constructeur, nc-nom, constructeur, [n-1]), ex_si(automobile, nc-nom, automobile, [dl(0,n,n)-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(faillite, nc-nom, faillite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(31, Result) :-
      prob_parse([ ex_si('Airbus', npp-nam, 'Airbus', [np-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ingénierie, nc-nom, ingénierie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conception, nc-nom, conception, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(32, Result) :-
      prob_parse([ ex_si('Alex', npp-nam, 'Alex', [dr(0,np,np)-1]), ex_si('Dyer', npp-nam, 'Dyer', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Santarchie', npp-nam, 'Santarchie', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Auckland', npp-nam, 'Auckland', [np-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(phénomène, nc-nom, phénomène, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(33, Result) :-
      prob_parse([ ex_si('Alex', npp-nam, 'Alex', [dr(0,np,np)-1]), ex_si('Dyer', npp-nam, 'Dyer', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si('Santarchie', npp-nam, 'Santarchie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(34, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1799, pro-num, 1799, [np-1]), ex_si(encore, adv-adv, encore, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prêtres, nc-nom, prêtres, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(emprisonnés, vpp-ver:pper, emprisonnés, [dl(0,np,s_pass)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(déportés, vpp-ver:pper, déportés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(colonies, nc-nom, colonies, [n-1]), ex_si(pénitentiaires, adj-adj, pénitentiaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(persécution, nc-nom, persécution, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(empirer, vinf-ver:infi, empirer, [dl(0,np,s_inf)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(dirigée, vpp-ver:pper, dirigée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si('Louis', npp-nam, 'Louis', [dl(0,n,n)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [dl(0,n,n)-1]), ex_si('Berthier', npp-nam, 'Berthier', [dl(0,n,n)-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Rome', npp-nam, 'Rome', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(emprisonné, vpp-ver:pper, emprisonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Pie', npp-nam, 'Pie', [dl(0,n,n)-1]), ex_si('VI', adj-num, 'VI', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(mourra, v-ver:simp, mourra, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(captivité, nc-nom, captivité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Valence', npp-nam, 'Valence', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Drôme', npp-nam, 'Drôme', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1799, adj-num, 1799, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(35, Result) :-
      prob_parse([ ex_si('Alexandre', npp-nam, 'Alexandre', [dr(0,np,np)-1]), ex_si('Berthier', npp-nam, 'Berthier', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1799, pro-num, 1799, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(36, Result) :-
      prob_parse([ ex_si('Cauhtemoc', npp-nam, 'Cauhtemoc', [dr(0,np,np)-1]), ex_si('Cardenas', npp-nam, 'Cardenas', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(salvadorien, adj-adj, salvadorien, [dl(0,n,n)-1]), ex_si('Alfredo', npp-nam, 'Alfredo', [dl(0,n,n)-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dirigeant, nc-nom, dirigeant, [let-1]), ex_si(répressif, adj-adj, répressif, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dl(0,n,n)-1]), ex_si(opprime, v-ver:pres, opprime, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,np,s),np)-1]), ex_si(grande, adj-adj, grande, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,dl(0,n,n),np)-1]), ex_si(peuple, nc-nom, peuple, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(37, Result) :-
      prob_parse([ ex_si('Alfredo', npp-nam, 'Alfredo', [dr(0,np,np)-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rend, v-ver:pres, rend, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(38, Result) :-
      prob_parse([ ex_si('Allen', npp-nam, 'Allen', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(réputé, vpp-ver:pper, réputé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(habileté, nc-nom, habileté, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dl(0,np,s_inf)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(scratch, nc-nom, scratch, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(décors, nc-nom, décors, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pionnier, nc-nom, pionnier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(technique, nc-nom, technique, [n-1]), ex_si(consistant, vpr-ver:ppre, consistant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(altérer, vinf-ver:infi, altérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(leur, clo-pro:per, leur, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(aspect, nc-nom, aspect, [n-1]), ex_si(ancien, adj-adj, ancien, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(réaliste, adj-adj, réaliste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(39, Result) :-
      prob_parse([ ex_si('Allen', npp-nam, 'Allen', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(technique, nc-nom, technique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décors, nc-nom, décors, [n-1]), ex_si(réalistes, adj-adj, réalistes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(40, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(saignements, nc-nom, saignements, [n-1]), ex_si('gastro-intestinaux', adj-adj, 'gastro-intestinaux', [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(survenir, vinf-ver:infi, survenir, [dl(0,np,s_inf)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(indésirable, adj-adj, indésirable, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('anti-inflammatoires', nc-nom, 'anti-inflammatoires', [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(stéroïdiens, adj-adj, stéroïdiens, [dl(0,n,n)-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aspirine, nc-nom, aspirine, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ibuprofène, nc-nom, ibuprofène, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(41, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(aspirine, nc-nom, aspirine, [n-1]), ex_si(prévient, v-ver:pres, prévient, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(saignements, nc-nom, saignements, [n-1]), ex_si('gastro-intestinaux', adj-adj, 'gastro-intestinaux', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(42, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(rédige, v-ver:pres, rédige, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(proposant, vpr-ver:ppre, proposant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expulsion, nc-nom, expulsion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Manifeste', nc-nam, 'Manifeste', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(43, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1984, pro-num, 1984, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlinguer', npp-nam, 'Berlinguer', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Natta', npp-nam, 'Natta', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(secrétaire, nc-nom, secrétaire, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(44, Result) :-
      prob_parse([ ex_si('Berlinguer', npp-nam, 'Berlinguer', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(succédé, vpp-ver:pper, succédé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Natta', npp-nam, 'Natta', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(45, Result) :-
      prob_parse([ ex_si('Blue', npp-nam, 'Blue', [dr(0,np,np)-1]), ex_si('Mountain', npp-nam, 'Mountain', [dr(0,np,np)-1]), ex_si('Lumber', npp-nam, 'Lumber', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(filiale, nc-nom, filiale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(transnationale, adj-adj, transnationale, [dl(0,n,n)-1]), ex_si(forestière, adj-adj, forestière, [dl(0,n,n)-1]), ex_si(malaisienne, adj-adj, malaisienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ernslaw', npp-nam, 'Ernslaw', [dr(0,np,np)-1]), ex_si('One', npp-nam, 'One', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(46, Result) :-
      prob_parse([ ex_si('Blue', npp-nam, 'Blue', [dr(0,np,np)-1]), ex_si('Mountain', npp-nam, 'Mountain', [dr(0,np,np)-1]), ex_si('Lumber', npp-nam, 'Lumber', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(propriétaire, nc-nom, propriétaire, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Ernslaw', npp-nam, 'Ernslaw', [dr(0,np,np)-1]), ex_si('One', npp-nam, 'One', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(47, Result) :-
      prob_parse([ ex_si('Blue', npp-nam, 'Blue', [dr(0,np,np)-1]), ex_si('Mountain', npp-nam, 'Mountain', [dr(0,np,np)-1]), ex_si('Lumber', npp-nam, 'Lumber', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(devoir, vinf-ver:infi, devoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(relocaliser, vinf-ver:infi, relocaliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bloqué, vpp-ver:pper, bloqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(prévu, vpp-ver:pper, prévu, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Coromandel', npp-nam, 'Coromandel', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(48, Result) :-
      prob_parse([ ex_si('Blue', npp-nam, 'Blue', [dr(0,np,np)-1]), ex_si('Mountain', npp-nam, 'Mountain', [dr(0,np,np)-1]), ex_si('Lumber', npp-nam, 'Lumber', [np-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(localiser, vinf-ver:infi, localiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Coromandel', npp-nam, 'Coromandel', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(49, Result) :-
      prob_parse([ ex_si('Boeing', npp-nam, 'Boeing', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Chicago', npp-nam, 'Chicago', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(supprimé, vpp-ver:pper, supprimé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(créneaux, nc-nom, créneaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(livraison, nc-nom, livraison, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réservés, vpp-ver:pper, réservés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Air', npp-nam, 'Air', [dr(0,np,np)-1]), ex_si('Canada', npp-nam, 'Canada', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(50, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boeing', npp-nam, 'Boeing', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(51, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si(consultatif, adj-adj, consultatif, [dl(0,n,n)-1]), ex_si(technique, adj-adj, technique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kalido', npp-nam, 'Kalido', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Evelson', npp-nam, 'Evelson', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(associé, vpp-ver:pper, associé, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Textra', npp-nam, 'Textra', [dr(0,np,np)-1]), ex_si('Group', npp-nam, 'Group', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Inc', npp-nam, 'Inc', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Inmon', npp-nam, 'Inmon', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Inmon', npp-nam, 'Inmon', [dr(0,np,np)-1]), ex_si('Data', npp-nam, 'Data', [dr(0,np,np)-1]), ex_si('Systems', npp-nam, 'Systems', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(52, Result) :-
      prob_parse([ ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Evelson', npp-nam, 'Evelson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(consultatif, adj-adj, consultatif, [dl(0,n,n)-1]), ex_si(technique, adj-adj, technique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kalido', npp-nam, 'Kalido', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(53, Result) :-
      prob_parse([ ex_si('Bountiful', npp-nam, 'Bountiful', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivé, vpp-ver:pper, arrivé, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(naviguant, vpr-ver:ppre, naviguant, [dr(0,dl(0,np,s_ppres),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(baie, nc-nom, baie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(54, Result) :-
      prob_parse([ ex_si('Bountiful', npp-nam, 'Bountiful', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(affecté, vpp-ver:pper, affecté, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si('navire-hôpital', nc-nom, 'navire-hôpital', [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Yokosuka', npp-nam, 'Yokosuka', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(55, Result) :-
      prob_parse([ ex_si('Bountiful', npp-nam, 'Bountiful', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(56, Result) :-
      prob_parse([ ex_si('Bountiful', npp-nam, 'Bountiful', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivé, vpp-ver:pper, arrivé, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(naviguant, vpr-ver:ppre, naviguant, [dr(0,dl(0,np,s_ppres),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(baie, nc-nom, baie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(57, Result) :-
      prob_parse([ ex_si('Bountiful', npp-nam, 'Bountiful', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(affecté, vpp-ver:pper, affecté, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si('navire-hôpital', nc-nom, 'navire-hôpital', [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Yokosuka', npp-nam, 'Yokosuka', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(58, Result) :-
      prob_parse([ ex_si('Bountiful', npp-nam, 'Bountiful', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(59, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), ex_si('Zapatero', npp-nam, 'Zapatero', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp_de,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Chili', npp-nam, 'Chili', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Uruguay', npp-nam, 'Uruguay', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(axe, nc-nom, axe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gauche, nc-nom, gauche, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(60, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(présidents, nc-nom, présidents, [n-1]), ex_si('sud-américains', adj-adj, 'sud-américains', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(cités, vpp-ver:pper, cités, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(convenu, vpp-ver:pper, convenu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(collaborer, vinf-ver:infi, collaborer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Madrid', npp-nam, 'Madrid', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(61, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(62, Result) :-
      prob_parse([ ex_si('Sous', p-prp, 'Sous', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('La', det-det:art, 'La', [dr(0,dl(0,n,n),n)-1]), ex_si(cupidité, nc-nom, cupidité, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Die', npp-nam, 'Die', [dr(0,dl(0,n,n),n)-1]), ex_si('Tageszeitung', npp-nam, 'Tageszeitung', [n-1]), ex_si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(de, p-prp, de, [dl(0,np,np)-1]), ex_si(bon, adj-adj, bon, [dl(0,np,np)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sortira, v-ver:futu, sortira, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acquisition, nc-nom, acquisition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éditeur, nc-nom, éditeur, [n-1]), ex_si('Berliner', npp-nam, 'Berliner', [dl(0,n,n)-1]), ex_si('Verlag', npp-nam, 'Verlag', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(investissement, nc-nom, investissement, [n-1]), ex_si(basés, vpp-ver:pper, basés, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(63, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(investissement, nc-nom, investissement, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(acquièrent, v-ver:pres, acquièrent, [dr(0,dl(0,np,s),np)-1]), ex_si('Berliner', npp-nam, 'Berliner', [dr(0,np,np)-1]), ex_si('Verlag', et-nam, 'Verlag', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(64, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(200, det-num, 200, [dr(0,np,n)-1]), ex_si(mm, nc-abr, mm, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pluie, nc-nom, pluie, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistrés, vpp-ver:pper, enregistrés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Colombie-Britannique', npp-nam, 'Colombie-Britannique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(ouest, nc-nom, ouest, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(lundi, nc-nom, lundi, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(65, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Colombie-Britannique', npp-nam, 'Colombie-Britannique', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(66, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Wood', npp-nam, 'Wood', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(courageuse, adj-adj, courageuse, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(engagée, vpp-ver:pper, engagée, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(sauver, vinf-ver:infi, sauver, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(28, det-num, 28, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(souffrant, vpr-ver:ppre, souffrant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(brûlures, nc-nom, brûlures, [n-1]), ex_si(corporelles, adj-adj, corporelles, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(entre, p-prp, entre, [dr(0,np,np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(92, pro-num, 92, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),n)-1]), ex_si(cent, pro-num, cent, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(infections, nc-nom, infections, [n-1]), ex_si(mortelles, adj-adj, mortelles, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(choc, nc-nom, choc, [n-1]), ex_si(différé, vpp-ver:pper, différé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(67, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(éloges, nc-nom, éloges, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(propres, adj-adj, propres, [dr(0,n,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(suscité, vpp-ver:pper, suscité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(controverse, nc-nom, controverse, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(chirurgiens, nc-nom, chirurgiens, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(brûlures, nc-nom, brûlures, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peau, nc-nom, peau, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(spray, nc-nom, spray, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(soumise, vpp-ver:pper, soumise, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(68, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chirurgiens, nc-nom, chirurgiens, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(brûlures, nc-nom, brûlures, [n-1]), ex_si(approuvent, v-ver:pres, approuvent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peau, nc-nom, peau, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(spray, nc-nom, spray, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Wood', npp-nam, 'Wood', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(69, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(annonçant, vpr-ver:ppre, annonçant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(plans, nc-nom, plans, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(préparer, vinf-ver:infi, préparer, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(combattre, vinf-ver:infi, combattre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(future, adj-adj, future, [dr(0,n,n)-1]), ex_si(vague, nc-nom, vague, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grippe, nc-nom, grippe, [n-1]), ex_si(aviaire, adj-adj, aviaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vocabulaire, nc-nom, vocabulaire, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tactiques, nc-nom, tactiques, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(familiers, adj-adj, familiers, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(confrontation, nc-nom, confrontation, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrorisme, nc-nom, terrorisme, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(70, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(soutient, v-ver:pres, soutient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrorisme, nc-nom, terrorisme, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(71, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(débarquée, vpp-ver:pper, débarquée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1902, adj-num, 1902, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitaine, nc-nom, capitaine, [n-1]), ex_si('William', npp-nam, 'William', [dl(0,n,n)-1]), ex_si('Colbeck', npp-nam, 'Colbeck', [dl(0,n,n)-1]), ex_si(commandant, nc-nom, commandant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Morning', npp-nam, 'Morning', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secours, nc-nom, secours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expédition, nc-nom, expédition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(capitaine, nc-nom, capitaine, [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('F.', npp-abr, 'F.', [dl(0,n,n)-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(72, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Capitaine', nc-nam, 'Capitaine', [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1902, adj-num, 1902, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(73, Result) :-
      prob_parse([ ex_si('Carl', npp-nam, 'Carl', [dr(0,np,np)-1]), ex_si('Smith', npp-nam, 'Smith', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entré, vpp-ver:pper, entré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(collision, nc-nom, collision, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lampadaire, nc-nom, lampadaire, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(béton, nc-nom, béton, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(patinage, nc-nom, patinage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fracture, nc-nom, fracture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(crâne, nc-nom, crâne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(coma, nc-nom, coma, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(74, Result) :-
      prob_parse([ ex_si('Lorsqu\'il', cls-pro:per, 'Lorsqu\'il', [dr(0,dr(0,s,s),s)-1]), ex_si('n\'', adv-adv, 'n\'', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(reprendre, vinf-ver:infi, reprendre, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(conscience, nc-nom, conscience, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(ses, det-det:pos, ses, [let-1]), ex_si(parents, nc-nom, parents, [dr(0,np,n)-1]), ex_si(ont, v-ver:pres, ont, [n-1]), ex_si(consenti, vpp-ver:pper, consenti, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(le, det-det:art, le, [let-1]), ex_si(8, adj-num, 8, [dr(0,dl(1,s,s),n)-1]), ex_si(août, nc-nom, août, [dr(0,n,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(à, p-prp, à, [let-1]), ex_si(ce, pro-pro:dem, ce, [dr(0,pp_a,np)-1]), ex_si(que, cs-kon, que, [np-1]), ex_si(sa, det-det:pos, sa, [dr(0,dl(0,np,np),s)-1]), ex_si(machine, nc-nom, machine, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(maintien, nc-nom, maintien, [dr(0,dl(0,n,n),n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(vie, nc-nom, vie, [dr(0,dl(0,n,n),n)-1]), ex_si(soit, vs-ver:subp, soit, [n-1]), ex_si(arrêtée, vpp-ver:pper, arrêtée, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si('.', ponct-pun, '.', [dl(0,np,s_pass)-1])], Result).
sent(75, Result) :-
      prob_parse([ ex_si('Carl', npp-nam, 'Carl', [dr(0,np,np)-1]), ex_si('Smith', npp-nam, 'Smith', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(76, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réunissent, v-ver:pres, réunissent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(régionales, adj-adj, régionales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si('week-end', nc-nom, 'week-end', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Hugo', npp-nam, 'Hugo', [dr(0,np,np)-1]), ex_si('Chávez', npp-nam, 'Chávez', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(populiste, adj-adj, populiste, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Venezuela', npp-nam, 'Venezuela', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(manne, nc-nom, manne, [n-1]), ex_si(énergétique, adj-adj, énergétique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(amis, nc-nom, amis, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(promouvoir, vinf-ver:infi, promouvoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vision, nc-nom, vision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(socialisme, nc-nom, socialisme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('XXIe', adj-num, 'XXIe', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(77, Result) :-
      prob_parse([ ex_si('Chávez', npp-nam, 'Chávez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(adepte, nc-nom, adepte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(socialisme, nc-nom, socialisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(78, Result) :-
      prob_parse([ ex_si('Parviz', npp-nam, 'Parviz', [dr(0,np,np)-1]), ex_si('Davudi', npp-nam, 'Davudi', [np-1]), ex_si(représentait, v-ver:impf, représentait, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Organisation', npp-nam, 'Organisation', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Shanghai', npp-nam, 'Shanghai', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('OCS', npp-nam, 'OCS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si(naissante, adj-adj, naissante, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lie, v-ver:pres, lie, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(anciennes, adj-adj, anciennes, [dr(0,n,n)-1]), ex_si(républiques, nc-nom, républiques, [n-1]), ex_si(soviétiques, adj-adj, soviétiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrorisme, nc-nom, terrorisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(79, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(membre, nc-nom, membre, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OCS', npp-abr, 'OCS', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(80, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(important, adj-adj, important, [dr(0,n,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(identifié, vpp-ver:pper, identifié, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lieux, nc-nom, lieux, [n-1]), ex_si(probables, adj-adj, probables, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prisons, nc-nom, prisons, [n-1]), ex_si(secrètes, adj-adj, secrètes, [dl(0,n,n)-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(suspects, nc-nom, suspects, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Al-Qaïda', npp-nam, 'Al-Qaïda', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(interrogés, vpp-ver:pper, interrogés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Central', npp-nam, 'Central', [dr(0,n,n)-1]), ex_si('Intelligence', npp-nam, 'Intelligence', [dr(0,n,n)-1]), ex_si('Agency', npp-nam, 'Agency', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(81, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(prisons, nc-nom, prisons, [n-1]), ex_si(secrètes, adj-adj, secrètes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIA', npp-abr, 'CIA', [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situées, vpp-ver:pper, situées, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(82, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(écrasée, vpp-ver:pper, écrasée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(boîte, nc-nom, boîte, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(lettres, nc-nom, lettres, [n-1]), ex_si(appartenait, v-ver:impf, appartenait, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Clark', npp-nam, 'Clark', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(68, det-num, 68, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(connaissance, nc-nom, connaissance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Jones', npp-nam, 'Jones', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(83, Result) :-
      prob_parse([ ex_si('Clark', npp-nam, 'Clark', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(parent, nc-nom, parent, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jones', npp-nam, 'Jones', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(84, Result) :-
      prob_parse([ ex_si('Colarusso', npp-nam, 'Colarusso', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitaine, nc-nom, capitaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dover', npp-nam, 'Dover', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(souhaitent, v-ver:pres, souhaitent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(suspect, nc-nom, suspect, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(appel, nc-nom, appel, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(téléphone, nc-nom, téléphone, [n-1]), ex_si(portable, adj-adj, portable, [dl(0,n,n)-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvait, v-ver:impf, trouvait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dover', npp-nam, 'Dover', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(85, Result) :-
      prob_parse([ ex_si('Colarusso', npp-nam, 'Colarusso', [np-1]), ex_si(travaille, v-ver:pres, travaille, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dover', npp-nam, 'Dover', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(86, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Côte', nc-nam, 'Côte', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(autrefois, adv-adv, autrefois, [dr(0,n,n)-1]), ex_si(havre, nc-nom, havre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(stabilité, nc-nom, stabilité, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ouest', npp-nam, 'Ouest', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(producteur, nc-nom, producteur, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cacao, nc-nom, cacao, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(divisée, vpp-ver:pper, divisée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(deux, pro-num, deux, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(coup, nc-nom, coup, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nom, 'État', [n-1]), ex_si(raté, vpp-ver:pper, raté, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('Gbagbo', npp-nam, 'Gbagbo', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2002, adj-num, 2002, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(opposant, vpr-ver:ppre, opposant, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rebelles, nc-nom, rebelles, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(dominante, nc-nom, dominante, [n-1]), ex_si(musulmane, adj-adj, musulmane, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(dominante, nc-nom, dominante, [n-1]), ex_si(chrétienne, adj-adj, chrétienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(87, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Côte', npp-nam, 'Côte', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(88, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),s)-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(impliqué, vpp-ver:pper, impliqué, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(six, adj-num, six, [dr(0,n,n)-1]), ex_si(prêtres, nc-nom, prêtres, [n-1]), ex_si(jésuites, adj-adj, jésuites, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(survenu, vpp-ver:pper, survenu, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Salvador', npp-nam, 'Salvador', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(89, Result) :-
      prob_parse([ ex_si('Cristiani', npp-nam, 'Cristiani', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(jésuites, nc-nom, jésuites, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(90, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aéroport, nc-nom, aéroport, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salvador', npp-nam, 'Salvador', [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Costa', npp-nam, 'Costa', [n-1]), ex_si('Rica', npp-nam, 'Rica', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(assister, vinf-ver:infi, assister, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cérémonie, nc-nom, cérémonie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(investiture, nc-nom, investiture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(élu, vpp-ver:pper, élu, [dl(0,n,n)-1]), ex_si('Rafael', npp-nam, 'Rafael', [dl(0,n,n)-1]), ex_si('Calderon', npp-nam, 'Calderon', [dl(0,n,n)-1]), ex_si('Fournier', npp-nam, 'Fournier', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(91, Result) :-
      prob_parse([ ex_si('Cristiani', npp-nam, 'Cristiani', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Costa', npp-nam, 'Costa', [n-1]), ex_si('Rica', npp-nam, 'Rica', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(92, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),s)-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(impliqué, vpp-ver:pper, impliqué, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(six, adj-num, six, [dr(0,n,n)-1]), ex_si(prêtres, nc-nom, prêtres, [n-1]), ex_si(jésuites, adj-adj, jésuites, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(survenu, vpp-ver:pper, survenu, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Salvador', npp-nam, 'Salvador', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(93, Result) :-
      prob_parse([ ex_si('Cristiani', npp-nam, 'Cristiani', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(jésuites, nc-nom, jésuites, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(94, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(survivants, nc-nom, survivants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(critique, adj-adj, critique, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Cyprian', npp-nam, 'Cyprian', [dr(0,np,np)-1]), ex_si('Gatete', npp-nam, 'Gatete', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(commissaire, nc-nom, commissaire, [n-1]), ex_si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Rwanda', npp-nam, 'Rwanda', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(conversation, nc-nom, conversation, [n-1]), ex_si(téléphonique, adj-adj, téléphonique, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Reuters', npp-nam, 'Reuters', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(95, Result) :-
      prob_parse([ ex_si('Cyprian', npp-nam, 'Cyprian', [dr(0,np,np)-1]), ex_si('Gatete', npp-nam, 'Gatete', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(employé, nc-nom, employé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Reuters', npp-nam, 'Reuters', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(96, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(parents, nc-nom, parents, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(contribuer, vinf-ver:infi, contribuer, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pleinement, adv-adv, pleinement, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(roue, nc-nom, roue, [n-1]), ex_si(libre, adj-adj, libre, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(combattues, vpp-ver:pper, combattues, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Kelly', npp-nam, 'Kelly', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(97, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ombre, nc-nom, ombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Cameron', npp-nam, 'Cameron', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(idées, nc-nom, idées, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(fouillis, nc-nom, fouillis, [n-1]), ex_si(complet, adj-adj, complet, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(98, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Cameron', npp-nam, 'Cameron', [np-1]), ex_si(travaille, v-ver:pres, travaille, [dl(0,np,s)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ombre, nc-nom, ombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(99, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(employé, nc-nom, employé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Vance', npp-nam, 'Vance', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('South', npp-nam, 'South', [dr(0,np,np)-1]), ex_si('Portland', npp-nam, 'Portland', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Hooper', npp-nam, 'Hooper', [np-1]), ex_si(passait, v-ver:impf, passait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(route, nc-nom, route, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(rencontrant, vpr-ver:ppre, rencontrant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Portland', npp-nam, 'Portland', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Kittery', npp-nam, 'Kittery', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(100, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Vance', npp-nam, 'Vance', [np-1]), ex_si(vit, v-ver:pres, vit, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('South', npp-nam, 'South', [dr(0,np,np)-1]), ex_si('Portland', npp-nam, 'Portland', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(101, Result) :-
      prob_parse([ ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Kerr', npp-nam, 'Kerr', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contremaître, nc-nom, contremaître, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fabrique, nc-nom, fabrique, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si('Deane', npp-nam, 'Deane', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Adams', npp-nam, 'Adams', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Deane', npp-nam, 'Deane', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(102, Result) :-
      prob_parse([ ex_si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), ex_si('Adams', npp-nam, 'Adams', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(partenaires, nc-nom, partenaires, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(revolver, nc-nom, revolver, [n-1]), ex_si('Adams', npp-nam, 'Adams', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cousin, nc-nom, cousin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kerr', npp-nam, 'Kerr', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(103, Result) :-
      prob_parse([ ex_si('Dean', npp-nam, 'Dean', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(revolver, nc-nom, revolver, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(104, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(actions, nc-nom, actions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('O2', npp-nam, 'O2', [dr(0,np,np)-1]), ex_si('Plc', npp-nam, 'Plc', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(rachetée, vpp-ver:pper, rachetée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('17,7', det-num, '17,7', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('31,3', det-num, '31,3', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Telefonica', npp-nam, 'Telefonica', [dr(0,np,np)-1]), ex_si('SA', npp-abr, 'SA', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chuté, vpp-ver:pper, chuté, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Deutsche', npp-nam, 'Deutsche', [dr(0,np,np)-1]), ex_si('Telekom', npp-nam, 'Telekom', [dr(0,np,np)-1]), ex_si('AG', npp-abr, 'AG', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ferait, v-ver:cond, ferait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si('contre-offre', nc-nom, 'contre-offre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(105, Result) :-
      prob_parse([ ex_si('Deutsche', npp-nam, 'Deutsche', [dr(0,np,np)-1]), ex_si('Telekom', npp-nam, 'Telekom', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('O2', npp-nam, 'O2', [dr(0,np,np)-1]), ex_si('Plc', npp-nam, 'Plc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(106, Result) :-
      prob_parse([ ex_si('Tim', npp-nam, 'Tim', [dr(0,np,np)-1]), ex_si('Franks', npp-nam, 'Franks', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('BBC', npp-abr, 'BBC', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(diplomates, nc-nom, diplomates, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(frustrés, vpp-ver:pper, frustrés, [dl(0,n,n)-1]), ex_si(insistent, v-ver:pres, insistent, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(avancées, nc-nom, avancées, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),s_q),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(doute, nc-nom, doute, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retard, nc-nom, retard, [n-1]), ex_si(continu, adj-adj, continu, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(parvenir, vinf-ver:infi, parvenir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(budget, nc-nom, budget, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(pèse, v-ver:pres, pèse, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(107, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(diplomates, nc-nom, diplomates, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mettent, v-ver:pres, mettent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(budget, nc-nom, budget, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(108, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(mondialement, adv-adv, mondialement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connue, vpp-ver:pper, connue, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(invention, nc-nom, invention, [n-1]), ex_si(brevetée, adj-adj, brevetée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peau, nc-nom, peau, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(spray, nc-nom, spray, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(brûlures, nc-nom, brûlures, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(cesse, v-ver:pres, cesse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(développer, vinf-ver:infi, développer, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(109, Result) :-
      prob_parse([ ex_si('Grâce', nc-nom, 'Grâce', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Fiona', npp-nam, 'Fiona', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cicatrisation, nc-nom, cicatrisation, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(considérablement, adv-adv, considérablement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réduite, vpp-ver:pper, réduite, [dl(0,np,s_pass)-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(peau, nc-nom, peau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(remplacement, nc-nom, remplacement, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(fournie, vpp-ver:pper, fournie, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(110, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(spécialiste, nc-nom, spécialiste, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(brûlures, nc-nom, brûlures, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Saint', adj-adj, 'Saint', [dr(0,n,n)-1]), ex_si('Graal', npp-nam, 'Graal', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Fiona', npp-nam, 'Fiona', [dl(0,n,n)-1]), ex_si('Wood', npp-nam, 'Wood', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(guérison, nc-nom, guérison, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(cicatrice, nc-nom, cicatrice, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(blessure, nc-nom, blessure, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(111, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Fiona', npp-nam, 'Fiona', [dl(0,n,n)-1]), ex_si('Wood', npp-nam, 'Wood', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(brûlures, nc-nom, brûlures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(112, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(initialement, adv-adv, initialement, [dl(1,s,s)-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(civiles, adj-adj, civiles, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(modestes, adj-adj, modestes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(113, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1860, pro-num, 1860, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gouvernements, nc-nom, gouvernements, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Confédération', nc-nam, 'Confédération', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(114, Result) :-
      prob_parse([ ex_si('Pendant', p-prp, 'Pendant', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(115, Result) :-
      prob_parse([ ex_si('Edison', npp-nam, 'Edison', [np-1]), ex_si(décida, v-ver:simp, décida, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(appeler, vinf-ver:infi, appeler, [dr(0,dr(0,dl(0,np,s_inf),np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(invention, nc-nom, invention, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Kinetoscope', npp-nam, 'Kinetoscope', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(combinant, vpr-ver:ppre, combinant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(racines, nc-nom, racines, [dl(0,n,n)-1]), ex_si(grecques, adj-adj, grecques, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(kineto, et-nom, kineto, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(mobile, nc-nom, mobile, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(scopos, nc-nom, scopos, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(regarder, vinf-ver:infi, regarder, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(116, Result) :-
      prob_parse([ ex_si('Edison', npp-nam, 'Edison', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Kinétoscope', npp-nam, 'Kinétoscope', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(117, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(veux, v-ver:pres, veux, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(retourner, vinf-ver:infi, retourner, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(118, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si('j\'', cls-pro:per, 'j\'', [np-1]), ex_si(ai, v-ver:pres, ai, [dr(0,dl(0,np,s),np)-1]), ex_si(peur, nc-nom, peur, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(honnêtement, adv-adv, honnêtement, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('j\'', cls-pro:per, 'j\'', [np-1]), ex_si(ai, v-ver:pres, ai, [dr(0,dl(0,np,s),np)-1]), ex_si(peur, nc-nom, peur, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(119, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(propagande, nc-nom, propagande, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(moi, pro-pro:per, moi, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(croire, vinf-ver:infi, croire, [dr(0,dr(0,dl(0,np,s_inf),s_q),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,s_q,s)-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(suis, v-ver:pres, suis, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(terroriste, nc-nom, terroriste, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('el-Nashar', npp-nam, 'el-Nashar', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(120, Result) :-
      prob_parse([ ex_si('El-Nashar', npp-nam, 'El-Nashar', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(terrorisme, nc-nom, terrorisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(121, Result) :-
      prob_parse([ ex_si('El-Nashar', npp-nam, 'El-Nashar', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(détenu, vpp-ver:pper, détenu, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Caire', npp-nam, 'Caire', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(informé, vpp-ver:pper, informé, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(égyptiennes, adj-adj, égyptiennes, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(soupçonnait, v-ver:impf, soupçonnait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(attaquants, nc-nom, attaquants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(122, Result) :-
      prob_parse([ ex_si('El-Nashar', npp-nam, 'El-Nashar', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Egypte', npp-nam, 'Egypte', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(123, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chapitres, nc-nom, chapitres, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(volontairement, adv-adv, volontairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(transféré, vpp-ver:pper, transféré, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(élire, vinf-ver:infi, élire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évêque, nc-nom, évêque, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si('Charles', npp-nam, 'Charles', [dl(0,n,n)-1]), ex_si('V', adj-num, 'V', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Clément', npp-nam, 'Clément', [dl(0,n,n)-1]), ex_si('VII', adj-num, 'VII', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(consentement, nc-nom, consentement, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(procédure, nc-nom, procédure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(124, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si('Charles', npp-nam, 'Charles', [dl(0,n,n)-1]), ex_si('V', adj-num, 'V', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Clément', npp-nam, 'Clément', [dr(0,np,np)-1]), ex_si('VII', adj-num, 'VII', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(125, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(auditeurs, nc-nom, auditeurs, [n-1]), ex_si(agréés, vpp-ver:pper, agréés, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si('Deloitte', npp-nam, 'Deloitte', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Touche', npp-nam, 'Touche', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(chargé, vpp-ver:pper, chargé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Ernst', npp-nam, 'Ernst', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Young', npp-nam, 'Young', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(procéder, vinf-ver:infi, procéder, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(examen, nc-nom, examen, [n-1]), ex_si(approfondi, adj-adj, approfondi, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Eurest', npp-nam, 'Eurest', [dr(0,np,np)-1]), ex_si('Support', npp-nam, 'Support', [dr(0,np,np)-1]), ex_si('Services', npp-nam, 'Services', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(filiale, nc-nom, filiale, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(alimente, v-ver:pres, alimente, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(casques, nc-nom, casques, [n-1]), ex_si(bleus, adj-adj, bleus, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(huit, det-num, huit, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(126, Result) :-
      prob_parse([ ex_si('Eurest', npp-nam, 'Eurest', [dr(0,np,np)-1]), ex_si('Support', npp-nam, 'Support', [dr(0,np,np)-1]), ex_si('Services', npp-nam, 'Services', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(filiale, nc-nom, filiale, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ernst', npp-nam, 'Ernst', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Young', npp-nam, 'Young', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(127, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(principal, adj-adj, principal, [dr(0,n,n)-1]), ex_si(quotidien, nc-nom, quotidien, [n-1]), ex_si(musulman, adj-adj, musulman, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Bosnie', npp-nam, 'Bosnie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Dnevni', npp-nam, 'Dnevni', [dr(0,np,np)-1]), ex_si('Avaz', npp-nam, 'Avaz', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(enthousiasme, v-ver:pres, enthousiasme, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(sensationnelle, adj-adj, sensationnelle, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(première, adj-num, première, [n-1]), ex_si(pyramide, nc-nom, pyramide, [dl(0,n,n)-1]), ex_si(européenne, adj-adj, européenne, [let-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Visoko', npp-nam, 'Visoko', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(juste, adv-adv, juste, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sarajevo', npp-nam, 'Sarajevo', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(128, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(pyramide, nc-nom, pyramide, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dl(0,np,s_pass)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Sarajevo', npp-nam, 'Sarajevo', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(129, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(moustiques, nc-nom, moustiques, [n-1]), ex_si(femelles, adj-nom, femelles, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(infectées, vpp-ver:pper, infectées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parasite, nc-nom, parasite, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(paludisme, nc-nom, paludisme, [n-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(prélèvent, v-ver:pres, prélèvent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(paludisme, nc-nom, paludisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(130, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(insectes, nc-nom, insectes, [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(alors, adv-adv, alors, [dl(1,s,s)-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(transmettre, vinf-ver:infi, transmettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(piquent, v-ver:pres, piquent, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(tombent, v-ver:pres, tombent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(malades, adj-adj, malades, [dl(1,s,s)-1]), ex_si('eux-mêmes', pro-pro:per, 'eux-mêmes', [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(131, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(moustiques, nc-nom, moustiques, [n-1]), ex_si(femelles, adj-adj, femelles, [dl(0,n,n)-1]), ex_si(propagent, v-ver:pres, propagent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(paludisme, nc-nom, paludisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(132, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Fermilab', npp-nam, 'Fermilab', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(fonctionne, v-ver:pres, fonctionne, [dl(0,np,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(certifié, vpp-ver:pper, certifié, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('RedHat', npp-nam, 'RedHat', [dr(0,np,np)-1]), ex_si('Enterprise', npp-nam, 'Enterprise', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-adv, alors, [dr(0,s,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(fonctionnera, v-ver:futu, fonctionnera, [dl(0,np,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(version, nc-nom, version, [n-1]), ex_si('Fermi', npp-nam, 'Fermi', [dl(0,n,n)-1]), ex_si('Linux', npp-nam, 'Linux', [dl(0,n,n)-1]), ex_si('LTS', npp-abr, 'LTS', [dl(0,n,n)-1]), ex_si(correspondante, adj-adj, correspondante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(133, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(construit, vpp-ver:pper, construit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Fermi', npp-nam, 'Fermi', [dr(0,np,np)-1]), ex_si('Linux', npp-abr, 'Linux', [dr(0,np,np)-1]), ex_si('LTS', npp-abr, 'LTS', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Fermilab', npp-nam, 'Fermilab', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(ultime, adj-adj, ultime, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(134, Result) :-
      prob_parse([ ex_si('FermiLab', npp-nam, 'FermiLab', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Linux', npp-abr, 'Linux', [dr(0,np,np)-1]), ex_si('LTS', npp-abr, 'LTS', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(135, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(matin, nc-nom, matin, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(panne, nc-nom, panne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majeure, adj-adj, majeure, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(provoquée, vpp-ver:pper, provoquée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(commandos, nc-nom, commandos, [n-1]), ex_si(urbains, adj-adj, urbains, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Front', npp-nam, 'Front', [n-1]), ex_si('Farabundo', npp-nam, 'Farabundo', [dl(0,n,n)-1]), ex_si('Marti', npp-nam, 'Marti', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('FMLN', npp-abr, 'FMLN', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(136, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('FMLN', npp-abr, 'FMLN', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('black-out', nc-nom, 'black-out', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(137, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(diplôme, nc-nom, diplôme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1977, pro-num, 1977, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Gallager', npp-nam, 'Gallager', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(choisi, vpp-ver:pper, choisi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(accepter, vinf-ver:infi, accepter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bourse, nc-nom, bourse, [n-1]), ex_si(complète, adj-adj, complète, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(jouer, vinf-ver:infi, jouer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Temple', npp-nam, 'Temple', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(138, Result) :-
      prob_parse([ ex_si('Gallager', npp-nam, 'Gallager', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fréquenté, vpp-ver:pper, fréquenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Temple', npp-nam, 'Temple', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(139, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(monopole, nc-nom, monopole, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si('Gazprom', npp-nam, 'Gazprom', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(manifesté, vpp-ver:pper, manifesté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intérêt, nc-nom, intérêt, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(acquérir, vinf-ver:infi, acquérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(participation, nc-nom, participation, [n-1]), ex_si(assez, adv-adv, assez, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(importante, adj-adj, importante, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monopole, nc-nom, monopole, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gazoduc, nc-nom, gazoduc, [n-1]), ex_si(ouzbek, adj-adj, ouzbek, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(140, Result) :-
      prob_parse([ ex_si('Gazprom', npp-nam, 'Gazprom', [np-1]), ex_si(détient, v-ver:pres, détient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monopole, nc-nom, monopole, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pipelines, nc-nom, pipelines, [n-1]), ex_si(ouzbeks, adj-adj, ouzbeks, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(141, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si(électorale, adj-adj, électorale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nationalité, nc-nom, nationalité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(litigieuse, adj-adj, litigieuse, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(citoyenneté, nc-nom, citoyenneté, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(durcies, vpp-ver:pper, durcies, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(exclure, vinf-ver:infi, exclure, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(concurrents, nc-nom, concurrents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gbagbo', npp-nam, 'Gbagbo', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(course, nc-nom, course, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2000, pro-num, 2000, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Alassane', npp-nam, 'Alassane', [dl(0,n,n)-1]), ex_si('Ouattara', npp-nam, 'Ouattara', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(142, Result) :-
      prob_parse([ ex_si('Gbagbo', npp-nam, 'Gbagbo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(concurrent, nc-nom, concurrent, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ouattara', npp-nam, 'Ouattara', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(143, Result) :-
      prob_parse([ ex_si('General', npp-nam, 'General', [dr(0,np,np)-1]), ex_si('Dynamics', npp-nam, 'Dynamics', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(navires, nc-nom, navires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avions, nc-nom, avions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si('Gulfstream', npp-nam, 'Gulfstream', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bénéfice, nc-nom, bénéfice, [n-1]), ex_si(net, adj-adj, net, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(374, det-num, 374, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(trimestre, nc-nom, trimestre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si('1,84', det-num, '1,84', [dr(0,np,n)-1]), ex_si(dollar, nc-nom, dollar, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(144, Result) :-
      prob_parse([ ex_si('General', npp-nam, 'General', [dr(0,np,np)-1]), ex_si('Dynamics', npp-nam, 'Dynamics', [np-1]), ex_si(perd, v-ver:pres, perd, [dr(0,dl(0,np,s),np)-1]), ex_si(374, det-num, 374, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(145, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(seul, adj-adj, seul, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(suffira, v-ver:futu, suffira, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(146, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Guatemala', npp-nam, 'Guatemala', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(presque, adv-adv, presque, [dr(0,np,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(exige, v-ver:pres, exige, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si(importés, vpp-ver:pper, importés, [dl(0,n,n)-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vaccinés, vpp-ver:pper, vaccinés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rage, nc-nom, rage, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acceptera, v-ver:pres, acceptera, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ladite, det-det:pos, ladite, [dr(0,np,n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(147, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Guatemala', npp-nam, 'Guatemala', [n-1]), ex_si(accepte, v-ver:pres, accepte, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccination, nc-nom, vaccination, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(148, Result) :-
      prob_parse([ ex_si('GUS', npp-abr, 'GUS', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(débarrassé, vpp-ver:pper, débarrassé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(restait, v-ver:impf, restait, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(détail, nc-nom, détail, [n-1]), ex_si(hors, p-prp, hors, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(390, det-num, 390, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(265, det-num, 265, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(néerlandaise, adj-adj, néerlandaise, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('Wehkamp', npp-nam, 'Wehkamp', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Industri', npp-nam, 'Industri', [dr(0,np,np)-1]), ex_si('Kapital', npp-nam, 'Kapital', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('capital-investissement', nc-nom, 'capital-investissement', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(149, Result) :-
      prob_parse([ ex_si('GUS', npp-abr, 'GUS', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Wehkamp', npp-nam, 'Wehkamp', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(150, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1927, pro-num, 1927, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Harnold', npp-nam, 'Harnold', [dr(0,np,np)-1]), ex_si('Lamb', npp-nam, 'Lamb', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(biographie, nc-nom, biographie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gengis', npp-nam, 'Gengis', [dr(0,np,np)-1]), ex_si('Khan', npp-nam, 'Khan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(suite, nc-nom, suite, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(tourné, vpp-ver:pper, tourné, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(1,s,s)),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écriture, nc-nom, écriture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('non-fiction', nc-nom, 'non-fiction', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(rédigeant, vpr-ver:ppre, rédigeant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(biographies, nc-nom, biographies, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1962, pro-num, 1962, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(151, Result) :-
      prob_parse([ ex_si('Harnold', npp-nam, 'Harnold', [dr(0,np,np)-1]), ex_si('Lamb', npp-nam, 'Lamb', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(biographies, nc-nom, biographies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(152, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(informé, vpp-ver:pper, informé, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(propriété, nc-nom, propriété, [n-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Bear', npp-nam, 'Bear', [dr(0,np,np)-1]), ex_si('Creek', npp-nam, 'Creek', [np-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Division', npp-nam, 'Division', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gestion, nc-nom, gestion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NC', npp-abr, 'NC', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déversement, nc-nom, déversement, [n-1]), ex_si(illégal, adj-adj, illégal, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(matériaux, nc-nom, matériaux, [n-1]), ex_si(chimiques, adj-adj, chimiques, [dl(0,n,n)-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(153, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(matériaux, nc-nom, matériaux, [n-1]), ex_si(chimiques, adj-adj, chimiques, [dl(0,n,n)-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverts, vpp-ver:pper, découverts, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Bear', npp-nam, 'Bear', [dr(0,np,np)-1]), ex_si('Creek', npp-nam, 'Creek', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(154, Result) :-
      prob_parse([ ex_si('Hooper', npp-nam, 'Hooper', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vendeur, nc-nom, vendeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Portland', npp-nam, 'Portland', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(acheteur, nc-nom, acheteur, [n-1]), ex_si(potentiel, nc-nom, potentiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résidence, nc-nom, résidence, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(violé, vpp-ver:pper, violé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(19, det-num, 19, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(155, Result) :-
      prob_parse([ ex_si('Hooper', npp-nam, 'Hooper', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Portland', npp-nam, 'Portland', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(156, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(employé, nc-nom, employé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Vance', npp-nam, 'Vance', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('South', npp-nam, 'South', [dr(0,np,np)-1]), ex_si('Portland', npp-nam, 'Portland', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Hooper', npp-nam, 'Hooper', [np-1]), ex_si(passait, v-ver:impf, passait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(route, nc-nom, route, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(rencontrant, vpr-ver:ppre, rencontrant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Portland', npp-nam, 'Portland', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Kittery', npp-nam, 'Kittery', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(157, Result) :-
      prob_parse([ ex_si('Hooper', npp-nam, 'Hooper', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(citoyen, nc-nom, citoyen, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Portland', npp-nam, 'Portland', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(158, Result) :-
      prob_parse([ ex_si('Hugh', npp-nam, 'Hugh', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mustang', npp-nam, 'Mustang', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(devenir, vinf-ver:infi, devenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('Führer', npp-nam, 'Führer', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(aider, vinf-ver:infi, aider, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(bas, nc-nom, bas, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, nc-nom, haut, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(159, Result) :-
      prob_parse([ ex_si('Hugh', npp-nam, 'Hugh', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Mustang', npp-nam, 'Mustang', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(160, Result) :-
      prob_parse([ ex_si('Hughes', npp-nam, 'Hughes', [np-1]), ex_si(aimait, v-ver:impf, aimait, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Gracia', npp-nam, 'Gracia', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(absolument, adv-adv, absolument, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(obsédé, vpp-ver:pper, obsédé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si('Elicia', npp-nam, 'Elicia', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(161, Result) :-
      prob_parse([ ex_si('Hughes', npp-nam, 'Hughes', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(marié, vpp-ver:pper, marié, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Gracia', npp-nam, 'Gracia', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(162, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réunissent, v-ver:pres, réunissent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(régionales, adj-adj, régionales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si('week-end', nc-nom, 'week-end', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Hugo', npp-nam, 'Hugo', [dr(0,np,np)-1]), ex_si('Chávez', npp-nam, 'Chávez', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(populiste, adj-adj, populiste, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Venezuela', npp-nam, 'Venezuela', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(manne, nc-nom, manne, [n-1]), ex_si(énergétique, adj-adj, énergétique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(amis, nc-nom, amis, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(promouvoir, vinf-ver:infi, promouvoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vision, nc-nom, vision, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(socialisme, nc-nom, socialisme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('XXIe', adj-num, 'XXIe', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(163, Result) :-
      prob_parse([ ex_si('Hugo', npp-nam, 'Hugo', [dr(0,np,np)-1]), ex_si('Chávez', npp-nam, 'Chávez', [np-1]), ex_si(agit, v-ver:pres, agit, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Venezuela', npp-nam, 'Venezuela', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(164, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(dangers, nc-nom, dangers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(165, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pluie, nc-nom, pluie, [n-1]), ex_si(continue, v-ver:pres, continue, [dl(0,np,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(ampleur, nc-nom, ampleur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prévisions, nc-nom, prévisions, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-adv, alors, [dr(0,s,s)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(rivières, nc-nom, rivières, [n-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crue, nc-nom, crue, [n-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si('[mardi]', ponct-pun, '[mardi]', [let-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(soit, cc-kon, soit, [let-1]), ex_si(mercredi, nc-nom, mercredi, [let-1]), ex_si(matin, nc-nom, matin, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(1,s,s),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [let-1]), ex_si('Allan', npp-nam, 'Allan', [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si('Chapman', npp-nam, 'Chapman', [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [np-1]), ex_si(hydrologue, nc-nom, hydrologue, [dr(0,dl(0,np,np),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prévision, nc-nom, prévision, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(rivières, nc-nom, rivières, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('Victoria', npp-nam, 'Victoria', [n-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,n,n),np)-1])], Result).
sent(166, Result) :-
      prob_parse([ ex_si('Allan', npp-nam, 'Allan', [dr(0,np,np)-1]), ex_si('Chapman', npp-nam, 'Chapman', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(employé, vpp-ver:pper, employé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prévision, nc-nom, prévision, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(rivières, nc-nom, rivières, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(167, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2001, adj-num, 2001, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(propriétaires, nc-nom, propriétaires, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(demander, vinf-ver:infi, demander, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(passeports, nc-nom, passeports, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pets', npp-nam, 'Pets', [dr(0,n,n)-1]), ex_si('Travel', npp-nam, 'Travel', [dr(0,n,n)-1]), ex_si('Scheme', npp-nam, 'Scheme', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('PETS', npp-abr, 'PETS', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(abrégé, nc-nom, abrégé, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(revenant, vpr-ver:ppre, revenant, [dr(0,dl(0,n,n),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(168, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remplacé, vpp-ver:pper, remplacé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(quarantaine, nc-nom, quarantaine, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(6, det-num, 6, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(169, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2001, pro-num, 2001, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(170, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2001, adj-num, 2001, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(propriétaires, nc-nom, propriétaires, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(demander, vinf-ver:infi, demander, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(passeports, nc-nom, passeports, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pets', npp-nam, 'Pets', [dr(0,n,n)-1]), ex_si('Travel', npp-nam, 'Travel', [dr(0,n,n)-1]), ex_si('Scheme', npp-nam, 'Scheme', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('PETS', npp-abr, 'PETS', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(abrégé, nc-nom, abrégé, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(revenant, vpr-ver:ppre, revenant, [dr(0,dl(0,n,n),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(171, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remplacé, vpp-ver:pper, remplacé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(quarantaine, nc-nom, quarantaine, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(6, det-num, 6, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(172, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2001, pro-num, 2001, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(quarantaine, nc-num, quarantaine, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(173, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(générales, adj-adj, générales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Howard', npp-nam, 'Howard', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détrôner, vinf-ver:infi, détrôner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conservateurs, nc-nom, conservateurs, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(33, det-num, 33, [dr(0,np,n)-1]), ex_si(sièges, nc-nom, sièges, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(jouant, vpr-ver:ppre, jouant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réduction, nc-nom, réduction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(167, pro-num, 167, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(66, pro-num, 66, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(174, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(générales, adj-adj, générales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conservateurs, nc-nom, conservateurs, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(33, det-num, 33, [dr(0,np,n)-1]), ex_si(sièges, nc-nom, sièges, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(175, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Kansas', npp-nam, 'Kansas', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sciences, nc-nom, sciences, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(publiques, adj-adj, publiques, [dl(0,n,n)-1]), ex_si(devaient, v-ver:impf, devaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(inclure, vinf-ver:infi, inclure, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dessein, nc-nom, dessein, [n-1]), ex_si(intelligent, adj-adj, intelligent, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(doutes, nc-nom, doutes, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(jette, v-ver:pres, jette, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évolution, nc-nom, évolution, [n-1]), ex_si(darwinienne, adj-adj, darwinienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(176, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(dessein, nc-nom, dessein, [n-1]), ex_si(intelligent, adj-adj, intelligent, [dl(0,n,n)-1]), ex_si(soutient, v-ver:pres, soutient, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évolution, nc-nom, évolution, [n-1]), ex_si(darwinienne, adj-adj, darwinienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(177, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1948, adj-num, 1948, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entrés, vpp-ver:pper, entrés, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Palestine', npp-nam, 'Palestine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(engagé, vpp-ver:pper, engagé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(israéliennes, adj-adj, israéliennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(178, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(israéliennes, adj-adj, israéliennes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1948, pro-num, 1948, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(179, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(numériques, adj-adj, numériques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Electronic', npp-nam, 'Electronic', [dr(0,np,np)-1]), ex_si('Frontiers', npp-nam, 'Frontiers', [dr(0,np,np)-1]), ex_si('Italy', npp-nam, 'Italy', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('Sony', npp-nam, 'Sony', [np-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(logiciels, nc-nom, logiciels, [n-1]), ex_si('anti-piratage', adj-adj, 'anti-piratage', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(180, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(enquête, v-ver:pres, enquête, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('Sony', npp-nam, 'Sony', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(181, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si('Jack', npp-nam, 'Jack', [dl(0,n,n)-1]), ex_si('Straw', npp-nam, 'Straw', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Irakiens', nc-nam, 'Irakiens', [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(détermination, nc-nom, détermination, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(défier, vinf-ver:infi, défier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(terroristes, nc-nom, terroristes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(part, nc-nom, part, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(182, Result) :-
      prob_parse([ ex_si('Jack', npp-nam, 'Jack', [dr(0,np,np)-1]), ex_si('Straw', npp-nam, 'Straw', [np-1]), ex_si(occupe, v-ver:pres, occupe, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(183, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si(initial, adj-adj, initial, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), ex_si('Borski', npp-nam, 'Borski', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(taverne, nc-nom, taverne, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(184, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(transmise, vpp-ver:pper, transmise, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si('Jake', npp-nam, 'Jake', [dl(0,n,n)-1]), ex_si('Borski', npp-nam, 'Borski', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appartenu, vpp-ver:pper, appartenu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Phylis', npp-nam, 'Phylis', [dr(0,np,np)-1]), ex_si('Roberts', npp-nam, 'Roberts', [np-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(23, det-num, 23, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(185, Result) :-
      prob_parse([ ex_si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), ex_si('Borski', npp-nam, 'Borski', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Jake', npp-nam, 'Jake', [dr(0,np,np)-1]), ex_si('Borski', npp-nam, 'Borski', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(parents, nc-nom, parents, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(186, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(statuts, nc-nom, statuts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('NC', npp-abr, 'NC', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('LLC', npp-abr, 'LLC', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si('H.', npp-abr, 'H.', [dr(0,np,np)-1]), ex_si('Nelson', npp-nam, 'Nelson', [dr(0,np,np)-1]), ex_si('Beavers', npp-nam, 'Beavers', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('III', nc-num, 'III', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('H.', npp-abr, 'H.', [dr(0,np,np)-1]), ex_si('Chester', npp-nam, 'Chester', [dr(0,np,np)-1]), ex_si('Beavers', npp-nam, 'Beavers', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Jennie', npp-nam, 'Jennie', [dr(0,np,np)-1]), ex_si('Beavers', npp-nam, 'Beavers', [dr(0,np,np)-1]), ex_si('Stewart', npp-nam, 'Stewart', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(187, Result) :-
      prob_parse([ ex_si('Jennie', npp-nam, 'Jennie', [dr(0,np,np)-1]), ex_si('Beavers', npp-nam, 'Beavers', [dr(0,np,np)-1]), ex_si('Stewart', npp-nam, 'Stewart', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(actionnaire, nc-nom, actionnaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Carolina', npp-nam, 'Carolina', [dr(0,np,np)-1]), ex_si('Analytical', npp-nam, 'Analytical', [dr(0,np,np)-1]), ex_si('Laboratory', npp-nam, 'Laboratory', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(188, Result) :-
      prob_parse([ ex_si('Jerry', npp-nam, 'Jerry', [dr(0,np,np)-1]), ex_si('Reinsdorf', npp-nam, 'Reinsdorf', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1936, adj-num, 1936, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Brooklyn', npp-nam, 'Brooklyn', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Chicago', npp-nam, 'Chicago', [dr(0,n,n)-1]), ex_si('White', npp-nam, 'White', [dr(0,n,n)-1]), ex_si('Sox', npp-nam, 'Sox', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Chicago', npp-nam, 'Chicago', [dr(0,n,n)-1]), ex_si('Bulls', npp-nam, 'Bulls', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(189, Result) :-
      prob_parse([ ex_si('Récemment', adv-adv, 'Récemment', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('White', npp-nam, 'White', [dr(0,n,n)-1]), ex_si('Sox', npp-nam, 'Sox', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(remporter, vinf-ver:infi, remporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('World', npp-nam, 'World', [dr(0,n,n)-1]), ex_si('Series', npp-nam, 'Series', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2005, pro-num, 2005, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(recueilli, vpp-ver:pper, recueilli, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(septième, adj-num, septième, [dr(0,n,n)-1]), ex_si(bague, nc-nom, bague, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(championnat, nc-nom, championnat, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(1,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(six, adj-num, six, [dr(0,n,n)-1]), ex_si(premières, nc-num, premières, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(toutes, adv-adv, toutes, [dl(1,s,s)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Bulls', nc-nam, 'Bulls', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1990, adj-num, 1990, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(devenant, vpr-ver:ppre, devenant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sports, nc-nom, sports, [n-1]), ex_si('nord-américains', adj-adj, 'nord-américains', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(championnat, nc-nom, championnat, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(sports, nc-nom, sports, [n-1]), ex_si(différents, adj-adj, différents, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(190, Result) :-
      prob_parse([ ex_si('Jerry', npp-nam, 'Jerry', [dr(0,np,np)-1]), ex_si('Reinsdorf', npp-nam, 'Reinsdorf', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(7, det-num, 7, [dr(0,np,n)-1]), ex_si(championnats, nc-nom, championnats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(191, Result) :-
      prob_parse([ ex_si('John', npp-nam, 'John', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Frances', npp-nam, 'Frances', [dr(0,np,np)-1]), ex_si('Galyean', npp-nam, 'Galyean', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(partenaires, nc-nom, partenaires, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(partagent, v-ver:pres, partagent, [dr(0,dl(0,np,s),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(passion, nc-nom, passion, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(192, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Galyean', npp-nam, 'Galyean', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(mariés, vpp-ver:pper, mariés, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(46, det-num, 46, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(impliqués, vpp-ver:pper, impliqués, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(photographie, nc-nom, photographie, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1999, pro-num, 1999, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(193, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Galyean', npp-nam, 'Galyean', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('Frances', npp-nam, 'Frances', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(194, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Fitzgerald', npp-nam, 'Fitzgerald', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(révélé, vpp-ver:pper, révélé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(hauts, adj-adj, hauts, [dr(0,n,n)-1]), ex_si(fonctionnaires, nc-nom, fonctionnaires, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Libby', npp-nam, 'Libby', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2003, adj-num, 2003, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Valerie', npp-nam, 'Valerie', [dr(0,np,np)-1]), ex_si('Plame', npp-nam, 'Plame', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(ambassadeur, nc-nom, ambassadeur, [n-1]), ex_si('Joseph', npp-nam, 'Joseph', [dl(0,n,n)-1]), ex_si('Wilson', npp-nam, 'Wilson', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(travaillait, v-ver:impf, travaillait, [dl(0,np,s)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIA', npp-abr, 'CIA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(195, Result) :-
      prob_parse([ ex_si('Joseph', npp-nam, 'Joseph', [dr(0,np,np)-1]), ex_si('Wilson', npp-nam, 'Wilson', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ex-mari', nc-nom, 'ex-mari', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Valerie', npp-nam, 'Valerie', [dr(0,np,np)-1]), ex_si('Plame', npp-nam, 'Plame', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(196, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Fitzgerald', npp-nam, 'Fitzgerald', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(révélé, vpp-ver:pper, révélé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(hauts, adj-adj, hauts, [dr(0,n,n)-1]), ex_si(fonctionnaires, nc-nom, fonctionnaires, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Libby', npp-nam, 'Libby', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2003, adj-num, 2003, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Valerie', npp-nam, 'Valerie', [dr(0,np,np)-1]), ex_si('Plame', npp-nam, 'Plame', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(ambassadeur, nc-nom, ambassadeur, [n-1]), ex_si('Joseph', npp-nam, 'Joseph', [dl(0,n,n)-1]), ex_si('Wilson', npp-nam, 'Wilson', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(travaillait, v-ver:impf, travaillait, [dl(0,np,s)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIA', npp-abr, 'CIA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(197, Result) :-
      prob_parse([ ex_si('Joseph', npp-nam, 'Joseph', [dr(0,np,np)-1]), ex_si('Wilson', npp-nam, 'Wilson', [np-1]), ex_si(travaillait, v-ver:impf, travaillait, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIA', npp-abr, 'CIA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(198, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si('Judith', npp-nam, 'Judith', [dl(0,n,n)-1]), ex_si('Miller', npp-nam, 'Miller', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(emprisonnée, vpp-ver:pper, emprisonnée, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(nommer, vinf-ver:infi, nommer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(gouvernementale, adj-adj, gouvernementale, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(identifié, vpp-ver:pper, identifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Central', npp-nam, 'Central', [dr(0,n,n)-1]), ex_si('Intelligence', npp-nam, 'Intelligence', [dr(0,n,n)-1]), ex_si('Agency', npp-nam, 'Agency', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CIA', npp-abr, 'CIA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Valerie', npp-nam, 'Valerie', [dr(0,np,np)-1]), ex_si('Plame', npp-nam, 'Plame', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(199, Result) :-
      prob_parse([ ex_si('Judith', npp-nam, 'Judith', [dr(0,np,np)-1]), ex_si('Miller', npp-nam, 'Miller', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIA', npp-abr, 'CIA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(200, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si('Judith', npp-nam, 'Judith', [dl(0,n,n)-1]), ex_si('Miller', npp-nam, 'Miller', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(emprisonnée, vpp-ver:pper, emprisonnée, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(nommer, vinf-ver:infi, nommer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(gouvernementale, adj-adj, gouvernementale, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(identifié, vpp-ver:pper, identifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(renseignement, nc-nom, renseignement, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CIA', npp-abr, 'CIA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Valerie', npp-nam, 'Valerie', [dr(0,np,np)-1]), ex_si('Plame', npp-nam, 'Plame', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(201, Result) :-
      prob_parse([ ex_si('Judith', npp-nam, 'Judith', [dr(0,np,np)-1]), ex_si('Miller', npp-nam, 'Miller', [np-1]), ex_si(travaille, v-ver:pres, travaille, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(202, Result) :-
      prob_parse([ ex_si('Jyestadeva', npp-nam, 'Jyestadeva', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1500-1610', pro-num, '1500-1610', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(astronome, nc-nom, astronome, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Kerala', npp-nam, 'Kerala', [n-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Madhava', npp-nam, 'Madhava', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Sangamagrama', npp-nam, 'Sangamagrama', [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), ex_si(élève, nc-nom, élève, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Damodara', npp-nam, 'Damodara', [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(203, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(calcul, nc-nom, calcul, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Yuktibhasa', npp-nam, 'Yuktibhasa', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(204, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Drk-karana', npp-nam, 'Drk-karana', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(observations, nc-nom, observations, [n-1]), ex_si(astronomiques, adj-adj, astronomiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(205, Result) :-
      prob_parse([ ex_si('Jyestadeva', npp-nam, 'Jyestadeva', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(calcul, nc-nom, calcul, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(206, Result) :-
      prob_parse([ ex_si('Jyestadeva', npp-nam, 'Jyestadeva', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1500-1610', pro-num, '1500-1610', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(astronome, nc-nom, astronome, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Kerala', npp-nam, 'Kerala', [n-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Madhava', npp-nam, 'Madhava', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Sangamagrama', npp-nam, 'Sangamagrama', [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), ex_si(élève, nc-nom, élève, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Damodara', npp-nam, 'Damodara', [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(207, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(calcul, nc-nom, calcul, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Yuktibhasa', npp-nam, 'Yuktibhasa', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(208, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Drk-karana', npp-nam, 'Drk-karana', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(observations, nc-nom, observations, [n-1]), ex_si(astronomiques, adj-adj, astronomiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(209, Result) :-
      prob_parse([ ex_si('Jyestadeva', npp-nam, 'Jyestadeva', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Yuktibhasa', npp-nam, 'Yuktibhasa', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(210, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(actif, adj-adj, actif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Garde', nc-nam, 'Garde', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1941, pro-num, 1941, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(211, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Kennon', npp-nam, 'Kennon', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(actifs, adj-adj, actifs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rentré, vpp-ver:pper, rentré, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(212, Result) :-
      prob_parse([ ex_si('Kennon', npp-nam, 'Kennon', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(213, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(actif, adj-adj, actif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Garde', nc-nam, 'Garde', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1941, pro-num, 1941, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(214, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Kennon', npp-nam, 'Kennon', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(actifs, adj-adj, actifs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rentré, vpp-ver:pper, rentré, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(215, Result) :-
      prob_parse([ ex_si('Kennon', npp-nam, 'Kennon', [np-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Garde', nc-nam, 'Garde', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(216, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Kinston', npp-nam, 'Kinston', [dr(0,n,n)-1]), ex_si('Indians', npp-nam, 'Indians', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(baseball, nc-nom, baseball, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ligue, nc-nom, ligue, [n-1]), ex_si(mineure, adj-adj, mineure, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Kinston', npp-nam, 'Kinston', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Caroline', npp-nam, 'Caroline', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(217, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(affiliée, vpp-ver:pper, affiliée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si('A', nc-nom, 'A', [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Indians', nc-nam, 'Indians', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cleveland', npp-nam, 'Cleveland', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Carolina', npp-nam, 'Carolina', [dr(0,n,n)-1]), ex_si('League', npp-nam, 'League', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(218, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Kinston', npp-nam, 'Kinston', [dr(0,n,n)-1]), ex_si('Indians', npp-nam, 'Indians', [dl(0,n,n)-1]), ex_si(participent, v-ver:pres, participent, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Carolina', npp-nam, 'Carolina', [dr(0,n,n)-1]), ex_si('League', npp-nam, 'League', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(219, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Kofi', npp-nam, 'Kofi', [dr(0,np,np)-1]), ex_si('Annan', npp-nam, 'Annan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(constaté, vpp-ver:pper, constaté, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si(irakien, adj-adj, irakien, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déplacé, vpp-ver:pper, déplacé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(voter, vinf-ver:infi, voter, [dl(0,np,s_inf)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(scrutin, nc-nom, scrutin, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(220, Result) :-
      prob_parse([ ex_si('Kofi', npp-nam, 'Kofi', [dr(0,np,np)-1]), ex_si('Annan', npp-nam, 'Annan', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(scrutin, nc-nom, scrutin, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(221, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(attaquant, nc-nom, attaquant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Swansea', npp-nam, 'Swansea', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Lee', npp-nam, 'Lee', [dr(0,np,np)-1]), ex_si('Trundle', npp-nam, 'Trundle', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(négocié, vpp-ver:pper, négocié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lucratif, adj-adj, lucratif, [dr(0,n,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(club, nc-nom, club, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('League', npp-nam, 'League', [dr(0,np,np)-1]), ex_si('One', npp-nam, 'One', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(222, Result) :-
      prob_parse([ ex_si('Lee', npp-nam, 'Lee', [dr(0,np,np)-1]), ex_si('Trundle', npp-nam, 'Trundle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(club, nc-nom, club, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('League', npp-nam, 'League', [dr(0,np,np)-1]), ex_si('One', npp-nam, 'One', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(223, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(sédatifs, adj-adj, sédatifs, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(anticholinergiques, adj-adj, anticholinergiques, [n-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), ex_si(sympatholytiques, adj-adj, sympatholytiques, [dl(0,n,n)-1]), ex_si(proéminents, adj-adj, proéminents, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si(bouche, nc-nom, bouche, [dr(0,dl(0,n,n),n)-1]), ex_si(sèche, adj-adj, sèche, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(hypotension, nc-nom, hypotension, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(tachycardie, nc-nom, tachycardie, [dr(0,dl(0,n,n),n)-1]), ex_si(sinusale, adj-adj, sinusale, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(sueurs, nc-nom, sueurs, [dl(0,n,n)-1]), ex_si(nocturnes, adj-adj, nocturnes, [dl(0,n,n)-1]), ex_si(extrêmes, adj-adj, extrêmes, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(provoque, v-ver:pres, provoque, [let-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(prise, nc-nom, prise, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(poids, nc-nom, poids, [n-1]), ex_si(massive, adj-adj, massive, [n-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(224, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(permettent, v-ver:pres, permettent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(normalement, adv-adv, normalement, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(administrer, vinf-ver:infi, administrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si(doses, nc-nom, doses, [n-1]), ex_si(nécessaires, adj-adj, nécessaires, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rémission, nc-nom, rémission, [n-1]), ex_si(complète, adj-adj, complète, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(schizophrénie, nc-nom, schizophrénie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(associé, vpp-ver:pper, associé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(antipsychotique, nc-nom, antipsychotique, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(puissant, adj-adj, puissant, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(225, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(schizophrénie, nc-nom, schizophrénie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(226, Result) :-
      prob_parse([ ex_si('Live', npp-nom, 'Live', [np-1]), ex_si('At', et-prp, 'At', [dr(0,dl(0,np,np),np)-1]), ex_si('Leeds', npp-nam, 'Leeds', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(album, nc-nom, album, [n-1]), ex_si(live, adj-adj, live, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('The', npp-det:art, 'The', [dr(0,np,n)-1]), ex_si('Who', npp-nam, 'Who', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(même, adv-adv, même, [dl(1,s,s)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(album, nc-nom, album, [n-1]), ex_si(live, adj-adj, live, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(sorti, vpp-ver:pper, sorti, [dl(0,np,s_ppart)-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(enregistrait, v-ver:impf, enregistrait, [dl(0,np,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(produisait, v-ver:impf, produisait, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(227, Result) :-
      prob_parse([ ex_si('Live', npp-nam, 'Live', [np-1]), ex_si('At', et-prp, 'At', [dr(0,dl(0,np,np),np)-1]), ex_si('Leeds', npp-nam, 'Leeds', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('The', det-det:art, 'The', [dr(0,np,n)-1]), ex_si('Who', npp-nam, 'Who', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(228, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2004, adj-num, 2004, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(producteur, nc-nom, producteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Lukoil', npp-nam, 'Lukoil', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(partage, nc-nom, partage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(35, det-num, 35, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gisements, nc-nom, gisements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si(ouzbeks, adj-adj, ouzbeks, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(229, Result) :-
      prob_parse([ ex_si('Lukoil', npp-nam, 'Lukoil', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(1, det-num, 1, [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2004, pro-num, 2004, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(230, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(exécution, nc-nom, exécution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Scott', npp-nam, 'Scott', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suscité, vpp-ver:pper, suscité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indignation, nc-nom, indignation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ontario', npp-nam, 'Ontario', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expédition, nc-nom, expédition, [n-1]), ex_si('Wolseley', npp-nam, 'Wolseley', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(forcé, vpp-ver:pper, forcé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Louis', npp-nam, 'Louis', [dr(0,np,np)-1]), ex_si('Riel', npp-nam, 'Riel', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(désormais, adv-adv, désormais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(meurtrier, nc-nom, meurtrier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fuir, vinf-ver:infi, fuir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(colonie, nc-nom, colonie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(231, Result) :-
      prob_parse([ ex_si('Louis', npp-nam, 'Louis', [dr(0,np,np)-1]), ex_si('Riel', npp-nam, 'Riel', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Scott', npp-nam, 'Scott', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(232, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Extra', npp-nam, 'Extra', [dr(0,n,n)-1]), ex_si('Girl', npp-nam, 'Girl', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si(1923, pro-num, 1923, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sue', npp-nam, 'Sue', [dr(0,np,np)-1]), ex_si('Graham', npp-nam, 'Graham', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(jouée, vpp-ver:pper, jouée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Mabel', npp-nam, 'Mabel', [dr(0,np,np)-1]), ex_si('Normand', npp-nam, 'Normand', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Hollywood', npp-nam, 'Hollywood', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(233, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(véhicule, nc-nom, véhicule, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mabel', npp-nam, 'Mabel', [dr(0,np,np)-1]), ex_si('Normand', npp-nam, 'Normand', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Mack', npp-nam, 'Mack', [dr(0,np,np)-1]), ex_si('Sennett', npp-nam, 'Sennett', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(suite, nc-nom, suite, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(antérieurs, adj-adj, antérieurs, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(cinématographique, adj-adj, cinématographique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ouvre, v-ver:pres, ouvre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(ultérieurs, adj-adj, ultérieurs, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Hollywood', npp-nam, 'Hollywood', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Show', npp-nam, 'Show', [dr(0,np,np)-1]), ex_si('People', npp-nam, 'People', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(1928, pro-num, 1928, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('King', npp-nam, 'King', [dr(0,np,np)-1]), ex_si('Vidors', npp-nam, 'Vidors', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(234, Result) :-
      prob_parse([ ex_si('Mabel', npp-nam, 'Mabel', [dr(0,np,np)-1]), ex_si('Normand', npp-nam, 'Normand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('The', det-det:art, 'The', [dr(0,np,n)-1]), ex_si('Extra', npp-nam, 'Extra', [dr(0,n,n)-1]), ex_si('Girl', npp-nam, 'Girl', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(235, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Macdonough', npp-nam, 'Macdonough', [n-1]), ex_si(patrouille, v-ver:pres, patrouille, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(large, nc-nom, large, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Guam', npp-nam, 'Guam', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(embarcations, nc-nom, embarcations, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('sous-marins', nc-nom, 'sous-marins', [n-1]), ex_si(ennemis, adj-adj, ennemis, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(poursuivant, vpr-ver:ppre, poursuivant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(départ, nc-nom, départ, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Hawaï', npp-nam, 'Hawaï', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(236, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Pearl', npp-nam, 'Pearl', [dr(0,np,np)-1]), ex_si('Harbor', npp-nam, 'Harbor', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parti, vpp-ver:pper, parti, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amirauté', npp-nam, 'Amirauté', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(237, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Macdonough', npp-nam, 'Macdonough', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Hawaii', npp-nam, 'Hawaii', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(238, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Pentagone', npp-nam, 'Pentagone', [n-1]), ex_si(rejette, v-ver:pres, rejette, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(demandes, nc-nom, demandes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Kirghizstan', npp-nam, 'Kirghizstan', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(passée, vpp-ver:pper, passée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Manas', npp-nam, 'Manas', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(installation, nc-nom, installation, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(clé, nc-nom, clé, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(avions, nc-nom, avions, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(effectuant, vpr-ver:ppre, effectuant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(missions, nc-nom, missions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(239, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Manas', npp-nam, 'Manas', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Kirghizstan', npp-nam, 'Kirghizstan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(240, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(évoqué, vpp-ver:pper, évoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrestation, nc-nom, arrestation, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(illégale, adj-adj, illégale, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(professeure, nc-nom, professeure, [n-1]), ex_si(mexicaine, adj-adj, mexicaine, [dl(0,n,n)-1]), ex_si('Maria', npp-nam, 'Maria', [dl(0,n,n)-1]), ex_si('Eugenia', npp-nam, 'Eugenia', [dl(0,n,n)-1]), ex_si('Ochoa', npp-nam, 'Ochoa', [dl(0,n,n)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(salvadorien, adj-adj, salvadorien, [dl(0,n,n)-1]), ex_si(accuse, v-ver:pres, accuse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guérilla, nc-nom, guérilla, [n-1]), ex_si(salvadorienne, adj-adj, salvadorienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(241, Result) :-
      prob_parse([ ex_si('Maria', npp-nam, 'Maria', [dr(0,np,np)-1]), ex_si('Eugenia', npp-nam, 'Eugenia', [dr(0,np,np)-1]), ex_si('Ochoa', npp-nam, 'Ochoa', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêtée, vpp-ver:pper, arrêtée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(242, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Marlowe', npp-nam, 'Marlowe', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(légalement, adv-adv, légalement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mandat, nc-nom, mandat, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(lancé, vpp-ver:pper, lancé, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(243, Result) :-
      prob_parse([ ex_si('Aidé', vpp-ver:pper, 'Aidé', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Zaleshoff', npp-nam, 'Zaleshoff', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(échapper, vinf-ver:infi, échapper, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Milan', npp-nam, 'Milan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(244, Result) :-
      prob_parse([ ex_si('Marlowe', npp-nam, 'Marlowe', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Zaleshoff', npp-nam, 'Zaleshoff', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(245, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Marlowe', npp-nam, 'Marlowe', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(légalement, adv-adv, légalement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mandat, nc-nom, mandat, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(lancé, vpp-ver:pper, lancé, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(246, Result) :-
      prob_parse([ ex_si('Aidé', vpp-ver:pper, 'Aidé', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Zaleshoff', npp-nam, 'Zaleshoff', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(échapper, vinf-ver:infi, échapper, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Milan', npp-nam, 'Milan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(247, Result) :-
      prob_parse([ ex_si('Marlowe', npp-nam, 'Marlowe', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(italiennes, adj-adj, italiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(248, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si('sommes...en', pref-adv, 'sommes...en', [dr(0,dl(0,np,s),pp)-1]), ex_si(train, nc-nom, train, [let-1]), ex_si(de, p-prp, de, [dr(0,pp,n)-1]), ex_si(déployer, vinf-ver:infi, déployer, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(personnes, nc-nom, personnes, [dr(0,np,pp_de)-1]), ex_si(en, p-prp, en, [dr(0,pp_de,n)-1]), ex_si('Côte', nc-nam, 'Côte', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), ex_si('-', ponct-pun, '-', [n-1]), ex_si(des, det-prp:det, des, [let-1]), ex_si(policiers, nc-nom, policiers, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,np,n)-1]), ex_si(des, det-prp:det, des, [n-1]), ex_si(militaires, nc-nom, militaires, [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(personnes, nc-nom, personnes, [dr(0,dl(0,np,np),np)-1]), ex_si(pour, p-prp, pour, [dr(0,np,n)-1]), ex_si(travailler, vinf-ver:infi, travailler, [n-1]), ex_si(directement, adv-adv, directement, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avec, p-prp, avec, [dl(0,np,s_inf)-1]), ex_si(le, det-det:art, le, [dl(1,s,s)-1]), ex_si(bureau, nc-nom, bureau, [dr(0,dl(1,s,s),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [n-1]), ex_si(ministre, nc-nom, ministre, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,n,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [let-1]), ex_si('Mbeki', npp-nam, 'Mbeki', [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(lors, adv-adv, lors, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('d\'', p-prp, 'd\'', [np-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(conférence, nc-nom, conférence, [dr(0,pp_de,np)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('Pretoria', npp-nam, 'Pretoria', [n-1]), ex_si('.', ponct-pun, '.', [dr(0,dl(0,n,n),np)-1])], Result).
sent(249, Result) :-
      prob_parse([ ex_si('Mbeki', npp-nam, 'Mbeki', [np-1]), ex_si(occupe, v-ver:pres, occupe, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(250, Result) :-
      prob_parse([ ex_si('Mercedes-Benz', npp-nam, 'Mercedes-Benz', [dr(0,np,np)-1]), ex_si('USA', npp-nam, 'USA', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('MBUSA', npp-abr, 'MBUSA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Montvale', npp-nam, 'Montvale', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('New', npp-nam, 'New', [dr(0,n,n)-1]), ex_si('Jersey', npp-nam, 'Jersey', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(responsable, adj-adj, responsable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(marketing, nc-nom, marketing, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si('Mercedes-Benz', npp-nam, 'Mercedes-Benz', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Maybach', npp-nam, 'Maybach', [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(251, Result) :-
      prob_parse([ ex_si('MBUSA', npp-abr, 'MBUSA', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('New', npp-nam, 'New', [dr(0,n,n)-1]), ex_si('Yersey', npp-nam, 'Yersey', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(252, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejoint, vpp-ver:pper, rejoint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Key', npp-nam, 'Key', [dl(0,n,n)-1]), ex_si(to, et-prp, to, [dr(0,dl(0,n,n),np)-1]), ex_si(the, et-det:art, the, [dr(0,np,n)-1]), ex_si('Cure', npp-nam, 'Cure', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Mercedes-Benz', npp-nam, 'Mercedes-Benz', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(don, nc-nom, don, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(méthodes, nc-nom, méthodes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(détection, nc-nom, détection, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(traitements, nc-nom, traitements, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(remèdes, nc-nom, remèdes, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cancers, nc-nom, cancers, [n-1]), ex_si(féminins, adj-adj, féminins, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(253, Result) :-
      prob_parse([ ex_si('Mercedez-Benz', npp-nam, 'Mercedez-Benz', [np-1]), ex_si(soutient, v-ver:pres, soutient, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Key', et-nam, 'Key', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(to, et-prp, to, [dr(0,dl(0,n,n),np)-1]), ex_si(the, et-det:art, the, [dr(0,np,n)-1]), ex_si('Cure', npp-nam, 'Cure', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(254, Result) :-
      prob_parse([ ex_si('Airbus', npp-nam, 'Airbus', [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(implanter, vinf-ver:infi, implanter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ingénierie, nc-nom, ingénierie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conception, nc-nom, conception, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Midlands', npp-nam, 'Midlands', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(profiter, vinf-ver:infi, profiter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(disponibilité, nc-nom, disponibilité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ingénierie, nc-nom, ingénierie, [n-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dl(0,n,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(disparition, nc-nom, disparition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('MG', npp-abr, 'MG', [dr(0,np,np)-1]), ex_si('Rover', npp-nam, 'Rover', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(constructeur, nc-nom, constructeur, [n-1]), ex_si(automobile, nc-nom, automobile, [dl(0,n,n)-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(faillite, nc-nom, faillite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(255, Result) :-
      prob_parse([ ex_si('MG', npp-abr, 'MG', [dr(0,np,np)-1]), ex_si('Rover', npp-nam, 'Rover', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(racheté, vpp-ver:pper, racheté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Airbus', npp-nam, 'Airbus', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(256, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ASCAP', npp-abr, 'ASCAP', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si(regroupant, vpr-ver:ppre, regroupant, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('200.000', det-num, '200.000', [dr(0,np,n)-1]), ex_si(compositeurs, nc-nom, compositeurs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('auteurs-compositeurs', nc-nom, 'auteurs-compositeurs', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(paroliers, nc-nom, paroliers, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(éditeurs, nc-nom, éditeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(musique, nc-nom, musique, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(musique, nc-nom, musique, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(257, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('200.000', det-num, '200.000', [dr(0,np,n)-1]), ex_si(compositeurs, nc-nom, compositeurs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('auteurs-compositeurs', nc-nom, 'auteurs-compositeurs', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(paroliers, nc-nom, paroliers, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(éditeurs, nc-nom, éditeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(musique, nc-nom, musique, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(membres, nc-nom, membres, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ASCAP', npp-abr, 'ASCAP', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(258, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dealers, nc-nom, dealers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Morro', npp-nam, 'Morro', [np-1]), ex_si(da, et-prp, da, [dr(0,dl(0,np,np),np)-1]), ex_si('Rocinha', npp-nam, 'Rocinha', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dealers, nc-nom, dealers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(favela, nc-nom, favela, [n-1]), ex_si(voisine, adj-adj, voisine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vidigal', npp-nam, 'Vidigal', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(259, Result) :-
      prob_parse([ ex_si('Morro', npp-nam, 'Morro', [np-1]), ex_si(da, et-prp:det, da, [dr(0,dl(0,np,np),np)-1]), ex_si('Rocinha', npp-nam, 'Rocinha', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(proche, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(favela, et-nom, favela, [n-1]), ex_si('Vidigal', npp-nam, 'Vidigal', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(260, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(district, nc-nom, district, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Leonie', npp-nam, 'Leonie', [dl(0,n,n)-1]), ex_si('Brinkema', npp-nam, 'Brinkema', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(plaidoyers, nc-nom, plaidoyers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(culpabilité, nc-nom, culpabilité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Zacarias', npp-nam, 'Zacarias', [dr(0,np,np)-1]), ex_si('Moussaoui', npp-nam, 'Moussaoui', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pirate, nc-nom, pirate, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(puissance, nc-nom, puissance, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(six, adj-num, six, [dr(0,n,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conspiration, nc-nom, conspiration, [n-1]), ex_si(portées, vpp-ver:pper, portées, [dr(0,dl(0,n,n),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(pour, p-prp, pour, [np-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(comploté, vpp-ver:pper, comploté, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(attaques, nc-nom, attaques, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(261, Result) :-
      prob_parse([ ex_si('Moussaoui', npp-nam, 'Moussaoui', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(détenu, vpp-ver:pper, détenu, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(donné, vpp-ver:pper, donné, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(palais, nc-nom, palais, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandria', npp-nam, 'Alexandria', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Virginie', npp-nam, 'Virginie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(poli, adj-adj, poli, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(calme, adj-adj, calme, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(comparution, nc-nom, comparution, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(262, Result) :-
      prob_parse([ ex_si('Moussaoui', npp-nam, 'Moussaoui', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(attentats, nc-nom, attentats, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(263, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(postée, vpp-ver:pper, postée, [dl(0,np,s_pass)-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Pékin', npp-nam, 'Pékin', [np-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Zhao', npp-nam, 'Zhao', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(assignation, nc-nom, assignation, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(résidence, nc-nom, résidence, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rassemblées, vpp-ver:pper, rassemblées, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(hommage, nc-nom, hommage, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(264, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(repoussé, vpp-ver:pper, repoussé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(deuil, nc-nom, deuil, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(265, Result) :-
      prob_parse([ ex_si('Monsieur', nc-nom, 'Monsieur', [dr(0,np,np)-1]), ex_si('Zhao', npp-nam, 'Zhao', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Pékin', npp-nam, 'Pékin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(266, Result) :-
      prob_parse([ ex_si('Malheureusement', adv-adv, 'Malheureusement', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Hobday', npp-nam, 'Hobday', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entraîne, v-ver:pres, entraîne, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(départ, nc-nom, départ, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Browne', npp-nam, 'Browne', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(267, Result) :-
      prob_parse([ ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Hobday', npp-nam, 'Hobday', [np-1]), ex_si(quitte, v-ver:pres, quitte, [dr(0,dl(0,np,s),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(268, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conversations, nc-nom, conversations, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Robbins', npp-nam, 'Robbins', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(entendu, vpp-ver:pper, entendu, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [dr(0,np,np)-1]), ex_si('Environmental', npp-nam, 'Environmental', [dr(0,np,np)-1]), ex_si('Inc', npp-abr, 'Inc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(269, Result) :-
      prob_parse([ ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retenu, vpp-ver:pper, retenu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(propriétaires, nc-nom, propriétaires, [n-1]), ex_si(passés, vpp-ver:pper, passés, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(présents, adj-adj, présents, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(combinaison, nc-nom, combinaison, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(270, Result) :-
      prob_parse([ ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Robbins', npp-nam, 'Robbins', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(copropriétaire, nc-nom, copropriétaire, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [dr(0,np,np)-1]), ex_si('Environmental', npp-nam, 'Environmental', [dr(0,np,np)-1]), ex_si('Inc', et-abr, 'Inc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(271, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si('Ford', npp-nam, 'Ford', [n-1]), ex_si('Escort', npp-nam, 'Escort', [dl(0,n,n)-1]), ex_si('GL', npp-abr, 'GL', [dl(0,n,n)-1]), ex_si(bleu, adj-adj, bleu, [dl(0,n,n)-1]), ex_si(clair, adj-adj, clair, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1975, pro-num, 1975, [np-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),dl(0,np,s_ppart))-1]), ex_si(appartenu, vpp-ver:pper, appartenu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(vendue, vpp-ver:pper, vendue, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si('690.000', det-num, '690.000', [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(multimillionnaire, nc-nom, multimillionnaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Houston', npp-nam, 'Houston', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(vouloir, vinf-ver:infi, vouloir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(natale, adj-adj, natale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(272, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(multimillionnaire, nc-nom, multimillionnaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Houston', npp-nam, 'Houston', [np-1]), ex_si(achète, v-ver:pres, achète, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ford', npp-nam, 'Ford', [n-1]), ex_si('Escort', npp-nam, 'Escort', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pape', npp-nam, 'Pape', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(273, Result) :-
      prob_parse([ ex_si('Fervent', adj-adj, 'Fervent', [dr(0,np,n)-1]), ex_si(partisan, nc-nom, partisan, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(socialisme, nc-nom, socialisme, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(proche, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si('Enrico', npp-nam, 'Enrico', [dr(0,np,np)-1]), ex_si('Berlinguer', npp-nam, 'Berlinguer', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(obtient, v-ver:pres, obtient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(secrétariat, nc-nom, secrétariat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(274, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(rédige, v-ver:pres, rédige, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(proposant, vpr-ver:ppre, proposant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expulsion, nc-nom, expulsion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Manifeste', nc-nam, 'Manifeste', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(275, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1984, pro-num, 1984, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlinguer', npp-nam, 'Berlinguer', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Natta', npp-nam, 'Natta', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(secrétaire, nc-nom, secrétaire, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(276, Result) :-
      prob_parse([ ex_si('Natta', npp-nam, 'Natta', [np-1]), ex_si(soutenait, v-ver:impf, soutenait, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(socialisme, nc-nom, socialisme, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(277, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(rédige, v-ver:pres, rédige, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(proposant, vpr-ver:ppre, proposant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expulsion, nc-nom, expulsion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Manifeste', nc-nam, 'Manifeste', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(278, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1984, pro-num, 1984, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlinguer', npp-nam, 'Berlinguer', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Natta', npp-nam, 'Natta', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(secrétaire, nc-nom, secrétaire, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(279, Result) :-
      prob_parse([ ex_si('Natta', npp-nam, 'Natta', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Manifeste', nc-nam, 'Manifeste', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(280, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('Nelson', npp-nam, 'Nelson', [dr(0,np,np)-1]), ex_si('Beavers', npp-nam, 'Beavers', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('co-propriétaire', nc-nom, 'co-propriétaire', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Carolina', npp-nam, 'Carolina', [dr(0,np,np)-1]), ex_si('Analytical', npp-nam, 'Analytical', [dr(0,np,np)-1]), ex_si('Laboratories', npp-nam, 'Laboratories', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('LLC', npp-abr, 'LLC', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(antécédents, nc-nom, antécédents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(propriété, nc-nom, propriété, [n-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Woodson-Tenent', npp-nam, 'Woodson-Tenent', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Eurofins', npp-nam, 'Eurofins', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(fosse, nc-nom, fosse, [let-1]), ex_si(septique, adj-adj, septique, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(installée, vpp-ver:pper, installée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1990, adj-num, 1990, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(281, Result) :-
      prob_parse([ ex_si('Nelson', npp-nam, 'Nelson', [dr(0,np,np)-1]), ex_si('Beavers', npp-nam, 'Beavers', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(propriétaires, nc-nom, propriétaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Carolina', npp-nam, 'Carolina', [dr(0,np,np)-1]), ex_si('Analytical', npp-nam, 'Analytical', [dr(0,np,np)-1]), ex_si('Laboratories', npp-nam, 'Laboratories', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(282, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('Nelson', npp-nam, 'Nelson', [dr(0,np,np)-1]), ex_si('Beavers', npp-nam, 'Beavers', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(copropriétaire, nc-nom, copropriétaire, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Carolina', npp-nam, 'Carolina', [dr(0,np,np)-1]), ex_si('Analytical', npp-nam, 'Analytical', [dr(0,np,np)-1]), ex_si('Laboratories', npp-nam, 'Laboratories', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('LLC', npp-abr, 'LLC', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(antécédents, nc-nom, antécédents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(propriété, nc-nom, propriété, [n-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Woodson-Tenent', npp-nam, 'Woodson-Tenent', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Eurofins', npp-nam, 'Eurofins', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [let-1]), ex_si(fosse, nc-nom, fosse, [let-1]), ex_si(septique, adj-adj, septique, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(installée, vpp-ver:pper, installée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1990, adj-num, 1990, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(283, Result) :-
      prob_parse([ ex_si('Nelson', npp-nam, 'Nelson', [dr(0,np,np)-1]), ex_si('Beavers', npp-nam, 'Beavers', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Eurofins', npp-nam, 'Eurofins', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(284, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ivoirien, adj-adj, ivoirien, [dl(0,n,n)-1]), ex_si('Laurent', npp-nam, 'Laurent', [dl(0,n,n)-1]), ex_si('Gbagbo', npp-nam, 'Gbagbo', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(promulgué, vpp-ver:pper, promulgué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si(électorales, adj-adj, électorales, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si(électorale, adj-adj, électorale, [dl(0,n,n)-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si(chargée, vpp-ver:pper, chargée, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(superviser, vinf-ver:infi, superviser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(scrutin, nc-nom, scrutin, [n-1]), ex_si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prévu, vpp-ver:pper, prévu, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(285, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Côte', nc-nam, 'Côte', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si(auront, v-ver:futu, auront, [dr(0,dl(0,np,s),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(286, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(ivoirien, adj-adj, ivoirien, [dl(0,n,n)-1]), ex_si('Laurent', npp-nam, 'Laurent', [dl(0,n,n)-1]), ex_si('Gbagbo', npp-nam, 'Gbagbo', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(promulgué, vpp-ver:pper, promulgué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si(électorales, adj-adj, électorales, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si(électorale, adj-adj, électorale, [dl(0,n,n)-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si(chargée, vpp-ver:pper, chargée, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(superviser, vinf-ver:infi, superviser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(scrutin, nc-nom, scrutin, [n-1]), ex_si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(prévu, vpp-ver:pper, prévu, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(287, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Côte', nc-nam, 'Côte', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si(auront, v-ver:futu, auront, [dr(0,dl(0,np,s),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(288, Result) :-
      prob_parse([ ex_si('Nival', npp-nam, 'Nival', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Sergey', npp-nam, 'Sergey', [dr(0,np,np)-1]), ex_si('Orlovskiy', npp-nam, 'Orlovskiy', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(289, Result) :-
      prob_parse([ ex_si('Début', nc-nom, 'Début', [dr(0,dr(0,s,s),np)-1]), ex_si(2005, pro-num, 2005, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rachetée, vpp-ver:pper, rachetée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Ener1', npp-nam, 'Ener1', [dr(0,np,np)-1]), ex_si('Group', npp-nam, 'Group', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(portefeuille, nc-nom, portefeuille, [n-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(290, Result) :-
      prob_parse([ ex_si('Nival', npp-nam, 'Nival', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vendue, vpp-ver:pper, vendue, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2005, pro-num, 2005, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(291, Result) :-
      prob_parse([ ex_si('Nokia', npp-nam, 'Nokia', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Texas', npp-nam, 'Texas', [dr(0,np,np)-1]), ex_si('Instruments', npp-nam, 'Instruments', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(fabricants, nc-nom, fabricants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(mobiles, adj-adj, mobiles, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(officiellement, adv-adv, officiellement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(plaints, vpp-ver:pper, plaints, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Qualcomm', npp-nam, 'Qualcomm', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(puces, nc-nom, puces, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(mobiles, adj-adj, mobiles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(déloyale, adj-adj, déloyale, [dl(0,n,n)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(brevets, nc-nom, brevets, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si('3G', adj-abr, '3G', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(292, Result) :-
      prob_parse([ ex_si('Nokia', npp-nam, 'Nokia', [np-1]), ex_si(produit, v-ver:pres, produit, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(puces, nc-nom, puces, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(mobiles, adj-adj, mobiles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(293, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(laitière, adj-adj, laitière, [dl(0,n,n)-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si('Parmalat', npp-nam, 'Parmalat', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('14,3', det-num, '14,3', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(comptabilisés, vpp-ver:pper, comptabilisés, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(manque, nc-nom, manque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(outils, nc-nom, outils, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôles, nc-nom, contrôles, [n-1]), ex_si(efficaces, adj-adj, efficaces, [dl(0,n,n)-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(financières, adj-adj, financières, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(294, Result) :-
      prob_parse([ ex_si('Parmalat', npp-nam, 'Parmalat', [np-1]), ex_si(coûte, v-ver:pres, coûte, [dr(0,dl(0,np,s),np)-1]), ex_si('14,3', det-num, '14,3', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(295, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(conseiller, nc-nom, conseiller, [n-1]), ex_si('Pierce', npp-nam, 'Pierce', [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(construit, vpp-ver:pper, construit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('E.', nc-abr, 'E.', [dr(0,np,np)-1]), ex_si('28th', npp-nam, '28th', [dr(0,np,np)-1]), ex_si('Street', npp-nam, 'Street', [np-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,np,np),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(boulevard, nc-nom, boulevard, [n-1]), ex_si('Rossville', npp-nam, 'Rossville', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(habite, v-ver:pres, habite, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(proximité, nc-nom, proximité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(296, Result) :-
      prob_parse([ ex_si('Pierce', npp-nam, 'Pierce', [np-1]), ex_si(habite, v-ver:pres, habite, [dr(0,dl(0,np,s),pp)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(boulevard, nc-nom, boulevard, [n-1]), ex_si('Rossville', npp-nam, 'Rossville', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(297, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(conseiller, nc-nom, conseiller, [n-1]), ex_si('Pierce', npp-nam, 'Pierce', [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(construit, vpp-ver:pper, construit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('E.', nc-abr, 'E.', [dr(0,np,np)-1]), ex_si('28th', npp-nam, '28th', [dr(0,np,np)-1]), ex_si('Street', npp-nam, 'Street', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,np,np),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(boulevard, nc-nom, boulevard, [n-1]), ex_si('Rossville', npp-nam, 'Rossville', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(habite, v-ver:pres, habite, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(proximité, nc-nom, proximité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(298, Result) :-
      prob_parse([ ex_si('Pierce', npp-nam, 'Pierce', [np-1]), ex_si(habite, v-ver:pres, habite, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('E.', nc-abr, 'E.', [dr(0,np,np)-1]), ex_si('28th', npp-nam, '28th', [dr(0,np,np)-1]), ex_si('Street', npp-nam, 'Street', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(299, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1799, pro-num, 1799, [np-1]), ex_si(encore, adv-adv, encore, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prêtres, nc-nom, prêtres, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(emprisonnés, vpp-ver:pper, emprisonnés, [dl(0,np,s_pass)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(déportés, vpp-ver:pper, déportés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(colonies, nc-nom, colonies, [n-1]), ex_si(pénitentiaires, adj-adj, pénitentiaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(persécution, nc-nom, persécution, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(empirer, vinf-ver:infi, empirer, [dl(0,np,s_inf)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dirigée, vpp-ver:pper, dirigée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si('Louis', npp-nam, 'Louis', [dl(0,n,n)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [dl(0,n,n)-1]), ex_si('Berthier', npp-nam, 'Berthier', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Rome', npp-nam, 'Rome', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(emprisonné, vpp-ver:pper, emprisonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Pie', npp-nam, 'Pie', [dl(0,n,n)-1]), ex_si('VI', adj-num, 'VI', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(mourra, v-ver:simp, mourra, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(captivité, nc-nom, captivité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Valence', npp-nam, 'Valence', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Drôme', npp-nam, 'Drôme', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1799, adj-num, 1799, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(300, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Pie', npp-nam, 'Pie', [dl(0,n,n)-1]), ex_si('VI', adj-num, 'VI', [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(est, v-ver:pres, est, [dl(0,np,s_ppart)-1]), ex_si(mort, vpp-ver:pper, mort, [dr(0,dl(1,s,s),n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si('France', npp-nam, 'France', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(301, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('sud-africain', adj-adj, 'sud-africain', [dl(0,n,n)-1]), ex_si('Thabo', npp-nam, 'Thabo', [dl(0,n,n)-1]), ex_si('Mbeki', npp-nam, 'Mbeki', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(principal, adj-adj, principal, [dr(0,n,n)-1]), ex_si(médiateur, nc-nom, médiateur, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Côte', nc-nam, 'Côte', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dimanche, nc-nom, dimanche, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Pretoria', npp-nam, 'Pretoria', [np-1]), ex_si(intensifiait, v-ver:impf, intensifiait, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intervention, nc-nom, intervention, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si('ouest-africaine', adj-adj, 'ouest-africaine', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(ouvrir, vinf-ver:infi, ouvrir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(302, Result) :-
      prob_parse([ ex_si('Pretoria', npp-nam, 'Pretoria', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Côte', nc-nam, 'Côte', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(303, Result) :-
      prob_parse([ ex_si('Prenez', vimp-ver:impe, 'Prenez', [dr(0,s,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(géant, nc-nom, géant, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si('Procter', npp-nam, 'Procter', [dl(0,n,n)-1]), ex_si(and, et-kon, and, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Gamble', npp-nam, 'Gamble', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(304, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(avec, p-prp, avec, [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(budget, nc-nom, budget, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1,8', det-num, '1,8', [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(gère, v-ver:pres, gère, [dr(0,dl(0,np,s),np)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(500, det-num, 500, [dr(0,np,n)-1]), ex_si(partenariats, nc-nom, partenariats, [n-1]), ex_si(actifs, adj-adj, actifs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),np)-1]), ex_si(beaucoup, pro-adv, beaucoup, [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(petites, adj-adj, petites, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(305, Result) :-
      prob_parse([ ex_si('Procter', npp-nam, 'Procter', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Gamble', npp-nam, 'Gamble', [np-1]), ex_si(consacre, v-ver:pres, consacre, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('1,8', det-num, '1,8', [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(306, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(évoqué, vpp-ver:pper, évoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrestation, nc-nom, arrestation, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(illégale, adj-adj, illégale, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(professeure, nc-nom, professeure, [n-1]), ex_si(mexicaine, adj-adj, mexicaine, [dl(0,n,n)-1]), ex_si('Maria', npp-nam, 'Maria', [dl(0,n,n)-1]), ex_si('Eugenia', npp-nam, 'Eugenia', [dl(0,n,n)-1]), ex_si('Ochoa', npp-nam, 'Ochoa', [dl(0,n,n)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(salvadorien, adj-adj, salvadorien, [dl(0,n,n)-1]), ex_si(accuse, v-ver:pres, accuse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guérilla, nc-nom, guérilla, [n-1]), ex_si(salvadorienne, adj-adj, salvadorienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(307, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si('Ochoa', npp-nam, 'Ochoa', [dl(0,n,n)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(salvadorien, adj-adj, salvadorien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(308, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(autorisés, vpp-ver:pper, autorisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(6, det-num, 6, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(quarantaine, nc-nom, quarantaine, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(condition, nc-nom, condition, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(traités, vpp-ver:pper, traités, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tiques, nc-nom, tiques, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(puces, nc-nom, puces, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ténia, nc-nom, ténia, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(48, det-num, 48, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(monter, vinf-ver:infi, monter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ramènera, v-ver:futu, ramènera, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(309, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(quarantaine, nc-nom, quarantaine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(obligatoire, adj-adj, obligatoire, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(310, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aéroport, nc-nom, aéroport, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salvador', npp-nam, 'Salvador', [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Costa', npp-nam, 'Costa', [n-1]), ex_si('Rica', npp-nam, 'Rica', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(assister, vinf-ver:infi, assister, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cérémonie, nc-nom, cérémonie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(investiture, nc-nom, investiture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(élu, vpp-ver:pper, élu, [dl(0,n,n)-1]), ex_si('Rafael', npp-nam, 'Rafael', [dl(0,n,n)-1]), ex_si('Calderon', npp-nam, 'Calderon', [dl(0,n,n)-1]), ex_si('Fournier', npp-nam, 'Fournier', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(311, Result) :-
      prob_parse([ ex_si('Rafael', npp-nam, 'Rafael', [dr(0,np,np)-1]), ex_si('Calderon', npp-nam, 'Calderon', [dr(0,np,np)-1]), ex_si('Fournier', npp-nam, 'Fournier', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(président, nc-nom, président, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Costa', npp-nam, 'Costa', [n-1]), ex_si('Rica', npp-nam, 'Rica', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(312, Result) :-
      prob_parse([ ex_si('De', p-prp, 'De', [dr(0,dr(0,s,s),np)-1]), ex_si(1016, pro-num, 1016, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1030, pro-num, 1030, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Normands', nc-nam, 'Normands', [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(purs, adj-adj, purs, [dr(0,n,n)-1]), ex_si(mercenaires, nc-nom, mercenaires, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Byzantins', nc-nom, 'Byzantins', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Lombards', nc-nam, 'Lombards', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,np,np),np)-1]), ex_si('Sergius', npp-nam, 'Sergius', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Naples', npp-nam, 'Naples', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),dl(0,np,s_ppres))-1]), ex_si(installant, vpr-ver:ppre, installant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si('Rainulf', npp-nam, 'Rainulf', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forteresse, nc-nom, forteresse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Aversa', npp-nam, 'Aversa', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1030, pro-num, 1030, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(leur, clo-pro:per, leur, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('pied-à-terre', nc-nom, 'pied-à-terre', [n-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,np,n)-1]), ex_si(une, det-det:art, une, [n-1]), ex_si(conquête, nc-nom, conquête, [n-1]), ex_si(organisée, vpp-ver:pper, organisée, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(313, Result) :-
      prob_parse([ ex_si('Rainulf', npp-nam, 'Rainulf', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Normands', nc-nam, 'Normands', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(314, Result) :-
      prob_parse([ ex_si('Cinq', det-num, 'Cinq', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(tard, adv-adv, tard, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Rennyo', npp-nam, 'Rennyo', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retourné, vpp-ver:pper, retourné, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kyoto', npp-nam, 'Kyoto', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(établissant, vpr-ver:ppre, établissant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(temples, nc-nom, temples, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(branche, nc-nom, branche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Honganji', npp-nam, 'Honganji', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(315, Result) :-
      prob_parse([ ex_si('Pendant', p-prp, 'Pendant', [dr(0,dr(0,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(établit, v-ver:pres, établit, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(liturgie, nc-nom, liturgie, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(gongyo, nc-nom, gongyo, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(incorporant, vpr-ver:ppre, incorporant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(éléments, nc-nom, éléments, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(deviendront, v-ver:pres, deviendront, [dr(0,dl(0,np,s),np)-1]), ex_si(finalement, adv-adv, finalement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si('Honganji', npp-nam, 'Honganji', [dl(0,n,n)-1]), ex_si('Shinshu', npp-nam, 'Shinshu', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(316, Result) :-
      prob_parse([ ex_si('Rennyo', npp-nam, 'Rennyo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si('Honganji', npp-nam, 'Honganji', [dl(0,n,n)-1]), ex_si('Shinshu', npp-nam, 'Shinshu', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(317, Result) :-
      prob_parse([ ex_si('Forcé', vpp-ver:pper, 'Forcé', [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fuir, vinf-ver:infi, fuir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1471, pro-num, 1471, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Rennyo', npp-nam, 'Rennyo', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendit, v-ver:simp, rendit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Yoshizaki', npp-nam, 'Yoshizaki', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,np,np),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(construisit, v-ver:simp, construisit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(temple, nc-nom, temple, [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(attira, v-ver:simp, attira, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(paysans, nc-nom, paysans, [n-1]), ex_si(convertis, vpp-ver:pper, convertis, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(318, Result) :-
      prob_parse([ ex_si('Rennyo', npp-nam, 'Rennyo', [np-1]), ex_si(atteint, v-ver:pres, atteint, [dr(0,dl(0,np,s),np)-1]), ex_si('Yoshizaki', npp-nam, 'Yoshizaki', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1471, pro-num, 1471, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(319, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émis, vpp-ver:pper, émis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bulletins, nc-nom, bulletins, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(télétype, nc-nom, télétype, [n-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(patrouilles, nc-nom, patrouilles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affût, nc-nom, affût, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), ex_si('Senacal', npp-nam, 'Senacal', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(35, det-num, 35, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cortlandt', npp-nam, 'Cortlandt', [dr(0,np,np)-1]), ex_si('Manor', npp-nam, 'Manor', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(320, Result) :-
      prob_parse([ ex_si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), ex_si('Senacal', npp-nam, 'Senacal', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(321, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(électeurs, nc-nom, électeurs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('centre-gauche', nc-nom, 'centre-gauche', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(choisi, vpp-ver:pper, choisi, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si('Romano', npp-nam, 'Romano', [dr(0,np,np)-1]), ex_si('Prodi', npp-nam, 'Prodi', [np-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(défiera, v-ver:futu, défiera, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Silvio', npp-nam, 'Silvio', [dl(0,n,n)-1]), ex_si('Berlusconi', npp-nam, 'Berlusconi', [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(prochaine, adj-adj, prochaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(322, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('PM', npp-abr, 'PM', [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('73,5', det-num, '73,5', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(partiels, adj-adj, partiels, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(primaires, nc-nom, primaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(323, Result) :-
      prob_parse([ ex_si('Romano', npp-nam, 'Romano', [dr(0,np,np)-1]), ex_si('Prodi', npp-nam, 'Prodi', [np-1]), ex_si(remporte, v-ver:pres, remporte, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(primaires, nc-nom, primaires, [n-1]), ex_si(italiennes, adj-adj, italiennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(324, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(faite, vpp-ver:pper, faite, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(facture, nc-nom, facture, [n-1]), ex_si(fiscale, adj-adj, fiscale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('27,5', det-num, '27,5', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Yukos', npp-nam, 'Yukos', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('Yuganskneftegaz', npp-nam, 'Yuganskneftegaz', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('9,4', det-num, '9,4', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connue, vpp-ver:pper, connue, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Baikalfinansgroup', npp-nam, 'Baikalfinansgroup', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rachetée, vpp-ver:pper, rachetée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(la, det-det:art, la, [dr(0,pp_par,np)-1]), ex_si(compagnie, nc-nom, compagnie, [dr(0,np,n)-1]), ex_si(pétrolière, adj-adj, pétrolière, [n-1]), ex_si('d\'', p-prp, 'd\'', [dl(0,n,n)-1]), ex_si('État', nc-nam, 'État', [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Rosneft', npp-nam, 'Rosneft', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(325, Result) :-
      prob_parse([ ex_si('Rosneft', npp-nam, 'Rosneft', [np-1]), ex_si(appartenait, v-ver:impf, appartenait, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(326, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(agent, nc-nom, agent, [n-1]), ex_si(spécial, adj-adj, spécial, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('FBI', npp-abr, 'FBI', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Rowley', npp-nam, 'Rowley', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Becky', npp-nam, 'Becky', [dr(0,np,np)-1]), ex_si('Lourey', npp-nam, 'Lourey', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(partiront, v-ver:futu, partiront, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Texas', npp-nam, 'Texas', [n-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(camperont, v-ver:pres, camperont, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(327, Result) :-
      prob_parse([ ex_si('Rowley', npp-nam, 'Rowley', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Lourey', npp-nam, 'Lourey', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(parents, nc-nom, parents, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(328, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('Hawi', npp-nam, 'Hawi', [np-1]), ex_si(intervient, v-ver:pres, intervient, [dl(0,np,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(lendemain, nc-nom, lendemain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conclusion, nc-nom, conclusion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(tour, nc-nom, tour, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(législatives, adj-adj, législatives, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(menée, vpp-ver:pper, menée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Saad', npp-nam, 'Saad', [dr(0,np,np)-1]), ex_si('Hariri', npp-nam, 'Hariri', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si('Rafic', npp-nam, 'Rafic', [dl(0,n,n)-1]), ex_si('Hariri', npp-nam, 'Hariri', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(emparer, vinf-ver:infi, emparer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sièges, nc-nom, sièges, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(329, Result) :-
      prob_parse([ ex_si('Saad', npp-nam, 'Saad', [dr(0,np,np)-1]), ex_si('Hariri', npp-nam, 'Hariri', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_pass),np)-1]), ex_si('Premier', det-num, 'Premier', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(330, Result) :-
      prob_parse([ ex_si('Saddam', npp-nam, 'Saddam', [dr(0,np,np)-1]), ex_si('Hussein', npp-nam, 'Hussein', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(offre, nc-nom, offre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(minute, nc-nom, minute, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(exiler, vinf-ver:infi, exiler, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2003, pro-num, 2003, [np-1]), ex_si(menée, vpp-ver:pper, menée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ligue', npp-nam, 'Ligue', [n-1]), ex_si(arabe, adj-adj, arabe, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(sabordé, vpp-ver:pper, sabordé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(331, Result) :-
      prob_parse([ ex_si('Saddam', npp-nam, 'Saddam', [dr(0,np,np)-1]), ex_si('Hussein', npp-nam, 'Hussein', [np-1]), ex_si(fuit, v-ver:pres, fuit, [dr(0,dl(0,np,s),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1])], Result).
sent(332, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(nommés, vpp-ver:pper, nommés, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sainte', npp-nam, 'Sainte', [dr(0,np,np)-1]), ex_si('Jeanne', npp-nam, 'Jeanne', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Arc', npp-nam, 'Arc', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(333, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(brigade, nc-nom, brigade, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(17, det-num, 17, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(135, det-num, 135, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(334, Result) :-
      prob_parse([ ex_si('Sa', det-det:pos, 'Sa', [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(provisions, nc-nom, provisions, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(combattants, nc-nom, combattants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(335, Result) :-
      prob_parse([ ex_si('Beaucoup', pro-pro:ind, 'Beaucoup', [np-1]), ex_si(faisaient, v-ver:impf, faisaient, [dr(0,dr(0,dl(0,np,s),np),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dl(0,np,s_inf)-1]), ex_si(clandestinement, adv-adv, clandestinement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(transportant, vpr-ver:ppre, transportant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(charrettes, nc-nom, charrettes, [n-1]), ex_si(remplies, vpp-ver:pper, remplies, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(céréales, nc-nom, céréales, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(ciment, nc-nom, ciment, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(336, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(brigade, nc-nom, brigade, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sainte', npp-nam, 'Sainte', [dr(0,np,np)-1]), ex_si('Jeanne', npp-nam, 'Jeanne', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Arc', npp-nam, 'Arc', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(procurait, v-ver:impf, procurait, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(combattants, nc-nom, combattants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(337, Result) :-
      prob_parse([ ex_si('Scott', npp-nam, 'Scott', [dr(0,np,np)-1]), ex_si('Stevens', npp-nam, 'Stevens', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(météorologue, nc-nom, météorologue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Idaho', npp-nam, 'Idaho', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(conspiration, nc-nom, conspiration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(manipulation, nc-nom, manipulation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(possiblement, adv-adv, possiblement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mafia, nc-nom, mafia, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('Yakuza', npp-nam, 'Yakuza', [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouragan, nc-nom, ouragan, [n-1]), ex_si('Katrina', npp-nam, 'Katrina', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('KPVI-TV', npp-nam, 'KPVI-TV', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Pocatello', npp-nam, 'Pocatello', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(338, Result) :-
      prob_parse([ ex_si('Scott', npp-nam, 'Scott', [dr(0,np,np)-1]), ex_si('Stevens', npp-nam, 'Stevens', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Yakuzas', npp-nam, 'Yakuzas', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(339, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(exécution, nc-nom, exécution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Scott', npp-nam, 'Scott', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suscité, vpp-ver:pper, suscité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indignation, nc-nom, indignation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ontario', npp-nam, 'Ontario', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expédition, nc-nom, expédition, [n-1]), ex_si('Wolseley', npp-nam, 'Wolseley', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obligé, vpp-ver:pper, obligé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Louis', npp-nam, 'Louis', [dr(0,np,np)-1]), ex_si('Riel', npp-nam, 'Riel', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(désormais, adv-adv, désormais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(meurtrier, nc-nom, meurtrier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fuir, vinf-ver:infi, fuir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(colonie, nc-nom, colonie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(340, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(exécution, nc-nom, exécution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Scott', npp-nam, 'Scott', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expédition, nc-nom, expédition, [n-1]), ex_si('Wolseley', npp-nam, 'Wolseley', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(341, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émis, vpp-ver:pper, émis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bulletins, nc-nom, bulletins, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(télétype, nc-nom, télétype, [n-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(patrouilles, nc-nom, patrouilles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affût, nc-nom, affût, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), ex_si('Senacal', npp-nam, 'Senacal', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(35, det-num, 35, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cortlandt', npp-nam, 'Cortlandt', [dr(0,np,np)-1]), ex_si('Manor', npp-nam, 'Manor', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(342, Result) :-
      prob_parse([ ex_si('Senacal', npp-nam, 'Senacal', [np-1]), ex_si(réside, v-ver:pres, réside, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Cortland', npp-nam, 'Cortland', [dr(0,np,np)-1]), ex_si('Manor', npp-nam, 'Manor', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(343, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instant, nc-nom, instant, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Sony', npp-nam, 'Sony', [dr(0,np,np)-1]), ex_si('BMG', npp-nam, 'BMG', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(indiquant, vpr-ver:ppre, indiquant, [dr(0,dl(0,n,n),np)-1]), ex_si(combien, advwh-adv, combien, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si('CD', nc-nom, 'CD', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(protégés, vpp-ver:pper, protégés, [dl(0,np,s_pass)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,s,s),s)-1]), ex_si(combien, advwh-adv, combien, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vendus, vpp-ver:pper, vendus, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(344, Result) :-
      prob_parse([ ex_si('Sony', npp-nam, 'Sony', [dr(0,np,np)-1]), ex_si('BMG', npp-abr, 'BMG', [np-1]), ex_si(vend, v-ver:pres, vend, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('CD', nc-abr, 'CD', [n-1]), ex_si(protégés, vpp-ver:pper, protégés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(345, Result) :-
      prob_parse([ ex_si('Southwest', npp-nam, 'Southwest', [dr(0,np,np)-1]), ex_si('Airlines', npp-nam, 'Airlines', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reconstruction, nc-nom, reconstruction, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Nouvelle-Orléans', npp-nam, 'Nouvelle-Orléans', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(priorité, nc-nom, priorité, [n-1]), ex_si(numéro, nc-nom, numéro, [dl(0,n,n)-1]), ex_si(un, nc-num, un, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(dévoilait, v-ver:impf, dévoilait, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('58e', adj-num, '58e', [dr(0,n,n)-1]), ex_si(bénéfice, nc-nom, bénéfice, [n-1]), ex_si(trimestriel, adj-adj, trimestriel, [dl(0,n,n)-1]), ex_si(consécutif, adj-adj, consécutif, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(améliorait, v-ver:impf, améliorait, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(couvertures, nc-nom, couvertures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carburant, nc-nom, carburant, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(étendre, vinf-ver:infi, étendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(avantage, nc-nom, avantage, [n-1]), ex_si(concurrentiel, adj-adj, concurrentiel, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(rivaux, nc-nom, rivaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(346, Result) :-
      prob_parse([ ex_si('Southwest', npp-nam, 'Southwest', [dr(0,np,np)-1]), ex_si('Airlines', npp-nam, 'Airlines', [np-1]), ex_si(opère, v-ver:pres, opère, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Nouvelle-Orléans', npp-nam, 'Nouvelle-Orléans', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(347, Result) :-
      prob_parse([ ex_si('Carmine', npp-nam, 'Carmine', [dr(0,np,np)-1]), ex_si('Rocco', npp-nam, 'Rocco', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(directrice, nc-nom, directrice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(contactée, vpp-ver:pper, contactée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Sue', npp-nam, 'Sue', [dr(0,np,np)-1]), ex_si('Robbins', npp-nam, 'Robbins', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Division', nc-nam, 'Division', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gestion, nc-nom, gestion, [dr(0,dl(0,n,n),n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(informer, vinf-ver:infi, informer, [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(site, nc-nom, site, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si('Woodson-Tenent', npp-nam, 'Woodson-Tenent', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(348, Result) :-
      prob_parse([ ex_si('Sue', npp-nam, 'Sue', [dr(0,np,np)-1]), ex_si('Robbins', npp-nam, 'Robbins', [np-1]), ex_si(visite, v-ver:pres, visite, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si('Woodson-Tenent', npp-nam, 'Woodson-Tenent', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(349, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1869, pro-num, 1869, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Sumner', npp-nam, 'Sumner', [np-1]), ex_si(démissionne, v-ver:pres, démissionne, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(continue, v-ver:pres, continue, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(vivre, vinf-ver:infi, vivre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résidence, nc-nom, résidence, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Farnham', npp-nam, 'Farnham', [np-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1874, adj-num, 1874, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(350, Result) :-
      prob_parse([ ex_si('Sumner', npp-nam, 'Sumner', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Farnham', npp-nam, 'Farnham', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(351, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(paralysie, nc-nom, paralysie, [n-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(suivie, vpp-ver:pper, suivie, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(aphasie, nc-nom, aphasie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(douleur, nc-nom, douleur, [n-1]), ex_si(aiguë, adj-adj, aiguë, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(suivie, vpp-ver:pper, suivie, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(apathie, nc-nom, apathie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(soulagea, v-ver:simp, soulagea, [dr(0,dl(0,np,s),np)-1]), ex_si('Swift', npp-nam, 'Swift', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(1745, adj-num, 1745, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(352, Result) :-
      prob_parse([ ex_si('Swift', npp-nam, 'Swift', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1745, pro-num, 1745, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(353, Result) :-
      prob_parse([ ex_si('Swift', npp-nam, 'Swift', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), ex_si(proposer, vinf-ver:infi, proposer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(aumônier, nc-nom, aumônier, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comte, nc-nom, comte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berkeley', npp-nam, 'Berkeley', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si('Lords', npp-nam, 'Lords', [dr(0,n,n)-1]), ex_si('Justices', npp-nam, 'Justices', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dr(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivé, vpp-ver:pper, arrivé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(confié, vpp-ver:pper, confié, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(354, Result) :-
      prob_parse([ ex_si('Swift', npp-nam, 'Swift', [np-1]), ex_si(travaillait, v-ver:impf, travaillait, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comte, nc-nom, comte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berkeley', npp-nam, 'Berkeley', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(355, Result) :-
      prob_parse([ ex_si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Andy', npp-nam, 'Andy', [dr(0,np,np)-1]), ex_si('Sipowicz', npp-nam, 'Sipowicz', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fréquenter, vinf-ver:infi, fréquenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assistante, nc-nom, assistante, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(procureur, nc-nom, procureur, [n-1]), ex_si('Sylvia', npp-nam, 'Sylvia', [dl(0,n,n)-1]), ex_si('Costas', npp-nam, 'Costas', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(356, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(mariés, vpp-ver:pper, mariés, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Theo', npp-nam, 'Theo', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(357, Result) :-
      prob_parse([ ex_si('Sylvia', npp-nam, 'Sylvia', [dr(0,np,np)-1]), ex_si('Costas', npp-nam, 'Costas', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Andy', npp-nam, 'Andy', [dr(0,np,np)-1]), ex_si('Sipowicz', npp-nam, 'Sipowicz', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(358, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(flûte, nc-nom, flûte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(doigts, nc-nom, doigts, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1970, adj-num, 1970, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(légendaire, adj-adj, légendaire, [dr(0,n,n)-1]), ex_si('T.R', nc-abr, 'T.R', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(359, Result) :-
      prob_parse([ ex_si('Mahalingam', npp-nam, 'Mahalingam', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(variété, nc-nom, variété, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(huit, det-num, huit, [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(360, Result) :-
      prob_parse([ ex_si('T.R', nc-abr, 'T.R', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(361, Result) :-
      prob_parse([ ex_si('Mahalingham', npp-nam, 'Mahalingham', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fabriqué, vpp-ver:pper, fabriqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(flûte, nc-nom, flûte, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(362, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cancers, nc-nom, cancers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peau, nc-nom, peau, [n-1]), ex_si(défigurants, adj-adj, défigurants, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(fournissant, vpr-ver:ppre, fournissant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(davantage, adv-adv, davantage, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(tiennent, v-ver:pres, tiennent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(compte, nc-nom, compte, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(avertissements, nc-nom, avertissements, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dangers, nc-nom, dangers, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bronzage, nc-nom, bronzage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(363, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bronzage, nc-nom, bronzage, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cancers, nc-nom, cancers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peau, nc-nom, peau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(364, Result) :-
      prob_parse([ ex_si('Nokia', npp-nam, 'Nokia', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Texas', npp-nam, 'Texas', [dr(0,np,np)-1]), ex_si('Instruments', npp-nam, 'Instruments', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(fabricants, nc-nom, fabricants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(mobiles, adj-adj, mobiles, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(officiellement, adv-adv, officiellement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(plaints, vpp-ver:pper, plaints, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Qualcomm', npp-nam, 'Qualcomm', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(puces, nc-nom, puces, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(mobiles, adj-adj, mobiles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(déloyale, adj-adj, déloyale, [dl(0,n,n)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(brevets, nc-nom, brevets, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si('3G', adj-abr, '3G', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(365, Result) :-
      prob_parse([ ex_si('Texas', npp-nam, 'Texas', [dr(0,np,np)-1]), ex_si('Instruments', npp-nam, 'Instruments', [np-1]), ex_si(produit, v-ver:pres, produit, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(mobiles, adj-adj, mobiles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(366, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Temple', npp-nam, 'Temple', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(renommée, nc-nom, renommée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(athlétisme, nc-nom, athlétisme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lycée, nc-nom, lycée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Auburn', npp-nam, 'Auburn', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(présenté, vpp-ver:pper, présenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2005, pro-num, 2005, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(comprend, v-ver:pres, comprend, [dr(0,dl(0,np,s),np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(367, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Temple', npp-nam, 'Temple', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(renommée, nc-nom, renommée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(athlétisme, nc-nom, athlétisme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lycée, nc-nom, lycée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Auburn', npp-nam, 'Auburn', [np-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(368, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1955, pro-num, 1955, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aurore, nc-nom, aurore, [n-1]), ex_si(boréale, adj-adj, boréale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(revêtement, nc-nom, revêtement, [n-1]), ex_si(appliqué, vpp-ver:pper, appliqué, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(pierres, nc-nom, pierres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cristal, nc-nom, cristal, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('arc-en-ciel', nc-nom, 'arc-en-ciel', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(couleurs, nc-nom, couleurs, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(369, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(aurore, nc-nom, aurore, [n-1]), ex_si(boréale, adj-adj, boréale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(370, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('COPREFA', npp-abr, 'COPREFA', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(blessé, vpp-ver:pper, blessé, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(embuscade, nc-nom, embuscade, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guérilla, nc-nom, guérilla, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bataillon, nc-nom, bataillon, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(élite, nc-nom, élite, [n-1]), ex_si('Bracamonte', npp-nam, 'Bracamonte', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autoroute, nc-nom, autoroute, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salvador', npp-nam, 'Salvador', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(371, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bataillon, nc-nom, bataillon, [n-1]), ex_si('Bracamonte', npp-nam, 'Bracamonte', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guérilla, nc-nom, guérilla, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(372, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(passe, nc-nom, passe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bolan', npp-nam, 'Bolan', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(col, nc-nom, col, [n-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(montagnes, nc-nom, montagnes, [n-1]), ex_si('Toba', npp-nam, 'Toba', [dl(0,n,n)-1]), ex_si('Kakar', npp-nam, 'Kakar', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(373, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Britanniques', nc-nam, 'Britanniques', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(très, adv-adv, très, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(sérieux, nc-nom, sérieux, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cols, nc-nom, cols, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Khyber', npp-nam, 'Khyber', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bolan', npp-nam, 'Bolan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, adv-kon, si, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(bien, adv-adv, bien, [dr(0,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si(1837, pro-num, 1837, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(envoyé, nc-nom, envoyé, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kaboul', npp-nam, 'Kaboul', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(émir, nc-nom, émir, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Dost', npp-nam, 'Dost', [dr(0,np,np)-1]), ex_si('Mohammed', npp-nam, 'Mohammed', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(374, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1839, adj-num, 1839, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ordres, nc-nom, ordres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sir', nc-nam, 'Sir', [dr(0,np,np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Keane', npp-nam, 'Keane', [np-1]), ex_si(emmène, v-ver:pres, emmène, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('12.000', det-num, '12.000', [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(col, nc-nom, col, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bolan', npp-nam, 'Bolan', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(entre, v-ver:pres, entre, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('Kandahar', npp-nam, 'Kandahar', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(375, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(traverse, v-ver:pres, traverse, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(montagnes, nc-nom, montagnes, [n-1]), ex_si('Toba', npp-nam, 'Toba', [dl(0,n,n)-1]), ex_si('Kakar', npp-nam, 'Kakar', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1839, pro-num, 1839, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(376, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(éthique, nc-nom, éthique, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Immigration', nc-nom, 'Immigration', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Judy', npp-nam, 'Judy', [dr(0,np,np)-1]), ex_si('Sgro', npp-nam, 'Sgro', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rien, pro-pro:ind, rien, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),np))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(mal, nc-nom, mal, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(377, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(éthique, nc-nom, éthique, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(accuse, v-ver:pres, accuse, [dr(0,dl(0,np,s),np)-1]), ex_si('Judy', npp-nam, 'Judy', [dr(0,np,np)-1]), ex_si('Sgro', npp-nam, 'Sgro', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(378, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(comtes, nc-nom, comtes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hollande', npp-nam, 'Hollande', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Geldern', npp-nam, 'Geldern', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(territoires, nc-nom, territoires, [n-1]), ex_si(desquels, prorel-pro:rel, desquels, [dr(0,dl(0,n,n),s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvaient, v-ver:impf, trouvaient, [dr(0,dr(0,dl(0,cl_r,s),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(évêques, nc-nom, évêques, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Utrecht', npp-nam, 'Utrecht', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cherchaient, v-ver:impf, cherchaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acquérir, vinf-ver:infi, acquérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(remplissage, nc-nom, remplissage, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(épiscopal, adj-adj, épiscopal, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(379, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(conduisait, v-ver:impf, conduisait, [dr(0,dl(0,np,s),pp)-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(disputes, nc-nom, disputes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dr(0,s,s),n)-1]), ex_si(conséquent, adj-adj, conséquent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Saint-Siège', npp-nam, 'Saint-Siège', [n-1]), ex_si(intervenait, v-ver:impf, intervenait, [dr(0,dl(0,np,s),pp)-1]), ex_si(fréquemment, adv-adv, fréquemment, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(380, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(comtes, nc-nom, comtes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hollande', npp-nam, 'Hollande', [np-1]), ex_si(soutenaient, v-ver:impf, soutenaient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Saint-Siège', npp-nam, 'Saint-Siège', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(381, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(résultat, nc-nom, résultat, [n-1]), ex_si(final, adj-adj, final, [dl(0,n,n)-1]), ex_si(dit, v-ver:pres, dit, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('61,6', det-num, '61,6', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Néerlandais', nc-nam, 'Néerlandais', [n-1]), ex_si(votent, v-ver:pres, votent, [dr(0,dl(0,np,s),np)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(contre, p-adv, contre, [dr(0,pp,np)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Constitution', nc-nam, 'Constitution', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('38,4', det-num, '38,4', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Constitution', nc-nom, 'Constitution', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(382, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si(approuve, v-ver:pres, approuve, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Constitution', nc-nom, 'Constitution', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(383, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(revendications, nc-nom, revendications, [n-1]), ex_si(territoriales, adj-adj, territoriales, [dl(0,n,n)-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(communes, nc-nom, communes, [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(assemblée, nc-nom, assemblée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Terre-Neuve-et-Labrador', npp-nam, 'Terre-Neuve-et-Labrador', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(384, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(assemblée, nc-nom, assemblée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Terre-Neuve-et-Labrador', npp-nam, 'Terre-Neuve-et-Labrador', [np-1]), ex_si(vote, v-ver:pres, vote, [dr(0,dl(0,np,s),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(revendications, nc-nom, revendications, [n-1]), ex_si(territoriales, adj-adj, territoriales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(385, Result) :-
      prob_parse([ ex_si('Chicago', npp-nam, 'Chicago', [dr(0,np,np)-1]), ex_si('White', npp-nam, 'White', [dr(0,np,np)-1]), ex_si('Sox', npp-nam, 'Sox', [dr(0,np,np)-1]), ex_si('Charities', npp-nam, 'Charities', [np-1]), ex_si(fournit, v-ver:pres, fournit, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), ex_si(continu, adj-adj, continu, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(programmes, nc-nom, programmes, [n-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Special', npp-nam, 'Special', [dr(0,np,np)-1]), ex_si('Olympics', npp-nam, 'Olympics', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Inner', npp-nam, 'Inner', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [dr(0,np,np)-1]), ex_si('Little', npp-nam, 'Little', [dr(0,np,np)-1]), ex_si('League', npp-nam, 'League', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(386, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Inner', npp-nam, 'Inner', [dr(0,n,n)-1]), ex_si('City', npp-nam, 'City', [dr(0,n,n)-1]), ex_si('Little', npp-nam, 'Little', [dr(0,n,n)-1]), ex_si('League', npp-nam, 'League', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(parrainée, vpp-ver:pper, parrainée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Chicago', npp-nam, 'Chicago', [dr(0,n,n)-1]), ex_si('White', npp-nam, 'White', [dr(0,n,n)-1]), ex_si('Sox', npp-nam, 'Sox', [dr(0,n,n)-1]), ex_si('Charities', npp-nam, 'Charities', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(387, Result) :-
      prob_parse([ ex_si('Puisque', cs-kon, 'Puisque', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dispose, v-ver:pres, dispose, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(puits, nc-nom, puits, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(obtenue, vpp-ver:pper, obtenue, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pluie, nc-nom, pluie, [n-1]), ex_si(soigneusement, adv-adv, soigneusement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(recueillie, vpp-ver:pper, recueillie, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(citernes, nc-nom, citernes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(béton, nc-nom, béton, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(388, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(approvisionne, v-ver:pres, approvisionne, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pluie, nc-nom, pluie, [n-1]), ex_si(collectée, vpp-ver:pper, collectée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(389, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(manifestations, nc-nom, manifestations, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnels, nc-nom, personnels, [n-1]), ex_si(universitaires, adj-adj, universitaires, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(supérieur, adj-adj, supérieur, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(paralysé, vpp-ver:pper, paralysé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(quartiers, nc-nom, quartiers, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rome', npp-nam, 'Rome', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(390, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(supérieur, adj-adj, supérieur, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(391, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bus, nc-nom, bus, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dirigeait, v-ver:impf, dirigeait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si('Nairobi', npp-nam, 'Nairobi', [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Kenya', npp-nam, 'Kenya', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(écrasé, vpp-ver:pper, écrasé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(district, nc-nom, district, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kabale', npp-nam, 'Kabale', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Ouganda', npp-nam, 'Ouganda', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(rwandaise, adj-adj, rwandaise, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(392, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(district, nc-nom, district, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kabale', npp-nam, 'Kabale', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(frontalier, adj-adj, frontalier, [dr(0,dl(0,n,n),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Rwanda', npp-nam, 'Rwanda', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(393, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('Kakhovskaya', npp-nam, 'Kakhovskaya', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(métro, nc-nom, métro, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(394, Result) :-
      prob_parse([ ex_si('Actuellement', adv-adv, 'Actuellement', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(existe, v-ver:pres, existe, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(périphérique, nc-nom, périphérique, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(395, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(courte, adj-adj, courte, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(396, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(formée, vpp-ver:pper, formée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(stations, nc-nom, stations, [n-1]), ex_si(datent, v-ver:pres, datent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(ouvertes, vpp-ver:pper, ouvertes, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('Zamoskvoretskaya', npp-nam, 'Zamoskvoretskaya', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(397, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('Kakhovskaya', npp-nam, 'Kakhovskaya', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(construite, vpp-ver:pper, construite, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(398, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(feuille, nc-nom, feuille, [n-1]), ex_si('A4', adj-abr, 'A4', [dl(0,n,n)-1]), ex_si(rose, adj-adj, rose, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(contient, v-ver:pres, contient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(numéro, nc-nom, numéro, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(micropuce, nc-nom, micropuce, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(certification, nc-nom, certification, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chien, nc-nom, chien, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vacciné, vpp-ver:pper, vacciné, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rage, nc-nom, rage, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(signée, vpp-ver:pper, signée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vétérinaire, nc-nom, vétérinaire, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si('LVI', npp-abr, 'LVI', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(399, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(confondu, vpp-ver:pper, confondu, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pochette, nc-nom, pochette, [n-1]), ex_si(violette, adj-adj, violette, [dl(0,n,n)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(petite, adj-adj, petite, [dl(0,n,n)-1]), ex_si(délivrée, vpp-ver:pper, délivrée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(couramment, adv-adv, couramment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vétérinaires, nc-nom, vétérinaires, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(enregistre, v-ver:pres, enregistre, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(historique, nc-nom, historique, [n-1]), ex_si(complet, adj-adj, complet, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccinations, nc-nom, vaccinations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(animal, nc-nom, animal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(400, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(contient, v-ver:pres, contient, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(historique, nc-nom, historique, [n-1]), ex_si(complet, adj-adj, complet, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vaccinations, nc-nom, vaccinations, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(401, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(simple, adj-adj, simple, [dr(0,n,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Piano', npp-nam, 'Piano', [dr(0,np,np)-1]), ex_si('Man', npp-nam, 'Man', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rentré, vpp-ver:pper, rentré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(chez, p-prp, chez, [dr(0,pp,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(natal, adj-adj, natal, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(402, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tabloïds, nc-nom, tabloïds, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tunnel, nc-nom, tunnel, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Manche', npp-nam, 'Manche', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(403, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Piano', npp-nam, 'Piano', [dr(0,n,n)-1]), ex_si('Man', npp-nam, 'Man', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(venu, vpp-ver:pper, venu, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(404, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(simple, adj-adj, simple, [dr(0,n,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Piano', npp-nam, 'Piano', [dr(0,np,np)-1]), ex_si('Man', npp-nam, 'Man', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rentré, vpp-ver:pper, rentré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(chez, p-prp, chez, [dr(0,pp,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(natal, adj-adj, natal, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(405, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tabloïds, nc-nom, tabloïds, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tunnel, nc-nom, tunnel, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Manche', npp-nam, 'Manche', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(406, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Piano', npp-nam, 'Piano', [dr(0,n,n)-1]), ex_si('Man', npp-nam, 'Man', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(travaillait, v-ver:impf, travaillait, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tabloïd, nc-nom, tabloïd, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(407, Result) :-
      prob_parse([ ex_si('Traditionnellement', adv-adv, 'Traditionnellement', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Brahui', npp-nam, 'Brahui', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tribu, nc-nom, tribu, [n-1]), ex_si('Raisani', npp-nam, 'Raisani', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(charge, nc-nom, charge, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), ex_si(travers, nc-nom, travers, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(col, nc-nom, col, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(408, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(tribu, nc-nom, tribu, [n-1]), ex_si(vit, v-ver:pres, vit, [dl(0,np,s)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Baloutchistan', npp-nam, 'Baloutchistan', [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(409, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(tribu, nc-nom, tribu, [n-1]), ex_si('Raisani', npp-nam, 'Raisani', [dl(0,n,n)-1]), ex_si(réside, v-ver:pres, réside, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(410, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Comité', nc-nom, 'Comité', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('COPREFA', npp-abr, 'COPREFA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(admis, vpp-ver:pper, admis, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(gouvernementales, adj-adj, gouvernementales, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(11, det-num, 11, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(affrontements, nc-nom, affrontements, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ajoutant, vpr-ver:ppre, ajoutant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(infligé, vpp-ver:pper, infligé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(rebelles, nc-nom, rebelles, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(411, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(rebelles, nc-nom, rebelles, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(gouvernementales, adj-adj, gouvernementales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(412, Result) :-
      prob_parse([ ex_si('Quatre', det-num, 'Quatre', [dr(0,np,n)-1]), ex_si('câblo-opérateurs', nc-nom, 'câblo-opérateurs', [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(leaders, nc-nom, leaders, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(secteur, nc-nom, secteur, [n-1]), ex_si('Comcast', npp-nam, 'Comcast', [dl(0,n,n)-1]), ex_si('Corp', npp-nam, 'Corp', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), ex_si('Time', npp-nam, 'Time', [dl(0,n,n)-1]), ex_si('Warner', npp-nam, 'Warner', [dl(0,n,n)-1]), ex_si('Cable', npp-nam, 'Cable', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entrés, vpp-ver:pper, entrés, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arène, nc-nom, arène, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(pleine, adj-adj, pleine, [dr(0,n,n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(biais, nc-nom, biais, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(coentreprise, nc-nom, coentreprise, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Sprint', npp-nam, 'Sprint', [dr(0,np,np)-1]), ex_si('Nextel', npp-nam, 'Nextel', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(413, Result) :-
      prob_parse([ ex_si('Time', npp-nam, 'Time', [dr(0,np,np)-1]), ex_si('Warner', npp-nam, 'Warner', [dr(0,np,np)-1]), ex_si('Cable', npp-nam, 'Cable', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(partenaire, nc-nom, partenaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sprint', npp-nam, 'Sprint', [dr(0,np,np)-1]), ex_si('Nextel', npp-nam, 'Nextel', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(414, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(panne, nc-nom, panne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(échanges, nc-nom, échanges, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(actions, nc-nom, actions, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bourse', nc-nam, 'Bourse', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tokyo', npp-nam, 'Tokyo', [np-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majeure, adj-adj, majeure, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(journée, nc-nom, journée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hier, adv-adv, hier, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pire, adj-adj, pire, [dr(0,n,n)-1]), ex_si(perturbation, nc-nom, perturbation, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(bourse, nc-nom, bourse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(415, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Bourse', nc-nam, 'Bourse', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tokyo', npp-nam, 'Tokyo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fermée, vpp-ver:pper, fermée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(panne, nc-nom, panne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(416, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(revenus, nc-nom, revenus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tom', npp-nam, 'Tom', [dr(0,np,np)-1]), ex_si('Online', npp-nam, 'Online', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(terminés, vpp-ver:pper, terminés, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('42,78', det-num, '42,78', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('US', adj-adj, 'US', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('38,5', det-num, '38,5', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2004, pro-num, 2004, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(417, Result) :-
      prob_parse([ ex_si('Tom', npp-nam, 'Tom', [dr(0,np,np)-1]), ex_si('Online', npp-nam, 'Online', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('42,78', det-num, '42,78', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('US', adj-abr, 'US', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(418, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(revenus, nc-nom, revenus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tom', npp-nam, 'Tom', [dr(0,np,np)-1]), ex_si('Online', npp-nam, 'Online', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(terminés, vpp-ver:pper, terminés, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('42,78', det-num, '42,78', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('US', adj-adj, 'US', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('38,5', det-num, '38,5', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2004, pro-num, 2004, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(419, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(revenus, nc-nom, revenus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tom', npp-nam, 'Tom', [dr(0,np,np)-1]), ex_si('Online', npp-nam, 'Online', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('38,5%.', pro-num, '38,5%.', [dr(0,np,n)-1])], Result).
sent(420, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('anglo-néerlandaise', nc-nom, 'anglo-néerlandaise', [dr(0,n,n)-1]), ex_si('Royal', npp-nam, 'Royal', [dr(0,np,np)-1]), ex_si('Dutch', npp-nam, 'Dutch', [dr(0,np,np)-1]), ex_si('Shell', npp-nam, 'Shell', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(française, nc-nom, française, [n-1]), ex_si('Total', npp-nam, 'Total', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espagnole, nc-nom, espagnole, [n-1]), ex_si('Repsol', npp-nam, 'Repsol', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toutes, adv-adv, toutes, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(citées, vpp-ver:pper, citées, [dl(0,np,s_pass)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(exemples, nc-nom, exemples, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(pétrolières, adj-adj, pétrolières, [dl(0,n,n)-1]), ex_si(établies, vpp-ver:pper, établies, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(participant, vpr-ver:ppre, participant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('Oil-for-food', npp-nam, 'Oil-for-food', [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(surtaxes, nc-nom, surtaxes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2001, pro-num, 2001, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(421, Result) :-
      prob_parse([ ex_si('Total', npp-nam, 'Total', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),n)-1]), ex_si(nourriture, nc-nom, nourriture, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(422, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(violences, nc-nom, violences, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(23, det-num, 23, [dr(0,np,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(fidèles, nc-nom, fidèles, [n-1]), ex_si(traînés, vpp-ver:pper, traînés, [dr(0,dl(0,np,np),pp)-1]), ex_si(hors, p-prp, hors, [dr(0,pp,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mosquée, nc-nom, mosquée, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(abattus, vpp-ver:pper, abattus, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(soulignant, vpr-ver:ppre, soulignant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(défis, nc-nom, défis, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(relever, vinf-ver:infi, relever, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(apporter, vinf-ver:infi, apporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(stabilité, nc-nom, stabilité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(renforcer, vinf-ver:infi, renforcer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(démocratie, nc-nom, démocratie, [n-1]), ex_si(naissante, adj-adj, naissante, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(423, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(fidèles, nc-nom, fidèles, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(424, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(salué, vpp-ver:pper, salué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ouzbékistan', npp-nam, 'Ouzbékistan', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(fermer, vinf-ver:infi, fermer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(dément, v-ver:pres, dément, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(pression, nc-nom, pression, [np-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(expulser, vinf-ver:infi, expulser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(425, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ouzbékistan', npp-nam, 'Ouzbékistan', [n-1]), ex_si(ferme, v-ver:pres, ferme, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(426, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ouzbékistan', npp-nam, 'Ouzbékistan', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(retombées, nc-nom, retombées, [n-1]), ex_si(diplomatiques, adj-adj, diplomatiques, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(critiques, nc-nom, critiques, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(violente, adj-adj, violente, [dr(0,n,n)-1]), ex_si(répression, nc-nom, répression, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si('anti-gouvernementaux', adj-adj, 'anti-gouvernementaux', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(427, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ouzbékistan', npp-nam, 'Ouzbékistan', [n-1]), ex_si(proteste, v-ver:pres, proteste, [dr(0,dl(0,np,s),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(428, Result) :-
      prob_parse([ ex_si('Vance', npp-nam, 'Vance', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(superviseur, nc-nom, superviseur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hooper', npp-nam, 'Hooper', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-t-il', cls-pro:per, '-t-il', [np-1]), ex_si(dit, vpp-ver:pper, dit, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(licencié, vpp-ver:pper, licencié, [dl(0,np,s_pass)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(429, Result) :-
      prob_parse([ ex_si('Vance', npp-nam, 'Vance', [np-1]), ex_si(travaillait, v-ver:impf, travaillait, [dr(0,dl(0,np,s),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('Hooper', npp-nam, 'Hooper', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(430, Result) :-
      prob_parse([ ex_si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), ex_si('Beers', npp-nam, 'Beers', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Olivet', npp-nam, 'Olivet', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nommée, vpp-ver:pper, nommée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(employée, vpp-ver:pper, employée, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,np,np),np)-1]), ex_si('Standard', npp-nam, 'Standard', [dr(0,np,np)-1]), ex_si('Printing', npp-nam, 'Printing', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Marshall', npp-nam, 'Marshall', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(431, Result) :-
      prob_parse([ ex_si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), ex_si('Beers', npp-nam, 'Beers', [np-1]), ex_si(travaille, v-ver:pres, travaille, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Olivet', npp-nam, 'Olivet', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(432, Result) :-
      prob_parse([ ex_si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), ex_si('Beers', npp-nam, 'Beers', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Olivet', npp-nam, 'Olivet', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nommée, vpp-ver:pper, nommée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(employée, vpp-ver:pper, employée, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,np,np),np)-1]), ex_si('Standard', npp-nam, 'Standard', [dr(0,np,np)-1]), ex_si('Printing', npp-nam, 'Printing', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Marshall', npp-nam, 'Marshall', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(433, Result) :-
      prob_parse([ ex_si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), ex_si('Beers', npp-nam, 'Beers', [np-1]), ex_si(travaille, v-ver:pres, travaille, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Standard', npp-nam, 'Standard', [dr(0,np,np)-1]), ex_si('Printing', npp-nam, 'Printing', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(434, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(militants, nc-nom, militants, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(emprisonnés, vpp-ver:pper, emprisonnés, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(principale, adj-adj, principale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cracovie', npp-nam, 'Cracovie', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(cérémonies, nc-nom, cérémonies, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('60e', adj-num, '60e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(camp, nc-nom, camp, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(concentration, nc-nom, concentration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Auschwitz-Birkenau', npp-nam, 'Auschwitz-Birkenau', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(435, Result) :-
      prob_parse([ ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(cérémonies, nc-nom, cérémonies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(camp, nc-nom, camp, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(concentration, nc-nom, concentration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Auschwitz', npp-nam, 'Auschwitz', [dr(0,np,np)-1]), ex_si('Birkenau', npp-nam, 'Birkenau', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(436, Result) :-
      prob_parse([ ex_si('GUS', npp-abr, 'GUS', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(débarrassé, vpp-ver:pper, débarrassé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(restait, v-ver:impf, restait, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(détail, nc-nom, détail, [n-1]), ex_si(hors, p-prp, hors, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(390, det-num, 390, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(265, det-num, 265, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(néerlandaise, adj-adj, néerlandaise, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('Wehkamp', npp-nam, 'Wehkamp', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Industri', npp-nam, 'Industri', [dr(0,np,np)-1]), ex_si('Kapital', npp-nam, 'Kapital', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('capital-investissement', nc-nom, 'capital-investissement', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(437, Result) :-
      prob_parse([ ex_si('Wehkamp', npp-nam, 'Wehkamp', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(438, Result) :-
      prob_parse([ ex_si('GUS', npp-abr, 'GUS', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(débarrassé, vpp-ver:pper, débarrassé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(restait, v-ver:impf, restait, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(détail, nc-nom, détail, [n-1]), ex_si(hors, p-prp, hors, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(390, det-num, 390, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(265, det-num, 265, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(néerlandaise, adj-adj, néerlandaise, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Wehkamp', npp-nam, 'Wehkamp', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Industri', npp-nam, 'Industri', [dr(0,np,np)-1]), ex_si('Kapital', npp-nam, 'Kapital', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('capital-investissement', nc-nom, 'capital-investissement', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(439, Result) :-
      prob_parse([ ex_si('Wehkamp', npp-nam, 'Wehkamp', [np-1]), ex_si(coûte, v-ver:pres, coûte, [dr(0,dl(0,np,s),np)-1]), ex_si(390, det-num, 390, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(440, Result) :-
      prob_parse([ ex_si('White', npp-nam, 'White', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gough', npp-nam, 'Gough', [dr(0,np,np)-1]), ex_si('Whitlam', npp-nam, 'Whitlam', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1972, pro-num, 1972, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1975, pro-num, 1975, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éviction, nc-nom, éviction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Whitlam', npp-nam, 'Whitlam', [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(constitutionnelle, adj-adj, constitutionnelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1975, pro-num, 1975, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('anti-royaliste', adj-adj, 'anti-royaliste', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(441, Result) :-
      prob_parse([ ex_si('White', npp-nam, 'White', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1972, pro-num, 1972, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1975, pro-num, 1975, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(442, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(peu, adv-adv, peu, [n-1]), ex_si(près, adv-adv, près, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('White', npp-nam, 'White', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(accepterait, v-ver:impf, accepterait, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(443, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Britannia', npp-nam, 'Britannia', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('10.000', det-num, '10.000', [dr(0,np,n)-1]), ex_si('$', nc-abr, '$', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Miles', npp-nam, 'Miles', [dl(0,n,n)-1]), ex_si('Franklin', npp-nam, 'Franklin', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(444, Result) :-
      prob_parse([ ex_si('White', npp-nam, 'White', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Britannia', npp-nam, 'Britannia', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('10.000', det-num, '10.000', [dr(0,np,n)-1]), ex_si('$.', nc-abr, '$.', [n-1])], Result).
sent(445, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1975, pro-num, 1975, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Wilkins', nc-nam, 'Wilkins', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(19, det-num, 19, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(voit, v-ver:pres, voit, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), ex_si(confier, vinf-ver:infi, confier, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitanat, nc-nom, capitanat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chelsea', npp-nam, 'Chelsea', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(joueurs, nc-nom, joueurs, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(âgés, vpp-ver:pper, âgés, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(expérimentés, vpp-ver:pper, expérimentés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effectif, nc-nom, effectif, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(446, Result) :-
      prob_parse([ ex_si('Wilkins', npp-nam, 'Wilkins', [np-1]), ex_si(devient, v-ver:pres, devient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitaine, nc-nom, capitaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chelsea', npp-nam, 'Chelsea', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1975, pro-num, 1975, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(447, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Wilkins', npp-nam, 'Wilkins', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(installés, vpp-ver:pper, installés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ère, nc-nom, ère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Milan', npp-nam, 'Milan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('Wilkins', npp-nam, 'Wilkins', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(club, nc-nom, club, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('Saint-Germain', npp-nam, 'Saint-Germain', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(448, Result) :-
      prob_parse([ ex_si('Wilkins', npp-nam, 'Wilkins', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Milan', npp-nam, 'Milan', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(449, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si(devient, v-ver:pres, devient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quatrième, adj-num, quatrième, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(voter, vinf-ver:infi, voter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(450, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [n-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(organise, v-ver:pres, organise, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(strictement, adv-adv, strictement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(limitées, vpp-ver:pper, limitées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(réservées, vpp-ver:pper, réservées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(451, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(voter, vinf-ver:infi, voter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [n-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(452, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cinquième, adj-num, cinquième, [dr(0,n,n)-1]), ex_si('Forum', nc-nom, 'Forum', [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('FSM', npp-abr, 'FSM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débuté, vpp-ver:pper, débuté, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Porto', npp-nam, 'Porto', [dr(0,np,np)-1]), ex_si('Alegre', npp-nam, 'Alegre', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Rio', npp-nam, 'Rio', [n-1]), ex_si('Grande', npp-nam, 'Grande', [dl(0,n,n)-1]), ex_si(do, et-prp, do, [dr(0,dl(0,n,n),n)-1]), ex_si('Sul', npp-nam, 'Sul', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(453, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('FSM', npp-abr, 'FSM', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déroule, v-ver:pres, déroule, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(454, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('W.', npp-abr, 'W.', [dl(0,n,n)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(inviterait, v-ver:impf, inviterait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('Abbas', npp-nam, 'Abbas', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prédécesseur, nc-nom, prédécesseur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Abbas', npp-nam, 'Abbas', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,np)-1]), ex_si(défunt, nc-nom, défunt, [dr(0,n,n)-1]), ex_si('Yasser', npp-nam, 'Yasser', [dr(0,np,np)-1]), ex_si('Arafat', npp-nam, 'Arafat', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(455, Result) :-
      prob_parse([ ex_si('Yasser', npp-nam, 'Yasser', [dr(0,np,np)-1]), ex_si('Arafat', npp-nam, 'Arafat', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(succédé, vpp-ver:pper, succédé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Abbas', npp-nam, 'Abbas', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(456, Result) :-
      prob_parse([ ex_si('Zapatero', npp-nam, 'Zapatero', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(visité, vpp-ver:pper, visité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si(suivantes, vpr-ver:ppre, suivantes, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si('Brasilia', npp-nam, 'Brasilia', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('São', npp-nam, 'São', [np-1]), ex_si('Paulo', npp-nam, 'Paulo', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('Buenos', npp-nam, 'Buenos', [dr(0,dl(0,np,np),np)-1]), ex_si('Aires', npp-nam, 'Aires', [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si('Santiago', npp-nam, 'Santiago', [dr(0,dl(0,np,np),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si('Chili', npp-nam, 'Chili', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(457, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sources, nc-nom, sources, [n-1]), ex_si(officielles, adj-adj, officielles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(visites, nc-nom, visites, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si('UE-Amérique', npp-nam, 'UE-Amérique', [dl(0,n,n)-1]), ex_si(latine, adj-adj, latine, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Guadalajara', npp-nam, 'Guadalajara', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(poursuivi, vpp-ver:pper, poursuivi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('ibéro-américaine', adj-adj, 'ibéro-américaine', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Costa', npp-nam, 'Costa', [n-1]), ex_si('Rica', npp-nam, 'Rica', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(458, Result) :-
      prob_parse([ ex_si('Zapatero', npp-nam, 'Zapatero', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('ibéro-américaine', adj-adj, 'ibéro-américaine', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Costa', npp-nam, 'Costa', [n-1]), ex_si('Rica', npp-nam, 'Rica', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(459, Result) :-
      prob_parse([ ex_si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(pétrolières, adj-adj, pétrolières, [dl(0,n,n)-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si('Lukoil', npp-nam, 'Lukoil', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(pétrolière, adj-adj, pétrolière, [dl(0,n,n)-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si('Zarubezhneft', npp-nam, 'Zarubezhneft', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(négociant, nc-nom, négociant, [n-1]), ex_si('Alpha', npp-nam, 'Alpha', [dl(0,n,n)-1]), ex_si('Eco', npp-nam, 'Eco', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mises, vpp-ver:pper, mises, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(460, Result) :-
      prob_parse([ ex_si('Zarubezhneft', npp-nam, 'Zarubezhneft', [np-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(461, Result) :-
      prob_parse([ ex_si('Zhao', npp-nam, 'Zhao', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(démis, vpp-ver:pper, démis, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(fonctions, nc-nom, fonctions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(assigné, vpp-ver:pper, assigné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(résidence, nc-nom, résidence, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1989, pro-num, 1989, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(dénoncé, vpp-ver:pper, dénoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(usage, nc-nom, usage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si(protestataires, adj-adj, protestataires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si('Tiananmen', npp-nam, 'Tiananmen', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(462, Result) :-
      prob_parse([ ex_si('Zhao', npp-nam, 'Zhao', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(membre, nc-nom, membre, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(463, Result) :-
      prob_parse([ ex_si('Zhao', npp-nam, 'Zhao', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(85, det-num, 85, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réformateur, nc-nom, réformateur, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(démis, vpp-ver:pper, démis, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(fonctions, nc-nom, fonctions, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(emprisonné, vpp-ver:pper, emprisonné, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1989, pro-num, 1989, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(dénoncé, vpp-ver:pper, dénoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(usage, nc-nom, usage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si(manifestants, adj-adj, manifestants, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si('Tiananmen', npp-nam, 'Tiananmen', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(464, Result) :-
      prob_parse([ ex_si('Zhao', npp-nam, 'Zhao', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1989, pro-num, 1989, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(465, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), ex_si(craignant, vpr-ver:ppre, craignant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(prochaine, adj-adj, prochaine, [dr(0,n,n)-1]), ex_si(évaluation, nc-nom, évaluation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(performances, nc-nom, performances, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(patron, nc-nom, patron, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Zoe', npp-nam, 'Zoe', [np-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(démêler, vinf-ver:infi, démêler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(mort, nc-nom, mort, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(censé, vpp-ver:pper, censé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bateau, nc-nom, bateau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(466, Result) :-
      prob_parse([ ex_si('Zoe', npp-nam, 'Zoe', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morte, vpp-ver:pper, morte, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bateau, nc-nom, bateau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(467, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1856, pro-num, 1856, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Manuel', npp-nam, 'Manuel', [dr(0,np,np)-1]), ex_si('Ruiz', npp-nam, 'Ruiz', [dr(0,np,np)-1]), ex_si('Zorrilla', npp-nam, 'Zorrilla', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(député, nc-nom, député, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(remarquer, vinf-ver:infi, remarquer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(progressistes, nc-nom, progressistes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(démocrates, nc-nom, démocrates, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(avancés, vpp-ver:pper, avancés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(468, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(prit, v-ver:simp, prit, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(part, nc-nom, part, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(propagande, nc-nom, propagande, [n-1]), ex_si(révolutionnaire, adj-adj, révolutionnaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(aboutit, v-ver:pres, aboutit, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Madrid', npp-nam, 'Madrid', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1866, adj-num, 1866, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(469, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(dut, v-ver:simp, dut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réfugier, vinf-ver:infi, réfugier, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(compagnons, nc-nom, compagnons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conspiration, nc-nom, conspiration, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(revint, v-ver:simp, revint, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(révolution, nc-nom, révolution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1868, pro-num, 1868, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(470, Result) :-
      prob_parse([ ex_si('Zorrilla', npp-nam, 'Zorrilla', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclenché, vpp-ver:pper, déclenché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(révolution, nc-nom, révolution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1868, pro-num, 1868, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(471, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(leur, det-det:pos, leur, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(nuit, nc-nom, nuit, [dr(0,dl(0,np,s),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(exploite, v-ver:pres, exploite, [dr(0,dl(0,np,s),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(physiquement, adv-adv, physiquement, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(mentalement, adv-adv, mentalement, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(moralement, adv-adv, moralement, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s))),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(bloquant, vpr-ver:ppre, bloquant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(472, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(répandu, vpp-ver:pper, répandu, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(473, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sniffage, nc-nom, sniffage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(colle, nc-nom, colle, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(courant, adj-adj, courant, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(adolescents, nc-nom, adolescents, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(474, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(sortent, v-ver:pres, sortent, [dr(0,dl(0,np,s),pp)-1]), ex_si(généralement, adv-adv, généralement, [dl(1,s,s)-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(accès, nc-nom, accès, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(drogues, nc-nom, drogues, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alcool, nc-nom, alcool, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cannabis, nc-nom, cannabis, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(475, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(sait, v-ver:pres, sait, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(commencent, v-ver:pres, commencent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sniffer, vinf-ver:infi, sniffer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(colle, nc-nom, colle, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(476, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(stigmatisation, nc-nom, stigmatisation, [n-1]), ex_si(sociale, adj-adj, sociale, [dl(0,n,n)-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sniffage, nc-nom, sniffage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(colle, nc-nom, colle, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(sniffeurs, nc-nom, sniffeurs, [n-1]), ex_si(arrêtent, v-ver:pres, arrêtent, [dl(0,np,s)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(17, det-num, 17, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), ex_si(dépendants, adj-adj, dépendants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(477, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sniffage, nc-nom, sniffage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(colle, nc-nom, colle, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(courant, adj-adj, courant, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(478, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(exilée, vpp-ver:pper, exilée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(revenir, vinf-ver:infi, revenir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(accordée, vpp-ver:pper, accordée, [dl(0,np,s_pass)-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prince, nc-nom, prince, [n-1]), ex_si('Vittorio', npp-nam, 'Vittorio', [dl(0,n,n)-1]), ex_si('Emmanuele', npp-nam, 'Emmanuele', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(adressé, vpp-ver:pper, adressé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(propre, adj-adj, propre, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(479, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Ciampi', npp-nam, 'Ciampi', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Italiens', nc-nam, 'Italiens', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(480, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(rentre, v-ver:pres, rentre, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(481, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(philosophie, nc-nom, philosophie, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(roman, nc-nom, roman, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connu, vpp-ver:pper, connu, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Monde', npp-nam, 'Monde', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(étonnamment, adv-adv, étonnamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('best-seller', nc-nom, 'best-seller', [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1])], Result).
sent(482, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Monde', npp-nam, 'Monde', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('best-seller', nc-nom, 'best-seller', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(483, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(jeunes, adj-adj, jeunes, [dr(0,n,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(souffrent, v-ver:pres, souffrent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(divers, adj-adj, divers, [dr(0,n,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(probablement, adv-adv, probablement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(diagnostiqués, vpp-ver:pper, diagnostiqués, [dl(0,np,s_pass)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(présent, nc-nom, présent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(détectés, vpp-ver:pper, détectés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(484, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(indiquer, vinf-ver:infi, indiquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(faible, adj-adj, faible, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(difficiles, adj-adj, difficiles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(485, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(répercussions, nc-nom, répercussions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ex-URSS', npp-abr, 'ex-URSS', [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(486, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(puissant, adj-adj, puissant, [dr(0,n,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pluies, nc-nom, pluies, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vents, nc-nom, vents, [n-1]), ex_si(jeudi, nc-nom, jeudi, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tuant, vpr-ver:ppre, tuant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(coupant, vpr-ver:ppre, coupant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(routes, nc-nom, routes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(487, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annulé, vpp-ver:pper, annulé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ferry, nc-nom, ferry, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(488, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si('Xangsane', npp-nam, 'Xangsane', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(accompagné, vpp-ver:pper, accompagné, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vents, nc-nom, vents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(81, det-num, 81, [dr(0,np,n)-1]), ex_si(mph, nc-nom, mph, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(terre, nc-nom, terre, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nuit, nc-nom, nuit, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bicol', npp-nam, 'Bicol', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si('Manille', npp-nam, 'Manille', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), ex_si(philippin, adj-adj, philippin, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(489, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(abat, v-ver:pres, abat, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(490, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(fuite, nc-nom, fuite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(radiations, nc-nom, radiations, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Yeonggwang', npp-nam, 'Yeonggwang', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(province, nc-nom, province, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jeolla', npp-nam, 'Jeolla', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fermer, vinf-ver:infi, fermer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(installation, nc-nom, installation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(491, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sosnovyi', npp-nam, 'Sosnovyi', [dr(0,np,np)-1]), ex_si('Bor', npp-nam, 'Bor', [np-1]), ex_si(subit, v-ver:pres, subit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(492, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(solutions, nc-nom, solutions, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(certaines, pro-pro:ind, certaines, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(conséquences, nc-nom, conséquences, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisés, vpp-ver:pper, réalisés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UNESCO', npp-abr, 'UNESCO', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(493, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PHI', npp-abr, 'PHI', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(organisé, vpp-ver:pper, organisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(atelier, nc-nom, atelier, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(examiner, vinf-ver:infi, examiner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(comparer, vinf-ver:infi, comparer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(connaissances, nc-nom, connaissances, [n-1]), ex_si(actuelles, adj-adj, actuelles, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transfert, nc-nom, transfert, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(radionucléides, nc-nom, radionucléides, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cycle, nc-nom, cycle, [n-1]), ex_si(hydrologique, adj-adj, hydrologique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(494, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(répercussions, nc-nom, répercussions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ex-URSS', npp-abr, 'ex-URSS', [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(495, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(suicide, nc-nom, suicide, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaquant, nc-nom, attaquant, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attaquants, nc-nom, attaquants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(mourir, vinf-ver:infi, mourir, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(suicider, vinf-ver:infi, suicider, [dl(0,np,s_inf)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(496, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(suicide, nc-nom, suicide, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sens, nc-nom, sens, [n-1]), ex_si(strict, adj-adj, strict, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaquant, nc-nom, attaquant, [n-1]), ex_si(meurt, v-ver:pres, meurt, [dl(0,np,s)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si('elle-même', pro-pro:per, 'elle-même', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaquant, nc-nom, attaquant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(497, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('attentats-suicides', nc-nom, 'attentats-suicides', [n-1]), ex_si(tamouls, adj-adj, tamouls, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(498, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(caractéristique, nc-nom, caractéristique, [n-1]), ex_si(unique, adj-adj, unique, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(précédentes, adj-adj, précédentes, [dr(0,n,n)-1]), ex_si(épidémies, nc-nom, épidémies, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ebola', npp-nam, 'Ebola', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(relative, adj-adj, relative, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(499, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(variante, nc-nom, variante, [n-1]), ex_si(inhabituelle, adj-adj, inhabituelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fièvre, nc-nom, fièvre, [n-1]), ex_si(hémorragique, adj-adj, hémorragique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ebola', npp-nam, 'Ebola', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produite, vpp-ver:pper, produite, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ouganda', npp-nam, 'Ouganda', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(district, nc-nom, district, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gulu', npp-nam, 'Gulu', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(500, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ebola', npp-nam, 'Ebola', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Zaïre', npp-nam, 'Zaïre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(501, Result) :-
      prob_parse([ ex_si('Accompagnée', vpp-ver:pper, 'Accompagnée', [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(prières, nc-nom, prières, [n-1]), ex_si(sioux, adj-adj, sioux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(sons, nc-nom, sons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cornemuses, nc-nom, cornemuses, [n-1]), ex_si(écossaises, adj-adj, écossaises, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chemise, nc-nom, chemise, [n-1]), ex_si(unie, vpp-ver:pper, unie, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(coton, nc-nom, coton, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rendue, vpp-ver:pper, rendue, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Dakota', npp-nam, 'Dakota', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(502, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(chemise, nc-nom, chemise, [n-1]), ex_si(fantôme, adj-adj, fantôme, [dl(0,n,n)-1]), ex_si(sioux, nc-nom, sioux, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rendue, vpp-ver:pper, rendue, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(503, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si('Christopher', npp-nam, 'Christopher', [dl(0,n,n)-1]), ex_si('Reeve', npp-nam, 'Reeve', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Superman', npp-nam, 'Superman', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(paralysé, vpp-ver:pper, paralysé, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(respirer, vinf-ver:infi, respirer, [dl(0,np,s_inf)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(respirateur, nc-nom, respirateur, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(brisé, vpp-ver:pper, brisé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cou, nc-nom, cou, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(équitation, nc-nom, équitation, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Culpeper', npp-nam, 'Culpeper', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Virginie', npp-nam, 'Virginie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(504, Result) :-
      prob_parse([ ex_si('Christopher', npp-nam, 'Christopher', [dr(0,np,np)-1]), ex_si('Reeve', npp-nam, 'Reeve', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(505, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(congrégation, nc-nom, congrégation, [n-1]), ex_si(doctrinale, adj-adj, doctrinale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Vatican', npp-nam, 'Vatican', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), ex_si(concluant, vpr-ver:ppre, concluant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(procédures, nc-nom, procédures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sexe, nc-nom, sexe, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(changent, v-ver:pres, changent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(genre, nc-nom, genre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(yeux, nc-nom, yeux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(506, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sexe, nc-nom, sexe, [n-1]), ex_si(deviennent, v-ver:pres, deviennent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(courantes, adj-adj, courantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(507, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(confirmés, vpp-ver:pper, confirmés, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ebola', npp-nam, 'Ebola', [np-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(légèrement, adv-adv, légèrement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(passant, vpr-ver:ppre, passant, [dr(0,dl(0,np,s_ppres),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(26, pro-num, 26, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Gabon', npp-nam, 'Gabon', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(16, pro-num, 16, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Congo', npp-nam, 'Congo', [n-1]), ex_si('Brazzaville', npp-nam, 'Brazzaville', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(infections, nc-nom, infections, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(si, adv-adv, si, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(faibles, adj-adj, faibles, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),pp)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(éteindre, vinf-ver:infi, éteindre, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(508, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ebola', npp-nam, 'Ebola', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Zaïre', npp-nam, 'Zaïre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(509, Result) :-
      prob_parse([ ex_si('Anna', npp-nam, 'Anna', [dr(0,np,np)-1]), ex_si('Politkovskaïa', npp-nam, 'Politkovskaïa', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvée, vpp-ver:pper, retrouvée, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(morte, vpp-ver:pper, morte, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(balle, nc-nom, balle, [n-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ascenseur, nc-nom, ascenseur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(immeuble, nc-nom, immeuble, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(510, Result) :-
      prob_parse([ ex_si('Anna', npp-nam, 'Anna', [dr(0,np,np)-1]), ex_si('Politkovskaïa', npp-nam, 'Politkovskaïa', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassinée, vpp-ver:pper, assassinée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(511, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(antinucléaires, adj-adj, antinucléaires, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retardé, vpp-ver:pper, retardé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(progression, nc-nom, progression, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(convoi, nc-nom, convoi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(radioactifs, adj-adj, radioactifs, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décharge, nc-nom, décharge, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(512, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(quatrième, adj-num, quatrième, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(traversée, nc-nom, traversée, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(approchait, v-ver:impf, approchait, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lueneburg', npp-nam, 'Lueneburg', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(513, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(retard, nc-nom, retard, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(514, Result) :-
      prob_parse([ ex_si('Arlene', npp-nam, 'Arlene', [dr(0,np,np)-1]), ex_si('Blum', npp-nam, 'Blum', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pionnière, nc-nom, pionnière, [n-1]), ex_si(légendaire, adj-adj, légendaire, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(tous, det-pro:ind, tous, [dr(0,np,n)-1]), ex_si(points, nc-nom, points, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(515, Result) :-
      prob_parse([ ex_si('Défiant', vpr-ver:ppre, 'Défiant', [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(establishment, nc-nom, establishment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(escalade, nc-nom, escalade, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1970, adj-num, 1970, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(équipes, nc-nom, équipes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(ascensions, nc-nom, ascensions, [n-1]), ex_si(réussies, vpp-ver:pper, réussies, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mont', npp-nam, 'Mont', [n-1]), ex_si('McKinley', npp-nam, 'McKinley', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Annapurna', npp-nam, 'Annapurna', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si('Américaine', nc-nom, 'Américaine', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Mont', npp-nam, 'Mont', [n-1]), ex_si('Everest', npp-nam, 'Everest', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(516, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(aventureuse, adj-adj, aventureuse, [dr(0,n,n)-1]), ex_si(carrière, nc-nom, carrière, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(vingt, det-num, vingt, [dr(0,np,n)-1]), ex_si(expéditions, nc-nom, expéditions, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(forgé, vpp-ver:pper, forgé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arène, nc-nom, arène, [n-1]), ex_si(périlleuse, adj-adj, périlleuse, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alpinisme, nc-nom, alpinisme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haute, adj-adj, haute, [dr(0,n,n)-1]), ex_si(altitude, nc-nom, altitude, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(517, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(réussit, v-ver:pres, réussit, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(solitaire, nc-nom, solitaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(518, Result) :-
      prob_parse([ ex_si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), ex_si(130, det-num, 130, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(annulés, vpp-ver:pper, annulés, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(19, adj-num, 19, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(annulés, vpp-ver:pper, annulés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(519, Result) :-
      prob_parse([ ex_si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(assistants, nc-nom, assistants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(23, adj-num, 23, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(garantie, nc-nom, garantie, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Commissione', npp-nam, 'Commissione', [n-1]), ex_si(di, et-prp, di, [dr(0,dl(0,n,n),np)-1]), ex_si('Garanzia', npp-nam, 'Garanzia', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(réglemente, v-ver:pres, réglemente, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grèves, nc-nom, grèves, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(publics, adj-adj, publics, [dl(0,n,n)-1]), ex_si(essentiels, adj-adj, essentiels, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si(termes, nc-nom, termes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si('n°', nc-abr, 'n°', [dl(0,n,n)-1]), ex_si(194, adj-num, 194, [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(1990, pro-num, 1990, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('n°', nc-abr, 'n°', [dr(0,dl(0,n,n),np)-1]), ex_si(83, pro-num, 83, [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si(2000, pro-num, 2000, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('IT0004266F', npp-nam, 'IT0004266F', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accusé, vpp-ver:pper, accusé, [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(syndicats, nc-nom, syndicats, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enfreint, vpp-ver:pper, enfreint, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(disposition, nc-nom, disposition, [dr(0,np,n)-1]), ex_si(légale, adj-adj, légale, [n-1]), ex_si(selon, p-prp, selon, [dl(0,n,n)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dl(0,n,n)-1]), ex_si(10, det-num, 10, [dr(0,pp,np)-1]), ex_si(jours, nc-nom, jours, [dr(0,np,n)-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,np,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [n-1]), ex_si(écouler, vinf-ver:infi, écouler, [cl_r-1]), ex_si(entre, p-prp, entre, [dr(0,np,n)-1]), ex_si(une, det-det:art, une, [n-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(suivante, nc-nom, suivante, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(520, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(assistants, nc-nom, assistants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(italiens, adj-adj, italiens, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mettent, v-ver:pres, mettent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(521, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(adaptent, v-ver:pres, adaptent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(définitions, nc-nom, définitions, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(assorties, vpp-ver:pper, assorties, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(hypothèses, nc-nom, hypothèses, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(fonctions, nc-nom, fonctions, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(susceptibles, adj-adj, susceptibles, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(façonner, vinf-ver:infi, façonner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(débat, nc-nom, débat, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(rôles, nc-nom, rôles, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(fonctions, nc-nom, fonctions, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('XXIe', adj-num, 'XXIe', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(522, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émergé, vpp-ver:pper, émergé, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(523, Result) :-
      prob_parse([ ex_si('Comme', adv-adv, 'Comme', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(termes, nc-nom, termes, [n-1]), ex_si(désignant, vpr-ver:ppre, désignant, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(allocation, nc-nom, allocation, [n-1]), ex_si(varient, v-ver:pres, varient, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), ex_si(rester, vinf-ver:infi, rester, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pères, nc-nom, pères, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(quelconque, adj-adj, quelconque, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(oui, adv-adv, oui, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(quoi, prowh-pro:rel, quoi, [dr(0,dl(0,dr(0,pp,np),s_whq),dr(0,s,dia(1,box(1,pp))))-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(exactement, adv-adv, exactement, [dl(1,s,s)-1]), ex_si(droit, nc-nom, droit, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(524, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(congé, nc-nom, congé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maternité, nc-nom, maternité, [n-1]), ex_si(varie, v-ver:pres, varie, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(525, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(travailleurs, nc-nom, travailleurs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(subsaharienne, adj-adj, subsaharienne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(proportion, nc-nom, proportion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(travailleurs, nc-nom, travailleurs, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(526, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(répandu, vpp-ver:pper, répandu, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(527, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(huit, det-num, huit, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(attentat, nc-nom, attentat, [n-1]), ex_si(suicide, adj-adj, suicide, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si('sri-lankaise', adj-adj, 'sri-lankaise', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(grièvement, adv-adv, grièvement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(blessé, vpp-ver:pper, blessé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(528, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('lieutenant-général', nc-nom, 'lieutenant-général', [n-1]), ex_si('Sarath', npp-nam, 'Sarath', [dl(0,n,n)-1]), ex_si('Fonseka', npp-nam, 'Fonseka', [dl(0,n,n)-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(stable, adj-adj, stable, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(opéré, vpp-ver:pper, opéré, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Colombo', npp-nam, 'Colombo', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(529, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rebelles, nc-nom, rebelles, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Tigres', nc-nam, 'Tigres', [n-1]), ex_si(tamouls, nc-nom, tamouls, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(responsables, adj-adj, responsables, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lancé, vpp-ver:pper, lancé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(frappes, nc-nom, frappes, [n-1]), ex_si(aériennes, adj-adj, aériennes, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(positions, nc-nom, positions, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(530, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(attaques, nc-nom, attaques, [n-1]), ex_si(suicides, adj-adj, suicides, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(531, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(instance, nc-nom, instance, [n-1]), ex_si(dirigeante, adj-adj, dirigeante, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(athlétisme, nc-nom, athlétisme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('IAAF', npp-abr, 'IAAF', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(blanchi, vpp-ver:pper, blanchi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si('Ottey', npp-nam, 'Ottey', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(stéroïdes, nc-nom, stéroïdes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(levé, vpp-ver:pper, levé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),s_q)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(arbitrage, nc-nom, arbitrage, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(accrédité, vpp-ver:pper, accrédité, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CIO', npp-abr, 'CIO', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Lausanne', npp-nam, 'Lausanne', [np-1]), ex_si(a, v-ver:pres, a, [np-1]), ex_si(testé, vpp-ver:pper, testé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(incorrecte, adj-adj, incorrecte, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échantillon, nc-nom, échantillon, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urine, nc-nom, urine, [n-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('Ottey', npp-nam, 'Ottey', [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(532, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(sportives, nc-nom, sportives, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusées, vpp-ver:pper, accusées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(dopage, nc-nom, dopage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(533, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(catastrophes, nc-nom, catastrophes, [n-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(épidémiologistes, nc-nom, épidémiologistes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UC', npp-abr, 'UC', [n-1]), ex_si('Davis', npp-nam, 'Davis', [dl(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(majeure, adj-adj, majeure, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(dus, vpp-ver:pper, dus, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(534, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(535, Result) :-
      prob_parse([ ex_si('Entre', p-prp, 'Entre', [dr(0,dr(0,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(observateurs, nc-nom, observateurs, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('300.000', det-num, '300.000', [dr(0,np,n)-1]), ex_si(phoques, nc-nom, phoques, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(536, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(phoques, nc-nom, phoques, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(synonyme, adj-adj, synonyme, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(emplois, nc-nom, emplois, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(opposants, nc-nom, opposants, [n-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(vicieuse, adj-adj, vicieuse, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(met, v-ver:pres, met, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(menacée, vpp-ver:pper, menacée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(537, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(met, v-ver:pres, met, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(phoques, nc-nom, phoques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(538, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(raison, nc-nom, raison, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(539, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(orthographe, nc-nom, orthographe, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(effectivement, adv-adv, effectivement, [dl(1,s,s)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(refonte, nc-nom, refonte, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(alourdie, vpp-ver:pper, alourdie, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(540, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(approuvée, vpp-ver:pper, approuvée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(germanophones, adj-adj, germanophones, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(facilite, v-ver:pres, facilite, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(règles, nc-nom, règles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(541, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(orthographe, nc-nom, orthographe, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(approuvée, vpp-ver:pper, approuvée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(germanophones, adj-adj, germanophones, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(542, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(alpiniste, nc-nom, alpiniste, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Alison', npp-nam, 'Alison', [dl(0,n,n)-1]), ex_si('Hargreaves', npp-nam, 'Hargreaves', [dl(0,n,n)-1]), ex_si(devient, v-ver:pres, devient, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(gravir, vinf-ver:infi, gravir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mont, nc-nom, mont, [n-1]), ex_si('Everest', npp-nam, 'Everest', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(solitaire, nc-nom, solitaire, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(bouteilles, nc-nom, bouteilles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(oxygène, nc-nom, oxygène, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(543, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(réussit, v-ver:pres, réussit, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(solitaire, nc-nom, solitaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(544, Result) :-
      prob_parse([ ex_si('Busby', npp-nam, 'Busby', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(riposté, vpp-ver:pper, riposté, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(disant, vpr-ver:ppre, disant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Iconoclast', npp-nam, 'Iconoclast', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('1.800', det-num, '1.800', [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voyagé, vpp-ver:pper, voyagé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contaminé, vpp-ver:pper, contaminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Écosse', npp-nam, 'Écosse', [n-1]), ex_si(et, cc-kon, et, [dr(0,np,n)-1]), ex_si(diverses, adj-adj, diverses, [dr(0,n,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(545, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(irréalisable, adj-adj, irréalisable, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(parcoure, v-ver:pres, parcoure, [dr(0,dl(0,np,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(distance, nc-nom, distance, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(opposée, vpp-ver:pper, opposée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(flux, nc-nom, flux, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vent, nc-nom, vent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(examiné, vpp-ver:pper, examiné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si(informatiques, adj-adj, informatiques, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(directions, nc-nom, directions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vent, nc-nom, vent, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(clair, adj-adj, clair, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [n-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(traverser, vinf-ver:infi, traverser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(types, nc-nom, types, [n-1]), ex_si(particuliers, adj-adj, particuliers, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(dépressions, nc-nom, dépressions, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(systèmes, nc-nom, systèmes, [dl(0,n,n)-1]), ex_si(anticycloniques, adj-adj, anticycloniques, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(qui, prorel-pro:rel, qui, [cl_r-1]), ex_si('s\'', clr-pro:per, 's\'', [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(trouvaient, v-ver:impf, trouvaient, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(546, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(répercussions, nc-nom, répercussions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ex-URSS', npp-abr, 'ex-URSS', [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(547, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(imprudence, nc-nom, imprudence, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(entrepreneurs, nc-nom, entrepreneurs, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(fréquente, adj-adj, fréquente, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(entraînent, v-ver:pres, entraînent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(graves, adj-adj, graves, [dr(0,n,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(financières, adj-adj, financières, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(548, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(estimé, vpp-ver:pper, estimé, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('peut-être', adv-adv, 'peut-être', [dr(0,np,np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si(résultent, v-ver:pres, résultent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rénovation, nc-nom, rénovation, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réparation, nc-nom, réparation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(549, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(550, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(visites, nc-nom, visites, [n-1]), ex_si(réussies, vpp-ver:pper, réussies, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Castro', npp-nam, 'Castro', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Harlem', npp-nam, 'Harlem', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Bronx', npp-nam, 'Bronx', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marche, nc-nom, marche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('3.000', det-num, '3.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(piquets, nc-nom, piquets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(cubaine, adj-adj, cubaine, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(défendre, vinf-ver:infi, défendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(révolution, nc-nom, révolution, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,s),s)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(événements, nc-nom, événements, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coups, nc-nom, coups, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(efforts, nc-nom, efforts, [n-1]), ex_si(incessants, adj-adj, incessants, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(isoler, vinf-ver:infi, isoler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(calomnier, nc-nom, calomnier, [np-1]), ex_si('Cuba', npp-nam, 'Cuba', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(551, Result) :-
      prob_parse([ ex_si('Castro', npp-nam, 'Castro', [np-1]), ex_si(visite, v-ver:pres, visite, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(552, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(catastrophiques, adj-adj, catastrophiques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(mettent, v-ver:pres, mettent, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vies, nc-nom, vies, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tragédies, nc-nom, tragédies, [n-1]), ex_si(humaines, adj-adj, humaines, [dl(0,n,n)-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(lourdes, adj-adj, lourdes, [dr(0,n,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(553, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(importantes, adj-adj, importantes, [dr(0,n,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(554, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(annonce, nc-nom, annonce, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Panchen', npp-nam, 'Panchen', [n-1]), ex_si('Lama', npp-nam, 'Lama', [dl(0,n,n)-1]), ex_si(rival, nc-nom, rival, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(garçon, nc-nom, garçon, [n-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Dalaï', npp-nam, 'Dalaï', [n-1]), ex_si('Lama', npp-nam, 'Lama', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(indications, nc-nom, indications, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(désespéré, adj-adj, désespéré, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(utilisant, vpr-ver:ppre, utilisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(moyens, nc-nom, moyens, [n-1]), ex_si(possibles, adj-adj, possibles, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(renforcer, vinf-ver:infi, renforcer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Tibet', npp-nam, 'Tibet', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(tibétaines, adj-adj, tibétaines, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(555, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Dalaï', npp-nam, 'Dalaï', [n-1]), ex_si('Lama', npp-nam, 'Lama', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réincarnation, nc-nom, réincarnation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Panchen', npp-nam, 'Panchen', [dr(0,n,n)-1]), ex_si('Lama', npp-nam, 'Lama', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(556, Result) :-
      prob_parse([ ex_si('Chirac', npp-nam, 'Chirac', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(mandat, nc-nom, mandat, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électorat, nc-nom, électorat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,s,s),s)-1]), ex_si(alors, adv-adv, alors, [dr(0,s,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(fallait, v-ver:impf, fallait, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gauche, nc-nom, gauche, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(compter, vinf-ver:infi, compter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bureaucratie, nc-nom, bureaucratie, [n-1]), ex_si(syndicale, adj-adj, syndicale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si(ouvrière, adj-adj, ouvrière, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(rencontrerait, v-ver:cond, rencontrerait, [dr(0,dl(0,np,s),np)-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(résistance, nc-nom, résistance, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(557, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(législatives, adj-adj, législatives, [dl(0,n,n)-1]), ex_si(créent, v-ver:pres, créent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(558, Result) :-
      prob_parse([ ex_si('Christopher', npp-nam, 'Christopher', [dr(0,np,np)-1]), ex_si('Reeve', npp-nam, 'Reeve', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(inspiration, nc-nom, inspiration, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(paralysé, vpp-ver:pper, paralysé, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(équitation, nc-nom, équitation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(dimanche, nc-nom, dimanche, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(insuffisance, nc-nom, insuffisance, [n-1]), ex_si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(559, Result) :-
      prob_parse([ ex_si('Christopher', npp-nam, 'Christopher', [dr(0,np,np)-1]), ex_si('Reeve', npp-nam, 'Reeve', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(560, Result) :-
      prob_parse([ ex_si('Claes', npp-nam, 'Claes', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(nié, vpp-ver:pper, nié, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(catégoriquement, adv-adv, catégoriquement, [dl(1,s,s)-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(connaissance, nc-nom, connaissance, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si('Agusta', npp-nam, 'Agusta', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(ambassadeurs, nc-nom, ambassadeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(savait, v-ver:impf, savait, [dr(0,dl(0,np,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(paiement, nc-nom, paiement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Agusta', npp-nam, 'Agusta', [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(socialiste, adj-adj, socialiste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(561, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Willy', npp-nam, 'Willy', [dr(0,np,np)-1]), ex_si('Claes', npp-nam, 'Claes', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démissionné, vpp-ver:pper, démissionné, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(562, Result) :-
      prob_parse([ ex_si('Claes', npp-nam, 'Claes', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ministre, nc-nom, ministre, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(0,n,n)),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(contraint, vpp-ver:pper, contraint, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(démissionner, vinf-ver:infi, démissionner, [dl(0,np,s_inf)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(allégations, nc-nom, allégations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(corruption, nc-nom, corruption, [n-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si(abusifs, adj-adj, abusifs, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hélicoptères, nc-nom, hélicoptères, [n-1]), ex_si('Agusta', npp-nam, 'Agusta', [dl(0,n,n)-1]), ex_si(approuvés, vpp-ver:pper, approuvés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(ministre, nc-nom, ministre, [np-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(563, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(civiques, adj-adj, civiques, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(564, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Willy', npp-nam, 'Willy', [dr(0,np,np)-1]), ex_si('Claes', npp-nam, 'Claes', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démissionné, vpp-ver:pper, démissionné, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(565, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(nous, pro-pro:per, nous, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(566, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dr(0,s,s))),np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(conjecture, nc-nom, conjecture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(567, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déroule, v-ver:pres, déroule, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(yeux, nc-nom, yeux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(568, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Inuits', nc-nom, 'Inuits', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(voient, v-ver:pres, voient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(disparition, nc-nom, disparition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(glaces, nc-nom, glaces, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pergélisol, nc-nom, pergélisol, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(569, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(modifie, v-ver:pres, modifie, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(570, Result) :-
      prob_parse([ ex_si('COLOMBO', npp-nam, 'COLOMBO', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Reuters', npp-nam, 'Reuters', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,s),s)-1]), ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,np,s))))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),dl(0,np,s)))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,np,s))))))-1]), ex_si(11, det-num, 11, [np-1]), ex_si(blessées, vpp-ver:pper, blessées, [dl(0,np,s_pass)-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(kamikaze, nc-nom, kamikaze, [n-1]), ex_si(présumée, vpp-ver:pper, présumée, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Tigres', nc-nam, 'Tigres', [n-1]), ex_si(tamouls, npp-nam, tamouls, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(exploser, vinf-ver:infi, exploser, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intérieur, nc-nom, intérieur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si('sri-lankaise', adj-adj, 'sri-lankaise', [dl(0,n,n)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(1,s,s)-1]), ex_si(brisant, vpr-ver:ppre, brisant, [dl(1,s,s)-1]), ex_si(plus, adv-adv, plus, [let-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(deux, det-num, deux, [dr(0,pp_de,np)-1]), ex_si(ans, nc-nom, ans, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(relative, adj-adj, relative, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(571, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('attentats-suicides', nc-nom, 'attentats-suicides', [n-1]), ex_si(commis, vpp-ver:pper, commis, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('Tamouls', npp-nam, 'Tamouls', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(572, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), ex_si('Karremans', npp-nam, 'Karremans', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(responsable, adj-adj, responsable, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(néerlandaises, adj-adj, néerlandaises, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Srebrenica', npp-nam, 'Srebrenica', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(filmé, vpp-ver:pper, filmé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(trinquer, vinf-ver:infi, trinquer, [dl(0,np,s_inf)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(suspect, nc-nom, suspect, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si(serbe, adj-adj, serbe, [dl(0,n,n)-1]), ex_si('Ratko', npp-nam, 'Ratko', [dl(0,n,n)-1]), ex_si('Mladic', npp-nam, 'Mladic', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(573, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(néerlandaises, adj-adj, néerlandaises, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Srebrenica', npp-nam, 'Srebrenica', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(disparu, vpp-ver:pper, disparu, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(574, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cosmonaute, nc-nom, cosmonaute, [n-1]), ex_si('Sergei', npp-nam, 'Sergei', [dl(0,n,n)-1]), ex_si('Avdeyev', npp-nam, 'Avdeyev', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si('Mir', npp-nam, 'Mir', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(séjour, nc-nom, séjour, [dl(0,n,n)-1]), ex_si(total, adj-adj, total, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(575, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(totalisé, vpp-ver:pper, totalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(681, det-num, 681, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(576, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(détiennent, v-ver:pres, détiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(séjour, nc-nom, séjour, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(577, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(cubain, adj-adj, cubain, [dl(0,n,n)-1]), ex_si('Fidel', npp-nam, 'Fidel', [dl(0,n,n)-1]), ex_si('Castro', npp-nam, 'Castro', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Kofi', npp-nam, 'Kofi', [dr(0,np,np)-1]), ex_si('Annan', npp-nam, 'Annan', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(assurant, vpr-ver:ppre, assurant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Cuba', npp-nam, 'Cuba', [np-1]), ex_si(suivra, v-ver:futu, suivra, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(traités, nc-nom, traités, [n-1]), ex_si(antiterroristes, adj-adj, antiterroristes, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(attaques, nc-nom, attaques, [n-1]), ex_si(terroristes, adj-adj, terroristes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(578, Result) :-
      prob_parse([ ex_si('Castro', npp-nam, 'Castro', [np-1]), ex_si(visite, v-ver:pres, visite, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(579, Result) :-
      prob_parse([ ex_si('Dana', npp-nam, 'Dana', [dr(0,np,np)-1]), ex_si('Reeve', npp-nam, 'Reeve', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(veuve, nc-nom, veuve, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si('Christopher', npp-nam, 'Christopher', [dl(0,n,n)-1]), ex_si('Reeve', npp-nam, 'Reeve', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(poumon, nc-nom, poumon, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(44, det-num, 44, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Fondation', nc-nam, 'Fondation', [n-1]), ex_si('Christopher', npp-nam, 'Christopher', [dl(0,n,n)-1]), ex_si('Reeve', npp-nam, 'Reeve', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(580, Result) :-
      prob_parse([ ex_si('Christopher', npp-nam, 'Christopher', [dr(0,np,np)-1]), ex_si('Reeve', npp-nam, 'Reeve', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(581, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Millar', npp-nam, 'Millar', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conservé, vpp-ver:pper, conservé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(maillot, nc-nom, maillot, [n-1]), ex_si(jaune, adj-adj, jaune, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Tour', nc-nam, 'Tour', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chute, nc-nom, chute, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(étape, nc-nom, étape, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(course, nc-nom, course, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('Nantes', npp-nam, 'Nantes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(582, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(vainqueur, nc-nom, vainqueur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Tour', nc-nam, 'Tour', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(risque, v-ver:pres, risque, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(perdre, vinf-ver:infi, perdre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(couronne, nc-nom, couronne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(583, Result) :-
      prob_parse([ ex_si('Diana', npp-nam, 'Diana', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(princesse, nc-nom, princesse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(dimanche, nc-nom, dimanche, [dr(0,n,n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1997, adj-num, 1997, [dl(0,n,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(584, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(figure, nc-nom, figure, [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaste, adj-adj, vaste, [dr(0,n,n)-1]), ex_si(deuil, nc-nom, deuil, [n-1]), ex_si(public, adj-adj, public, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(culminant, vpr-ver:ppre, culminant, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(funérailles, nc-nom, funérailles, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abbaye, nc-nom, abbaye, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Westminster', npp-nam, 'Westminster', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(samedi, nc-nom, samedi, [dr(0,n,n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(1997, adj-num, 1997, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(585, Result) :-
      prob_parse([ ex_si('Lady', npp-nam, 'Lady', [dr(0,np,np)-1]), ex_si('Diana', npp-nam, 'Diana', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morte, vpp-ver:pper, morte, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(586, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(creusant, vpr-ver:ppre, creusant, [dl(0,np,s_ppres)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(badlands, nc-nom, badlands, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('centre-est', nc-nom, 'centre-est', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Utah', npp-nam, 'Utah', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(braconnier, nc-nom, braconnier, [n-1]), ex_si(repenti, vpp-ver:pper, repenti, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(restes, nc-nom, restes, [n-1]), ex_si(fossiles, adj-adj, fossiles, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dinosaure, nc-nom, dinosaure, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si(chaînon, nc-nom, chaînon, [let-1]), ex_si(manquant, adj-adj, manquant, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(587, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(restes, nc-nom, restes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dinosaure, nc-nom, dinosaure, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverts, vpp-ver:pper, découverts, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(588, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(incidents, nc-nom, incidents, [n-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(impact, nc-nom, impact, [n-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(contribuant, vpr-ver:ppre, contribuant, [dr(0,dl(0,np,s_ppres),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(précoces, adj-adj, précoces, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(blessures, nc-nom, blessures, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(souvent, adv-adv, souvent, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(défigurantes, adj-adj, défigurantes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(handicap, nc-nom, handicap, [n-1]), ex_si(permanent, adj-adj, permanent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(589, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(blessures, nc-nom, blessures, [n-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(majeure, adj-adj, majeure, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blessures, nc-nom, blessures, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(intentionnelles, adj-adj, intentionnelles, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(590, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(domestiques, adj-adj, domestiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(majeure, adj-adj, majeure, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blessures, nc-nom, blessures, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(intentionnelles, adj-adj, intentionnelles, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(591, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fièvre, nc-nom, fièvre, [n-1]), ex_si(hémorragique, adj-adj, hémorragique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ebola', npp-nam, 'Ebola', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(mortelle, adj-adj, mortelle, [dl(0,n,n)-1]), ex_si(causée, vpp-ver:pper, causée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(connu, vpp-ver:pper, connu, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(592, Result) :-
      prob_parse([ ex_si('Lorsqu\'une', det-det:art, 'Lorsqu\'une', [dr(0,dr(0,s,s),s)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [dr(0,n,n)-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(détectée, vpp-ver:pper, détectée, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(au, p+d-prp:det, au, [dl(0,np,s_pass)-1]), ex_si('Zaïre', npp-nam, 'Zaïre', [dr(0,dl(1,s,s),n)-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si(printemps, nc-nom, printemps, [dr(0,dl(1,s,s),n)-1]), ex_si(1995, adj-num, 1995, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(elle, cls-pro:per, elle, [let-1]), ex_si(a, v-ver:pres, a, [np-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(perçue, vpp-ver:pper, perçue, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,n,n),np)-1]), ex_si(menace, nc-nom, menace, [dr(0,np,n)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Occident', npp-nam, 'Occident', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(593, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(attention, nc-nom, attention, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(intense, adj-adj, intense, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(594, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ebola', npp-nam, 'Ebola', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Zaïre', npp-nam, 'Zaïre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(595, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Équateur', npp-nam, 'Équateur', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(débats, nc-nom, débats, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(596, Result) :-
      prob_parse([ ex_si('Pourtant', adv-adv, 'Pourtant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dr(0,s,s),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(important, adj-adj, important, [dr(0,n,n)-1]), ex_si(débat, nc-nom, débat, [n-1]), ex_si(public, adj-adj, public, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Équateur', npp-nam, 'Équateur', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(initiative, nc-nom, initiative, [n-1]), ex_si(conjointe, adj-adj, conjointe, [dl(0,n,n)-1]), ex_si('américano-colombienne', adj-adj, 'américano-colombienne', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Équateur', npp-nam, 'Équateur', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(597, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Pérou', npp-nam, 'Pérou', [n-1]), ex_si(débat, nc-nom, débat, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(frontalière, adj-adj, frontalière, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Équateur', npp-nam, 'Équateur', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(598, Result) :-
      prob_parse([ ex_si('Ailleurs', adv-adv, 'Ailleurs', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Mozambique', npp-nam, 'Mozambique', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décroché, vpp-ver:pper, décroché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(toute, adv-adv, toute, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(médaille, nc-nom, médaille, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(olympique, adj-adj, olympique, [dl(0,n,n)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si('Maria', npp-nam, 'Maria', [dr(0,np,np)-1]), ex_si('Mutola', npp-nam, 'Mutola', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(huit, adj-num, huit, [dr(0,n,n)-1]), ex_si(cents, adj-num, cents, [dr(0,n,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(féminin, adj-adj, féminin, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dix, adj-num, dix, [dr(0,n,n)-1]), ex_si(mille, adj-num, mille, [dr(0,n,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(masculin, adj-adj, masculin, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(revenu, vpp-ver:pper, revenu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ethiopien', nc-nam, 'Ethiopien', [dr(0,n,n)-1]), ex_si('Haile', npp-nam, 'Haile', [dl(0,n,n)-1]), ex_si('Gebrselassie', npp-nam, 'Gebrselassie', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(599, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(championne, nc-nom, championne, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dix, adj-num, dix, [dr(0,n,n)-1]), ex_si(mille, adj-num, mille, [dr(0,n,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(féminin, adj-adj, féminin, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaire, adj-adj, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Mozambique', npp-nam, 'Mozambique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(600, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(écrit, v-ver:pres, écrit, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si(latin, adj-adj, latin, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(neuvième, adj-num, neuvième, [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(601, Result) :-
      prob_parse([ ex_si('(', ponct-pun, '(', [let-1]), ex_si('Auparavant', adv-adv, 'Auparavant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vieil, adj-adj, vieil, [dr(0,n,n)-1]), ex_si(anglais, adj-adj, anglais, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(écrivait, v-ver:impf, écrivait, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Futhorc', npp-nam, 'Futhorc', [n-1]), ex_si('anglo-saxon', adj-adj, 'anglo-saxon', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(602, Result) :-
      prob_parse([ ex_si(')', ponct-pun, ')', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(orthographique, adj-adj, orthographique, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(orthographe, nc-nom, orthographe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(phonologique, adj-adj, phonologique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(603, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(orthographe, nc-nom, orthographe, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(approuvée, vpp-ver:pper, approuvée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(germanophones, adj-adj, germanophones, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(604, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(estimations, nc-nom, estimations, [n-1]), ex_si(varient, v-ver:pres, varient, [dl(0,np,s)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(pense, v-ver:pres, pense, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(usines, nc-nom, usines, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(magasins, nc-nom, magasins, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(champs, nc-nom, champs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bordels, nc-nom, bordels, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(rurale, adj-adj, rurale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(urbaine, adj-adj, urbaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(605, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(répandu, vpp-ver:pper, répandu, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(606, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(considérablement, adv-adv, considérablement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(trente, adj-num, trente, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(économies, nc-nom, économies, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(progressivement, adv-adv, progressivement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(ouvertes, vpp-ver:pper, ouvertes, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(607, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(conséquence, nc-nom, conséquence, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compétitivité, nc-nom, compétitivité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(économies, nc-nom, économies, [n-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(dépend, v-ver:pres, dépend, [dr(0,dl(0,np,s),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,pp,pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(performance, nc-nom, performance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(sociale, adj-adj, sociale, [dl(0,n,n)-1]), ex_si(garantissant, vpr-ver:ppre, garantissant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(608, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(adoptés, vpp-ver:pper, adoptés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(difficulté, nc-nom, difficulté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(609, Result) :-
      prob_parse([ ex_si('Expédition', nc-nom, 'Expédition', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Grand', adj-adj, 'Grand', [dr(0,n,n)-1]), ex_si('Cercle', npp-nam, 'Cercle', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Tibet', npp-nam, 'Tibet', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(610, Result) :-
      prob_parse([ ex_si('Première', det-num, 'Première', [dr(0,np,n)-1]), ex_si(circumambulation, nc-nom, circumambulation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,np,np),n)-1]), ex_si(trekking, nc-nom, trekking, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(ski, nc-nom, ski, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(alpinisme, nc-nom, alpinisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(611, Result) :-
      prob_parse([ ex_si('Première', det-num, 'Première', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(hivernale, adj-adj, hivernale, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pumori', npp-nam, 'Pumori', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(altitude, nc-nom, altitude, [n-1]), ex_si('23.422\'', adj-num, '23.422\'', [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(612, Result) :-
      prob_parse([ ex_si('Immortalisé', vpp-ver:pper, 'Immortalisé', [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si('Everest', npp-nam, 'Everest', [dl(0,n,n)-1]), ex_si('Grand', npp-nam, 'Grand', [dl(0,n,n)-1]), ex_si('Circle', npp-nam, 'Circle', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,dl(0,np,s),txt)-1])], Result).
sent(613, Result) :-
      prob_parse([ ex_si('Ned', npp-nam, 'Ned', [dr(0,np,np)-1]), ex_si('Gillette', npp-nam, 'Gillette', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Jan', npp-nam, 'Jan', [dr(0,np,np)-1]), ex_si('Reynolds', npp-nam, 'Reynolds', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Jim', npp-nam, 'Jim', [dr(0,np,np)-1]), ex_si('Bridwell', npp-nam, 'Bridwell', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Steve', npp-nam, 'Steve', [dr(0,np,np)-1]), ex_si('McKinney', npp-nam, 'McKinney', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Craig', npp-nam, 'Craig', [dr(0,np,np)-1]), ex_si('Calonica', npp-nam, 'Calonica', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Rick', npp-nam, 'Rick', [dr(0,np,np)-1]), ex_si('Barker', npp-nam, 'Barker', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(614, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(réussit, v-ver:pres, réussit, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(solitaire, nc-nom, solitaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(615, Result) :-
      prob_parse([ ex_si('Chaque', det-pro:ind, 'Chaque', [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(emprisonne, v-ver:pres, emprisonne, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(individus, nc-nom, individus, [n-1]), ex_si(simplement, adv-adv, simplement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(refusent, v-ver:pres, refusent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(raisons, nc-nom, raisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conscience, nc-nom, conscience, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(616, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêts, adj-adj, prêts, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(risquer, vinf-ver:infi, risquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emprisonnement, nc-nom, emprisonnement, [n-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(617, Result) :-
      prob_parse([ ex_si('Chaque', det-pro:ind, 'Chaque', [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quart, nc-nom, quart, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(subissent, v-ver:pres, subissent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(blessure, nc-nom, blessure, [n-1]), ex_si(suffisamment, adv-adv, suffisamment, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(grave, adj-adj, grave, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(nécessiter, vinf-ver:infi, nécessiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(médicaux, adj-adj, médicaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(absences, nc-nom, absences, [n-1]), ex_si(scolaires, adj-adj, scolaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('/', adj-adj, '/', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(repos, nc-nom, repos, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(lit, nc-nom, lit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(618, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(feux, nc-nom, feux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(artifice, nc-nom, artifice, [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(causer, vinf-ver:infi, causer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(blessures, nc-nom, blessures, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(619, Result) :-
      prob_parse([ ex_si('Ewald', npp-nam, 'Ewald', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(âgé, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(74, det-num, 74, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fédération, nc-nom, fédération, [n-1]), ex_si(sportive, adj-adj, sportive, [dl(0,n,n)-1]), ex_si('est-allemande', adj-adj, 'est-allemande', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1961, pro-num, 1961, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1988, pro-num, 1988, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(620, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(142, det-num, 142, [dr(0,np,n)-1]), ex_si(sportives, nc-nom, sportives, [n-1]), ex_si('est-allemandes', adj-adj, 'est-allemandes', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(principalement, adv-adv, principalement, [dr(0,np,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(nageuses, nc-nom, nageuses, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(athlètes, nc-nom, athlètes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(dopants, adj-adj, dopants, [dl(0,n,n)-1]), ex_si(interdits, vpp-ver:pper, interdits, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(621, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(sportives, nc-nom, sportives, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusées, vpp-ver:pper, accusées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(dopage, nc-nom, dopage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(622, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(rupestre, adj-adj, rupestre, [dl(0,n,n)-1]), ex_si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), ex_si(représentant, vpr-ver:ppre, représentant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cavernes, nc-nom, cavernes, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(caddie, nc-nom, caddie, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accroché, vpp-ver:pper, accroché, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(murs, nc-nom, murs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('British', npp-nam, 'British', [dr(0,n,n)-1]), ex_si('Museum', npp-nam, 'Museum', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(623, Result) :-
      prob_parse([ ex_si('Art', nc-nom, 'Art', [n-1]), ex_si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(624, Result) :-
      prob_parse([ ex_si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), ex_si('North', npp-nam, 'North', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(conseillère, nc-nom, conseillère, [n-1]), ex_si(ophtalmique, adj-adj, ophtalmique, [dl(0,n,n)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('SHSSB', npp-abr, 'SHSSB', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ajouté, vpp-ver:pper, ajouté, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(blessures, nc-nom, blessures, [n-1]), ex_si(oculaires, adj-adj, oculaires, [dl(0,n,n)-1]), ex_si(causées, vpp-ver:pper, causées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(feux, nc-nom, feux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(artifice, nc-nom, artifice, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(endommager, vinf-ver:infi, endommager, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(permanente, adj-adj, permanente, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(625, Result) :-
      prob_parse([ ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(demande, v-ver:pres, demande, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(instamment, adv-adv, instamment, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(coordonnent, v-ver:pres, coordonnent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(feux, nc-nom, feux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(artifice, nc-nom, artifice, [n-1]), ex_si(efficaces, adj-adj, efficaces, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(oculaire, adj-adj, oculaire, [dl(0,n,n)-1]), ex_si(appropriée, adj-adj, appropriée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(626, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(feux, nc-nom, feux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(artifice, nc-nom, artifice, [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(causer, vinf-ver:infi, causer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(blessures, nc-nom, blessures, [n-1]), ex_si(graves, adj-adj, graves, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(627, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(canadiens, adj-adj, canadiens, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(abord, nc-nom, abord, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déployés, vpp-ver:pper, déployés, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Srebrenica', npp-nam, 'Srebrenica', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(628, Result) :-
      prob_parse([ ex_si('Sept', det-num, 'Sept', [dr(0,np,n)-1]), ex_si(cent, adj-num, cent, [dr(0,n,n)-1]), ex_si(cinquante, adj-num, cinquante, [dr(0,n,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(légèrement, adv-adv, légèrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(armés, vpp-ver:pper, armés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(chargés, vpp-ver:pper, chargés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(désarmer, vinf-ver:infi, désarmer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(défenseurs, nc-nom, défenseurs, [n-1]), ex_si(musulmans, adj-adj, musulmans, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Srebrenica', npp-nam, 'Srebrenica', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dissuader, vinf-ver:infi, dissuader, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attaques, nc-nom, attaques, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Serbes', nc-nom, 'Serbes', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Bosnie', npp-nam, 'Bosnie', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(sécurisée, adj-adj, sécurisée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(629, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(tard, adv-adv, tard, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(drapeau, nc-nom, drapeau, [n-1]), ex_si(serbe, adj-adj, serbe, [dl(0,n,n)-1]), ex_si(flottait, v-ver:impf, flottait, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('7.079', det-num, '7.079', [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(musulmans, adj-adj, musulmans, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(portés, vpp-ver:pper, portés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(disparus, vpp-ver:pper, disparus, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(630, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(néerlandaises, adj-adj, néerlandaises, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Srebrenica', npp-nam, 'Srebrenica', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(disparu, vpp-ver:pper, disparu, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(631, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(catastrophes, nc-nom, catastrophes, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(répandues, vpp-ver:pper, répandues, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(632, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(majeures, adj-adj, majeures, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produites, vpp-ver:pper, produites, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,dl(1,s,s),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(633, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si(importantes, adj-adj, importantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(634, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(champs, nc-nom, champs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(agriculteurs, nc-nom, agriculteurs, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si(alimentent, v-ver:pres, alimentent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(irrigation, nc-nom, irrigation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(autosuffisant, adj-adj, autosuffisant, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(alimentaire, adj-adj, alimentaire, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1974, pro-num, 1974, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(635, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(outre, adv-adv, outre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(barrages, nc-nom, barrages, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(remédier, vinf-ver:infi, remédier, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(mettant, vpr-ver:ppre, mettant, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(populations, nc-nom, populations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pauvreté, nc-nom, pauvreté, [n-1]), ex_si(due, vpp-ver:pper, due, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(absence, nc-nom, absence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(famine, nc-nom, famine, [n-1]), ex_si(résultant, vpr-ver:ppre, résultant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécheresse, nc-nom, sécheresse, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dévastation, nc-nom, dévastation, [n-1]), ex_si(causée, vpp-ver:pper, causée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(persistantes, adj-adj, persistantes, [dl(0,n,n)-1]), ex_si(dues, vpp-ver:pper, dues, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(manque, nc-nom, manque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(approvisionnement, nc-nom, approvisionnement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(potable, adj-adj, potable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(636, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(barrages, nc-nom, barrages, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(situations, nc-nom, situations, [n-1]), ex_si(dangereuses, adj-adj, dangereuses, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(637, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(gagnant, vpr-ver:ppre, gagnant, [dr(0,dl(0,n,n),np)-1]), ex_si('22.000', det-num, '22.000', [dr(0,np,n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rémunération, nc-nom, rémunération, [n-1]), ex_si(totale, adj-adj, totale, [dl(0,n,n)-1]), ex_si(accumulée, vpp-ver:pper, accumulée, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(congé, nc-nom, congé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maternité, nc-nom, maternité, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),pp)-1]), ex_si(que, adv-adv, que, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('5.300', pro-num, '5.300', [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('5.850', pro-num, '5.850', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(638, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(faibles, adj-adj, faibles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('5.900', pro-num, '5.900', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('6.750', pro-num, '6.750', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(639, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(extrémité, nc-nom, extrémité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rémunération, nc-nom, rémunération, [n-1]), ex_si(perçue, vpp-ver:pper, perçue, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(congé, nc-nom, congé, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('9.150', pro-num, '9.150', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si('Danemark', npp-nam, 'Danemark', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si('Norvège', npp-nam, 'Norvège', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(atteindrait, v-ver:cond, atteindrait, [dr(0,dl(0,np,s),np)-1]), ex_si('11.000', pro-num, '11.000', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(640, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(congé, nc-nom, congé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maternité, nc-nom, maternité, [n-1]), ex_si(varie, v-ver:pres, varie, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(641, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(constructeurs, nc-nom, constructeurs, [n-1]), ex_si(automobiles, nc-nom, automobiles, [dl(0,n,n)-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si(gagnent, v-ver:pres, gagnent, [dr(0,dl(0,np,s),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(642, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(constructeurs, nc-nom, constructeurs, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('Daewoo', npp-nam, 'Daewoo', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ford', npp-nam, 'Ford', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Renault', npp-nam, 'Renault', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(produire, vinf-ver:infi, produire, [dl(0,np,s_inf)-1]), ex_si(assez, adv-adv, assez, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(vite, adv-adv, vite, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(643, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(vendent, v-ver:pres, vendent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(644, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(pleinement, adv-adv, pleinement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(gouvernementales, adj-adj, gouvernementales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(645, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(législatives, adj-adj, législatives, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(créent, v-ver:pres, créent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(parlementaire, adj-adj, parlementaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(conduisent, v-ver:pres, conduisent, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(646, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(législatives, adj-adj, législatives, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(conduire, vinf-ver:infi, conduire, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(647, Result) :-
      prob_parse([ ex_si('Fujimori', npp-nam, 'Fujimori', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Équateur', npp-nam, 'Équateur', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(tiré, vpp-ver:pper, tiré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(coup, nc-nom, coup, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(allégation, nc-nom, allégation, [n-1]), ex_si(démentie, vpp-ver:pper, démentie, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dirigeant, nc-nom, dirigeant, [n-1]), ex_si(équatorien, adj-adj, équatorien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sixto', npp-nam, 'Sixto', [dr(0,np,np)-1]), ex_si('Duran-Ballen', npp-nam, 'Duran-Ballen', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(648, Result) :-
      prob_parse([ ex_si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,cl_r,dl(0,np,s)),dia(1,box(1,pp_a))))-1]), ex_si(attendre, vinf-ver:infi, attendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,np,n)-1]), ex_si(camp, nc-nom, camp, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(déclenché, vpp-ver:pper, déclenché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(comme, cs-adv, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(chacun, pro-pro:ind, chacun, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pointé, vpp-ver:pper, pointé, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(doigt, nc-nom, doigt, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(culpabilité, nc-nom, culpabilité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(frontalière, adj-adj, frontalière, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1941, pro-num, 1941, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pérou', npp-nam, 'Pérou', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(emparé, vpp-ver:pper, emparé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majeure, adj-adj, majeure, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('120.000', adj-num, '120.000', [dr(0,n,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(litige, nc-nom, litige, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,n,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(649, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Fujimori', npp-nam, 'Fujimori', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réélu, vpp-ver:pper, réélu, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(650, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sniffage, nc-nom, sniffage, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(colle, nc-nom, colle, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(abus, nc-nom, abus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(solvants, nc-nom, solvants, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(négligés, vpp-ver:pper, négligés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(drogues, nc-nom, drogues, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(651, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sniffage, nc-nom, sniffage, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(colle, nc-nom, colle, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(courant, adj-adj, courant, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(652, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Grecs', nc-nam, 'Grecs', [n-1]), ex_si(anciens, adj-adj, anciens, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inhalation, nc-nom, inhalation, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(reconnue, vpp-ver:pper, reconnue, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(moyen, nc-nom, moyen, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(efficace, adj-adj, efficace, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(ingérer, vinf-ver:infi, ingérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(drogues, nc-nom, drogues, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(653, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(importante, adj-adj, importante, [dr(0,n,n)-1]), ex_si(surface, nc-nom, surface, [n-1]), ex_si(capillaire, adj-adj, capillaire, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(poumons, nc-nom, poumons, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(absorption, nc-nom, absorption, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(rush, nc-nom, rush, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ultérieur, adj-adj, ultérieur, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(souvent, adv-adv, souvent, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décrit, vpp-ver:pper, décrit, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,dr(0,n,s_q),n)-1]), ex_si(intensité, nc-nom, intensité, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(intraveineuse, adj-adj, intraveineuse, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(654, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sniffage, nc-nom, sniffage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(colle, nc-nom, colle, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(courant, adj-adj, courant, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(655, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Grèce', npp-nam, 'Grèce', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(oppose, v-ver:pres, oppose, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(voisin, adj-adj, voisin, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Skopje', npp-nam, 'Skopje', [np-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Macédoine', npp-nam, 'Macédoine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(estimant, vpr-ver:ppre, estimant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(implique, v-ver:pres, implique, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(revendications, nc-nom, revendications, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(province, nc-nom, province, [n-1]), ex_si(grecque, adj-adj, grecque, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(656, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Grèce', npp-nam, 'Grèce', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,n,n),np)-1]), ex_si('Macédoine', npp-nam, 'Macédoine', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(657, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(mandat, nc-nom, mandat, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(former, vinf-ver:infi, former, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(regeerakkoord, nc-nom, regeerakkoord, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(658, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(formation, nc-nom, formation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(font, v-ver:pres, font, [dr(0,dl(0,np,s),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(troc, nc-nom, troc, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(lâchant, vpr-ver:ppre, lâchant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(objectifs, nc-nom, objectifs, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(659, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(forment, v-ver:pres, forment, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(660, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(fournit, v-ver:pres, fournit, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intelligence, nc-nom, intelligence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(essaim, nc-nom, essaim, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('mini-robots', nc-nom, 'mini-robots', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(localiser, vinf-ver:infi, localiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contagion, nc-nom, contagion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('mini-ordinateurs', nc-nom, 'mini-ordinateurs', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(récepteurs, nc-nom, récepteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(positionnement, nc-nom, positionnement, [n-1]), ex_si(global, adj-adj, global, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(équipement, nc-nom, équipement, [n-1]), ex_si(radio, adj-adj, radio, [dl(0,n,n)-1]), ex_si(simple, adj-adj, simple, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(skieur, nc-nom, skieur, [n-1]), ex_si(enseveli, vpp-ver:pper, enseveli, [dl(0,n,n)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(661, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avalanches, nc-nom, avalanches, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(662, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(aide, v-ver:pres, aide, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(astronomes, nc-nom, astronomes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(calculer, vinf-ver:infi, calculer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(précisément, adv-adv, précisément, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(fournissant, vpr-ver:ppre, fournissant, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(distances, nc-nom, distances, [n-1]), ex_si(précises, adj-adj, précises, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(galaxies, nc-nom, galaxies, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(condition, nc-nom, condition, [n-1]), ex_si(préalable, adj-adj, préalable, [dl(0,n,n)-1]), ex_si(importante, adj-adj, importante, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(calculer, vinf-ver:infi, calculer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(663, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(mesure, v-ver:pres, mesure, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(distances, nc-nom, distances, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(galaxies, nc-nom, galaxies, [n-1]), ex_si(voisines, adj-adj, voisines, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(trouvant, vpr-ver:ppre, trouvant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(bornes, nc-nom, bornes, [n-1]), ex_si(kilométriques, adj-adj, kilométriques, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(précises, adj-adj, précises, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si(spéciale, adj-adj, spéciale, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étoiles, nc-nom, étoiles, [n-1]), ex_si(pulsantes, adj-adj, pulsantes, [dl(0,n,n)-1]), ex_si(appelées, vpp-ver:pper, appelées, [dr(0,dl(0,n,n),np)-1]), ex_si(variables, nc-nom, variables, [np-1]), ex_si(céphéides, adj-adj, céphéides, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(664, Result) :-
      prob_parse([ ex_si('Celles', pro-pro:dem, 'Celles', [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(tour, nc-nom, tour, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(calibrer, vinf-ver:infi, calibrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(marqueurs, nc-nom, marqueurs, [n-1]), ex_si(kilométriques, adj-adj, kilométriques, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(éloignés, vpp-ver:pper, éloignés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(665, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(découvre, v-ver:pres, découvre, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(666, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(avez, v-ver:pres, avez, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(immédiat, adj-adj, immédiat, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(barrage, nc-nom, barrage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(devez, v-ver:futu, devez, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(enlever, vinf-ver:infi, enlever, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(toit, nc-nom, toit, [n-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(directement, adv-adv, directement, [dr(0,pp,pp)-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,pp_a,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(barrage, nc-nom, barrage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(667, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(limite, v-ver:pres, limite, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(quantité, nc-nom, quantité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(accumuler, vinf-ver:infi, accumuler, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(derrière, p-prp, derrière, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(barrage, nc-nom, barrage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(668, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(barrages, nc-nom, barrages, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(situations, nc-nom, situations, [n-1]), ex_si(mettant, vpr-ver:ppre, mettant, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(669, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tout, adv-adv, tout, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sida, nc-nom, sida, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparus, vpp-ver:pper, apparus, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(670, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(observée, vpp-ver:pper, observée, [dl(0,np,s_pass)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(considérée, vpp-ver:pper, considérée, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(mortelle, adj-adj, mortelle, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peste, nc-nom, peste, [n-1]), ex_si(bubonique, adj-adj, bubonique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(continué, vpp-ver:pper, continué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(surface, nc-nom, surface, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(exclusivement, adv-adv, exclusivement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(homosexuels, adj-adj, homosexuels, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(671, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sida, nc-abr, sida, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(propage, v-ver:pres, propage, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(672, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1999, pro-num, 1999, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Conte', npp-nam, 'Conte', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(flacons, nc-nom, flacons, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chimiste, nc-nom, chimiste, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(connaissait, v-ver:impf, connaissait, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(673, Result) :-
      prob_parse([ ex_si('Dont', adv-adv, 'Dont', [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dit, v-ver:pres, dit, [dr(0,dr(0,np,np),np)-1]), ex_si('Conte', npp-nam, 'Conte', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(sportives, nc-nom, sportives, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(emblématiques, adj-adj, emblématiques, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Amériques', npp-nam, 'Amériques', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Marion', npp-nam, 'Marion', [dr(0,np,np)-1]), ex_si('Jones', npp-nam, 'Jones', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2000, pro-num, 2000, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(674, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(sportives, nc-nom, sportives, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(soupçonnées, vpp-ver:pper, soupçonnées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(dopage, nc-nom, dopage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(675, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Bosnie', npp-nam, 'Bosnie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(détermination, nc-nom, détermination, [n-1]), ex_si(diplomatique, adj-adj, diplomatique, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(combinée, vpp-ver:pper, combinée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opportunité, nc-nom, opportunité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instabilité, nc-nom, instabilité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(miner, vinf-ver:infi, miner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(fragile, adj-adj, fragile, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(676, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dayton', npp-nam, 'Dayton', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(formulé, vpp-ver:pper, formulé, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Bosnie', npp-nam, 'Bosnie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(677, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(canalisent, v-ver:pres, canalisent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(jardinage, nc-nom, jardinage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équitation, nc-nom, équitation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(678, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Hollande', npp-nam, 'Hollande', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déplacent, v-ver:pres, déplacent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(vélo, nc-nom, vélo, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(montrer, vinf-ver:infi, montrer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(quel, detwh-pro:rel, quel, [dr(0,dr(0,dl(0,dr(0,pp,np),s_whq),s),n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(appartiennent, v-ver:pres, appartiennent, [dr(0,dl(0,np,s),pp)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(679, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(conformant, vpr-ver:ppre, conformant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(stéréotype, nc-nom, stéréotype, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(exilée, vpp-ver:pper, exilée, [dr(0,dl(0,n,n),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(patrie, nc-nom, patrie, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(préfère, v-ver:pres, préfère, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(rapides, adj-adj, rapides, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(belles, adj-adj, belles, [dr(0,n,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(680, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(rentre, v-ver:pres, rentre, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(681, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(seul, adj-adj, seul, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(faillite, nc-nom, faillite, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(financé, vpp-ver:pper, financé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si(napoléoniennes, adj-adj, napoléoniennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(682, Result) :-
      prob_parse([ ex_si('Fondée', vpp-ver:pper, 'Fondée', [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1762, pro-num, 1762, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(personnelle, adj-adj, personnelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reine, nc-nom, reine, [n-1]), ex_si('Élisabeth', npp-nam, 'Élisabeth', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(683, Result) :-
      prob_parse([ ex_si('Barings', npp-nam, 'Barings', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(684, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1990, adj-num, 1990, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(autorisés, vpp-ver:pper, autorisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(organiser, vinf-ver:infi, organiser, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(685, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émergé, vpp-ver:pper, émergé, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Mouvement', nc-nam, 'Mouvement', [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si(républicain, adj-adj, républicain, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('MDR', npp-nam, 'MDR', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(libéral, adj-adj, libéral, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('LP', npp-abr, 'LP', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(socialiste, adj-adj, socialiste, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('PSD', npp-nam, 'PSD', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coalition', nc-nam, 'Coalition', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CDR', npp-abr, 'CDR', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(686, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émergé, vpp-ver:pper, émergé, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(687, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(suspension, nc-nom, suspension, [n-1]), ex_si(partielle, adj-adj, partielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('APC', npp-abr, 'APC', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('sous-comités', nc-nom, 'sous-comités', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_pass))-1]), ex_si(suspendus, vpp-ver:pper, suspendus, [dl(0,np,s_pass)-1]), ex_si(indéfiniment, adv-adv, indéfiniment, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(688, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(embargo, nc-nom, embargo, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(visa, nc-nom, visa, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(imposée, vpp-ver:pper, imposée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(fonctionnaires, nc-nom, fonctionnaires, [n-1]), ex_si(ouzbeks, adj-adj, ouzbeks, [dl(0,n,n)-1]), ex_si(soupçonnés, vpp-ver:pper, soupçonnés, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(répression, nc-nom, répression, [n-1]), ex_si(forcée, vpp-ver:pper, forcée, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(manifestations, nc-nom, manifestations, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Andijan', npp-nam, 'Andijan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(689, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(refuse, v-ver:pres, refuse, [dr(0,dl(0,np,s),np)-1]), ex_si(partiellement, adv-adv, partiellement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(690, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cultures, nc-nom, cultures, [n-1]), ex_si(prélitéraires, adj-adj, prélitéraires, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(préhistoire, nc-nom, préhistoire, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(commençant, vpr-ver:ppre, commençant, [dl(0,np,s_ppres)-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,dl(1,s,s),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(géologique, adj-adj, géologique, [dl(0,n,n)-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(tardive, adj-adj, tardive, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(691, Result) :-
      prob_parse([ ex_si('Art', nc-nam, 'Art', [n-1]), ex_si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(692, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(égard, nc-nom, égard, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(requises, vpp-ver:pper, requises, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(similaires, adj-adj, similaires, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(incitations, nc-nom, incitations, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fortes, adj-adj, fortes, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(retarder, vinf-ver:infi, retarder, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(règles, nc-nom, règles, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(facilitent, v-ver:pres, facilitent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(progressive, adj-adj, progressive, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(incitations, nc-nom, incitations, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(épargner, vinf-ver:infi, épargner, [dl(0,np,s_inf)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sensibilisation, nc-nom, sensibilisation, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(options, nc-nom, options, [n-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(693, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(adoptés, vpp-ver:pper, adoptés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(connaissent, v-ver:pres, connaissent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(difficultés, nc-nom, difficultés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(694, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(soulevé, vpp-ver:pper, soulevé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(questions, nc-nom, questions, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réglementation, nc-nom, réglementation, [n-1]), ex_si(financière, adj-adj, financière, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Singapour', npp-nam, 'Singapour', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(dérivés, adj-adj, dérivés, [dl(0,n,n)-1]), ex_si(accumulées, vpp-ver:pper, accumulées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(trader, nc-nom, trader, [n-1]), ex_si('Nick', npp-nam, 'Nick', [dl(0,n,n)-1]), ex_si('Leeson', npp-nam, 'Leeson', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dr(0,n,n)-1]), ex_si('Plc', npp-nam, 'Plc', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(695, Result) :-
      prob_parse([ ex_si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), ex_si('Leeson', npp-nam, 'Leeson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si('PLC', npp-abr, 'PLC', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(696, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(résultant, vpr-ver:ppre, résultant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si(délibéré, vpp-ver:pper, délibéré, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Jumbo-Jet', npp-nam, 'Jumbo-Jet', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(multiple, nc-nom, multiple, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pire, nc-nom, pire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(facteur, nc-nom, facteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(60, pro-num, 60, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(697, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(répercussions, nc-nom, répercussions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ex-URSS', npp-abr, 'ex-URSS', [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(698, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(objectifs, nc-nom, objectifs, [n-1]), ex_si(derrière, p-prp, derrière, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(milices, nc-nom, milices, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Timor', npp-nam, 'Timor', [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si(semblait, v-ver:impf, semblait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(schéma, nc-nom, schéma, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(violence, nc-nom, violence, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Administration', nc-nam, 'Administration', [n-1]), ex_si('Transitoire', adj-nam, 'Transitoire', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si('Unies', et-nam, 'Unies', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Timor', npp-nam, 'Timor', [n-1]), ex_si('Oriental', npp-nam, 'Oriental', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ATNUTO', npp-abr, 'ATNUTO', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(saper, vinf-ver:infi, saper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transition, nc-nom, transition, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Hedi', npp-nam, 'Hedi', [dr(0,np,np)-1]), ex_si('Annabi', npp-nam, 'Annabi', [np-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('sous-secrétaire', nc-nom, 'sous-secrétaire', [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [dr(0,dl(0,n,n),n)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,dl(0,n,n),n)-1]), ex_si(matin, nc-nom, matin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(699, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(guérillas, nc-nom, guérillas, [n-1]), ex_si(augmentent, v-ver:pres, augmentent, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Timor', npp-nam, 'Timor', [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(700, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si('Federico', npp-nam, 'Federico', [dl(0,n,n)-1]), ex_si('Fellini', npp-nam, 'Fellini', [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(âgé, adj-adj, âgé, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(pairs, nc-nom, pairs, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(nomination, nc-nom, nomination, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dr(0,s,s),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(étrangers, nc-adj, étrangers, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nommé, vpp-ver:pper, nommé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(précédents, adj-adj, précédents, [dr(0,n,n)-1]), ex_si('chefs-d\'oeuvre', nc-nom, 'chefs-d\'oeuvre', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Strada', npp-nam, 'Strada', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Nuits', nc-nom, 'Nuits', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cabiria', npp-nam, 'Cabiria', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(étrangère, adj-adj, étrangère, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1956, pro-num, 1956, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(1957, pro-num, 1957, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(respectivement, adv-adv, respectivement, [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(701, Result) :-
      prob_parse([ ex_si('Fellini', npp-nam, 'Fellini', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Oscar', nc-nom, 'Oscar', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(essentiellement, adv-adv, essentiellement, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(geste, nc-nom, geste, [n-1]), ex_si(compensatoire, adj-adj, compensatoire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(702, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Oscar', nc-nom, 'Oscar', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(703, Result) :-
      prob_parse([ ex_si('Cinéaste', nc-nom, 'Cinéaste', [np-1]), ex_si(italien, adj-adj, italien, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Fellini', npp-nam, 'Fellini', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Oscar', nc-nom, 'Oscar', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(carrière, nc-nom, carrière, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(704, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(1993, adj-num, 1993, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(705, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Oscar', nc-nom, 'Oscar', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(706, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haute, adj-adj, haute, [dr(0,n,n)-1]), ex_si(juridiction, nc-nom, juridiction, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(verdict, nc-nom, verdict, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partiellement, adv-adv, partiellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(blanchi, vpp-ver:pper, blanchi, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Giulio', npp-nam, 'Giulio', [dl(0,n,n)-1]), ex_si('Andreotti', npp-nam, 'Andreotti', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(collusion, nc-nom, collusion, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mafia, nc-nom, mafia, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(707, Result) :-
      prob_parse([ ex_si('Andreotti', npp-nam, 'Andreotti', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(collusion, nc-nom, collusion, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mafia, nc-nom, mafia, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(708, Result) :-
      prob_parse([ ex_si('Jill', npp-nam, 'Jill', [dr(0,np,np)-1]), ex_si('Pilgrim', npp-nam, 'Pilgrim', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(avocate, nc-nom, avocate, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('USA', npp-nam, 'USA', [dr(0,np,np)-1]), ex_si('Track', npp-nam, 'Track', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Field', npp-nam, 'Field', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soulevé, vpp-ver:pper, soulevé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(panel, nc-nom, panel, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si(féminin, adj-adj, féminin, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(avocats, nc-nom, avocats, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(709, Result) :-
      prob_parse([ ex_si('Pilgrim', npp-nam, 'Pilgrim', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(légalement, adv-adv, légalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(considérées, vpp-ver:pper, considérées, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(évolue, v-ver:pres, évolue, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sexe, nc-nom, sexe, [n-1]), ex_si(deviennent, v-ver:pres, deviennent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(courantes, adj-adj, courantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(710, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sexe, nc-nom, sexe, [n-1]), ex_si(deviennent, v-ver:pres, deviennent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(courantes, adj-adj, courantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(711, Result) :-
      prob_parse([ ex_si('Kieslowski', npp-nam, 'Kieslowski', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(abandonné, vpp-ver:pper, abandonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(documentaire, nc-nom, documentaire, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(expériences, nc-nom, expériences, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(censure, nc-nom, censure, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Workers', npp-nam, 'Workers', [np-1]), ex_si('\'', ponct-pun:cit, '\'', [np-1]), ex_si(71, adj-num, 71, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(douter, vinf-ver:infi, douter, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vérité, nc-nom, vérité, [n-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dite, vpp-ver:pper, dite, [dl(1,s,s)-1]), ex_si(littéralement, adv-adv, littéralement, [dr(0,pp,np)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(autoritaire, adj-adj, autoritaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(incident, nc-nom, incident, [dr(0,dl(0,n,n),np)-1]), ex_si(pendant, p-prp, pendant, [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [n-1]), ex_si(tournage, nc-nom, tournage, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Station', npp-nam, 'Station', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(1981, pro-num, 1981, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,pp_a,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(duquel, p+pro-pro:rel, duquel, [dr(0,dl(0,dr(0,pp,dia(0,box(0,n))),dl(0,n,n)),s)-1]), ex_si(certaines, pro-pro:ind, certaines, [np-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(ses, det-det:pos, ses, [n-1]), ex_si(séquences, nc-nom, séquences, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(failli, vpp-ver:pper, failli, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dr(0,dl(1,s,s),n)-1]), ex_si(comme, adv-adv, comme, [n-1]), ex_si(preuves, nc-nom, preuves, [dr(0,dl(1,s,s),np)-1]), ex_si(dans, p-prp, dans, [dr(0,np,n)-1]), ex_si(une, det-det:art, une, [n-1]), ex_si(affaire, nc-nom, affaire, [dl(0,n,n)-1]), ex_si(criminelle, adj-adj, criminelle, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(712, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fiction, nc-nom, fiction, [n-1]), ex_si(permettait, v-ver:impf, permettait, [dr(0,dl(0,np,s),np)-1]), ex_si(non, adv-adv, non, [dr(0,dr(0,np,np),dr(0,np,np))-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(liberté, nc-nom, liberté, [n-1]), ex_si(artistique, adj-adj, artistique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(dépeindre, vinf-ver:infi, dépeindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(quotidienne, adj-adj, quotidienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(véridique, adj-adj, véridique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(713, Result) :-
      prob_parse([ ex_si('Kieslowski', npp-nam, 'Kieslowski', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(714, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,dr(0,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chute, nc-nom, chute, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(composé, vpp-ver:pper, composé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('chrétiens-démocrates', nc-nom, 'chrétiens-démocrates', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CDA', npp-abr, 'CDA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(dirigés, vpp-ver:pper, dirigés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Jan', npp-nam, 'Jan', [dl(0,n,n)-1]), ex_si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), ex_si('Balkenende', npp-nam, 'Balkenende', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(libéral, adj-adj, libéral, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('VVD', npp-abr, 'VVD', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gauche, nc-nom, gauche, [n-1]), ex_si('D66', npp-abr, 'D66', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(715, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(forment, v-ver:pres, forment, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(716, Result) :-
      prob_parse([ ex_si('LISBON', nc-nom, 'LISBON', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(22, det-num, 22, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Xinhuanet', npp-nam, 'Xinhuanet', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,s),s)-1]), ex_si('Anibal', npp-nam, 'Anibal', [dr(0,np,np)-1]), ex_si('Cavaco', npp-nam, 'Cavaco', [dr(0,np,np)-1]), ex_si('Silva', npp-nam, 'Silva', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Portugal', npp-nam, 'Portugal', [n-1]), ex_si(dimanche, nc-nom, dimanche, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(717, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(premier, adj-num, premier, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(portugais, adj-adj, portugais, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(718, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Macédoine', npp-nam, 'Macédoine', [n-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(confiante, adj-adj, confiante, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(résister, vinf-ver:infi, résister, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(craignent, v-ver:pres, craignent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('Athènes', npp-nam, 'Athènes', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(monte, v-ver:pres, monte, [dr(0,dl(0,np,s),pp)-1]), ex_si(bientôt, adv-adv, bientôt, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cran, nc-nom, cran, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(719, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Grèce', npp-nam, 'Grèce', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ARY', npp-abr, 'ARY', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Macédoine', npp-nam, 'Macédoine', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(disputent, v-ver:pres, disputent, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(720, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(moyenne, adj-adj, moyenne, [dl(0,n,n)-1]), ex_si(existent, v-ver:pres, existent, [dl(0,np,s)-1]), ex_si(bel, adj-adj, bel, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(découvertes, nc-nom, découvertes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(chercher, vinf-ver:infi, chercher, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(endroits, nc-nom, endroits, [n-1]), ex_si(inattendus, adj-adj, inattendus, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(721, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(découverts, vpp-ver:pper, découverts, [dl(0,n,n)-1]), ex_si(auparavant, adv-adv, auparavant, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(éclaire, v-ver:pres, éclaire, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(développent, v-ver:pres, développent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(722, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(découvre, v-ver:pres, découvre, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(723, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(mentale, adj-adj, mentale, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(adolescents, nc-nom, adolescents, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(averti, vpp-ver:pper, averti, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Association', nc-nam, 'Association', [n-1]), ex_si(médicale, adj-adj, médicale, [dl(0,n,n)-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(mal, adv-adv, mal, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(équipés, vpp-ver:pper, équipés, [dl(0,np,s_ppart)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(face, nc-nom, face, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(724, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(mentale, adj-adj, mentale, [dl(0,n,n)-1]), ex_si(augmentent, v-ver:pres, augmentent, [dl(0,np,s)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(725, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(connaissent, v-ver:pres, connaissent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(idée, nc-nom, idée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saint-Bernard', npp-nam, 'Saint-Bernard', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(participant, vpr-ver:ppre, participant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(efforts, nc-nom, efforts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sauvetage, nc-nom, sauvetage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(récupération, nc-nom, récupération, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(726, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(part, nc-nom, part, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(missions, nc-nom, missions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sauvetage, nc-nom, sauvetage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(727, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(disparues, adj-adj, disparues, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(728, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Mozambicaine', npp-nam, 'Mozambicaine', [n-1]), ex_si('Maria', npp-nam, 'Maria', [dl(0,n,n)-1]), ex_si('Mutola', npp-nam, 'Mutola', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Israélien', nc-nam, 'Israélien', [n-1]), ex_si('Alex', npp-nam, 'Alex', [dl(0,n,n)-1]), ex_si('Averbukh', npp-nam, 'Averbukh', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(meilleures, adj-adj, meilleures, [dr(0,n,n)-1]), ex_si(performances, nc-nom, performances, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(800, adj-num, 800, [dr(0,n,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(féminin, adj-adj, féminin, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(saut, nc-nom, saut, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(perche, nc-nom, perche, [n-1]), ex_si(masculin, adj-adj, masculin, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Super', adj-nam, 'Super', [dr(0,n,n)-1]), ex_si('Grand', adj-adj, 'Grand', [dr(0,n,n)-1]), ex_si('Prix', npp-nam, 'Prix', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Madrid', npp-nam, 'Madrid', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(samedi, nc-nom, samedi, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(729, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(championne, nc-nom, championne, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dix, adj-num, dix, [dr(0,n,n)-1]), ex_si(mille, adj-num, mille, [dr(0,n,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(féminin, adj-adj, féminin, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaire, adj-adj, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Mozambique', npp-nam, 'Mozambique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(730, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(conclusion, nc-nom, conclusion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Gregory', npp-nam, 'Gregory', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cérémonie, nc-nom, cérémonie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(transférée, vpp-ver:pper, transférée, [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(dimanche, nc-nom, dimanche, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(proche, adj-adj, proche, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(convenait, v-ver:impf, convenait, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(disparaître, vinf-ver:infi, disparaître, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(731, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(proclamé, vpp-ver:pper, proclamé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(festivités, nc-nom, festivités, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(célébrer, vinf-ver:infi, célébrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('50e', adj-num, '50e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(732, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('50e', adj-num, '50e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(dure, v-ver:pres, dure, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(733, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(observatoires, nc-nom, observatoires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(observatoire, nc-nom, observatoire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(rayons, nc-nom, rayons, [n-1]), ex_si('X', npp-nam, 'X', [dl(0,n,n)-1]), ex_si('Chandra', npp-nam, 'Chandra', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fourni, vpp-ver:pper, fourni, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(indépendamment, adv-adv, indépendamment, [dl(1,s,s)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,n,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(directe, adj-adj, directe, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(horizon, nc-nom, horizon, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(événements, nc-nom, événements, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(caractéristique, nc-nom, caractéristique, [n-1]), ex_si(déterminante, vpr-ver:ppre, déterminante, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(trou, nc-nom, trou, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(734, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(découvre, v-ver:pres, découvre, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(735, Result) :-
      prob_parse([ ex_si('Néanmoins', adv-adv, 'Néanmoins', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(longévité, nc-nom, longévité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(natalité, nc-nom, natalité, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(facteurs, nc-nom, facteurs, [n-1]), ex_si(majeurs, adj-adj, majeurs, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(rendent, v-ver:pres, rendent, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(publics, adj-adj, publics, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(viables, adj-adj, viables, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(736, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(majeures, adj-adj, majeures, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(par, p-prp, par, [dr(0,dr(0,np,np),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(continué, vpp-ver:pper, continué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(adapter, vinf-ver:infi, adapter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(existants, vpr-ver:ppre, existants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(737, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(adoptés, vpp-ver:pper, adoptés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(difficulté, nc-nom, difficulté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(738, Result) :-
      prob_parse([ ex_si('Néanmoins', adv-adv, 'Néanmoins', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réputation, nc-nom, réputation, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(artistes, nc-nom, artistes, [n-1]), ex_si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cinéaste, nc-nom, cinéaste, [n-1]), ex_si('Krzysztof', npp-nam, 'Krzysztof', [dl(0,n,n)-1]), ex_si('Kieslowski', npp-nam, 'Kieslowski', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élevée, vpp-ver:pper, élevée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(739, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(critère, nc-nom, critère, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(grossier, adj-adj, grossier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coffret, nc-nom, coffret, [n-1]), ex_si('DVD', nc-abr, 'DVD', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si('Décalogue', npp-nam, 'Décalogue', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(drames, nc-nom, drames, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(librement, adv-adv, librement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(inspirés, vpp-ver:pper, inspirés, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Dix', adj-nam, 'Dix', [dr(0,n,n)-1]), ex_si('Commandements', nc-nom, 'Commandements', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(réalisés, vpp-ver:pper, réalisés, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(polonaise, adj-adj, polonaise, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1988, pro-num, 1988, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(numéro, nc-nom, numéro, [np-1]), ex_si('3.700', adj-num, '3.700', [dl(0,np,np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(classement, nc-nom, classement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Amazon.com', npp-nam, 'Amazon.com', [np-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(peu, adv-adv, peu, [n-1]), ex_si(près, adv-adv, près, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(égalité, nc-nom, égalité, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Alfred', npp-nam, 'Alfred', [dr(0,n,n)-1]), ex_si('Hitchcock', npp-nam, 'Hitchcock', [dr(0,n,n)-1]), ex_si('Signature', npp-nam, 'Signature', [n-1]), ex_si('Collection', npp-nam, 'Collection', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(740, Result) :-
      prob_parse([ ex_si('Kieslowski', npp-nam, 'Kieslowski', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(741, Result) :-
      prob_parse([ ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliardaires, nc-nom, milliardaires, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(40, pro-num, 40, [np-1]), ex_si(résidant, vpr-ver:ppre, résidant, [dr(0,dl(0,np,np),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grosse', npp-nam, 'Grosse', [dr(0,n,n)-1]), ex_si('Pomme', npp-nam, 'Pomme', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(742, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(milliardaire, nc-nom, milliardaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Hind', npp-nam, 'Hind', [dr(0,np,np)-1]), ex_si('Hariri', npp-nam, 'Hariri', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(22, det-num, 22, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(libanais, adj-adj, libanais, [dl(0,n,n)-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,n,n)-1]), ex_si('Rafik', npp-nam, 'Rafik', [dr(0,np,np)-1]), ex_si('Hariri', npp-nam, 'Hariri', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(743, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliardaires, nc-nom, milliardaires, [n-1]), ex_si(augmente, v-ver:pres, augmente, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(744, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(prochaine, adj-adj, prochaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('50e', adj-num, '50e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(événement, nc-nom, événement, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Liberty', npp-nam, 'Liberty', [dr(0,n,n)-1]), ex_si(ships, et-nom, ships, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(745, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(bénévoles, nc-nom, bénévoles, [n-1]), ex_si(espèrent, v-ver:pres, espèrent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(récolter, vinf-ver:infi, récolter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(suffisamment, adv-adv, suffisamment, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(naviguer, vinf-ver:infi, naviguer, [dl(0,np,s_inf)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('O\'Brien', npp-nam, 'O\'Brien', [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(célébration, nc-nom, célébration, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('J', nc-nom, 'J', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(746, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('50e', adj-num, '50e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(dure, v-ver:pres, dure, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(747, Result) :-
      prob_parse([ ex_si('Nicholas', npp-nam, 'Nicholas', [dr(0,np,np)-1]), ex_si('Burns', npp-nam, 'Burns', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(exclusive, vpp-ver:pper, exclusive, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Utrinski', npp-nam, 'Utrinski', [dr(0,np,np)-1]), ex_si('Vesnik', npp-nam, 'Vesnik', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,np,np),np)-1]), ex_si('Pristina', npp-nam, 'Pristina', [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(honteux, adj-adj, honteux, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('Athènes', npp-nam, 'Athènes', [np-1]), ex_si(mette, vs-ver:subp, mette, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(veto, nc-nom, veto, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(adhésion, nc-nom, adhésion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ARY', npp-abr, 'ARY', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Macédoine', npp-nam, 'Macédoine', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(748, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Grèce', npp-nam, 'Grèce', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ARY', npp-abr, 'ARY', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Macédoine', npp-nam, 'Macédoine', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(disputent, v-ver:pres, disputent, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(749, Result) :-
      prob_parse([ ex_si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), ex_si('Leeson', npp-nam, 'Leeson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(emprisonné, vpp-ver:pper, emprisonné, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(fraude, nc-nom, fraude, [n-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(750, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accumulé, vpp-ver:pper, accumulé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(850, det-num, 850, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(boursiers, adj-adj, boursiers, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Extrême-Orient', npp-nam, 'Extrême-Orient', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(751, Result) :-
      prob_parse([ ex_si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), ex_si('Leeson', npp-nam, 'Leeson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si('PLC', npp-abr, 'PLC', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(752, Result) :-
      prob_parse([ ex_si('Grèves', nc-nom, 'Grèves', [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si('Northwest', npp-nam, 'Northwest', [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,n,s),s)-1]), ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Northwest', npp-nam, 'Northwest', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mettent, v-ver:pres, mettent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(15, nc-num, 15, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', prowh-pro:rel, 'qu\'', [dr(0,s_whq,dr(0,s,dia(1,box(1,np))))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,s,np),np)-1]), ex_si('-ce', cls-pro:dem, '-ce', [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(voyageurs, nc-nom, voyageurs, [n-1]), ex_si('?', ponct-pun, '?', [dl(0,s,txt)-1])], Result).
sent(753, Result) :-
      prob_parse([ ex_si('J\'', cls-pro:per, 'J\'', [np-1]), ex_si(ai, v-ver:pres, ai, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si(réservé, vpp-ver:pper, réservé, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(24, nc-num, 24, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(754, Result) :-
      prob_parse([ ex_si('Est', v-ver:pres, 'Est', [dr(0,dr(0,s,s_q),np)-1]), ex_si('-ce', cls-pro:dem, '-ce', [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('NW', npp-nam, 'NW', [np-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(nous, clo-pro:per, nous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(rebooker, vinf-ver:infi, rebooker, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(aériennes, adj-adj, aériennes, [dl(0,n,n)-1]), ex_si('?', ponct-pun, '?', [dl(0,s,txt)-1])], Result).
sent(755, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(assistants, nc-nom, assistants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(italiens, adj-adj, italiens, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mettent, v-ver:pres, mettent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(756, Result) :-
      prob_parse([ ex_si('Oh', i-int, 'Oh', [dr(0,np,np)-1]), ex_si('Eun-sun', npp-nam, 'Eun-sun', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(coréenne, adj-adj, coréenne, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(escalader, vinf-ver:infi, escalader, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Mont', npp-nam, 'Mont', [n-1]), ex_si('Everest', npp-nam, 'Everest', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(solo, nc-nom, solo, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(757, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(épreuves, nc-nom, épreuves, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(endurer, vinf-ver:infi, endurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(dit, v-ver:pres, dit, [dr(0,dl(0,np,s),s_q)-1]), ex_si(simplement, adv-adv, simplement, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chance, nc-nom, chance, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(758, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(souvient, v-ver:pres, souvient, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passés, vpp-ver:pper, passés, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(montagne, nc-nom, montagne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(759, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(réussit, v-ver:pres, réussit, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(solo, nc-nom, solo, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(760, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(1992, adj-num, 1992, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(unité, nc-nom, unité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(numéro, nc-nom, numéro, [dl(0,n,n)-1]), ex_si(3, adj-num, 3, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(atomique, adj-adj, atomique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Leningrad', npp-nam, 'Leningrad', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Sosnovyi', npp-nam, 'Sosnovyi', [dr(0,np,np)-1]), ex_si('Bor', npp-nam, 'Bor', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(761, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fuite, nc-nom, fuite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vapeur, nc-nom, vapeur, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(3, adj-num, 3, [dr(0,n,n)-1]), ex_si(mille, adj-num, mille, [dr(0,n,n)-1]), ex_si(curies, nc-nom, curies, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(762, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sosnovyi', npp-nam, 'Sosnovyi', [dr(0,np,np)-1]), ex_si('Bor', npp-nam, 'Bor', [np-1]), ex_si(subit, v-ver:pres, subit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(763, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(29, adj-num, 29, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effondré, vpp-ver:pper, effondré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(764, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composé, vpp-ver:pper, composé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('chrétiens-démocrates', nc-nom, 'chrétiens-démocrates', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CDA', npp-abr, 'CDA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(dirigés, vpp-ver:pper, dirigés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Jan', npp-nam, 'Jan', [dl(0,n,n)-1]), ex_si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), ex_si('Balkenende', npp-nam, 'Balkenende', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(libéral, adj-adj, libéral, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('VVD', npp-abr, 'VVD', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(libéral, adj-adj, libéral, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gauche, nc-nom, gauche, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('D66', nc-abr, 'D66', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(765, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(formé, vpp-ver:pper, formé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(766, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1990, adj-num, 1990, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sortie, nc-nom, sortie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Alexander', npp-nam, 'Alexander', [dr(0,np,np)-1]), ex_si('Serebrov', npp-nam, 'Serebrov', [np-1]), ex_si(enfile, v-ver:pres, enfile, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fauteuil, nc-nom, fauteuil, [n-1]), ex_si(volant, nc-nom, volant, [dl(0,n,n)-1]), ex_si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(livré, vpp-ver:pper, livré, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Mir', npp-nam, 'Mir', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Kvant', npp-nam, 'Kvant', [np-1]), ex_si(2, adj-num, 2, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(767, Result) :-
      prob_parse([ ex_si('Contrairement', adv-adv, 'Contrairement', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(astronautes, nc-nom, astronautes, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(attachés, vpp-ver:pper, attachés, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dispositif, nc-nom, dispositif, [n-1]), ex_si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cosmonaute, nc-nom, cosmonaute, [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(attaché, vpp-ver:pper, attaché, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ceinture, nc-nom, ceinture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(navette, nc-nom, navette, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(récupérer, vinf-ver:infi, récupérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(768, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(navette, nc-nom, navette, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Atlantis', npp-nam, 'Atlantis', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(arrime, v-ver:pres, arrime, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si('Mir', npp-nam, 'Mir', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(769, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(portugais, adj-adj, portugais, [dl(0,n,n)-1]), ex_si('Jorge', npp-nam, 'Jorge', [dl(0,n,n)-1]), ex_si('Sampaio', npp-nam, 'Sampaio', [dl(0,n,n)-1]), ex_si(demande, v-ver:pres, demande, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Pedro', npp-nam, 'Pedro', [dr(0,np,np)-1]), ex_si('Santana', npp-nam, 'Santana', [dr(0,np,np)-1]), ex_si('Lopes', npp-nam, 'Lopes', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(former, vinf-ver:infi, former, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(770, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(assermenté, vpp-ver:pper, assermenté, [dl(0,np,s_pass)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(17, adj-num, 17, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(comprend, v-ver:pres, comprend, [dr(0,dl(0,np,s),np)-1]), ex_si('António', npp-nam, 'António', [dr(0,np,np)-1]), ex_si('Monteiro', npp-nam, 'Monteiro', [np-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Daniel', npp-nam, 'Daniel', [dr(0,np,np)-1]), ex_si('Sanches', npp-nam, 'Sanches', [np-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Intérieur', nc-nom, 'Intérieur', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('António', npp-nam, 'António', [dr(0,np,np)-1]), ex_si('Bago', npp-nam, 'Bago', [dr(0,np,np)-1]), ex_si('Flix', npp-nam, 'Flix', [np-1]), ex_si(comme, adv-adv, comme, [np-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si('Finances', nc-nom, 'Finances', [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,np,np),np)-1]), ex_si('Paulo', npp-nam, 'Paulo', [dr(0,np,np)-1]), ex_si('Portas', npp-nam, 'Portas', [dr(0,np,np)-1]), ex_si(reste, v-ver:pres, reste, [np-1]), ex_si(ministre, nc-nom, ministre, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(771, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(premier, adj-num, premier, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(portugais, adj-adj, portugais, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(772, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(29, adj-num, 29, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(navette, nc-nom, navette, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si('Atlantis', npp-nam, 'Atlantis', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entrée, vpp-ver:pper, entrée, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(amarrant, vpr-ver:ppre, amarrant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Mir', npp-nam, 'Mir', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dr(0,s,np),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(773, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(navette, nc-nom, navette, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Atlantis', npp-nam, 'Atlantis', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(arrime, v-ver:pres, arrime, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si('Mir', npp-nam, 'Mir', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(774, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(oscarisé, vpp-ver:pper, oscarisé, [dl(0,n,n)-1]), ex_si('Franco', npp-nam, 'Franco', [dl(0,n,n)-1]), ex_si('Zeffirelli', npp-nam, 'Zeffirelli', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nommé, vpp-ver:pper, nommé, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(chevalier, nc-nom, chevalier, [np-1]), ex_si(honoraire, adj-adj, honoraire, [dl(0,np,np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(précieux, adj-adj, précieux, [dr(0,n,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(rendus, vpp-ver:pper, rendus, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(arts, nc-nom, arts, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(spectacle, nc-nom, spectacle, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(775, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Oscar', nc-nam, 'Oscar', [n-1]), ex_si(honorifique, adj-adj, honorifique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(776, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passée, vpp-ver:pper, passée, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(apparente, adj-adj, apparente, [dr(0,n,n)-1]), ex_si(solidité, nc-nom, solidité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faillite, nc-nom, faillite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(777, Result) :-
      prob_parse([ ex_si('Barings', npp-nam, 'Barings', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(778, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(financé, vpp-ver:pper, financé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si(napoléoniennes, adj-adj, napoléoniennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(achat, nc-nom, achat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Louisiane', npp-nam, 'Louisiane', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(canal, nc-nom, canal, [n-1]), ex_si('Erie', npp-nam, 'Erie', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(779, Result) :-
      prob_parse([ ex_si('Barings', npp-nam, 'Barings', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Reine', npp-nam, 'Reine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(780, Result) :-
      prob_parse([ ex_si('Barings', npp-nam, 'Barings', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(781, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sourdes, adj-adj, sourdes, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déficience, nc-nom, déficience, [n-1]), ex_si(auditive, adj-adj, auditive, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(aveugles, adj-adj, aveugles, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déficience, nc-nom, déficience, [n-1]), ex_si(visuelle, adj-adj, visuelle, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(mobilité, nc-nom, mobilité, [n-1]), ex_si(réduite, vpp-ver:pper, réduite, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(confrontées, vpp-ver:pper, confrontées, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(défis, nc-nom, défis, [n-1]), ex_si(uniques, adj-adj, uniques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(782, Result) :-
      prob_parse([ ex_si('Leur', det-det:pos, 'Leur', [dr(0,np,n)-1]), ex_si(capacité, nc-nom, capacité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(échapper, vinf-ver:infi, échapper, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(entravée, vpp-ver:pper, entravée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(déficiences, nc-nom, déficiences, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(783, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(conséquent, nc-nom, conséquent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(atteintes, vpp-ver:pper, atteintes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(handicaps, nc-nom, handicaps, [n-1]), ex_si(courent, v-ver:pres, courent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blessures, nc-nom, blessures, [n-1]), ex_si(dus, vpp-ver:pper, dus, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(784, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sourdes, adj-adj, sourdes, [dl(0,n,n)-1]), ex_si(rencontrent, v-ver:pres, rencontrent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(sociale, adj-adj, sociale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(785, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('PNG', npp-abr, 'PNG', [n-1]), ex_si(manquent, v-ver:pres, manquent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(conviction, nc-nom, conviction, [n-1]), ex_si(idéologique, adj-adj, idéologique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appuient, v-ver:pres, appuient, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(exclusivement, adv-adv, exclusivement, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(patronage, nc-nom, patronage, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(personnalisme, nc-nom, personnalisme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bases, nc-nom, bases, [n-1]), ex_si(régionales, adj-adj, régionales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(786, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émergé, vpp-ver:pper, émergé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Papouasie-Nouvelle-Guinée', npp-nam, 'Papouasie-Nouvelle-Guinée', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(787, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(assemblée, nc-nom, assemblée, [n-1]), ex_si(élue, vpp-ver:pper, élue, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1973, pro-num, 1973, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pangu', npp-nam, 'Pangu', [dr(0,n,n)-1]), ex_si('Pati', npp-nam, 'Pati', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Somare', npp-nam, 'Somare', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(formé, vpp-ver:pper, formé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(progrès, nc-nom, progrès, [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('Somare', npp-nam, 'Somare', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(788, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émergé, vpp-ver:pper, émergé, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(789, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Chirac', npp-nam, 'Chirac', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(informé, vpp-ver:pper, informé, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(reprise, nc-nom, reprise, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(précipiterait, v-ver:impf, précipiterait, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(boycott, nc-nom, boycott, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(790, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(pressions, nc-nom, pressions, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(exercées, vpp-ver:pper, exercées, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(791, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Fujimori', npp-nam, 'Fujimori', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1990, pro-num, 1990, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(réélu, vpp-ver:pper, réélu, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(constitution, nc-nom, constitution, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(792, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Fujimori', npp-nam, 'Fujimori', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réélu, vpp-ver:pper, réélu, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(793, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(juré, vpp-ver:pper, juré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(assassins, nc-nom, assassins, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Anna', npp-nam, 'Anna', [dr(0,np,np)-1]), ex_si('Politkovskaïa', npp-nam, 'Politkovskaïa', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(collègues, nc-nom, collègues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Novaïa', npp-nam, 'Novaïa', [dr(0,np,np)-1]), ex_si('Gazeta', npp-nam, 'Gazeta', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(engagés, vpp-ver:pper, engagés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dangers, nc-nom, dangers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(794, Result) :-
      prob_parse([ ex_si('Anna', npp-nam, 'Anna', [dr(0,np,np)-1]), ex_si('Politkovskaïa', npp-nam, 'Politkovskaïa', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassinée, vpp-ver:pper, assassinée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(795, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Jos', npp-nam, 'Jos', [dl(0,n,n)-1]), ex_si('Manuel', npp-nam, 'Manuel', [dr(0,np,np)-1]), ex_si('Duro', npp-nam, 'Duro', [dr(0,np,np)-1]), ex_si('Barroso', npp-nam, 'Barroso', [np-1]), ex_si(démissionne, v-ver:pres, démissionne, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(796, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidence, nc-nom, présidence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(1,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(approuve, v-ver:pres, approuve, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(797, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(portugais, adj-adj, portugais, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(798, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(rage, nc-nom, rage, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(virale, adj-adj, virale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mammifères, nc-nom, mammifères, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(transmet, v-ver:pres, transmet, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(principalement, adv-adv, principalement, [dl(1,s,s)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,n)-1]), ex_si(morsure, nc-nom, morsure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(799, Result) :-
      prob_parse([ ex_si('Chaque', det-pro:ind, 'Chaque', [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('7.000', det-num, '7.000', [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si('8.000', det-num, '8.000', [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(enragés, adj-adj, enragés, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(détectés, vpp-ver:pper, détectés, [dl(0,np,s_pass)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(90, det-num, 90, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(sauvages, adj-adj, sauvages, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(800, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(rage, nc-nom, rage, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(mortelle, adj-adj, mortelle, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(801, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rage, nc-nom, rage, [n-1]), ex_si(infecte, v-ver:pres, infecte, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(nerveux, adj-adj, nerveux, [dl(0,n,n)-1]), ex_si(central, adj-adj, central, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(provoquant, vpr-ver:ppre, provoquant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(encéphalopathie, nc-nom, encéphalopathie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(finalement, adv-adv, finalement, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(802, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(symptômes, nc-nom, symptômes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rage, nc-nom, rage, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(spécifiques, adj-adj, spécifiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(consistent, v-ver:pres, consistent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(fièvre, nc-nom, fièvre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(maux, nc-nom, maux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tête, nc-nom, tête, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(malaise, nc-nom, malaise, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(803, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(rage, nc-nom, rage, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(mortelle, adj-adj, mortelle, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(804, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(institut, nc-nom, institut, [n-1]), ex_si(archéologique, adj-adj, archéologique, [dl(0,n,n)-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fouilles, nc-nom, fouilles, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Mongolie', npp-nam, 'Mongolie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(momie, nc-nom, momie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pergélisol, nc-nom, pergélisol, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si('2.500', det-num, '2.500', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(805, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vierge, nc-nom, vierge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Altaï', npp-nam, 'Altaï', [n-1]), ex_si(déclenche, v-ver:pres, déclenche, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(importante, adj-adj, importante, [dr(0,n,n)-1]), ex_si(dispute, nc-nom, dispute, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(806, Result) :-
      prob_parse([ ex_si('Ronaldo', npp-nam, 'Ronaldo', [dr(0,np,np)-1]), ex_si('Luiz', npp-nam, 'Luiz', [dr(0,np,np)-1]), ex_si('Nazario', npp-nam, 'Nazario', [np-1]), ex_si(da, et-ver:futu, da, [dr(0,dl(0,np,np),np)-1]), ex_si('Silva', npp-nam, 'Silva', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(simplement, adv-adv, simplement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(attaquants, nc-nom, attaquants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(capable, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(laisser, vinf-ver:infi, laisser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(carreau, nc-nom, carreau, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(courses, nc-nom, courses, [n-1]), ex_si(fulgurantes, adj-adj, fulgurantes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(dribbles, nc-nom, dribbles, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,n,n)-1]), ex_si(joueur, nc-nom, joueur, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FIFA', npp-abr, 'FIFA', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(reprises, nc-nom, reprises, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(double, adj-adj, double, [dr(0,n,n)-1]), ex_si(vainqueur, nc-nom, vainqueur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coupe', nc-nam, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FIFA', npp-abr, 'FIFA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(807, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('FIFA', npp-abr, 'FIFA', [n-1]), ex_si(désigne, v-ver:pres, désigne, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(joueur, nc-nom, joueur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(1994, adj-num, 1994, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(808, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(excelle, v-ver:pres, excelle, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(automobile, nc-nom, automobile, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(top, nc-nom, top, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(domaines, nc-nom, domaines, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(809, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(richesse, nc-nom, richesse, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(métaux, nc-nom, métaux, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(revenus, nc-nom, revenus, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(crée, v-ver:pres, crée, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si(moyenne, adj-adj, moyenne, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(envie, nc-nom, envie, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(japonaises, adj-adj, japonaises, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(810, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(européennes, adj-adj, européennes, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(vendent, v-ver:pres, vendent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(811, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cosmonaute, nc-nom, cosmonaute, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Valery', npp-nam, 'Valery', [dl(0,n,n)-1]), ex_si('Polyakov', npp-nam, 'Polyakov', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(établi, vpp-ver:pper, établi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(séjour, nc-nom, séjour, [n-1]), ex_si(continu, adj-adj, continu, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(438, det-num, 438, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(812, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(détiennent, v-ver:pres, détiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(séjour, nc-nom, séjour, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(813, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(phoques, nc-nom, phoques, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tradition, nc-nom, tradition, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Norvège', npp-nam, 'Norvège', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diminué, vpp-ver:pper, diminué, [dl(0,np,s_ppart)-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moitié, nc-nom, moitié, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(quota, nc-nom, quota, [n-1]), ex_si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1.200', det-num, '1.200', [dr(0,np,n)-1]), ex_si(tués, nc-nom, tués, [n-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(0,n,n),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(814, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(phoque, nc-nom, phoque, [n-1]), ex_si(met, v-ver:pres, met, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(815, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si('Kofi', npp-nam, 'Kofi', [dl(0,n,n)-1]), ex_si('Annan', npp-nam, 'Annan', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Nane', npp-nam, 'Nane', [dr(0,np,np)-1]), ex_si('Annan', npp-nam, 'Annan', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accueillis, vpp-ver:pper, accueillis, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Fidel', npp-nam, 'Fidel', [dl(0,n,n)-1]), ex_si('Castro', npp-nam, 'Castro', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aéroport, nc-nom, aéroport, [n-1]), ex_si('Jose', npp-nam, 'Jose', [dl(0,n,n)-1]), ex_si('Marti', npp-nam, 'Marti', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Havane', npp-nam, 'Havane', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(816, Result) :-
      prob_parse([ ex_si('Castro', npp-nam, 'Castro', [np-1]), ex_si(visite, v-ver:pres, visite, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(817, Result) :-
      prob_parse([ ex_si(26, det-num, 26, [dr(0,np,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), ex_si('Début', nc-nom, 'Début', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si('Giulio', npp-nam, 'Giulio', [dl(0,n,n)-1]), ex_si('Andreotti', npp-nam, 'Andreotti', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mafia, nc-nom, mafia, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(818, Result) :-
      prob_parse([ ex_si('Andreotti', npp-nam, 'Andreotti', [np-1]), ex_si(collabore, v-ver:pres, collabore, [dr(0,dl(0,np,s),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mafia, nc-nom, mafia, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(819, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), ex_si('Début', nc-nom, 'Début', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si('Giulio', npp-nam, 'Giulio', [dl(0,n,n)-1]), ex_si('Andreotti', npp-nam, 'Andreotti', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mafia, nc-nom, mafia, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(820, Result) :-
      prob_parse([ ex_si('Andreotti', npp-nam, 'Andreotti', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(collusion, nc-nom, collusion, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mafia, nc-nom, mafia, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(821, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Asdi', npp-nam, 'Asdi', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prend, v-ver:pres, prend, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(décisions, nc-nom, décisions, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(baltes, adj-adj, baltes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(822, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(baltes, adj-adj, baltes, [dl(0,n,n)-1]), ex_si(rejoignent, v-ver:pres, rejoignent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(823, Result) :-
      prob_parse([ ex_si('Parlant', vpr-ver:ppre, 'Parlant', [dr(0,dl(0,np,s_ppres),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(papale, adj-adj, papale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Castro', npp-nam, 'Castro', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(disposition, nc-nom, disposition, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moitié, nc-nom, moitié, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(puissent, vs-ver:subp, puissent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(assister, vinf-ver:infi, assister, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(messes, nc-nom, messes, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si(célébrera, v-ver:futu, célébrera, [dr(0,dl(0,np,s),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Havane', npp-nam, 'Havane', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Santa', npp-nam, 'Santa', [dr(0,np,np)-1]), ex_si('Clara', npp-nam, 'Clara', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Camaguey', npp-nam, 'Camaguey', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Santiago', npp-nam, 'Santiago', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Cuba', npp-nam, 'Cuba', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(824, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(ecclésiastiques, adj-adj, ecclésiastiques, [dl(0,n,n)-1]), ex_si(cubaines, adj-adj, cubaines, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(craint, vpp-ver:pper, craint, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(assez, adv-adv, assez, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(825, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(déplacements, nc-nom, déplacements, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(affectés, vpp-ver:pper, affectés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(préoccupations, nc-nom, préoccupations, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(826, Result) :-
      prob_parse([ ex_si('Stony', npp-nam, 'Stony', [dr(0,np,np)-1]), ex_si('Brook', npp-nam, 'Brook', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('NY', npp-abr, 'NY', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(1, adj-num, 1, [dr(0,np,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(10, adj-num, 10, [n-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si(02, pro-num, 02, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,s),s)-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(paléolithique, adj-adj, paléolithique, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grotte, nc-nom, grotte, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(amène, v-ver:pres, amène, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(envisager, vinf-ver:infi, envisager, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vision, nc-nom, vision, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('euro-centrée', adj-adj, 'euro-centrée', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(origines, nc-nom, origines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(considère, v-ver:pres, considère, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(comportement, nc-nom, comportement, [n-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(827, Result) :-
      prob_parse([ ex_si('Art', nc-nam, 'Art', [n-1]), ex_si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(828, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(fort, adj-adj, fort, [dr(0,n,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(apporté, vpp-ver:pper, apporté, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(options, nc-nom, options, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conservation, nc-nom, conservation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recyclage, nc-nom, recyclage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réduction, nc-nom, réduction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(stockage, nc-nom, stockage, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(barrages, nc-nom, barrages, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rejetée, vpp-ver:pper, rejetée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(motif, nc-nom, motif, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(suffisamment, adv-adv, suffisamment, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(remplir, vinf-ver:infi, remplir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(barrage, nc-nom, barrage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(829, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(barrages, nc-nom, barrages, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(situations, nc-nom, situations, [n-1]), ex_si(dangereuses, adj-adj, dangereuses, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(830, Result) :-
      prob_parse([ ex_si('Merci', vimp-ver:impe, 'Merci', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(trente, adj-num, trente, [dr(0,n,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(répondu, vpp-ver:pper, répondu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ma, det-det:pos, ma, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(congé, nc-nom, congé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maternité, nc-nom, maternité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(831, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(clair, adj-adj, clair, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(congé, nc-nom, congé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maternité, nc-nom, maternité, [n-1]), ex_si(offert, vpp-ver:pper, offert, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(enseignantes, nc-nom, enseignantes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si(varie, v-ver:pres, varie, [dl(0,np,s)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(832, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(congé, nc-nom, congé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maternité, nc-nom, maternité, [n-1]), ex_si(varie, v-ver:pres, varie, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(833, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si(survenu, vpp-ver:pper, survenu, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1986, adj-num, 1986, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entraîné, vpp-ver:pper, entraîné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(834, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(immédiats, adj-adj, immédiats, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(charges, nc-nom, charges, [n-1]), ex_si(consécutives, adj-adj, consécutives, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(êtres, nc-nom, êtres, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(longues, adj-adj, longues, [dr(0,n,n)-1]), ex_si(distances, nc-nom, distances, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(835, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sosnovyi', npp-nam, 'Sosnovyi', [dr(0,np,np)-1]), ex_si('Bor', npp-nam, 'Bor', [np-1]), ex_si(subit, v-ver:pres, subit, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(arrêt, nc-nom, arrêt, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(836, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(stipulait, v-ver:impf, stipulait, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transition, nc-nom, transition, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(baltes, adj-adj, baltes, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(devait, v-ver:impf, devait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(durer, vinf-ver:infi, durer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1999, adj-num, 1999, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(837, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agissait, v-ver:impf, agissait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(courte, adj-adj, courte, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(1,s,s),s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(périodes, nc-nom, périodes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transition, nc-nom, transition, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(déclarées, vpp-ver:pper, déclarées, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(838, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Estonie', npp-nam, 'Estonie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transition, nc-nom, transition, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transition, nc-nom, transition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),np)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),np))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),np)))))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transition, nc-nom, transition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(839, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(baltes, adj-adj, baltes, [dl(0,n,n)-1]), ex_si(rejoignent, v-ver:pres, rejoignent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(840, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tabloïds, nc-nom, tabloïds, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dépeint, vpp-ver:pper, dépeint, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si('Nicholas', npp-nam, 'Nicholas', [dr(0,np,np)-1]), ex_si('Leeson', npp-nam, 'Leeson', [np-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(méchant, nc-nom, méchant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si(ouvrière, adj-adj, ouvrière, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(tomber, vinf-ver:infi, tomber, [dl(0,np,s_inf)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(seul, adj-adj, seul, [dl(0,np,np)-1]), ex_si('Barings', npp-nam, 'Barings', [dl(0,np,np)-1]), ex_si('PLC', npp-abr, 'PLC', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(londonienne, adj-adj, londonienne, [dl(0,n,n)-1]), ex_si(vieille, adj-adj, vieille, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(233, det-num, 233, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contribué, vpp-ver:pper, contribué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(financer, vinf-ver:infi, financer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si(napoléoniennes, adj-adj, napoléoniennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(841, Result) :-
      prob_parse([ ex_si('Barings', npp-nam, 'Barings', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(842, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(événements, nc-nom, événements, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Barings', npp-nam, 'Barings', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(démonstration, nc-nom, démonstration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(gérer, vinf-ver:infi, gérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(dérivés, vpp-adj, dérivés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(843, Result) :-
      prob_parse([ ex_si('Barings', npp-nam, 'Barings', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(844, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(constaté, vpp-ver:pper, constaté, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si('Australiens', nc-nam, 'Australiens', [n-1]), ex_si(subissent, v-ver:pres, subissent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(discriminations, nc-nom, discriminations, [n-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(gouvernementaux, adj-adj, gouvernementaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(pénaux, adj-adj, pénaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(juridiques, adj-adj, juridiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(mentale, adj-adj, mentale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(race, nc-nom, race, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(couleur, nc-nom, couleur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(peau, nc-nom, peau, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(sexualité, nc-nom, sexualité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(formation, nc-nom, formation, [n-1]), ex_si(sexuelle, adj-adj, sexuelle, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réfugié, nc-nom, réfugié, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(845, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(mentale, adj-adj, mentale, [dl(0,n,n)-1]), ex_si(augmentent, v-ver:pres, augmentent, [dl(0,np,s)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(846, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dayton', npp-nam, 'Dayton', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bosnie-Herzégovine', npp-nam, 'Bosnie-Herzégovine', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(majeur, adj-adj, majeur, [dl(0,n,n)-1]), ex_si(adopté, vpp-ver:pper, adopté, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pékin', npp-nam, 'Pékin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(847, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dayton', npp-nam, 'Dayton', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(formulé, vpp-ver:pper, formulé, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Bosnie', npp-nam, 'Bosnie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(848, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vitesse, nc-nom, vitesse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tourbillon, nc-nom, tourbillon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(chauds, adj-adj, chauds, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(orbite, nc-nom, orbite, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(trou, nc-nom, trou, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(849, Result) :-
      prob_parse([ ex_si('Hubulle', npp-nam, 'Hubulle', [np-1]), ex_si(découvre, v-ver:pres, découvre, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(850, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(guerrier, nc-nom, guerrier, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(pense, v-ver:pres, pense, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, adj-adj, mort, [dl(0,np,s_ppart)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('2.000', det-num, '2.000', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(aider, vinf-ver:infi, aider, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(archéologues, nc-nom, archéologues, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(localiser, vinf-ver:infi, localiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emplacement, nc-nom, emplacement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(saint, adj-adj, saint, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(851, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(guerrier, nc-nom, guerrier, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(âgé, adj-adj, âgé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(lance, nc-nom, lance, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(épée, nc-nom, épée, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(ceinture, nc-nom, ceinture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(fourreau, nc-nom, fourreau, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(stupéfié, vpp-ver:pper, stupéfié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(archéologues, nc-nom, archéologues, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(cercueil, nc-nom, cercueil, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pierre, nc-nom, pierre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(852, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vierge, nc-nom, vierge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Altaï', npp-nam, 'Altaï', [n-1]), ex_si(déclenche, v-ver:pres, déclenche, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(importante, adj-adj, importante, [dr(0,n,n)-1]), ex_si(dispute, nc-nom, dispute, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(853, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(delta, nc-nom, delta, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ebre', npp-nam, 'Ebre', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(delta, nc-nom, delta, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ebro', npp-nam, 'Ebro', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(humide, adj-adj, humide, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Catalogne', npp-nam, 'Catalogne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(854, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(habitat, nc-nom, habitat, [n-1]), ex_si(aquatique, adj-adj, aquatique, [dl(0,n,n)-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Doana', npp-nam, 'Doana', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(855, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(delta, nc-nom, delta, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(importance, nc-nom, importance, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(végétales, adj-adj, végétales, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(856, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(delta, nc-nom, delta, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ebre', npp-nam, 'Ebre', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agriculture, nc-nom, agriculture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(857, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(écologiques, adj-adj, écologiques, [dl(0,n,n)-1]), ex_si(proviennent, v-ver:pres, proviennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(saumâtres, adj-adj, saumâtres, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(humides, adj-adj, humides, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(naturelles, adj-adj, naturelles, [dl(0,n,n)-1]), ex_si(côtières, adj-adj, côtières, [dl(0,n,n)-1]), ex_si(productives, adj-adj, productives, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(souvent, adv-adv, souvent, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(alimentées, vpp-ver:pper, alimentées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(irrigation, nc-nom, irrigation, [n-1]), ex_si(riches, adj-adj, riches, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp_de,n)-1]), ex_si(nutriments, nc-nom, nutriments, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parfois, adv-adv, parfois, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(issues, vpp-ver:pper, issues, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(riziculture, nc-nom, riziculture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(858, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(delta, nc-nom, delta, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ebre', npp-nam, 'Ebre', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(humides, adj-adj, humides, [dl(0,n,n)-1]), ex_si(souffrent, v-ver:pres, souffrent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(similaires, adj-adj, similaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvent, v-ver:pres, trouvent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(marge, nc-nom, marge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(agricole, adj-adj, agricole, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(delta, nc-nom, delta, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(859, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(delta, nc-nom, delta, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ebre', npp-nam, 'Ebre', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agriculture, nc-nom, agriculture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(860, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(huitièmes, nc-num, huitièmes, [dr(0,n,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(paralympiques, adj-adj, paralympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dérouler, vinf-ver:infi, dérouler, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Utah', npp-nam, 'Utah', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(861, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déroulent, v-ver:pres, déroulent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(hors, p-prp, hors, [dr(0,pp,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(paralympiques, adj-adj, paralympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1998, pro-num, 1998, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Nagano', npp-nam, 'Nagano', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(862, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(organisation, nc-nom, organisation, [n-1]), ex_si(combiné, vpp-ver:pper, combiné, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(paralympiques, adj-adj, paralympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(863, Result) :-
      prob_parse([ ex_si('Dix', det-num, 'Dix', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(seulement, adv-adv, seulement, [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(paralympiques, adj-adj, paralympiques, [dl(0,n,n)-1]), ex_si(débuteront, v-ver:futu, débuteront, [dl(0,np,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(endroit, nc-nom, endroit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(864, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(jeux, nc-nom, jeux, [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(865, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(restes, nc-nom, restes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dinosaures, nc-nom, dinosaures, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud-Est', npp-nam, 'Sud-Est', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(trouvés, vpp-ver:pper, trouvés, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Laos', npp-nam, 'Laos', [n-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), ex_si(1936, pro-num, 1936, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(événements, nc-nom, événements, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1980, adj-num, 1980, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(866, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fortement, adv-adv, fortement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(végétalisée, vpp-ver:pper, végétalisée, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), ex_si(difficile, adj-adj, difficile, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(explorer, vinf-ver:infi, explorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(promet, v-ver:pres, promet, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(découvertes, nc-nom, découvertes, [n-1]), ex_si(importantes, adj-adj, importantes, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(867, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fourni, vpp-ver:pper, fourni, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(meilleures, adj-adj, meilleures, [dr(0,n,n)-1]), ex_si(découvertes, nc-nom, découvertes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Khorat', npp-nam, 'Khorat', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(couvre, v-ver:pres, couvre, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(allant, vpr-ver:ppre, allant, [dr(0,dl(0,n,n),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Trias', npp-nam, 'Trias', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,pp_de,pp_a),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Crétacé', npp-nam, 'Crétacé', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(868, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(restes, nc-nom, restes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dinosaures, nc-nom, dinosaures, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverts, vpp-ver:pper, découverts, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(869, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(semestre, nc-nom, semestre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1997, pro-num, 1997, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(progrès, nc-nom, progrès, [n-1]), ex_si(considérables, adj-adj, considérables, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Timor', npp-nam, 'Timor', [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(870, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(forte, adj-adj, forte, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Timor', npp-nam, 'Timor', [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(critiquant, vpr-ver:ppre, critiquant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(indonésien, adj-adj, indonésien, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(manque, nc-nom, manque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(progrès, nc-nom, progrès, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Timor', npp-nam, 'Timor', [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(concrètes, adj-adj, concrètes, [dl(0,n,n)-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prises, vpp-ver:pper, prises, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(remédier, vinf-ver:infi, remédier, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(violations, nc-nom, violations, [n-1]), ex_si(continues, adj-adj, continues, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(871, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(guérillas, nc-nom, guérillas, [n-1]), ex_si(augmentent, v-ver:pres, augmentent, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Timor', npp-nam, 'Timor', [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(872, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(exceptionnelles, adj-adj, exceptionnelles, [dl(0,n,n)-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(étendue, vpp-ver:pper, étendue, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Noire', npp-nam, 'Noire', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(873, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(élevées, vpp-ver:pper, élevées, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('9,2', det-num, '9,2', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('2,9', det-num, '2,9', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('2,3', det-num, '2,3', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(874, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si(dépasse, v-ver:pres, dépasse, [dr(0,dl(0,np,s),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(euros, nc-nom, euros, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(875, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si(importantes, adj-adj, importantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(876, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chemise, nc-nom, chemise, [n-1]), ex_si(fantôme, adj-adj, fantôme, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(donnée, vpp-ver:pper, donnée, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Glasgow', npp-nam, 'Glasgow', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1892, pro-num, 1892, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(interprète, nc-nom, interprète, [n-1]), ex_si(indien, adj-adj, indien, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(restée, vpp-ver:pper, restée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(attraction, nc-nom, attraction, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(visiteurs, nc-nom, visiteurs, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(877, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(querelle, nc-nom, querelle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(propriété, nc-nom, propriété, [n-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(descendants, nc-nom, descendants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tribu, nc-nom, tribu, [n-1]), ex_si(sioux, adj-adj, sioux, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(restitution, nc-nom, restitution, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(878, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(survivants, nc-nom, survivants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wounded', npp-nam, 'Wounded', [dr(0,np,np)-1]), ex_si('Knee', npp-nam, 'Knee', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Lakota', npp-nam, 'Lakota', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tribu, nc-nom, tribu, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(879, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(chemise, nc-nom, chemise, [n-1]), ex_si(fantôme, adj-adj, fantôme, [dl(0,n,n)-1]), ex_si(sioux, nc-adj, sioux, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rendue, vpp-ver:pper, rendue, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(880, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(bijoux, nc-nom, bijoux, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(découverts, vpp-ver:pper, découverts, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tombe, nc-nom, tombe, [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(macédonienne, adj-adj, macédonienne, [dl(0,n,n)-1]), ex_si(intacte, adj-adj, intacte, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1977, pro-num, 1977, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(exquis, adj-adj, exquis, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(881, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(exposition, nc-nom, exposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si(archéologique, adj-adj, archéologique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Thessalonique', npp-nam, 'Thessalonique', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étiquette, nc-nom, étiquette, [n-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(provient, v-ver:pres, provient, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tombe, nc-nom, tombe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Philippe', npp-nam, 'Philippe', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),n)-1]), ex_si('Grand', npp-nam, 'Grand', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(882, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(tombe, nc-nom, tombe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),n)-1]), ex_si('Grand', npp-nam, 'Grand', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(883, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(large, adj-adj, large, [dr(0,n,n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(désarmement, nc-nom, désarmement, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(attend, v-ver:pres, attend, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(boycott, nc-nom, boycott, [n-1]), ex_si(fasse, vs-ver:subp, fasse, [dr(0,dl(0,np,s),np)-1]), ex_si(pression, nc-nom, pression, [np-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(françaises, adj-adj, françaises, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(exercent, v-ver:pres, exercent, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(encouragent, v-ver:pres, encouragent, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si('Chirac', npp-nam, 'Chirac', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(884, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(pression, nc-nom, pression, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(exercée, vpp-ver:pper, exercée, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(885, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(quantités, nc-nom, quantités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dioxyde, nc-nom, dioxyde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CO2', nc-abr, 'CO2', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('GES', nc-abr, 'GES', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si(principale, adj-adj, principale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(composante, nc-nom, composante, [n-1]), ex_si(anthropique, adj-adj, anthropique, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(886, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(modifie, v-ver:pres, modifie, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(887, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Industrial', npp-nam, 'Industrial', [dr(0,n,n)-1]), ex_si(and, et-kon, and, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si('Commercial', npp-nam, 'Commercial', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), ex_si('China', npp-nam, 'China', [n-1]), ex_si('Ltd', npp-abr, 'Ltd', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(levé, vpp-ver:pper, levé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('19,07', det-num, '19,07', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(fixé, vpp-ver:pper, fixé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(introduction, nc-nom, introduction, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(bourse, nc-nom, bourse, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('3,07', det-num, '3,07', [dr(0,np,n)-1]), ex_si('HK$', nc-abr, 'HK$', [n-1]), ex_si('(', ponct-pun, '(', [dl(0,n,n)-1]), ex_si(39, det-num, 39, [dr(0,dl(0,np,np),np)-1]), ex_si(cents, nc-nom, cents, [dr(0,np,n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [let-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,np),np)-1]), ex_si(limite, nc-nom, limite, [dr(0,np,n)-1]), ex_si(supérieure, adj-adj, supérieure, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(sa, det-det:pos, sa, [dr(0,dl(0,n,n),np)-1]), ex_si(fourchette, nc-nom, fourchette, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(prix, nc-nom, prix, [dr(0,dl(0,n,n),n)-1]), ex_si(indicative, adj-adj, indicative, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [let-1]), ex_si(devenir, vinf-ver:infi, devenir, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(introduction, nc-nom, introduction, [dr(0,n,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(bourse, nc-nom, bourse, [dr(0,dl(0,n,n),n)-1]), ex_si(jamais, adv-adv, jamais, [n-1]), ex_si(réalisée, vpp-ver:pper, réalisée, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(monde, nc-nom, monde, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(888, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(japonaises, adj-adj, japonaises, [dl(0,n,n)-1]), ex_si(crée, v-ver:pres, crée, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(889, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Comité', nc-nom, 'Comité', [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(olympique, adj-adj, olympique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dépistage, nc-nom, dépistage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(drogues, nc-nom, drogues, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dopage, nc-nom, dopage, [n-1]), ex_si('Merlene', npp-nam, 'Merlene', [dl(0,n,n)-1]), ex_si('Ottey', npp-nam, 'Ottey', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(890, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,dr(0,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instance, nc-nom, instance, [n-1]), ex_si(dirigeante, adj-adj, dirigeante, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(athlétisme, nc-nom, athlétisme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('IAAF', npp-abr, 'IAAF', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(blanchi, vpp-ver:pper, blanchi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Ottey', npp-nam, 'Ottey', [np-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(stéroïdes, nc-nom, stéroïdes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(levé, vpp-ver:pper, levé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(suspension, nc-nom, suspension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),s_q)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(arbitrage, nc-nom, arbitrage, [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(accrédité, vpp-ver:pper, accrédité, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CIO', npp-abr, 'CIO', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Lausanne', npp-nam, 'Lausanne', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(testé, vpp-ver:pper, testé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(incorrecte, adj-adj, incorrecte, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échantillon, nc-nom, échantillon, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urine, nc-nom, urine, [dr(0,dl(0,n,n),n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('Ottey', npp-nam, 'Ottey', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(891, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(sportives, nc-nom, sportives, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusées, vpp-ver:pper, accusées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(dopage, nc-nom, dopage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(892, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(née, vpp-ver:pper, née, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(traders, nc-nom, traders, [n-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Singapour', npp-nam, 'Singapour', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), ex_si('Leeson', npp-nam, 'Leeson', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(amassé, vpp-ver:pper, amassé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(600, det-num, 600, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(700, det-num, 700, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(consciente, adj-adj, consciente, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(893, Result) :-
      prob_parse([ ex_si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), ex_si('Leeson', npp-nam, 'Leeson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si('PLC', npp-abr, 'PLC', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(894, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secteur, nc-nom, secteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(causes, nc-nom, causes, [n-1]), ex_si(typiques, adj-adj, typiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conflits, nc-nom, conflits, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alitalia', npp-nam, 'Alitalia', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(phare, adj-adj, phare, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('IT0404304F', npp-nam, 'IT0404304F', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(facteurs, nc-nom, facteurs, [n-1]), ex_si(spécifiques, adj-adj, spécifiques, [dl(0,n,n)-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prestation, nc-nom, prestation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(';', ponct-pun, ';', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fragmentation, nc-nom, fragmentation, [n-1]), ex_si(marquée, vpp-ver:pper, marquée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(représentation, nc-nom, représentation, [n-1]), ex_si(syndicale, adj-adj, syndicale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(895, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(assistants, nc-nom, assistants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(italiens, adj-adj, italiens, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mettent, v-ver:pres, mettent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(grève, nc-nom, grève, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(896, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(approuver, vinf-ver:infi, approuver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(descendants, nc-nom, descendants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(exilée, vpp-ver:pper, exilée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rentrer, vinf-ver:infi, rentrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(chez, p-prp, chez, [dr(0,pp,np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(897, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(bannie, vpp-ver:pper, bannie, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(collusion, nc-nom, collusion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(fasciste, adj-adj, fasciste, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(introduites, vpp-ver:pper, introduites, [dl(0,np,s_pass)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(898, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(rentre, v-ver:pres, rentre, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(899, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(notes, nc-nom, notes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pochette, nc-nom, pochette, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CD', nc-abr, 'CD', [n-1]), ex_si(laissent, v-ver:pres, laissent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(supposer, vinf-ver:infi, supposer, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Farrakhan', npp-nam, 'Farrakhan', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(sélections, nc-nom, sélections, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Is', et-pro:per, 'Is', [dr(0,np,np)-1]), ex_si('She', npp-nam, 'She', [dr(0,np,np)-1]), ex_si('Is', npp-nam, 'Is', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(or, et-kon, or, [dr(0,dl(0,np,np),np)-1]), ex_si('Is', npp-nam, 'Is', [dr(0,np,np)-1]), ex_si('She', npp-nam, 'She', [dr(0,np,np)-1]), ex_si('Ain\'t', npp-nam, 'Ain\'t', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,np)-1]), ex_si('Don\'t', npp-nam, 'Don\'t', [dr(0,np,np)-1]), ex_si('Touch', npp-nam, 'Touch', [dr(0,np,np)-1]), ex_si('Me', et-nam, 'Me', [dr(0,np,np)-1]), ex_si('Nylon', npp-nam, 'Nylon', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,np)-1]), ex_si('Female', npp-nam, 'Female', [np-1]), ex_si('Boxer', npp-nam, 'Boxer', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(900, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(intéressante, adj-adj, intéressante, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(sélections, nc-nom, sélections, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(numéro, nc-nom, numéro, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(actualité, nc-nom, actualité, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Christie', npp-nam, 'Christie', [dr(0,np,np)-1]), ex_si('Jorgensen', npp-nam, 'Jorgensen', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sexe, nc-nom, sexe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(901, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(transexuelles, adj-adj, transexuelles, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(depuis, p-prp, depuis, [dl(1,s,s)-1]), ex_si(devenues, vpp-ver:pper, devenues, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(courantes, adj-adj, courantes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(bénéficié, vpp-ver:pper, bénéficié, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(902, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sexe, nc-nom, sexe, [n-1]), ex_si(deviennent, v-ver:pres, deviennent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(courantes, adj-adj, courantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(903, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(long, adj-adj, long, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(cesse, v-ver:pres, cesse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(allonger, vinf-ver:infi, allonger, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(904, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(célébration, nc-nom, célébration, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('25e', adj-num, '25e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(duré, vpp-ver:pper, duré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('50e', nc-num, '50e', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étalera, v-ver:futu, étalera, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(905, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('50e', adj-num, '50e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(dure, v-ver:pres, dure, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(906, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Salyuts', nc-nam, 'Salyuts', [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenue, vpp-ver:pper, soutenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(63, det-num, 63, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(907, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Salyuts', nc-nam, 'Salyuts', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,np,n)-1]), ex_si(génération, nc-nom, génération, [n-1]), ex_si(effectueraient, v-ver:cond, effectueraient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(missions, nc-nom, missions, [n-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(longues, adj-adj, longues, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(réapprovisionnés, vpp-ver:pper, réapprovisionnés, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(908, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(détiennent, v-ver:pres, détiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(séjour, nc-nom, séjour, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(909, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si('Salyuts', nc-nam, 'Salyuts', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenue, vpp-ver:pper, soutenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(63, det-num, 63, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(910, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Salyuts', nc-nam, 'Salyuts', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,np,n)-1]), ex_si(génération, nc-nom, génération, [n-1]), ex_si(effectueraient, v-ver:cond, effectueraient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(missions, nc-nom, missions, [n-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(longues, adj-adj, longues, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(réapprovisionnés, vpp-ver:pper, réapprovisionnés, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(par, p-prp, par, [dr(0,dr(0,s,s),n)-1]), ex_si(conséquent, nc-nom, conséquent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ferry, nc-nom, ferry, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ravitaillement, nc-nom, ravitaillement, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(obligatoire, adj-adj, obligatoire, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(maintenir, vinf-ver:infi, maintenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Salyut', npp-nam, 'Salyut', [n-1]), ex_si(pleinement, adv-adv, pleinement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(opérationnel, adj-adj, opérationnel, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('40.000', det-num, '40.000', [dr(0,np,n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carburant, nc-nom, carburant, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nourriture, nc-nom, nourriture, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vêtements, nc-nom, vêtements, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(911, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Russes', nc-nam, 'Russes', [n-1]), ex_si(détiennent, v-ver:pres, détiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(séjour, nc-nom, séjour, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(912, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliardaires, nc-nom, milliardaires, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(102, det-num, 102, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(793, pro-num, 793, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chiffre, nc-nom, chiffre, [n-1]), ex_si(record, nc-nom, record, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(boursiers, adj-adj, boursiers, [dl(0,n,n)-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(913, Result) :-
      prob_parse([ ex_si('Leur', det-det:pos, 'Leur', [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(nette, adj-adj, nette, [dl(0,n,n)-1]), ex_si(totale, adj-adj, totale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bondi, vpp-ver:pper, bondi, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(18, det-num, 18, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('2,6', det-num, '2,6', [dr(0,np,n)-1]), ex_si(billions, nc-nom, billions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(914, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliardaires, nc-nom, milliardaires, [n-1]), ex_si(augmente, v-ver:pres, augmente, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(915, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(principales, adj-adj, principales, [dr(0,n,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(institutionnalisées, vpp-ver:pper, institutionnalisées, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(reconnaissance, nc-nom, reconnaissance, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apporté, vpp-ver:pper, apporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(contribution, nc-nom, contribution, [n-1]), ex_si(significative, adj-adj, significative, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(domaines, nc-nom, domaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chimie, nc-nom, chimie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(médecine, nc-nom, médecine, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,pp,pp),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(916, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(choisis, vpp-ver:pper, choisis, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(917, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chiffres, nc-nom, chiffres, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(récents, adj-adj, récents, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('UNAids', npp-abr, 'UNAids', [np-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si(divisé, vpp-ver:pper, divisé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(918, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('0,5', det-num, '0,5', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(infectée, vpp-ver:pper, infectée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('VIH', nc-abr, 'VIH', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(919, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(subsaharienne, adj-adj, subsaharienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(chiffre, nc-nom, chiffre, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('8,8', det-num, '8,8', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(monte, v-ver:pres, monte, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(920, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),n)-1]), ex_si('Botswana', npp-nam, 'Botswana', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('Lesotho', npp-nam, 'Lesotho', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Swaziland', npp-nam, 'Swaziland', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Zimbabwe', npp-nam, 'Zimbabwe', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(trois, pro-num, trois, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(séropositif, adj-adj, séropositif, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(921, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sida, nc-abr, sida, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(propage, v-ver:pres, propage, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(922, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mystère, nc-nom, mystère, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tombeau, nc-nom, tombeau, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),n)-1]), ex_si('Grand', npp-nam, 'Grand', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(percé, vpp-ver:pper, percé, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(localiser, vinf-ver:infi, localiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sépulture, nc-nom, sépulture, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [np-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(impossible, adj-adj, impossible, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(archéologues, nc-nom, archéologues, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(923, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tombeau, nc-nom, tombeau, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),n)-1]), ex_si('Grand', npp-nam, 'Grand', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(924, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Comité', nc-nom, 'Comité', [n-1]), ex_si('Nobel', adj-adj, 'Nobel', [dl(0,n,n)-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(chargé, vpp-ver:pper, chargé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sélection, nc-nom, sélection, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(choix, nc-nom, choix, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(lauréats, nc-nom, lauréats, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(925, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composé, vpp-ver:pper, composé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(nommés, vpp-ver:pper, nommés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Storting', npp-nam, 'Storting', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(926, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(décerné, vpp-ver:pper, décerné, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Oslo', npp-nam, 'Oslo', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Norvège', npp-nam, 'Norvège', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Stockholm', npp-nam, 'Stockholm', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Suède', npp-nam, 'Suède', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(927, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(choisis, vpp-ver:pper, choisis, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(928, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(style, nc-nom, style, [n-1]), ex_si(optimal, adj-adj, optimal, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(barrage, nc-nom, barrage, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(spécifique, adj-adj, spécifique, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(macroprojet, nc-nom, macroprojet, [n-1]), ex_si(particulier, adj-adj, particulier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nature, nc-nom, nature, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(chantier, nc-nom, chantier, [n-1]), ex_si(géophysique, adj-adj, géophysique, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Anon', npp-nam, 'Anon', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(929, Result) :-
      prob_parse([ ex_si(',', ponct-pun, ',', [let-1]), ex_si(2005, pro-num, 2005, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(incertitude, nc-nom, incertitude, [n-1]), ex_si(sociale, adj-adj, sociale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expérience, nc-nom, expérience, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(organismes, nc-nom, organismes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gestion, nc-nom, gestion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(complexités, nc-nom, complexités, [n-1]), ex_si(opérationnelles, adj-adj, opérationnelles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(types, nc-nom, types, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nationalités, nc-nom, nationalités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(géographie, nc-nom, géographie, [n-1]), ex_si(situationnelle, adj-adj, situationnelle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(macroprojet, nc-nom, macroprojet, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(logistique, nc-nom, logistique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(matériaux, nc-nom, matériaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(composition, nc-nom, composition, [n-1]), ex_si(requis, vpp-ver:pper, requis, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(930, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(barrages, nc-nom, barrages, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éviter, vinf-ver:infi, éviter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(situations, nc-nom, situations, [n-1]), ex_si(mettant, vpr-ver:ppre, mettant, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(931, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(orthographique, adj-adj, orthographique, [dl(0,n,n)-1]), ex_si(initiale, adj-adj, initiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(visait, v-ver:impf, visait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(harmoniser, vinf-ver:infi, harmoniser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(règles, nc-nom, règles, [n-1]), ex_si(orthographiques, adj-adj, orthographiques, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(germanophones, adj-adj, germanophones, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(avérée, vpp-ver:pper, avérée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(embarras, nc-nom, embarras, [n-1]), ex_si(majeur, adj-adj, majeur, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(voire, cc-kon, voire, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(échec, nc-nom, échec, [n-1]), ex_si(total, adj-adj, total, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(932, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(orthographe, nc-nom, orthographe, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(approuvée, vpp-ver:pper, approuvée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(germanophones, adj-adj, germanophones, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(933, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(présentés, vpp-ver:pper, présentés, [dl(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si(connaissent, v-ver:pres, connaissent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vieillissement, nc-nom, vieillissement, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(entraînera, v-ver:futu, entraînera, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(revenus, nc-nom, revenus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prochaines, adj-adj, prochaines, [dr(0,n,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(934, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(adoptés, vpp-ver:pper, adoptés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(difficulté, nc-nom, difficulté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(935, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(importance, nc-nom, importance, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(936, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(forts, adj-adj, forts, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(favorisés, vpp-ver:pper, favorisés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(méthode, nc-nom, méthode, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hondt', npp-nam, 'Hondt', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(représentation, nc-nom, représentation, [n-1]), ex_si(proportionnelle, adj-adj, proportionnelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(subventions, nc-nom, subventions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(937, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparus, vpp-ver:pper, apparus, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(938, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(axée, vpp-ver:pper, axée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éradication, nc-nom, éradication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(coca, nc-nom, coca, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(territoires, nc-nom, territoires, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pérou', npp-nam, 'Pérou', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bolivie', npp-nam, 'Bolivie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(939, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1996, adj-num, 1996, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(2000, adj-num, 2000, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(ressources, nc-nom, ressources, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Initiative', nc-nam, 'Initiative', [n-1]), ex_si(andine, adj-adj, andine, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fumigations, nc-nom, fumigations, [n-1]), ex_si(aériennes, adj-adj, aériennes, [dl(0,n,n)-1]), ex_si(intenses, adj-adj, intenses, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(productrices, adj-adj, productrices, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coca, nc-nom, coca, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(940, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Pérou', npp-nam, 'Pérou', [n-1]), ex_si(débat, nc-nom, débat, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(frontalière, adj-adj, frontalière, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Equateur', npp-nam, 'Equateur', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(941, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(présidents, nc-nom, présidents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Équateur', npp-nam, 'Équateur', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pérou', npp-nam, 'Pérou', [n-1]), ex_si(disent, v-ver:pres, disent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(travailler, vinf-ver:infi, travailler, [dl(0,np,s_inf)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(pacifique, adj-adj, pacifique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(frontalier, adj-adj, frontalier, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(942, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Pérou', npp-nam, 'Pérou', [n-1]), ex_si(débat, nc-nom, débat, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(frontalière, adj-adj, frontalière, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Équateur', npp-nam, 'Équateur', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(943, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tombes, nc-nom, tombes, [n-1]), ex_si(royales, adj-adj, royales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vergina', npp-nam, 'Vergina', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(identifiées, vpp-ver:pper, identifiées, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1930, adj-num, 1930, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Aigai', npp-nam, 'Aigai', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(944, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(tombe, nc-nom, tombe, [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(identifiée, vpp-ver:pper, identifiée, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,n,n),np)-1]), ex_si('peut-être', adv-adv, 'peut-être', [dl(1,s,s)-1]), ex_si('Philippe', npp-nam, 'Philippe', [np-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Macédoine', npp-nam, 'Macédoine', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),n)-1]), ex_si('Grand', npp-nam, 'Grand', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(trouvée, vpp-ver:pper, trouvée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1977, pro-num, 1977, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Manolis', npp-nam, 'Manolis', [dr(0,np,np)-1]), ex_si('Andronikos', npp-nam, 'Andronikos', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(945, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(tombe, nc-nom, tombe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandre', npp-nam, 'Alexandre', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),n)-1]), ex_si('Grand', npp-nam, 'Grand', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(946, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(2002, adj-num, 2002, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dérouleront, v-ver:futu, dérouleront, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2002, adj-num, 2002, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(947, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(paralympiques, adj-adj, paralympiques, [dl(0,n,n)-1]), ex_si(auront, v-ver:futu, auront, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2002, adj-num, 2002, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(948, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(jeux, nc-nom, jeux, [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(949, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chemise, nc-nom, chemise, [n-1]), ex_si(fantôme, adj-adj, fantôme, [dl(0,n,n)-1]), ex_si(sioux, nc-nom, sioux, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si('Kelvingrove', npp-nam, 'Kelvingrove', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Glasgow', npp-nam, 'Glasgow', [np-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(rapatriée, vpp-ver:pper, rapatriée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(950, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(chemise, nc-nom, chemise, [n-1]), ex_si(fantôme, adj-adj, fantôme, [dl(0,n,n)-1]), ex_si(sioux, nc-nom, sioux, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rendue, vpp-ver:pper, rendue, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(951, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rentré, vpp-ver:pper, rentré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(patrie, nc-nom, patrie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(mettant, vpr-ver:ppre, mettant, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('demi-siècle', nc-nom, 'demi-siècle', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exil, nc-nom, exil, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(952, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atterri, vpp-ver:pper, atterri, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(aéroport, nc-nom, aéroport, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rome', npp-nam, 'Rome', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(privé, adj-adj, privé, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(dirigés, vpp-ver:pper, dirigés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(immédiatement, adv-adv, immédiatement, [dl(1,s,s)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(audience, nc-nom, audience, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(953, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(royale, adj-adj, royale, [dl(0,n,n)-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(rentre, v-ver:pres, rentre, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(954, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(propagation, nc-nom, propagation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sida, nc-abr, sida, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(due, vpp-ver:pper, due, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(sexuels, adj-adj, sexuels, [dl(0,n,n)-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(protégés, vpp-ver:pper, protégés, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pratiques, nc-nom, pratiques, [n-1]), ex_si(médicales, adj-adj, médicales, [dl(0,n,n)-1]), ex_si(dangereuses, adj-adj, dangereuses, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(955, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sida, nc-abr, sida, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(propage, v-ver:pres, propage, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(956, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(navette, nc-nom, navette, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Atlantis', npp-nam, 'Atlantis', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(feux, nc-nom, feux, [n-1]), ex_si(clignotant, adj-adj, clignotant, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(phare, nc-nom, phare, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(amarrée, vpp-ver:pper, amarrée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(douceur, nc-nom, douceur, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Mir', npp-nam, 'Mir', [dl(0,n,n)-1]), ex_si(mercredi, nc-nom, mercredi, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(récupérer, vinf-ver:infi, récupérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(astronaute, nc-nom, astronaute, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Shannon', npp-nam, 'Shannon', [dl(0,n,n)-1]), ex_si('Lucid', npp-nam, 'Lucid', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(en, p-prp, en, [n-1]), ex_si(orbite, nc-nom, orbite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(957, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(navette, nc-nom, navette, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Atlantis', npp-nam, 'Atlantis', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(arrime, v-ver:pres, arrime, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si('Mir', npp-nam, 'Mir', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(958, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(soif, nc-nom, soif, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(croît, v-ver:pres, croît, [dl(0,np,s)-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(satisfaite, vpp-ver:pper, satisfaite, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(que, adv-adv, que, [dr(0,pp,pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(purification, nc-nom, purification, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rivières, nc-nom, rivières, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réservoirs, nc-nom, réservoirs, [n-1]), ex_si(devenant, vpr-ver:ppre, devenant, [dr(0,dl(0,np,s_ppres),dl(0,n,n))-1]), ex_si(incapables, adj-adj, incapables, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(dévoilant, vpr-ver:ppre, dévoilant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(important, adj-adj, important, [dr(0,n,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(propres, adj-adj, propres, [dr(0,n,n)-1]), ex_si(pénuries, nc-nom, pénuries, [n-1]), ex_si(chroniques, adj-adj, chroniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(959, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(delta, nc-nom, delta, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ebre', npp-nam, 'Ebre', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agriculture, nc-nom, agriculture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(960, Result) :-
      prob_parse([ ex_si('Ensuite', adv-adv, 'Ensuite', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déployé, vpp-ver:pper, déployé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(faux, adj-adj, faux, [dr(0,n,n)-1]), ex_si('Panchen', npp-nam, 'Panchen', [n-1]), ex_si('Lama', npp-nam, 'Lama', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Gyaltsen', npp-nam, 'Gyaltsen', [dr(0,np,np)-1]), ex_si('Norbu', npp-nam, 'Norbu', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(adolescent, nc-nom, adolescent, [n-1]), ex_si(choisi, vpp-ver:pper, choisi, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(communistes, adj-adj, communistes, [dl(0,n,n)-1]), ex_si(athées, vpp-adj, athées, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réincarnation, nc-nom, réincarnation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(lama, nc-nom, lama, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(entraîné, vpp-ver:pper, entraîné, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enfance, nc-nom, enfance, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(débiter, vinf-ver:infi, débiter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(slogans, nc-nom, slogans, [dr(0,np,n)-1]), ex_si(nationalistes, adj-adj, nationalistes, [n-1]), ex_si(tout, adv-adv, tout, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(robes, nc-nom, robes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(961, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(journaux, nc-nom, journaux, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(compte, nc-nom, compte, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(débâcle, nc-nom, débâcle, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(généralement, adv-adv, généralement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(essayé, vpp-ver:pper, essayé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(côtés, nc-nom, côtés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(médaille, nc-nom, médaille, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(juste, adv-adv, juste, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(vraiment, adv-adv, vraiment, [dl(1,s,s)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(imposture, nc-nom, imposture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(pratiquement, adv-adv, pratiquement, [dr(0,np,np)-1]), ex_si(personne, pro-pro:ind, personne, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(tibétaine, adj-adj, tibétaine, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(accepte, v-ver:pres, accepte, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Norbu', npp-nam, 'Norbu', [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), ex_si('Panchen', npp-nam, 'Panchen', [dr(0,n,n)-1]), ex_si('Lama', npp-nam, 'Lama', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(962, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(choix, nc-nom, choix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Dalaï', npp-nam, 'Dalaï', [dr(0,n,n)-1]), ex_si('Lama', npp-nam, 'Lama', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Panchen', npp-nam, 'Panchen', [dr(0,n,n)-1]), ex_si('Lama', npp-nam, 'Lama', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('Gedhun', npp-nam, 'Gedhun', [dr(0,np,np)-1]), ex_si('Choekyi', npp-nam, 'Choekyi', [dr(0,np,np)-1]), ex_si('Nyima', npp-nam, 'Nyima', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(détention, nc-nom, détention, [n-1]), ex_si(secrète, adj-adj, secrète, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(963, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Dalaï', npp-nam, 'Dalaï', [n-1]), ex_si('Lama', npp-nam, 'Lama', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réincarnation, nc-nom, réincarnation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Panchen', npp-nam, 'Panchen', [dr(0,n,n)-1]), ex_si('Lama', npp-nam, 'Lama', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(964, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si('sous-types', nc-nom, 'sous-types', [n-1]), ex_si(identifiés, vpp-ver:pper, identifiés, [dr(0,dl(0,n,n),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(virus, nc-nom, virus, [n-1]), ex_si('Ebola', npp-nam, 'Ebola', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(965, Result) :-
      prob_parse([ ex_si('Trois', pro-num, 'Trois', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si('Ebola-Zaïre', npp-nam, 'Ebola-Zaïre', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ebola-Soudan', npp-nam, 'Ebola-Soudan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Ebola-Côte', npp-nam, 'Ebola-Côte', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Ivoire', npp-nam, 'Ivoire', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(966, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(quatrième, nc-num, quatrième, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ebola-Reston', npp-nam, 'Ebola-Reston', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(primates, nc-nom, primates, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(967, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Ebola', npp-nam, 'Ebola', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Zaïre', npp-nam, 'Zaïre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(968, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(motifs, nc-nom, motifs, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('attentats-suicides', nc-nom, 'attentats-suicides', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,n,n),n)-1]), ex_si(croyances, nc-nom, croyances, [n-1]), ex_si(religieuses, adj-adj, religieuses, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(idéologies, nc-nom, idéologies, [n-1]), ex_si(nationalistes, adj-adj, nationalistes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(obéissance, nc-nom, obéissance, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(leaders, nc-nom, leaders, [n-1]), ex_si(charismatiques, adj-adj, charismatiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(autoritaires, adj-adj, autoritaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(désir, nc-nom, désir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(969, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(modus, nc-nom, modus, [n-1]), ex_si(operandi, adj-adj, operandi, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(varier, vinf-ver:infi, varier, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agisse, vs-ver:subp, agisse, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(kamikazes, nc-nom, kamikazes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(970, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('attentats-suicides', nc-nom, 'attentats-suicides', [n-1]), ex_si(tamouls, adj-adj, tamouls, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(971, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(former, vinf-ver:infi, former, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(impasse, nc-nom, impasse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(néerlandaise, adj-adj, néerlandaise, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(972, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produite, vpp-ver:pper, produite, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échec, nc-nom, échec, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('CDA', npp-abr, 'CDA', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('PvdA', npp-abr, 'PvdA', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(abord, nc-nom, abord, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(questions, nc-nom, questions, [n-1]), ex_si(fiscales, adj-adj, fiscales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avortement, nc-nom, avortement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(973, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(forment, v-ver:pres, forment, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(974, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(aide, v-ver:pres, aide, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(poursuivent, v-ver:pres, poursuivent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diplôme, nc-nom, diplôme, [n-1]), ex_si('AOS', npp-abr, 'AOS', [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('AAS', npp-abr, 'AAS', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(comprendre, vinf-ver:infi, comprendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(expériences, nc-nom, expériences, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(noires, adj-adj, noires, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(communautés, nc-nom, communautés, [n-1]), ex_si(entendantes, adj-adj, entendantes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(sourdes, adj-adj, sourdes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(975, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sourdes, adj-adj, sourdes, [dl(0,n,n)-1]), ex_si(rencontrent, v-ver:pres, rencontrent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(sociale, adj-adj, sociale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(976, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sorte, nc-nom, sorte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Halifax', npp-nam, 'Halifax', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(977, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rationaliser, vinf-ver:infi, rationaliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(coordonner, vinf-ver:infi, coordonner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(différentes, adj-adj, différentes, [dr(0,n,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(978, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(financières, adj-adj, financières, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(proposées, vpp-ver:pper, proposées, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('G7', npp-abr, 'G7', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Halifax', npp-nam, 'Halifax', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(979, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(japonaises, adj-adj, japonaises, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(alliance, nc-nom, alliance, [n-1]), ex_si(formant, vpr-ver:ppre, formant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(financier, adj-adj, financier, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(980, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Fuji', npp-nam, 'Fuji', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Dai-Ichi', npp-nam, 'Dai-Ichi', [dr(0,n,n)-1]), ex_si('Kangyo', npp-nam, 'Kangyo', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Banque', nc-nam, 'Banque', [n-1]), ex_si(industrielle, adj-adj, industrielle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(intégrées, vpp-ver:pper, intégrées, [dl(0,np,s_pass)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(printemps, nc-nom, printemps, [n-1]), ex_si(2002, adj-num, 2002, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(981, Result) :-
      prob_parse([ ex_si('Fusion', nc-nom, 'Fusion', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(japonaises, adj-adj, japonaises, [dl(0,n,n)-1]), ex_si(créant, vpr-ver:ppre, créant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(982, Result) :-
      prob_parse([ ex_si('Ainsi', adv-adv, 'Ainsi', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(reprises, nc-nom, reprises, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lettres, nc-nom, lettres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(émissaires, nc-nom, émissaires, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Dalaï', npp-nam, 'Dalaï', [dr(0,n,n)-1]), ex_si('Lama', npp-nam, 'Lama', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(tibétain, adj-adj, tibétain, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(demander, vinf-ver:infi, demander, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Tibet', npp-nam, 'Tibet', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(rejoigne, vs-ver:subp, rejoigne, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(983, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Dalaï', npp-nam, 'Dalaï', [n-1]), ex_si('Lama', npp-nam, 'Lama', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réincarnation, nc-nom, réincarnation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Panchen', npp-nam, 'Panchen', [dr(0,n,n)-1]), ex_si('Lama', npp-nam, 'Lama', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(984, Result) :-
      prob_parse([ ex_si('Deux', pro-num, 'Deux', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(institutions, nc-nom, institutions, [n-1]), ex_si(financières, adj-adj, financières, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(fusionner, vinf-ver:infi, fusionner, [dl(0,np,s_inf)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(soulignant, vpr-ver:ppre, soulignant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sentiment, nc-nom, sentiment, [n-1]), ex_si(croissant, vpr-ver:ppre, croissant, [dl(0,n,n)-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(bancaire, adj-adj, bancaire, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(longtemps, adv-adv, longtemps, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(difficulté, nc-nom, difficulté, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(considérablement, adv-adv, considérablement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(amélioré, vpp-ver:pper, amélioré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(985, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(japonaises, adj-adj, japonaises, [dl(0,n,n)-1]), ex_si(crée, v-ver:pres, crée, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(986, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si('Chanchu', npp-nam, 'Chanchu', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(accompagné, vpp-ver:pper, accompagné, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vents, nc-nom, vents, [n-1]), ex_si(allant, vpr-ver:ppre, allant, [dr(0,dl(0,n,n),pp)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(170, det-num, 170, [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [n-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), ex_si(h, nc-abr, h, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(106, det-num, 106, [dr(0,np,n)-1]), ex_si(mph, nc-nom, mph, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(fort, adj-adj, fort, [dr(0,n,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(méridionale, adj-adj, méridionale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(terre, nc-nom, terre, [np-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Shantou', npp-nam, 'Shantou', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Xiamen', npp-nam, 'Xiamen', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(progressait, v-ver:impf, progressait, [dl(0,np,s)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('nord-est', nc-nom, 'nord-est', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Observatoire', nc-nam, 'Observatoire', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hong', npp-nam, 'Hong', [dr(0,np,np)-1]), ex_si('Kong', npp-nam, 'Kong', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(987, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(abat, v-ver:pres, abat, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(988, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si('Xangsane', npp-nam, 'Xangsane', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(philippine, adj-adj, philippine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(clouant, vpr-ver:ppre, clouant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(sol, nc-nom, sol, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(arrêtant, vpr-ver:ppre, arrêtant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(navires, nc-nom, navires, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(fermant, vpr-ver:ppre, fermant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(déclenché, vpp-ver:pper, déclenché, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(crues, nc-nom, crues, [dr(0,np,n)-1]), ex_si(soudaines, adj-adj, soudaines, [n-1]), ex_si(mortelles, adj-adj, mortelles, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(989, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(abat, v-ver:pres, abat, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(990, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si('Xangsane', npp-nam, 'Xangsane', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rétrogradé, vpp-ver:pper, rétrogradé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,n,n)-1]), ex_si(dimanche, nc-nom, dimanche, [dl(1,s,s)-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déplaçait, v-ver:impf, déplaçait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intérieur, nc-nom, intérieur, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(centre, nc-nom, centre, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si('Vietnam', npp-nam, 'Vietnam', [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(blessé, vpp-ver:pper, blessé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,n)-1]), ex_si(80, det-num, 80, [n-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(endommagé, vpp-ver:pper, endommagé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(rapporté, vpp-ver:pper, rapporté, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(contrôlés, vpp-ver:pper, contrôlés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(991, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(typhon, nc-nom, typhon, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(abat, v-ver:pres, abat, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(992, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(navette, nc-nom, navette, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Atlantis', npp-nam, 'Atlantis', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(équipage, nc-nom, équipage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(poursuite, nc-nom, poursuite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Station', nc-nam, 'Station', [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ISS', npp-abr, 'ISS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(amarrés, vpp-ver:pper, amarrés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('avant-poste', nc-nom, 'avant-poste', [n-1]), ex_si(orbital, adj-adj, orbital, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('12h05', npp-nam, '12h05', [dr(0,np,np)-1]), ex_si('EDT', npp-nam, 'EDT', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('16h05', nc-num, '16h05', [dr(0,np,np)-1]), ex_si('GMT', nc-abr, 'GMT', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(993, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(navette, nc-nom, navette, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Atlantis', npp-nam, 'Atlantis', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(arrime, v-ver:pres, arrime, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si('Mir', npp-nam, 'Mir', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(994, Result) :-
      prob_parse([ ex_si('UFJ', npp-abr, 'UFJ', [dr(0,np,np)-1]), ex_si('Holdings', npp-nam, 'Holdings', [dr(0,np,np)-1]), ex_si('Inc', et-abr, 'Inc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(995, Result) :-
      prob_parse([ ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(vouloir, vinf-ver:infi, vouloir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fusionner, vinf-ver:infi, fusionner, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('Mitsubishi', npp-nam, 'Mitsubishi', [dr(0,np,np)-1]), ex_si('Tokyo', npp-nam, 'Tokyo', [dr(0,np,np)-1]), ex_si('Financial', npp-nam, 'Financial', [dr(0,np,np)-1]), ex_si('Group', npp-nam, 'Group', [dr(0,np,np)-1]), ex_si('Inc', npp-abr, 'Inc', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(combinaison, nc-nom, combinaison, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(dépasserait, v-ver:cond, dépasserait, [dr(0,dl(0,np,s),np)-1]), ex_si('Citigroup', npp-nam, 'Citigroup', [np-1]), ex_si('Inc', et-abr, 'Inc', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(996, Result) :-
      prob_parse([ ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(accélérerait, v-ver:cond, accélérerait, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tentatives, nc-nom, tentatives, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(nettoyer, vinf-ver:infi, nettoyer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mauvais, adj-adj, mauvais, [dr(0,n,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(997, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(japonaises, adj-adj, japonaises, [dl(0,n,n)-1]), ex_si(crée, v-ver:pres, crée, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(998, Result) :-
      prob_parse([ ex_si('Contrairement', adv-adv, 'Contrairement', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(phoques, nc-nom, phoques, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(petits, adj-adj, petits, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(chassés, vpp-ver:pper, chassés, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(fourrure, nc-nom, fourrure, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(capturent, v-ver:pres, capturent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(phoques, nc-nom, phoques, [n-1]), ex_si(principalement, adv-adv, principalement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(vendre, vinf-ver:infi, vendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(zoos, nc-nom, zoos, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(organes, nc-nom, organes, [n-1]), ex_si(génitaux, adj-adj, génitaux, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(médecine, nc-nom, médecine, [n-1]), ex_si(traditionnelle, adj-adj, traditionnelle, [dl(0,n,n)-1]), ex_si(chinoise, adj-adj, chinoise, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(999, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(phoques, nc-nom, phoques, [n-1]), ex_si(met, v-ver:pres, met, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1000, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(présentons, v-ver:pres, présentons, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(approche, nc-nom, approche, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sauvetage, nc-nom, sauvetage, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnons, nc-nom, compagnons, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avalanche, nc-nom, avalanche, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(utilisant, vpr-ver:ppre, utilisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(détection, nc-nom, détection, [n-1]), ex_si(portables, adj-adj, portables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1001, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(extraire, vinf-ver:infi, extraire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(crucial, adj-adj, crucial, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(une, det-det:art, une, [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(enseveli, vpp-ver:pper, enseveli, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(avalanche, nc-nom, avalanche, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chances, nc-nom, chances, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(survie, nc-nom, survie, [n-1]), ex_si(chutent, v-ver:pres, chutent, [dl(0,np,s)-1]), ex_si(dramatiquement, adv-adv, dramatiquement, [dl(1,s,s)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(minutes, nc-nom, minutes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1002, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avalanche, nc-nom, avalanche, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1003, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(baltes, adj-adj, baltes, [dl(0,n,n)-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(bientôt, adv-adv, bientôt, [dl(1,s,s)-1]), ex_si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(économies, nc-nom, économies, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(bonne, adj-adj, bonne, [dr(0,n,n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1004, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Estonie', npp-nam, 'Estonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(affichent, v-ver:pres, affichent, [dr(0,dl(0,np,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Baltique', npp-nam, 'Baltique', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1005, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(baltes, adj-adj, baltes, [dl(0,n,n)-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1006, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Monde', nc-nam, 'Monde', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Gaarder', npp-nam, 'Gaarder', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acquis, vpp-ver:pper, acquis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(renommée, nc-nom, renommée, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1007, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Monde', npp-nam, 'Monde', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Norvège', npp-nam, 'Norvège', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1008, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(traduit, vpp-ver:pper, traduit, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Monde', npp-nam, 'Monde', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n))),dl(1,dl(0,n,n),dl(0,n,n)))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n))),dl(1,dl(0,n,n),dl(0,n,n)))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1009, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Monde', npp-nam, 'Monde', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('best-seller', nc-nom, 'best-seller', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1010, Result) :-
      prob_parse([ ex_si('Sans', p-prp, 'Sans', [dr(0,dr(0,s,s),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(zéro, adj-num, zéro, [dr(0,np,n)-1]), ex_si(degré, nc-nom, degré, [n-1]), ex_si('F', nc-abr, 'F', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('-18C', nc-nam, '-18C', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('57F', pro-num, '57F', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('14C', nc-nam, '14C', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1011, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(modifie, v-ver:pres, modifie, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1012, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(répandu, vpp-ver:pper, répandu, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secteur, nc-nom, secteur, [n-1]), ex_si(agricole, adj-adj, agricole, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(journaliers, adj-adj, journaliers, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1013, Result) :-
      prob_parse([ ex_si('Travaillant', vpr-ver:ppre, 'Travaillant', [dl(0,np,s_ppres)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(longues, adj-adj, longues, [dr(0,n,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(travaillent, v-ver:pres, travaillent, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agriculture, nc-nom, agriculture, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(souvent, adv-adv, souvent, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(exposés, vpp-ver:pper, exposés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pesticides, nc-nom, pesticides, [n-1]), ex_si(nocifs, adj-adj, nocifs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(dangereuses, adj-adj, dangereuses, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(charges, nc-nom, charges, [n-1]), ex_si(éreintantes, adj-adj, éreintantes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(dangereuses, adj-adj, dangereuses, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1014, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(répandu, vpp-ver:pper, répandu, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1015, Result) :-
      prob_parse([ ex_si('Zinedine', npp-nam, 'Zinedine', [dr(0,np,np)-1]), ex_si('Zidane', npp-nam, 'Zidane', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devancé, vpp-ver:pper, devancé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Thierry', npp-nam, 'Thierry', [dr(0,np,np)-1]), ex_si('Henry', npp-nam, 'Henry', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Ronaldo', npp-nam, 'Ronaldo', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Fifa', npp-nam, 'Fifa', [dl(0,n,n)-1]), ex_si(2003, adj-num, 2003, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(joueur, nc-nom, joueur, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1016, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Fifa', npp-nam, 'Fifa', [n-1]), ex_si(sélectionne, v-ver:pres, sélectionne, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(joueur, nc-nom, joueur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(1994, adj-num, 1994, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1017, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Hubble', npp-nam, 'Hubble', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bête, nc-nom, bête, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(somme, nc-nom, somme, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fleur, nc-nom, fleur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1018, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(photographe, nc-nom, photographe, [n-1]), ex_si(privilégié, vpp-ver:pper, privilégié, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1019, Result) :-
      prob_parse([ ex_si('Qu\'il', cls-pro:rel, 'Qu\'il', [dr(0,dr(0,s,s),s)-1]), ex_si('s\'', clr-pro:per, 's\'', [np-1]), ex_si(agisse, vs-ver:subp, agisse, [cl_r-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(images, nc-nom, images, [dr(0,pp_de,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(systèmes, nc-nom, systèmes, [dr(0,dl(0,n,n),n)-1]), ex_si(solaires, adj-adj, solaires, [n-1]), ex_si(à, p-prp, à, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(naissance, nc-nom, naissance, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(galaxies, nc-nom, galaxies, [dr(0,pp_de,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(collision, nc-nom, collision, [dr(0,dl(0,n,n),n)-1]), ex_si(ou, cc-kon, ou, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(affres, nc-nom, affres, [dr(0,pp_de,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(mort, nc-nom, mort, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,n,n),np)-1]), ex_si(étoile, nc-nom, étoile, [dr(0,np,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(supernova, nc-nom, supernova, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(les, det-det:art, les, [let-1]), ex_si(photos, nc-nom, photos, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Hubble', npp-nam, 'Hubble', [dr(0,dl(0,n,n),np)-1]), ex_si(révèlent, v-ver:pres, révèlent, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,dr(0,np,np),np)-1]), ex_si(fois, nc-nom, fois, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(férocité, nc-nom, férocité, [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,np),np)-1]), ex_si(tranquillité, nc-nom, tranquillité, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(notre, det-det:pos, notre, [dr(0,dl(0,n,n),np)-1]), ex_si(univers, nc-nom, univers, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1020, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1021, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si('Jurassic', npp-nam, 'Jurassic', [dl(0,n,n)-1]), ex_si('Park', npp-nam, 'Park', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(moyen, nc-nom, moyen, [n-1]), ex_si(absolument, adv-adv, absolument, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(exact, adj-adj, exact, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(enthousiasmer, vinf-ver:infi, enthousiasmer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(science, nc-nom, science, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(dinosaures, nc-nom, dinosaures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1022, Result) :-
      prob_parse([ ex_si('Écrit', vpp-ver:pper, 'Écrit', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(paléontologues, nc-nom, paléontologues, [n-1]), ex_si(réputés, vpp-ver:pper, réputés, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(illustré, vpp-ver:pper, illustré, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(couleurs, nc-nom, couleurs, [n-1]), ex_si(vives, adj-adj, vives, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(guide, nc-nom, guide, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('non-fiction', nc-nom, 'non-fiction', [n-1]), ex_si(destiné, vpp-ver:pper, destiné, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(facile, adj-adj, facile, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(comprendre, vinf-ver:infi, comprendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(décrire, vinf-ver:infi, décrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(dinosaures, nc-nom, dinosaures, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(alphabétique, adj-adj, alphabétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1023, Result) :-
      prob_parse([ ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Crichton', npp-nam, 'Crichton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si('Jurassic', npp-nam, 'Jurassic', [dl(0,n,n)-1]), ex_si('Park', npp-nam, 'Park', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1024, Result) :-
      prob_parse([ ex_si('Deux', pro-num, 'Deux', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mode, nc-nom, mode, [n-1]), ex_si(préférés, adj-adj, préférés, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gianni', npp-nam, 'Gianni', [dr(0,np,np)-1]), ex_si('Versace', npp-nam, 'Versace', [np-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(qualité, nc-nom, qualité, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,s,s)-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(designer, nc-nom, designer, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(manoir, nc-nom, manoir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Miami', npp-nam, 'Miami', [dr(0,np,np)-1]), ex_si('Beach', npp-nam, 'Beach', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), ex_si(sorte, nc-nom, sorte, [n-1]), ex_si(inévitable, adj-adj, inévitable, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(doive, vs-ver:subp, doive, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(atteler, vinf-ver:infi, atteler, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(ensemble, adv-adv, ensemble, [dr(0,dl(0,s,s),s)-1]), ex_si(':', ponct-pun, ':', [np-1]), ex_si(ils, cls-pro:per, ils, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(dû, vpp-ver:pper, dû, [cl_r-1]), ex_si(se, clr-pro:per, se, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),s_whq)-1]), ex_si(demander, vinf-ver:infi, demander, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),s_whq)-1]), ex_si(comment, advwh-adv, comment, [dr(0,s_whq,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(pouvaient, v-ver:impf, pouvaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(que, prorel-pro:rel, que, [np-1]), ex_si('Versace', npp-nam, 'Versace', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(construite, vpp-ver:pper, construite, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(sacrifier, vinf-ver:infi, sacrifier, [dr(0,np,n)-1]), ex_si(sa, det-det:pos, sa, [n-1]), ex_si(réputation, nc-nom, réputation, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(qualité, nc-nom, qualité, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1025, Result) :-
      prob_parse([ ex_si('Gianni', npp-nam, 'Gianni', [dr(0,np,np)-1]), ex_si('Versace', npp-nam, 'Versace', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(créateur, nc-nom, créateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1026, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1962, pro-num, 1962, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(transféré, vpp-ver:pper, transféré, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(astronaute, nc-nom, astronaute, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1027, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(sert, v-ver:pres, sert, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(commandement, nc-nom, commandement, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si('Gemini', npp-nam, 'Gemini', [dl(0,n,n)-1]), ex_si(8, adj-num, 8, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lancée, vpp-ver:pper, lancée, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(1966, adj-num, 1966, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(réalise, v-ver:pres, réalise, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Scott', npp-nam, 'Scott', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(amarrage, nc-nom, amarrage, [n-1]), ex_si(réussi, vpp-ver:pper, réussi, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(accouplant, vpr-ver:ppre, accouplant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('Gemini', npp-nam, 'Gemini', [n-1]), ex_si(8, adj-num, 8, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fusée, nc-nom, fusée, [n-1]), ex_si('Agena', npp-nam, 'Agena', [dl(0,n,n)-1]), ex_si(inhabitée, adj-adj, inhabitée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1028, Result) :-
      prob_parse([ ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(poser, vinf-ver:infi, poser, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1029, Result) :-
      prob_parse([ ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(aviateur, nc-nom, aviateur, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marine, nc-nom, marine, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(choisi, vpp-ver:pper, choisi, [dl(0,np,s_pass)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(astronautes, nc-nom, astronautes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1962, pro-num, 1962, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1030, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('X-15', npp-nam, 'X-15', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1960, pro-num, 1960, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(atteignant, vpr-ver:ppre, atteignant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(altitude, nc-nom, altitude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('207.500', det-num, '207.500', [dr(0,np,n)-1]), ex_si(pieds, nc-nom, pieds, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1031, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pilote, nc-nom, pilote, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(commandement, nc-nom, commandement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secours, nc-nom, secours, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Gemini', npp-nam, 'Gemini', [np-1]), ex_si(5, adj-num, 5, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(commandement, nc-nom, commandement, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Gemini', npp-nam, 'Gemini', [np-1]), ex_si(8, adj-num, 8, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(commandement, nc-nom, commandement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secours, nc-nom, secours, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Gemini', npp-nam, 'Gemini', [np-1]), ex_si(11, adj-num, 11, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secours, nc-nom, secours, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Apollo', npp-nam, 'Apollo', [np-1]), ex_si(8, adj-num, 8, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Apollo', npp-nam, 'Apollo', [np-1]), ex_si(11, adj-num, 11, [dl(0,np,np)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),dl(0,np,s))-1]), ex_si(réalisant, vpr-ver:ppre, réalisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(sortie, nc-nom, sortie, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1032, Result) :-
      prob_parse([ ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(poser, vinf-ver:infi, poser, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1033, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si(cyrillique, adj-adj, cyrillique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(slaves, adj-adj, slaves, [dl(0,n,n)-1]), ex_si(orientales, adj-adj, orientales, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(méridionales, adj-adj, méridionales, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(biélorusse, adj-adj, biélorusse, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(bulgare, adj-adj, bulgare, [n-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(macédonien, adj-adj, macédonien, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(rusyn, nc-nom, rusyn, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(serbe, adj-adj, serbe, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(ukrainien, adj-adj, ukrainien, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Asie', npp-nam, 'Asie', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1034, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(passé, nc-nom, passé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1035, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lettres, nc-nom, lettres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si(cyrillique, adj-adj, cyrillique, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(écrivent, v-ver:pres, écrivent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1036, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cyrillique, nc-nom, cyrillique, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(slaves, adj-adj, slaves, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(russe, nc-nom, russe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1037, Result) :-
      prob_parse([ ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('Alexandra', npp-nam, 'Alexandra', [dr(0,np,np)-1]), ex_si('Mary', npp-nam, 'Mary', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(née, vpp-ver:pper, née, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1926, adj-num, 1926, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1038, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prince, nc-nom, prince, [n-1]), ex_si('Albert', npp-nam, 'Albert', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(duc, nc-nom, duc, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('V.', npp-abr, 'V.', [dl(0,n,n)-1]), ex_si('Sa', npp-det:pos, 'Sa', [dr(0,np,n)-1]), ex_si(mère, nc-nom, mère, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), ex_si('Bowes-Lyon', npp-nam, 'Bowes-Lyon', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(comte, nc-nom, comte, [n-1]), ex_si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1039, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(princesse, nc-nom, princesse, [n-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(enfant, nc-nom, enfant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1040, Result) :-
      prob_parse([ ex_si('Sa', det-det:pos, 'Sa', [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(soeur, nc-nom, soeur, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Margaret', npp-nam, 'Margaret', [dr(0,np,np)-1]), ex_si('Rose', npp-nam, 'Rose', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(née, vpp-ver:pper, née, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1930, pro-num, 1930, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1041, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('VI', adj-num, 'VI', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1042, Result) :-
      prob_parse([ ex_si('Sa', det-det:pos, 'Sa', [dr(0,np,n)-1]), ex_si('Majesté', nc-nom, 'Majesté', [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),n)-1]), ex_si(reine, nc-nom, reine, [n-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(née, vpp-ver:pper, née, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1926, adj-num, 1926, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(1,s,s),np)-1]), ex_si(premier, adj-num, premier, [dr(0,np,n)-1]), ex_si(enfant, nc-nom, enfant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(duc, nc-nom, duc, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(duchesse, nc-nom, duchesse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(devenus, vpp-ver:pper, devenus, [dr(0,dl(0,n,n),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('VI', adj-num, 'VI', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reine, nc-nom, reine, [n-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1043, Result) :-
      prob_parse([ ex_si('Cinq', det-num, 'Cinq', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(tard, adv-adv, tard, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(baptisée, vpp-ver:pper, baptisée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chapelle, nc-nom, chapelle, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(palais, nc-nom, palais, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Buckingham', npp-nam, 'Buckingham', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(noms, nc-nom, noms, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('Alexandra', npp-nam, 'Alexandra', [dr(0,np,np)-1]), ex_si('Mary', npp-nam, 'Mary', [dr(0,np,np)-1]), ex_si('Windsor', npp-nam, 'Windsor', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1044, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Reine', npp-nam, 'Reine', [n-1]), ex_si(monte, v-ver:pres, monte, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(trône, nc-nom, trône, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1952, adj-num, 1952, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('VI', adj-num, 'VI', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1045, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(couronnement, nc-nom, couronnement, [n-1]), ex_si(suit, v-ver:pres, suit, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(2, adj-num, 2, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1953, adj-num, 1953, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1046, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('VI', adj-num, 'VI', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1047, Result) :-
      prob_parse([ ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('H.W', npp-abr, 'H.W', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1048, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(seulement, adv-adv, seulement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si('vice-président', nc-nom, 'vice-président', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Congrès', npp-nam, 'Congrès', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(ambassadeur, nc-nom, ambassadeur, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(liaison, nc-nom, liaison, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Central', npp-nam, 'Central', [dr(0,n,n)-1]), ex_si('Intelligence', npp-nam, 'Intelligence', [dr(0,n,n)-1]), ex_si('Agency', npp-nam, 'Agency', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,n)-1]), ex_si(aviateur, nc-nom, aviateur, [n-1]), ex_si(naval, adj-adj, naval, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1049, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(revenant, vpr-ver:ppre, revenant, [dr(0,dl(0,np,s_ppres),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(dulcinée, nc-nom, dulcinée, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [dr(0,np,np)-1]), ex_si('Pierce', npp-nam, 'Pierce', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Rye', npp-nam, 'Rye', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(tard, adv-adv, tard, [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(adulte, nc-nom, adulte, [n-1]), ex_si(civil, adj-adj, civil, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(choix, nc-nom, choix, [n-1]), ex_si(approprié, vpp-ver:pper, approprié, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(déménager, vinf-ver:infi, déménager, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Texas', npp-nam, 'Texas', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(reste, nc-nom, reste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1050, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('H.W', npp-abr, 'H.W', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1051, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1052, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Laura', npp-nam, 'Laura', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', nc-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(jeudi, nc-nom, jeudi, [dr(0,dl(1,s,s),n)-1]), ex_si('après-midi', nc-nom, 'après-midi', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cabanes, nc-nom, cabanes, [n-1]), ex_si(rustiques, adj-adj, rustiques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(bois, nc-nom, bois, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(montagnes, nc-nom, montagnes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Maryland', npp-nam, 'Maryland', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1053, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mère, nc-nom, mère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(dame, nc-nom, dame, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Jenna', npp-nam, 'Jenna', [dr(0,np,np)-1]), ex_si('Welch', npp-nam, 'Welch', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rassemblement, nc-nom, rassemblement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('week-end', nc-nom, 'week-end', [n-1]), ex_si(comprend, v-ver:pres, comprend, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parents, nc-nom, parents, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('H.W', npp-abr, 'H.W', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1054, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(soeur, nc-nom, soeur, [n-1]), ex_si('Doro', npp-nam, 'Doro', [dr(0,np,np)-1]), ex_si('Koch', npp-nam, 'Koch', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(mari, nc-nom, mari, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Bobby', npp-nam, 'Bobby', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(frère, nc-nom, frère, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Marvin', npp-nam, 'Marvin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Margaret', npp-nam, 'Margaret', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1055, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('H.W', npp-abr, 'H.W', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1056, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1057, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(tombe, v-ver:pres, tombe, [dr(0,dl(0,np,s),pp)-1]), ex_si(assez, adv-adv, assez, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('Borges', npp-nam, 'Borges', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Calvino', npp-nam, 'Calvino', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(dois, v-ver:pres, dois, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(admettre, vinf-ver:infi, admettre, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(seul, nc-nom, seul, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(auteurs, nc-nom, auteurs, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(connaisse, vs-ver:subp, connaisse, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(tant, adv-adv, tant, [n-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(peu, adv-adv, peu, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(donc, cc-adv, donc, [dr(0,dl(0,s,s),s)-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(suis, v-ver:pres, suis, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sûr, adj-adj, sûr, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(différence, nc-nom, différence, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1058, Result) :-
      prob_parse([ ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(serais, v-ver:cond, serais, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(cependant, adv-adv, cependant, [dl(1,s,s)-1]), ex_si(curieux, adj-adj, curieux, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(quoi, prowh-pro:rel, quoi, [dr(0,dl(0,dr(0,pp,dia(0,box(0,n))),s),s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(différence, nc-nom, différence, [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(ressembler, vinf-ver:infi, ressembler, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(écrivent, v-ver:pres, écrivent, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(médiatique, adj-adj, médiatique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(architecture, nc-nom, architecture, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(espagnol, nc-nom, espagnol, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1059, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(écrivain, nc-nom, écrivain, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1060, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(anciennes, adj-adj, anciennes, [dr(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Commonwealth', npp-nam, 'Commonwealth', [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Nouvelle-Zélande', npp-nam, 'Nouvelle-Zélande', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Australiens', nc-nam, 'Australiens', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Canadiens', nc-nam, 'Canadiens', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Vietnam', npp-nam, 'Vietnam', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(unités, nc-nom, unités, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('EU', npp-abr, 'EU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(certaines, pro-pro:ind, certaines, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(inclus, vpp-ver:pper, inclus, [dl(0,np,s_pass)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(suis, v-ver:pres, suis, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(mal, adv-adv, mal, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aise, nc-nom, aise, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(idée, nc-nom, idée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mot, nc-nom, mot, [n-1]), ex_si(respecté, vpp-ver:pper, respecté, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(japonais, adj-adj, japonais, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(raisons, nc-nom, raisons, [n-1]), ex_si(évidentes, adj-adj, évidentes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1061, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1062, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(long, nc-nom, long, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(désignée, vpp-ver:pper, désignée, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('Gold', npp-nam, 'Gold', [dr(0,np,np)-1]), ex_si('Beach', npp-nam, 'Beach', [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('J', nc-nom, 'J', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plages, nc-nom, plages, [n-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(alliée, adj-adj, alliée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1063, Result) :-
      prob_parse([ ex_si('Arromanches', npp-nam, 'Arromanches', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(choisi, vpp-ver:pper, choisi, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(sites, nc-nom, sites, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(ports, nc-nom, ports, [n-1]), ex_si('Mulberry', npp-nam, 'Mulberry', [dl(0,n,n)-1]), ex_si(construits, vpp-ver:pper, construits, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(normande, adj-adj, normande, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_pass))-1]), ex_si(construit, vpp-ver:pper, construit, [dl(0,np,s_pass)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouest, nc-nom, ouest, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Omaha', npp-nam, 'Omaha', [dr(0,np,np)-1]), ex_si('Beach', npp-nam, 'Beach', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1064, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1065, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(planification, nc-nom, planification, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si('Dwight', npp-nam, 'Dwight', [dl(0,n,n)-1]), ex_si('Eisenhower', npp-nam, 'Eisenhower', [dl(0,n,n)-1]), ex_si(fixe, v-ver:pres, fixe, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('Overlord', npp-nam, 'Overlord', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), ex_si(7000, adj-num, 7000, [dr(0,n,n)-1]), ex_si(navires, nc-nom, navires, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(prennent, v-ver:pres, prennent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(traversent, v-ver:pres, traversent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Manche', npp-nam, 'Manche', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sous, p-prp, sous, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(maréchal, nc-nom, maréchal, [n-1]), ex_si('Bernard', npp-nam, 'Bernard', [dl(0,n,n)-1]), ex_si('Montgomery', npp-nam, 'Montgomery', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('135.000', det-num, '135.000', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(débarquent, v-ver:pres, débarquent, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(prennent, v-ver:pres, prennent, [dr(0,pp_de,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(positions, nc-nom, positions, [n-1]), ex_si(allemandes, adj-adj, allemandes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Feldmarschal', npp-nam, 'Feldmarschal', [n-1]), ex_si('Erwin', npp-nam, 'Erwin', [dl(0,n,n)-1]), ex_si('Rommel', npp-nam, 'Rommel', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(normande, adj-adj, normande, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1066, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1067, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(chancelier, nc-nom, chancelier, [n-1]), ex_si('Helmut', npp-nam, 'Helmut', [dl(0,n,n)-1]), ex_si('Kohl', npp-nam, 'Kohl', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(stupéfié, vpp-ver:pper, stupéfié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Allemands', nc-nam, 'Allemands', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(admettant, vpr-ver:ppre, admettant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(comptes, nc-nom, comptes, [n-1]), ex_si(bancaires, adj-adj, bancaires, [dl(0,n,n)-1]), ex_si(illégaux, adj-adj, illégaux, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(acheminer, vinf-ver:infi, acheminer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(secret, adj-adj, secret, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('chrétien-démocrate', adj-adj, 'chrétien-démocrate', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(invoque, v-ver:pres, invoque, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si(personnel, adj-adj, personnel, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(refuser, vinf-ver:infi, refuser, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(divulguer, vinf-ver:infi, divulguer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(noms, nc-nom, noms, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(1998, pro-num, 1998, [np-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(scandale, nc-nom, scandale, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(menace, v-ver:pres, menace, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(néant, nc-nom, néant, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(place, nc-nom, place, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kohl', npp-nam, 'Kohl', [dr(0,dl(1,s,s),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(réunifié, vpp-ver:pper, réunifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(conduit, v-ver:simp, conduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Europe', npp-nam, 'Europe', [dr(0,np,n)-1]), ex_si(vers, p-prp, vers, [n-1]), ex_si(une, det-det:art, une, [n-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si(commune, adj-adj, commune, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1068, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), ex_si('Kohl', npp-nam, 'Kohl', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1069, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,np,np),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si('Chancelier', nc-nam, 'Chancelier', [np-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,np,np)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(constructif, adj-adj, constructif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défiance, nc-nom, défiance, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(chancelier, nc-nom, chancelier, [n-1]), ex_si('Helmut', npp-nam, 'Helmut', [dl(0,n,n)-1]), ex_si('Schmidt', npp-nam, 'Schmidt', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si('social-démocrate', adj-adj, 'social-démocrate', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('SPD', npp-abr, 'SPD', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(';', ponct-pun, ';', [dl(0,n,n)-1]), ex_si(réélu, vpp-ver:pper, réélu, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('1983,1987', pro-num, '1983,1987', [np-1]), ex_si(',1991', ponct-pun, ',1991', [dr(0,dl(0,np,np),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(1994, pro-num, 1994, [dr(0,dl(0,np,np),np)-1]), ex_si(')', ponct-pun, ')', [np-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(1070, Result) :-
      prob_parse([ ex_si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), ex_si('Kohl', npp-nam, 'Kohl', [np-1]), ex_si(devient, v-ver:pres, devient, [dr(0,dl(0,np,s),np)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(chancelier, nc-nom, chancelier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(passant, vpr-ver:ppre, passant, [dr(0,dl(0,np,s_ppres),pp)-1]), ex_si(devant, p-prp, devant, [dr(0,pp,np)-1]), ex_si('Konrad', npp-nam, 'Konrad', [dr(0,np,np)-1]), ex_si('Adenauer', npp-nam, 'Adenauer', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(chancelier, nc-nom, chancelier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1071, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), ex_si('Kohl', npp-nam, 'Kohl', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1072, Result) :-
      prob_parse([ ex_si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(compare, v-ver:pres, compare, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('Michele', npp-nam, 'Michele', [dr(0,np,np)-1]), ex_si('Granger', npp-nam, 'Granger', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Brian', npp-nam, 'Brian', [dr(0,np,np)-1]), ex_si('Goodell', npp-nam, 'Goodell', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Brian', npp-nam, 'Brian', [np-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(gagnant, nc-nom, gagnant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1073, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1976, pro-num, 1976, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(élève, nc-nom, élève, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Mission', npp-nam, 'Mission', [dr(0,np,np)-1]), ex_si('Viejo', npp-nam, 'Viejo', [dr(0,np,np)-1]), ex_si('High', npp-nam, 'High', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Brian', npp-nam, 'Brian', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(médailles, nc-nom, médailles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Montréal', npp-nam, 'Montréal', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(battant, vpr-ver:ppre, battant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(propres, adj-adj, propres, [dr(0,n,n)-1]), ex_si(records, nc-nom, records, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(épreuves, nc-nom, épreuves, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(400, pro-num, 400, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1.500', det-num, '1.500', [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(nage, nc-nom, nage, [n-1]), ex_si(libre, adj-adj, libre, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1074, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(médailles, nc-nom, médailles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(panaméricains, adj-adj, panaméricains, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1075, Result) :-
      prob_parse([ ex_si('Brian', npp-nam, 'Brian', [dr(0,np,np)-1]), ex_si('Goodell', npp-nam, 'Goodell', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(médailles, nc-nom, médailles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(panaméricains, adj-adj, panaméricains, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1076, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dr(0,s,s))),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Carl', npp-nam, 'Carl', [dr(0,np,np)-1]), ex_si('Lewis', npp-nam, 'Lewis', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvait, v-ver:impf, trouvait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(seuil, nc-nom, seuil, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(allait, v-ver:impf, allait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(devenir, vinf-ver:infi, devenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(carrière, nc-nom, carrière, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(athlète, nc-nom, athlète, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1077, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(venait, v-ver:impf, venait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(battre, vinf-ver:infi, battre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(records, nc-nom, records, [n-1]), ex_si(universitaires, adj-adj, universitaires, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(légendaire, nc-nom, légendaire, [dr(0,n,n)-1]), ex_si('Jesse', npp-nam, 'Jesse', [dl(0,n,n)-1]), ex_si('Owens', npp-nam, 'Owens', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(cru, vpp-ver:pper, cru, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(deviendrait, v-ver:cond, deviendrait, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(icône, nc-nom, icône, [n-1]), ex_si(corporative, adj-adj, corporative, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mire, nc-nom, mire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1078, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(nominalement, adv-adv, nominalement, [dl(1,s,s)-1]), ex_si(amateur, adj-adj, amateur, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1079, Result) :-
      prob_parse([ ex_si('Dix-huit', det-num, 'Dix-huit', [dr(0,np,n)-1]), ex_si(médailles, nc-nom, médailles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(championnat, nc-nom, championnat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(21, det-num, 21, [dr(0,np,n)-1]), ex_si(records, nc-nom, records, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si('Lewis', npp-nam, 'Lewis', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(riche, adj-adj, riche, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(athlétisme, nc-nom, athlétisme, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(multimillionnaire, nc-nom, multimillionnaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1080, Result) :-
      prob_parse([ ex_si('Carl', npp-nam, 'Carl', [dr(0,np,np)-1]), ex_si('Lewis', npp-nam, 'Lewis', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('dix-huit', det-num, 'dix-huit', [dr(0,np,n)-1]), ex_si(médailles, nc-nom, médailles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(établi, vpp-ver:pper, établi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(21, det-num, 21, [dr(0,np,n)-1]), ex_si(records, nc-nom, records, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1081, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(quark, nc-nom, quark, [n-1]), ex_si(supérieur, adj-adj, supérieur, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, cs-kon, si, [dr(0,dl(1,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(confirmée, vpp-ver:pper, confirmée, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(complète, v-ver:pres, complète, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blocs, nc-nom, blocs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(subatomiques, adj-adj, subatomiques, [dl(0,n,n)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prévue, vpp-ver:pper, prévue, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(dominante, adj-adj, dominante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si(modèle, nc-nom, modèle, [np-1]), ex_si(standard, adj-adj, standard, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(déterminent, v-ver:pres, déterminent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nature, nc-nom, nature, [n-1]), ex_si(fondamentale, adj-adj, fondamentale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(matière, nc-nom, matière, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1082, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(lexique, nc-nom, lexique, [n-1]), ex_si(fantaisiste, adj-adj, fantaisiste, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(élémentaires, adj-adj, élémentaires, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(appelées, vpp-ver:pper, appelées, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(quarks, nc-nom, quarks, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(leptons, nc-nom, leptons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(bosons, nc-nom, bosons, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1083, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(leptons, nc-nom, leptons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bosons, nc-nom, bosons, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(élémentaires, adj-adj, élémentaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Modèle', nc-nam, 'Modèle', [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1084, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(navigateur, nc-nom, navigateur, [n-1]), ex_si('Melvyn', npp-nam, 'Melvyn', [dl(0,n,n)-1]), ex_si('Percy', npp-nam, 'Percy', [dl(0,n,n)-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tellement, adv-adv, tellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(marre, nc-nom, marre, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(préparation, nc-nom, préparation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(bateau, nc-nom, bateau, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(traversée, nc-nom, traversée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Atlantique', npp-nam, 'Atlantique', [n-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(3000, det-num, 3000, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Clyde', npp-nam, 'Clyde', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(marins, nc-nom, marins, [n-1]), ex_si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(conseils, nc-nom, conseils, [n-1]), ex_si(professionnels, adj-adj, professionnels, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(assistance, nc-nom, assistance, [n-1]), ex_si(pratique, adj-adj, pratique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1085, Result) :-
      prob_parse([ ex_si('Minerva', npp-nam, 'Minerva', [dr(0,np,np)-1]), ex_si('Rigging', npp-nam, 'Rigging', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kip', npp-nam, 'Kip', [dr(0,np,np)-1]), ex_si('Marina', npp-nam, 'Marina', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(juste, adv-adv, juste, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gourock', npp-nam, 'Gourock', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(emploie, v-ver:pres, emploie, [dr(0,dl(0,np,s),np)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(plein, adj-adj, plein, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agent, nc-nom, agent, [n-1]), ex_si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kemp', npp-nam, 'Kemp', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(fabricants, nc-nom, fabricants, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(espars, nc-nom, espars, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mâts, nc-nom, mâts, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(yachts, nc-nom, yachts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1086, Result) :-
      prob_parse([ ex_si('Melvyn', npp-nam, 'Melvyn', [dr(0,np,np)-1]), ex_si('Percy', npp-nam, 'Percy', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(installé, vpp-ver:pper, installé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si('Minerva', npp-nam, 'Minerva', [dr(0,np,np)-1]), ex_si('Rigging', npp-nam, 'Rigging', [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kip', npp-nam, 'Kip', [dr(0,np,np)-1]), ex_si('Marina', npp-nam, 'Marina', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1087, Result) :-
      prob_parse([ ex_si('De', p-prp, 'De', [dr(0,dr(0,s,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parcs, nc-nom, parcs, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aucun, pro-pro:ind, aucun, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(proche, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(urbaine, adj-adj, urbaine, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(assailli, vpp-ver:pper, assailli, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rivière, nc-nom, rivière, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(herbes, nc-nom, herbes, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(profonde, adj-adj, profonde, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(large, adj-adj, large, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(coule, v-ver:pres, coule, [dl(0,np,s)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lac, nc-nom, lac, [n-1]), ex_si('Okeechobee', npp-nam, 'Okeechobee', [dl(0,n,n)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(baie, nc-nom, baie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1088, Result) :-
      prob_parse([ ex_si('Pendant', p-prp, 'Pendant', [dr(0,dr(0,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(génération, nc-nom, génération, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(merveille, nc-nom, merveille, [n-1]), ex_si(naturelle, adj-adj, naturelle, [dl(0,n,n)-1]), ex_si(fragile, adj-adj, fragile, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prise, vpp-ver:pper, prise, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(otage, nc-nom, otage, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(particuliers, adj-adj, particuliers, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(agriculteurs, nc-nom, agriculteurs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(sportifs, nc-nom, sportifs, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(6, det-num, 6, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dr(0,dl(0,n,n),pp_de),np)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(potable, adj-adj, potable, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(complexe, adj-adj, complexe, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écosystème, nc-nom, écosystème, [n-1]), ex_si('lui-même', pro-pro:per, 'lui-même', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1089, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(font, v-ver:pres, font, [dr(0,dl(0,np,s),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(large, nc-nom, large, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1090, Result) :-
      prob_parse([ ex_si('Eschyle', npp-nam, 'Eschyle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tragédie, nc-nom, tragédie, [n-1]), ex_si(grecque, adj-adj, grecque, [dl(0,n,n)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(pièces, nc-nom, pièces, [n-1]), ex_si(complètes, adj-adj, complètes, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(survivent, v-ver:pres, survivent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grèce', npp-nam, 'Grèce', [n-1]), ex_si(antique, adj-adj, antique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1091, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(sait, v-ver:pres, sait, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(90, det-num, 90, [dr(0,np,n)-1]), ex_si(pièces, nc-nom, pièces, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(seules, adv-adv, seules, [dr(0,np,np)-1]), ex_si(sept, pro-num, sept, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(survécu, vpp-ver:pper, survécu, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1092, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(célèbres, adj-adj, célèbres, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(trilogie, nc-nom, trilogie, [n-1]), ex_si(connue, vpp-ver:pper, connue, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Orestie', npp-nam, 'Orestie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1093, Result) :-
      prob_parse([ ex_si('Sont', v-ver:pres, 'Sont', [dr(0,dr(0,s,np),dl(0,np,s_pass))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connues, vpp-ver:pper, connues, [dl(0,np,s_pass)-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Prométhée', npp-nam, 'Prométhée', [np-1]), ex_si(enchaîné, vpp-ver:pper, enchaîné, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1094, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Eschyle', npp-nam, 'Eschyle', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1095, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(bilingue, adj-adj, bilingue, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dr(0,s,s),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(parlant, vpr-ver:ppre, parlant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(maternelle, adj-adj, maternelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(parlant, vpr-ver:ppre, parlant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(première, adj-num, première, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(demandent, v-ver:pres, demandent, [dr(0,dl(0,cl_r,dl(0,np,s)),s_whq)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(vraiment, adv-adv, vraiment, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si(bilingue, adj-adj, bilingue, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si(bilingue, adj-adj, bilingue, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(papier, nc-nom, papier, [n-1]), ex_si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1096, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(minorité, nc-nom, minorité, [n-1]), ex_si(linguistique, adj-adj, linguistique, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(certaines, pro-pro:ind, certaines, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(parlées, vpp-ver:pper, parlées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(popularité, nc-nom, popularité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chinois, nc-nom, chinois, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(italien, nc-nom, italien, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(allemand, nc-nom, allemand, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(polonais, nc-nom, polonais, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espagnol, nc-nom, espagnol, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(portugais, nc-nom, portugais, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(punjabi, nc-nom, punjabi, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ukrainien, nc-nom, ukrainien, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arabe, nc-nom, arabe, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(néerlandais, nc-nom, néerlandais, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tagalog, nc-nom, tagalog, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(grec, nc-nom, grec, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vietnamien, nc-nom, vietnamien, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cri, nc-nom, cri, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inuktitut, nc-nom, inuktitut, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1097, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(parlée, vpp-ver:pper, parlée, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Québec', npp-nam, 'Québec', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1098, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si('Indien', adj-nam, 'Indien', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chagrin, nc-nom, chagrin, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compassion, nc-nom, compassion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(revenus, vpp-ver:pper, revenus, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(côtes, nc-nom, côtes, [n-1]), ex_si(meurtries, vpp-ver:pper, meurtries, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si('Indien', npp-nam, 'Indien', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si('216.000', det-num, '216.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1099, Result) :-
      prob_parse([ ex_si('Sous', p-prp, 'Sous', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ciel, nc-nom, ciel, [n-1]), ex_si(clair, adj-adj, clair, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(devant, p-prp, devant, [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(douce, adj-adj, douce, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commémoré, vpp-ver:pper, commémoré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(pires, adj-adj, pires, [dr(0,n,n)-1]), ex_si(catastrophes, nc-nom, catastrophes, [n-1]), ex_si(naturelles, adj-adj, naturelles, [dl(0,n,n)-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(connues, vpp-ver:pper, connues, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1100, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tremblements, nc-nom, tremblements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(potentiel, nc-nom, potentiel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1101, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cardinal, nc-nom, cardinal, [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si('Dom', npp-nam, 'Dom', [dl(0,n,n)-1]), ex_si('Eusbio', npp-nam, 'Eusbio', [dr(0,np,np)-1]), ex_si('Oscar', npp-nam, 'Oscar', [dr(0,np,np)-1]), ex_si('Scheid', npp-nam, 'Scheid', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(archevêque, nc-nom, archevêque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rio', npp-nam, 'Rio', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Janeiro', npp-nam, 'Janeiro', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(sévèrement, adv-adv, sévèrement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(critiqué, vpp-ver:pper, critiqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si('Luiz', npp-nam, 'Luiz', [dl(0,n,n)-1]), ex_si('Inácio', npp-nam, 'Inácio', [dl(0,n,n)-1]), ex_si('Lula', npp-nam, 'Lula', [dl(0,n,n)-1]), ex_si(da, npp-nam, da, [dr(0,dl(0,n,n),np)-1]), ex_si('Silva', npp-nam, 'Silva', [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Rome', npp-nam, 'Rome', [np-1]), ex_si(mardi, nc-nom, mardi, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1102, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Luiz', npp-nam, 'Luiz', [dr(0,np,np)-1]), ex_si('Inácio', npp-nam, 'Inácio', [dr(0,np,np)-1]), ex_si('Lula', npp-nam, 'Lula', [np-1]), ex_si(da, et-nam, da, [dr(0,dl(0,np,np),np)-1]), ex_si('Silva', npp-nam, 'Silva', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1103, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(brésilienne, adj-adj, brésilienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Luiz', npp-nam, 'Luiz', [dl(0,n,n)-1]), ex_si('Inácio', npp-nam, 'Inácio', [dl(0,n,n)-1]), ex_si('Lula', npp-nam, 'Lula', [dl(0,n,n)-1]), ex_si(da, et-prp:det, da, [dr(0,dl(0,n,n),np)-1]), ex_si('Silva', npp-nam, 'Silva', [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(soumis, vpp-ver:pper, soumis, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(destitution, nc-nom, destitution, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(réellement, adv-adv, réellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(impliqué, vpp-ver:pper, impliqué, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(scandales, nc-nom, scandales, [n-1]), ex_si(présumés, vpp-ver:pper, présumés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(1,s,s),n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('quelqu\'un', pro-pro:ind, 'quelqu\'un', [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(prouver, vinf-ver:infi, prouver, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(agi, vpp-ver:pper, agi, [dl(0,np,s_ppart)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), ex_si(négligence, nc-nom, négligence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1104, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Luiz', npp-nam, 'Luiz', [dr(0,np,np)-1]), ex_si('Inácio', npp-nam, 'Inácio', [dr(0,np,np)-1]), ex_si('Lula', npp-nam, 'Lula', [np-1]), ex_si(da, et-nam, da, [dr(0,dl(0,np,np),np)-1]), ex_si('Silva', npp-nam, 'Silva', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1105, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(préparé, vpp-ver:pper, préparé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(constaté, vpp-ver:pper, constaté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(meurtres, nc-nom, meurtres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(disparitions, nc-nom, disparitions, [n-1]), ex_si(forcées, vpp-ver:pper, forcées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(destructions, nc-nom, destructions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(villages, nc-nom, villages, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(viols, nc-nom, viols, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(violence, nc-nom, violence, [n-1]), ex_si(sexuelle, adj-adj, sexuelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(pillages, nc-nom, pillages, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(déplacements, nc-nom, déplacements, [n-1]), ex_si(forcés, vpp-ver:pper, forcés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Darfour', npp-nam, 'Darfour', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(désigné, vpp-ver:pper, désigné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(secrètement, adv-adv, secrètement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(criminels, nc-nom, criminels, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(présumés, vpp-ver:pper, présumés, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(devant, p-prp, devant, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CPI', npp-abr, 'CPI', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1106, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('200.000', det-num, '200.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Darfour', npp-nam, 'Darfour', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1107, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(maréchaux, nc-nom, maréchaux, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(collaboration, nc-nom, collaboration, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(960, det-num, 960, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(organismes, nc-nom, organismes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(conclu, vpp-ver:pper, conclu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('FALCON', npp-nam, 'FALCON', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arrestation, nc-nom, arrestation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('10.340', det-num, '10.340', [dr(0,np,n)-1]), ex_si(fugitifs, nc-nom, fugitifs, [n-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),np),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(ailleurs, adv-adv, ailleurs, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1108, Result) :-
      prob_parse([ ex_si('D\'', det-prp, 'D\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ratissage, nc-nom, ratissage, [n-1]), ex_si(régionales, adj-adj, régionales, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menées, vpp-ver:pper, menées, [dl(0,np,s_pass)-1]), ex_si(';', ponct-pun, ';', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(genre, nc-nom, genre, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(arrestations, nc-nom, arrestations, [n-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1109, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('Condor', npp-nam, 'Condor', [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('contre-terrorisme', nc-nom, 'contre-terrorisme', [n-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dictatures, nc-nom, dictatures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dominé, vpp-ver:pper, dominé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Cône', npp-nam, 'Cône', [n-1]), ex_si('Sud', npp-nam, 'Sud', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(latine, adj-adj, latine, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1950, adj-num, 1950, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(1980, pro-num, 1980, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1110, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('FALCON', npp-nam, 'FALCON', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(menée, vpp-ver:pper, menée, [dl(0,np,s_pass)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(choisie, vpp-ver:pper, choisie, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(coïncider, vinf-ver:infi, coïncider, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dates, nc-nom, dates, [n-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_pass))-1]), ex_si(choisies, vpp-ver:pper, choisies, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(honorer, vinf-ver:infi, honorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(violents, adj-adj, violents, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1111, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(retirant, vpr-ver:ppre, retirant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fugitifs, nc-nom, fugitifs, [n-1]), ex_si(violents, adj-adj, violents, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s))),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),dl(0,np,s_ppres))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(mettant, vpr-ver:ppre, mettant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(derrière, p-prp, derrière, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(barreaux, nc-nom, barreaux, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(là, adv-adv, là, [np-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,np,dl(1,s,s)),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(procureur, nc-nom, procureur, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si('Alberto', npp-nam, 'Alberto', [dl(0,n,n)-1]), ex_si('Gonzales', npp-nam, 'Gonzales', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(honoré, vpp-ver:pper, honoré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(nos, det-det:pos, nos, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sûres, adj-adj, sûres, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1112, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Opération', npp-nam, 'Opération', [n-1]), ex_si('Condor', npp-nam, 'Condor', [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('contre-terrorisme', nc-nom, 'contre-terrorisme', [n-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dictatures, nc-nom, dictatures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dominé, vpp-ver:pper, dominé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Cône', npp-nam, 'Cône', [n-1]), ex_si('Sud', npp-nam, 'Sud', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(latine, adj-adj, latine, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1950, adj-num, 1950, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(1980, pro-num, 1980, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1113, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Roumains', nc-nom, 'Roumains', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rassemblements, nc-nom, rassemblements, [n-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(campagne, nc-nom, campagne, [np-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si(roumains, adj-adj, roumains, [dl(0,n,n)-1]), ex_si(enlevés, vpp-ver:pper, enlevés, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1114, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(foules, nc-nom, foules, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gonflé, vpp-ver:pper, gonflé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('week-end', nc-nom, 'week-end', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rassemblements, nc-nom, rassemblements, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(petits, adj-adj, petits, [dl(0,n,n)-1]), ex_si(parrainés, vpp-ver:pper, parrainés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(roumains, adj-adj, roumains, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(arabe, adj-adj, arabe, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1115, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(730, det-num, 730, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1116, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cassini', npp-nam, 'Cassini', [np-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(soit, cc-kon, soit, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(surface, nc-nom, surface, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(éventuellement, adv-adv, éventuellement, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intérieur, nc-nom, intérieur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Encelade', npp-nam, 'Encelade', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Michele', npp-nam, 'Michele', [dr(0,np,np)-1]), ex_si('Dougherty', npp-nam, 'Dougherty', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(chercheur, nc-nom, chercheur, [n-1]), ex_si(principal, adj-adj, principal, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(magnétomètre, nc-nom, magnétomètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cassini', npp-nam, 'Cassini', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Imperial', npp-nam, 'Imperial', [n-1]), ex_si('College', npp-nam, 'College', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1117, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soupçonné, vpp-ver:pper, soupçonné, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Encelade', npp-nam, 'Encelade', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(géologiquement, adv-adv, géologiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(active, adj-adj, active, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(constituer, vinf-ver:infi, constituer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anneau, nc-nom, anneau, [n-1]), ex_si('E', npp-nam, 'E', [dl(0,n,n)-1]), ex_si(glacé, adj-adj, glacé, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1118, Result) :-
      prob_parse([ ex_si('Encelade', npp-nam, 'Encelade', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(réfléchissant, vpr-ver:ppre, réfléchissant, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(reflétant, vpr-ver:ppre, reflétant, [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(90, det-num, 90, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lumière, nc-nom, lumière, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(frappe, v-ver:pres, frappe, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1119, Result) :-
      prob_parse([ ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quinzième, nc-num, quinzième, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(satellites, nc-nom, satellites, [n-1]), ex_si(connus, vpp-ver:pper, connus, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1120, Result) :-
      prob_parse([ ex_si('Collection', nc-nom, 'Collection', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(témoignages, nc-nom, témoignages, [n-1]), ex_si(réels, adj-adj, réels, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), ex_si('Pohl', npp-nam, 'Pohl', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(dramaturges, nc-nom, dramaturges, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(joués, vpp-ver:pper, joués, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(puissance, nc-nom, puissance, [n-1]), ex_si(réside, v-ver:pres, réside, [dr(0,dl(0,np,s),pp)-1]), ex_si(moins, adv-adv, moins, [dr(0,pp,pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sens, nc-nom, sens, [n-1]), ex_si(conventionnel, adj-adj, conventionnel, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mot, nc-nom, mot, [n-1]), ex_si(drame, nc-nom, drame, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(révèle, v-ver:pres, révèle, [dr(0,dl(0,np,s),np)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(profondément, adv-adv, profondément, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(désaccord, nc-nom, désaccord, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('lui-même', pro-pro:per, 'lui-même', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(kaléidoscope, nc-nom, kaléidoscope, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(événements, nc-nom, événements, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(flatte, v-ver:pres, flatte, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(camp, nc-nom, camp, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitalisme, nc-nom, capitalisme, [n-1]), ex_si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [n-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1121, Result) :-
      prob_parse([ ex_si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), ex_si('Pohl', npp-nam, 'Pohl', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(dramaturges, nc-nom, dramaturges, [n-1]), ex_si(allemands, adj-adj, allemands, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(joués, vpp-ver:pper, joués, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1122, Result) :-
      prob_parse([ ex_si('TWA', npp-abr, 'TWA', [np-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dl(0,np,s),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Francfort', npp-nam, 'Francfort', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1123, Result) :-
      prob_parse([ ex_si('Lufthansa', npp-nam, 'Lufthansa', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(offre, v-ver:pres, offre, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(directs, adj-adj, directs, [dl(0,n,n)-1]), ex_si(quotidiens, adj-adj, quotidiens, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Francfort', npp-nam, 'Francfort', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(partage, v-ver:pres, partage, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('Lauda', npp-nam, 'Lauda', [dr(0,np,np)-1]), ex_si('Air', npp-nam, 'Air', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(transporteur, nc-nom, transporteur, [n-1]), ex_si(autrichien, adj-adj, autrichien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,dl(1,s,s),n)-1]), ex_si(mercredis, nc-nom, mercredis, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(vendredis, nc-nom, vendredis, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(dimanches, nc-nom, dimanches, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(directement, adv-adv, directement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Munich', npp-nam, 'Munich', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1124, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ltu', npp-nam, 'Ltu', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(propose, v-ver:pres, propose, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si(directs, adj-adj, directs, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si('Düsseldorf', npp-nam, 'Düsseldorf', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Munich', npp-nam, 'Munich', [np-1]), ex_si(les, det-det:art, les, [dr(0,dl(1,s,s),n)-1]), ex_si(lundis, nc-nom, lundis, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(jeudis, nc-nom, jeudis, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1125, Result) :-
      prob_parse([ ex_si('Francfort', npp-nam, 'Francfort', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plaque, nc-nom, plaque, [n-1]), ex_si(tournante, adj-adj, tournante, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(voyages, nc-nom, voyages, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(petites, adj-adj, petites, [dr(0,n,n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1126, Result) :-
      prob_parse([ ex_si('Lufthansa', npp-nam, 'Lufthansa', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1127, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1989, adj-num, 1989, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mur, nc-nom, mur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tombé, vpp-ver:pper, tombé, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(changé, vpp-ver:pper, changé, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(1128, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(astucieux, adj-adj, astucieux, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(venir, vinf-ver:infi, venir, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1129, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Hongrie', npp-nam, 'Hongrie', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(1989, adj-num, 1989, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Gyula', npp-nam, 'Gyula', [dr(0,np,np)-1]), ex_si('Horn', npp-nam, 'Horn', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(laisser, vinf-ver:infi, laisser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Allemands', nc-nam, 'Allemands', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tour, nc-nom, tour, [n-1]), ex_si(final, adj-adj, final, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(400, det-num, 400, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(mur, nc-nom, mur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(maintenant, adv-adv, maintenant, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(considéré, vpp-ver:pper, considéré, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(communisme, nc-nom, communisme, [n-1]), ex_si(dur, adj-adj, dur, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1130, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mur, nc-nom, mur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(démoli, vpp-ver:pper, démoli, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1989, pro-num, 1989, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1131, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(assez, adv-adv, assez, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(forts, adj-adj, forts, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(absorber, vinf-ver:infi, absorber, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(dommage, nc-nom, dommage, [n-1]), ex_si(durable, adj-adj, durable, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-t-il', cls-pro:per, '-t-il', [np-1]), ex_si(dit, vpp-ver:pper, dit, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1132, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(tiens, v-ver:pres, tiens, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(souligner, vinf-ver:infi, souligner, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(circonstances, nc-nom, circonstances, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(uniques, adj-adj, uniques, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Barings', npp-nam, 'Barings', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appliquer, vinf-ver:infi, appliquer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(opérant, vpr-ver:ppre, opérant, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1133, Result) :-
      prob_parse([ ex_si('Barings', npp-nam, 'Barings', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(face, nc-nom, face, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(600, det-num, 600, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(bourses, nc-nom, bourses, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Singapour', npp-nam, 'Singapour', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Osaka', npp-nam, 'Osaka', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Tokyo', npp-nam, 'Tokyo', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-t-il', cls-pro:per, '-t-il', [np-1]), ex_si(dit, vpp-ver:pper, dit, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(quantifiables, adj-adj, quantifiables, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(attendues, vpp-ver:pper, attendues, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1134, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(bancaire, adj-adj, bancaire, [dl(0,n,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effondrée, vpp-ver:pper, effondrée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(spéculations, nc-nom, spéculations, [n-1]), ex_si(faites, vpp-ver:pper, faites, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), ex_si('Leeson', npp-nam, 'Leeson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1135, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(confiance, nc-nom, confiance, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamique, nc-nom, dynamique, [n-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(continuer, vinf-ver:infi, continuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Doyle', npp-nam, 'Doyle', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1136, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(dynamique, nc-nom, dynamique, [n-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déplacer, vinf-ver:infi, déplacer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1137, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(mexicaine, adj-adj, mexicaine, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(indication, nc-nom, indication, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(libre, adj-adj, libre, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(balayé, vpp-ver:pper, balayé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(latine, adj-adj, latine, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(décennie, nc-nom, décennie, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acceptation, nc-nom, acceptation, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1138, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fortement, adv-adv, fortement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(réagissant, vpr-ver:ppre, réagissant, [dr(0,dl(0,np,s_ppres),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(sondages, nc-nom, sondages, [n-1]), ex_si(favorables, adj-adj, favorables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), ex_si('libre-échangiste', adj-adj, 'libre-échangiste', [dl(0,n,n)-1]), ex_si('Fernando', npp-nam, 'Fernando', [dl(0,n,n)-1]), ex_si('Henrique', npp-nam, 'Henrique', [dl(0,n,n)-1]), ex_si('Cardoso', npp-nam, 'Cardoso', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1139, Result) :-
      prob_parse([ ex_si('Fernando', npp-nam, 'Fernando', [dr(0,np,np)-1]), ex_si('Henrique', npp-nam, 'Henrique', [dr(0,np,np)-1]), ex_si('Cardoso', npp-nam, 'Cardoso', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidence, nc-nom, présidence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1140, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(faible, adj-adj, faible, [dr(0,n,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('48,7', det-num, '48,7', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(bulletins, nc-nom, bulletins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(doublé, vpp-ver:pper, doublé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(outsider, nc-nom, outsider, [n-1]), ex_si('Diego', npp-nam, 'Diego', [dl(0,n,n)-1]), ex_si('Fernandez', npp-nam, 'Fernandez', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cevallos', npp-nam, 'Cevallos', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dauphin, nc-nom, dauphin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1141, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(initiés, nc-nom, initiés, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(favoris, adj-adj, favoris, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(remporter, vinf-ver:infi, remporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si('latino-américaines', adj-adj, 'latino-américaines', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(venir, vinf-ver:infi, venir, [dl(0,np,s_inf)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Fernando', npp-nam, 'Fernando', [dr(0,np,np)-1]), ex_si('Henrique', npp-nam, 'Henrique', [dr(0,np,np)-1]), ex_si('Cardoso', npp-nam, 'Cardoso', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sénat', npp-nam, 'Sénat', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cabinet', nc-nam, 'Cabinet', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(terminer, vinf-ver:infi, terminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(outsider, nc-nom, outsider, [n-1]), ex_si('Luis', npp-nam, 'Luis', [dl(0,n,n)-1]), ex_si('Inacio', npp-nam, 'Inacio', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Lula', npp-nam, 'Lula', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(da, npp-prp:det, da, [dr(0,np,np)-1]), ex_si('Silva', npp-nam, 'Silva', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gauche, nc-nom, gauche, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(tour, nc-nom, tour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1142, Result) :-
      prob_parse([ ex_si('Fernando', npp-nam, 'Fernando', [dr(0,np,np)-1]), ex_si('Henrique', npp-nam, 'Henrique', [dr(0,np,np)-1]), ex_si('Cardoso', npp-nam, 'Cardoso', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sénat', npp-nam, 'Sénat', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cabinet', nc-nam, 'Cabinet', [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1143, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(obligerait, v-ver:cond, obligerait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(choisir, vinf-ver:infi, choisir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('peut-être', adv-adv, 'peut-être', [dr(0,pp,pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1144, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(réduirait, v-ver:impf, réduirait, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(néant, nc-nom, néant, [n-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(promesses, nc-nom, promesses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(toute, adv-adv, toute, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si('Coopération', nc-nom, 'Coopération', [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si('Asie-Pacifique', npp-nam, 'Asie-Pacifique', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('APEC', npp-abr, 'APEC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(moyen, nc-nom, moyen, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Américains', nc-nam, 'Américains', [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(plein, adj-adj, plein, [dr(0,n,n)-1]), ex_si(essor, nc-nom, essor, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pacifique', npp-nam, 'Pacifique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1145, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(insensé, adj-adj, insensé, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(risquer, vinf-ver:infi, risquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(tout, adv-pro:ind, tout, [dr(0,np,np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si(défectueux, adj-adj, défectueux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1146, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(nier, vinf-ver:infi, nier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frustration, nc-nom, frustration, [n-1]), ex_si(compréhensible, adj-adj, compréhensible, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(persistance, nc-nom, persistance, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(énorme, adj-adj, énorme, [dr(0,n,n)-1]), ex_si(excédent, nc-nom, excédent, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(japonais, adj-adj, japonais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1147, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('APEC', npp-abr, 'APEC', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(toute, adv-adv, toute, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si('Coopération', nc-nom, 'Coopération', [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si('Asie-Pacifique', npp-nam, 'Asie-Pacifique', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1148, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(peuples, nc-nom, peuples, [n-1]), ex_si(tamouls, adj-adj, tamouls, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sri', npp-nam, 'Sri', [n-1]), ex_si('Lanka', npp-nam, 'Lanka', [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ceylan', npp-nam, 'Ceylan', [np-1]), ex_si(indépendant, adj-adj, indépendant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1948, pro-num, 1948, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sri', npp-nam, 'Sri', [np-1]), ex_si('Lanka', npp-nam, 'Lanka', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,np,n)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mot, nc-nom, mot, [n-1]), ex_si(cinghalais, adj-adj, cinghalais, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1972, pro-num, 1972, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1149, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ceylan', npp-nam, 'Ceylan', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Sri', npp-nam, 'Sri', [dr(0,np,np)-1]), ex_si('Lanka', npp-nam, 'Lanka', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1150, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(19, adj-num, 19, [dl(0,n,n)-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(correspondant, nc-nom, correspondant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(indépendant, adj-adj, indépendant, [dl(0,n,n)-1]), ex_si('Narodnaya', npp-nam, 'Narodnaya', [dl(0,n,n)-1]), ex_si('Volya', npp-nam, 'Volya', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(combien, advwh-adv, combien, [dr(0,s_whq,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(impliquées, vpp-ver:pper, impliquées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(contaminée, vpp-ver:pper, contaminée, [dl(0,n,n)-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(réacteur, nc-nom, réacteur, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), ex_si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),s_q)-1]), ex_si(par, p-prp, par, [dr(0,pp_de,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(urgences, nc-nom, urgences, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(journaux, nc-nom, journaux, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(étatiques, adj-adj, étatiques, [dl(0,n,n)-1]), ex_si(pouvaient, v-ver:impf, pouvaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si(refuser, vinf-ver:infi, refuser, [dr(0,np,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1151, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produite, vpp-ver:pper, produite, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1152, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Time-Life', npp-nam, 'Time-Life', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Shuker', npp-nam, 'Shuker', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejoint, vpp-ver:pper, rejoint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Public', npp-nam, 'Public', [dr(0,n,n)-1]), ex_si('Broadcast', npp-nam, 'Broadcast', [n-1]), ex_si('Laboratory', npp-nam, 'Laboratory', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(précurseur, nc-nom, précurseur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('PBS', npp-abr, 'PBS', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(pionniers, adj-adj, pionniers, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Chair', npp-nam, 'Chair', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avocat, nc-nom, avocat, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(tente, v-ver:pres, tente, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(sauver, vinf-ver:infi, sauver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(condamné, nc-nom, condamné, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,np)-1]), ex_si('Free', npp-nam, 'Free', [np-1]), ex_si('At', et-nam, 'At', [dr(0,dl(0,np,np),np)-1]), ex_si('Last', npp-nam, 'Last', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(documentaire, nc-nom, documentaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(90, det-num, 90, [dr(0,np,n)-1]), ex_si(minutes, nc-nom, minutes, [n-1]), ex_si(sur, p-prp, sur, [dr(0,np,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Martin', npp-nam, 'Martin', [dl(0,n,n)-1]), ex_si('Luther', npp-nam, 'Luther', [dl(0,n,n)-1]), ex_si('King', npp-nam, 'King', [dl(0,n,n)-1]), ex_si('Jr', npp-abr, 'Jr', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1153, Result) :-
      prob_parse([ ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(hasard, nc-nom, hasard, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réalisation, nc-nom, réalisation, [n-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si('King', npp-nam, 'King', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,dl(0,n,n),txt)-1])], Result).
sent(1154, Result) :-
      prob_parse([ ex_si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), ex_si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), ex_si('King', npp-nam, 'King', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1155, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),dl(0,np,s_ppres))-1]), ex_si(attendant, vpr-ver:ppre, attendant, [dl(0,np,s_ppres)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(festival, nc-nom, festival, [n-1]), ex_si('Pouchkine-Goethe', npp-nam, 'Pouchkine-Goethe', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(tenu, vpp-ver:pper, tenu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(récemment, adv-adv, récemment, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(célébrer, vinf-ver:infi, célébrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(anniversaires, nc-nom, anniversaires, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(poètes, nc-nom, poètes, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(1,s,s),s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('250e', nc-num, '250e', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Goethe', npp-nam, 'Goethe', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Dmitri', npp-nam, 'Dmitri', [dr(0,np,np)-1]), ex_si('Prigov', npp-nam, 'Prigov', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(poète, nc-nom, poète, [n-1]), ex_si('post-moderniste', adj-adj, 'post-moderniste', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(artiste, nc-nom, artiste, [n-1]), ex_si(conceptuel, adj-adj, conceptuel, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(repris, vpp-ver:pper, repris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [np-1]), ex_si('Onéguine', npp-nam, 'Onéguine', [np-1]), ex_si('"', ponct-pun:cit, '"', [np-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Mon', det-det:pos, 'Mon', [dr(0,np,n)-1]), ex_si(oncle, nc-nom, oncle, [let-1]), ex_si('-', ponct-pun, '-', [dr(0,np,n)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,np,n)-1]), ex_si(idéaux, nc-nom, idéaux, [dr(0,np,n)-1]), ex_si('l\'', clo-pro:per, 'l\'', [n-1]), ex_si(inspirent, v-ver:pres, inspirent, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [dr(0,dl(0,np,s),np)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [n-1]), ex_si(mise, vpp-ver:pper, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,np,n)-1]), ex_si(musique, nc-nom, musique, [dr(0,np,n)-1]), ex_si(avec, p-prp, avec, [n-1]), ex_si(des, det-prp:det, des, [n-1]), ex_si(mantras, nc-nom, mantras, [n-1]), ex_si(bouddhistes, adj-adj, bouddhistes, [n-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(musulmans, adj-adj, musulmans, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(des, det-prp:det, des, [dl(0,n,n)-1]), ex_si(chants, nc-nom, chants, [dl(0,n,n)-1]), ex_si(orthodoxes, adj-adj, orthodoxes, [dl(0,n,n)-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(grégoriens, adj-adj, grégoriens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1156, Result) :-
      prob_parse([ ex_si('Johann', npp-nam, 'Johann', [dr(0,np,np)-1]), ex_si('Wolfgang', npp-nam, 'Wolfgang', [dr(0,np,np)-1]), ex_si(von, et-prp, von, [dr(0,np,np)-1]), ex_si('Goethe', npp-nam, 'Goethe', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1157, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si(organisée, vpp-ver:pper, organisée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(ici, adv-adv, ici, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('NHRC', npp-abr, 'NHRC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Anand', npp-nam, 'Anand', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(défis, nc-nom, défis, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(les, det-det:art, les, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(urgents, adj-adj, urgents, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(concernaient, v-ver:impf, concernaient, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(maternels, adj-adj, maternels, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(infantiles, adj-adj, infantiles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maltraitance, nc-nom, maltraitance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(minorités, nc-nom, minorités, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sections, nc-nom, sections, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(faibles, adj-adj, faibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1158, Result) :-
      prob_parse([ ex_si('Amnesty', npp-nam, 'Amnesty', [dr(0,np,np)-1]), ex_si('International', npp-nam, 'International', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(occupe, v-ver:pres, occupe, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1159, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si('Jacques', npp-nam, 'Jacques', [dl(0,n,n)-1]), ex_si('Chirac', npp-nam, 'Chirac', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(conservateur, nc-nom, conservateur, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('Kohl', npp-nam, 'Kohl', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Lionel', npp-nam, 'Lionel', [dl(0,n,n)-1]), ex_si('Jospin', npp-nam, 'Jospin', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(camarades, nc-nom, camarades, [n-1]), ex_si(socialistes, adj-adj, socialistes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('sociaux-démocrates', nc-nom, 'sociaux-démocrates', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Schroeder', npp-nam, 'Schroeder', [np-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(poursuite, nc-nom, poursuite, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tendance, nc-nom, tendance, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), ex_si('Blairau', npp-nam, 'Blairau', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(hommage, nc-nom, hommage, [dr(0,pp_a,np)-1]), ex_si(à, p-prp, à, [dr(0,np,n)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(deux, nc-num, deux, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(égale, adj-adj, égale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1160, Result) :-
      prob_parse([ ex_si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), ex_si('Blair', npp-nam, 'Blair', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1161, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(assistants, nc-nom, assistants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), ex_si('Blair', npp-nam, 'Blair', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(13, det-num, 13, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(actuel, adj-adj, actuel, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(conjointement, adv-adv, conjointement, [dl(1,s,s)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(chercher, vinf-ver:infi, chercher, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(blâmer, vinf-ver:infi, blâmer, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(mutuellement, adv-adv, mutuellement, [dl(1,s,s)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bureaucratie, nc-nom, bureaucratie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(considérée, vpp-ver:pper, considérée, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(distante, adj-adj, distante, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(autoritaire, adj-adj, autoritaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1162, Result) :-
      prob_parse([ ex_si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), ex_si('Blair', npp-nam, 'Blair', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1163, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si(proposé, vpp-ver:pper, proposé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Albert', npp-nam, 'Albert', [dr(0,np,np)-1]), ex_si('Einstein', npp-nam, 'Einstein', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(souvent, adv-adv, souvent, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(réitéré, vpp-ver:pper, réitéré, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(astrophysicien, nc-nom, astrophysicien, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), ex_si('Hawking', npp-nam, 'Hawking', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cherche, v-ver:pres, cherche, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(équations, nc-nom, équations, [n-1]), ex_si(pouvant, vpr-ver:ppre, pouvant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(expliquer, vinf-ver:infi, expliquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(fondamentales, adj-adj, fondamentales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gravité, nc-nom, gravité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électromagnétisme, nc-nom, électromagnétisme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(interactives, adj-adj, interactives, [dl(0,n,n)-1]), ex_si(fortes, adj-adj, fortes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(faibles, adj-adj, faibles, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(subnucléaires, adj-adj, subnucléaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1164, Result) :-
      prob_parse([ ex_si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), ex_si('Hawking', npp-nam, 'Hawking', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(physicien, nc-nom, physicien, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1165, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(affection, nc-nom, affection, [n-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(trouble, nc-nom, trouble, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anxiété, nc-nom, anxiété, [n-1]), ex_si(sociale, adj-adj, sociale, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejoint, vpp-ver:pper, rejoint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(baisses, nc-nom, baisses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obésité, nc-nom, obésité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impuissance, nc-nom, impuissance, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dépression, nc-nom, dépression, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(phobie, nc-nom, phobie, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Américains', nc-nam, 'Américains', [n-1]), ex_si(considéraient, v-ver:impf, considéraient, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si(autrefois, adv-adv, autrefois, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(communément, adv-adv, communément, [dl(1,s,s)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(défis, nc-nom, défis, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(volonté, nc-nom, volonté, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(caractère, nc-nom, caractère, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(traités, vpp-ver:pper, traités, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(avalant, vpr-ver:ppre, avalant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pilule, nc-nom, pilule, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1166, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(phobie, nc-nom, phobie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(peur, nc-nom, peur, [n-1]), ex_si(extrême, adj-adj, extrême, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chose, nc-nom, chose, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(particulière, adj-adj, particulière, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1167, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('FNP', npp-abr, 'FNP', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(présentent, v-ver:pres, présentent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(symptômes, nc-nom, symptômes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Parkinson', npp-nam, 'Parkinson', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(besoins, nc-nom, besoins, [n-1]), ex_si(particuliers, adj-adj, particuliers, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(élever, vinf-ver:infi, élever, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(emplois, nc-nom, emplois, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(conserver, vinf-ver:infi, conserver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(régler, vinf-ver:infi, régler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(différents, adj-adj, différents, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1168, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(symptômes, nc-nom, symptômes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Parkinson', npp-nam, 'Parkinson', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(suivants, nc-nom, suivants, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),n)-1]), ex_si(tremblement, nc-nom, tremblement, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(rigidité, nc-nom, rigidité, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(raideur, nc-nom, raideur, [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,n,n),n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tonus, nc-nom, tonus, [n-1]), ex_si(musculaire, adj-adj, musculaire, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(bradykinésie, nc-nom, bradykinésie, [n-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), ex_si(akinésie, nc-nom, akinésie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(également, adv-adv, également, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dysdiadokinésie, nc-nom, dysdiadokinésie, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(instabilité, nc-nom, instabilité, [dl(0,n,n)-1]), ex_si(posturale, adj-adj, posturale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1169, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(familiers, adj-adj, familiers, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(candidature, nc-nom, candidature, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décrit, vpp-ver:pper, décrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ciblé, vpp-ver:pper, ciblé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(votes, nc-nom, votes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(17, det-num, 17, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(africains, adj-adj, africains, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CIO', npp-abr, 'CIO', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('Nagano', npp-nam, 'Nagano', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(accueillir, vinf-ver:infi, accueillir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1998, pro-num, 1998, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1170, Result) :-
      prob_parse([ ex_si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', npp-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déroulaient, v-ver:impf, déroulaient, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Nagano', npp-nam, 'Nagano', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1171, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(installations, nc-nom, installations, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(remarquables, adj-adj, remarquables, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(science, nc-nom, science, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1172, Result) :-
      prob_parse([ ex_si('Hubulle', npp-nam, 'Hubulle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1173, Result) :-
      prob_parse([ ex_si('Jurassic', npp-nam, 'Jurassic', [dr(0,np,np)-1]), ex_si('Park', npp-nam, 'Park', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(roman, nc-nom, roman, [n-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Crichton', npp-nam, 'Crichton', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1174, Result) :-
      prob_parse([ ex_si('Jurassic', npp-nam, 'Jurassic', [dr(0,np,np)-1]), ex_si('Park', npp-nam, 'Park', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1990, pro-num, 1990, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1175, Result) :-
      prob_parse([ ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Crichton', npp-nam, 'Crichton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si('Jurassic', npp-nam, 'Jurassic', [dl(0,n,n)-1]), ex_si('Park', npp-nam, 'Park', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1176, Result) :-
      prob_parse([ ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Becker', npp-nam, 'Becker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), ex_si(légende, nc-nom, légende, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tennis, nc-nom, tennis, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1177, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si('dix-sept', det-num, 'dix-sept', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(joueur, nc-nom, joueur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tennis, nc-nom, tennis, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(prolifique, adj-adj, prolifique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1178, Result) :-
      prob_parse([ ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Becker', npp-nam, 'Becker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(champion, nc-nom, champion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1179, Result) :-
      prob_parse([ ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Becker', npp-nam, 'Becker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(joueur, nc-nom, joueur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tennis, nc-nom, tennis, [n-1]), ex_si(professionnel, adj-adj, professionnel, [dl(0,n,n)-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1180, Result) :-
      prob_parse([ ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Becker', npp-nam, 'Becker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(champion, nc-nom, champion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1181, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(atomique, adj-adj, atomique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(explosé, vpp-ver:pper, explosé, [dl(0,np,s_ppart)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Hiroshima', npp-nam, 'Hiroshima', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(explosive, adj-adj, explosive, [dl(0,n,n)-1]), ex_si(équivalente, adj-adj, équivalente, [dl(0,n,n)-1]), ex_si(estimée, vpp-ver:pper, estimée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('12.500', det-num, '12.500', [dr(0,np,n)-1]), ex_si(tonnes, nc-nom, tonnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('TNT', npp-abr, 'TNT', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(suivie, vpp-ver:pper, suivie, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(seconde, adj-num, seconde, [dr(0,n,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(puissante, adj-adj, puissante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Nagasaki', npp-nam, 'Nagasaki', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1182, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(atomique, adj-adj, atomique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(larguée, vpp-ver:pper, larguée, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Hiroshima', npp-nam, 'Hiroshima', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1183, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interviewé, vpp-ver:pper, interviewé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Shigeko', npp-nam, 'Shigeko', [dr(0,np,np)-1]), ex_si('Sasamori', npp-nam, 'Sasamori', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2004, adj-num, 2004, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1184, Result) :-
      prob_parse([ ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Sasamori', npp-nam, 'Sasamori', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(treize, det-num, treize, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(atomique, adj-adj, atomique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(larguée, vpp-ver:pper, larguée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Hiroshima', npp-nam, 'Hiroshima', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(1,s,s),n)-1]), ex_si(6, det-num, 6, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1185, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(atomique, adj-adj, atomique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(larguée, vpp-ver:pper, larguée, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Hiroshima', npp-nam, 'Hiroshima', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1186, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(atomique, adj-adj, atomique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(larguée, vpp-ver:pper, larguée, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hiroshima', npp-nam, 'Hiroshima', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1187, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Enola', npp-nam, 'Enola', [n-1]), ex_si('Gay', npp-nam, 'Gay', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(piloté, vpp-ver:pper, piloté, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(colonel, nc-nom, colonel, [n-1]), ex_si('Tibbetts', npp-nam, 'Tibbetts', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(choisi, vpp-ver:pper, choisi, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1188, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(réussie, vpp-ver:pper, réussie, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitaine, nc-nom, capitaine, [n-1]), ex_si('William', npp-nam, 'William', [dl(0,n,n)-1]), ex_si('S.', npp-abr, 'S.', [dl(0,n,n)-1]), ex_si('Parson', npp-nam, 'Parson', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('9h20', nc-num, '9h20', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(matin, nc-nom, matin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1189, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(atomique, adj-adj, atomique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(larguée, vpp-ver:pper, larguée, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Hiroshima', npp-nam, 'Hiroshima', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1190, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,np,np)-1]), ex_si('Homer', npp-nam, 'Homer', [np-1]), ex_si(réalise, v-ver:pres, réalise, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intelligence, nc-nom, intelligence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(tendue, vpp-ver:pper, tendue, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jan', npp-nam, 'Jan', [np-1]), ex_si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), ex_si('Bont', npp-nam, 'Bont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1191, Result) :-
      prob_parse([ ex_si('Projections', nc-nom, 'Projections', [n-1]), ex_si(laser, nc-nom, laser, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Speed', npp-nam, 'Speed', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(écran, nc-nom, écran, [n-1]), ex_si(large, adj-adj, large, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Keanu', npp-nam, 'Keanu', [dr(0,np,np)-1]), ex_si('Reeves', npp-nam, 'Reeves', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Dennis', npp-nam, 'Dennis', [dr(0,np,np)-1]), ex_si('Hopper', npp-nam, 'Hopper', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sandra', npp-nam, 'Sandra', [dr(0,np,np)-1]), ex_si('Bullock', npp-nam, 'Bullock', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1192, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Speed\'', npp-nam, 'Speed\'', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,np,np)-1]), ex_si('Jan', npp-nam, 'Jan', [np-1]), ex_si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), ex_si('Bont', npp-nam, 'Bont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1193, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si('Kim', npp-nam, 'Kim', [dl(0,n,n)-1]), ex_si('Ki-duk', npp-nam, 'Ki-duk', [dl(0,n,n)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dr(0,n,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Américains', nc-nam, 'Américains', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(comprennent, v-ver:pres, comprennent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(coréens, adj-adj, coréens, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(intrigue, nc-nom, intrigue, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1194, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,np,np),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si('\'', ponct-pun:cit, '\'', [let-1]), ex_si('Speed\'', npp-nam, 'Speed\'', [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), ex_si('Keanu', npp-nam, 'Keanu', [dr(0,np,np)-1]), ex_si('Reeves', npp-nam, 'Reeves', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1195, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Speed\'', npp-nam, 'Speed\'', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,np,np)-1]), ex_si('Jan', npp-nam, 'Jan', [np-1]), ex_si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), ex_si('Bont', npp-nam, 'Bont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1196, Result) :-
      prob_parse([ ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('González', npp-nam, 'González', [dr(0,np,np)-1]), ex_si('Márquez', npp-nam, 'Márquez', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(1942, adj-num, 1942, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(socialiste, adj-adj, socialiste, [dl(0,n,n)-1]), ex_si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1197, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(socialiste, adj-adj, socialiste, [dl(0,n,n)-1]), ex_si(ouvrier, adj-adj, ouvrier, [dl(0,n,n)-1]), ex_si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('PSOE', npp-abr, 'PSOE', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1974, pro-num, 1974, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1997, pro-num, 1997, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1198, Result) :-
      prob_parse([ ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('González', npp-nam, 'González', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1199, Result) :-
      prob_parse([ ex_si('González', npp-nam, 'González', [dr(0,np,np)-1]), ex_si('Márquez', npp-nam, 'Márquez', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Felipe', npp-nam, 'Felipe', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dirigeant, nc-nom, dirigeant, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1200, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(rejoint, vpp-ver:pper, rejoint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(alors, adv-adv, alors, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(socialiste, adj-adj, socialiste, [dl(0,n,n)-1]), ex_si(ouvrier, adj-adj, ouvrier, [dl(0,n,n)-1]), ex_si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('González', npp-nam, 'González', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(renaître, vinf-ver:infi, renaître, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(position, nc-nom, position, [n-1]), ex_si(moribonde, adj-adj, moribonde, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tombé, vpp-ver:pper, tombé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si('Franco', npp-nam, 'Franco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1201, Result) :-
      prob_parse([ ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('González', npp-nam, 'González', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1202, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vaisseau, nc-nom, vaisseau, [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Apollo', npp-nam, 'Apollo', [np-1]), ex_si('XI', adj-num, 'XI', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(alunissage, nc-nom, alunissage, [n-1]), ex_si(habité, vpp-ver:pper, habité, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(marcher, vinf-ver:infi, marcher, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1203, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('C\'est', v-ver:pres, 'C\'est', [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), ex_si(petit, adj-adj, petit, [dr(0,np,n)-1]), ex_si(pas, nc-nom, pas, [dr(0,n,n)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,n,n),np)-1]), ex_si(homme, nc-nom, homme, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), ex_si(pas, nc-nom, pas, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(géant, nc-nom, géant, [dr(0,dl(0,n,n),n)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(humanité, nc-nom, humanité, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(1204, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(historiques, adj-adj, historiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rêve, nc-nom, rêve, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(travers, nc-nom, travers, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(âges, nc-nom, âges, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1205, Result) :-
      prob_parse([ ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(poser, vinf-ver:infi, poser, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1206, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cyrillique, nc-nom, cyrillique, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dérivée, vpp-ver:pper, dérivée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si(grec, adj-adj, grec, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1207, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(caractères, nc-nom, caractères, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écriture, nc-nom, écriture, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(aspect, nc-nom, aspect, [n-1]), ex_si(sensiblement, adv-adv, sensiblement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(différent, adj-adj, différent, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si(latin, adj-adj, latin, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(occidentale, adj-adj, occidentale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1208, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cyrillique, nc-nom, cyrillique, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(alphabet, nc-nom, alphabet, [n-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(slaves, adj-adj, slaves, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(russe, nc-nom, russe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1209, Result) :-
      prob_parse([ ex_si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), ex_si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), ex_si('Huang', npp-nam, 'Huang', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(personnel, adj-adj, personnel, [dl(0,n,n)-1]), ex_si('Zheng', npp-nam, 'Zheng', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Qin', npp-nam, 'Qin', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(247, pro-num, 247, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(ère, nc-nom, ère, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(221, pro-num, 221, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,np,np),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(ère, nc-nom, ère, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(unifiée, vpp-ver:pper, unifiée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(221, pro-num, 221, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(ère, nc-nom, ère, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(210, pro-num, 210, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,np,np),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(ère, nc-nom, ère, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(régnant, vpr-ver:ppre, régnant, [dl(0,np,s_ppres)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,np,n)-1]), ex_si('Empereur', nc-nam, 'Empereur', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1210, Result) :-
      prob_parse([ ex_si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), ex_si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), ex_si('Huang', npp-nam, 'Huang', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1211, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Qin', npp-nam, 'Qin', [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('Chine', npp-nam, 'Chine', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dérivé, vpp-ver:pper, dérivé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(établi, vpp-ver:pper, établi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(approximatives, adj-adj, approximatives, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(administratif, adj-adj, administratif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dynasties, nc-nom, dynasties, [n-1]), ex_si(suivantes, vpr-ver:ppre, suivantes, [dl(0,n,n)-1]), ex_si(devaient, v-ver:impf, devaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(suivre, vinf-ver:infi, suivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1212, Result) :-
      prob_parse([ ex_si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), ex_si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), ex_si('Huang', npp-nam, 'Huang', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1213, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('israélo-égyptien', adj-adj, 'israélo-égyptien', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(retirer, vinf-ver:infi, retirer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(péninsule, nc-nom, péninsule, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sinaï', npp-nam, 'Sinaï', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(échange, nc-nom, échange, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(voisin, nc-nom, voisin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1214, Result) :-
      prob_parse([ ex_si('Pendant', p-prp, 'Pendant', [dr(0,dr(0,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(péninsule, nc-nom, péninsule, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sinaï', npp-nam, 'Sinaï', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accueilli, vpp-ver:pper, accueilli, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si('7.000', det-num, '7.000', [dr(0,np,n)-1]), ex_si('Israéliens', nc-nam, 'Israéliens', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1215, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('israélo-égyptien', adj-adj, 'israélo-égyptien', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signé, vpp-ver:pper, signé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1216, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(1979, adj-num, 1979, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(modifier, vinf-ver:infi, modifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(subsistance, nc-nom, subsistance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sauvagines, nc-nom, sauvagines, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1217, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('israélo-égyptien', adj-adj, 'israélo-égyptien', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signé, vpp-ver:pper, signé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1218, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(signent, v-ver:pres, signent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('Égypte-Israël', npp-nam, 'Égypte-Israël', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pelouse, nc-nom, pelouse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1219, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(présidents, nc-nom, présidents, [n-1]), ex_si('Begin', npp-nam, 'Begin', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Sadate', npp-nam, 'Sadate', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1220, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(nations, nc-nom, nations, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entretenu, vpp-ver:pper, entretenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(pacifiques, adj-adj, pacifiques, [dl(0,n,n)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1221, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('israélo-égyptien', adj-adj, 'israélo-égyptien', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signé, vpp-ver:pper, signé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1222, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('W.', npp-abr, 'W.', [dl(0,n,n)-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prononcé, vpp-ver:pper, prononcé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(discours, nc-nom, discours, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ouverture, nc-nom, ouverture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(présenté, vpp-ver:pper, présenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(extasié, vpp-ver:pper, extasié, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(implacable, adj-adj, implacable, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inébranlable, adj-adj, inébranlable, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inflexible, adj-adj, inflexible, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inarrêtable, adj-adj, inarrêtable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1223, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appeler, vinf-ver:infi, appeler, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Barbara', npp-nam, 'Barbara', [dr(0,n,n)-1]), ex_si('Bush', npp-nam, 'Bush', [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1224, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('H.W', npp-abr, 'H.W', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1225, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1226, Result) :-
      prob_parse([ ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('Herbert', npp-nam, 'Herbert', [dr(0,np,np)-1]), ex_si('Walker', npp-nam, 'Walker', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1924, adj-num, 1924, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('41e', adj-num, '41e', [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1227, Result) :-
      prob_parse([ ex_si('Presque', adv-adv, 'Presque', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(immédiatement, adv-adv, immédiatement, [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(épouse, v-ver:pres, épouse, [dr(0,dl(0,np,s),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [dr(0,np,np)-1]), ex_si('Pierce', npp-nam, 'Pierce', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1228, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('H.W', npp-abr, 'H.W', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1229, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1230, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Cent', det-num, 'Cent', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(solitude, nc-nom, solitude, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('L\'automne', npp-nam, 'L\'automne', [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(patriarche, nc-nom, patriarche, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(et, cc-kon, et, [let-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si(autres, adj-adj, autres, [dr(0,np,n)-1]), ex_si(romans, nc-nom, romans, [dr(0,n,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1231, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(romancier, nc-nom, romancier, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(écrivain, nc-nom, écrivain, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1232, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(penseur, nc-nom, penseur, [n-1]), ex_si(libéral, adj-adj, libéral, [dl(0,n,n)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gauche, nc-nom, gauche, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(colère, nc-nom, colère, [n-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(politiciens, nc-nom, politiciens, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nom, 'État', [n-1]), ex_si(conservateurs, adj-adj, conservateurs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1233, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(reporter, vinf-ver:infi, reporter, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(cubaine, adj-adj, cubaine, [dl(0,n,n)-1]), ex_si('Prensa', npp-nam, 'Prensa', [dl(0,n,n)-1]), ex_si('Latina', npp-nam, 'Latina', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1960, pro-num, 1960, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(amitié, nc-nom, amitié, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Fidel', npp-nam, 'Fidel', [dr(0,np,np)-1]), ex_si('Castro', npp-nam, 'Castro', [np-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(valu, vpp-ver:pper, valu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), ex_si(finalement, adv-adv, finalement, [dl(1,s,s)-1]), ex_si(refuser, vinf-ver:infi, refuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(raisons, nc-nom, raisons, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1234, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1235, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1867, pro-num, 1867, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(obtient, v-ver:pres, obtient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(brevet, nc-nom, brevet, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(spécial, adj-adj, spécial, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nitroglycérine, nc-nom, nitroglycérine, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dr(0,dl(0,np,s),np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dynamite, v-ver:pres, dynamite, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1236, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(invention, nc-nom, invention, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prouvé, vpp-ver:pper, prouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(utilité, nc-nom, utilité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bâtiment, nc-nom, bâtiment, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1237, Result) :-
      prob_parse([ ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1238, Result) :-
      prob_parse([ ex_si('Expérimentant', vpr-ver:ppre, 'Expérimentant', [dr(0,dl(0,np,s_ppres),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(radeau, nc-nom, radeau, [n-1]), ex_si(ancré, adj-adj, ancré, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Elbe', npp-nam, 'Elbe', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(tente, v-ver:pres, tente, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nitroglycérine, nc-nom, nitroglycérine, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sûre, adj-adj, sûre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(manipuler, vinf-ver:infi, manipuler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1239, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(découvre, v-ver:pres, découvre, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ajout, nc-nom, ajout, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(kieselguhr, nc-nom, kieselguhr, [n-1]), ex_si(transforme, v-ver:pres, transforme, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nitroglycérine, nc-nom, nitroglycérine, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pâte, nc-nom, pâte, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), ex_si(on, cls-pro:per, on, [dr(0,np,np)-1]), ex_si(peut, v-ver:pres, peut, [np-1]), ex_si(pétrir, vinf-ver:infi, pétrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [let-1]), ex_si('l\'', clo-pro:per, 'l\'', [np-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dynamite, nc-ver:pres, dynamite, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1240, Result) :-
      prob_parse([ ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1241, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Ardeer', npp-nam, 'Ardeer', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Écosse', npp-nam, 'Écosse', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1242, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1877, pro-num, 1877, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(changé, vpp-ver:pper, changé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Nobel\'s', npp-nam, 'Nobel\'s', [dr(0,n,n)-1]), ex_si('Explosives', npp-nam, 'Explosives', [dr(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1243, Result) :-
      prob_parse([ ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1244, Result) :-
      prob_parse([ ex_si('Euro', npp-nam, 'Euro', [dr(0,np,np)-1]), ex_si('Disney', npp-nam, 'Disney', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(parcs, nc-nom, parcs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(thème, nc-nom, thème, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('EU', npp-abr, 'EU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1245, Result) :-
      prob_parse([ ex_si('Euro-Disney', npp-nam, 'Euro-Disney', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(divertissement, nc-nom, divertissement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1246, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Disneyland', npp-nam, 'Disneyland', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1247, Result) :-
      prob_parse([ ex_si('Euro', npp-nam, 'Euro', [dr(0,np,np)-1]), ex_si('Disney', npp-nam, 'Disney', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(immense, adj-adj, immense, [dr(0,n,n)-1]), ex_si(complexe, nc-nom, complexe, [n-1]), ex_si(comprenant, vpr-ver:ppre, comprenant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hôtels, nc-nom, hôtels, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(restaurants, nc-nom, restaurants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(boutiques, nc-nom, boutiques, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(golf, nc-nom, golf, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(proximité, nc-nom, proximité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(thème, nc-nom, thème, [n-1]), ex_si(proprement, adv-adv, proprement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dit, vpp-ver:pper, dit, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1248, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(offre, v-ver:pres, offre, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(expérience, nc-nom, expérience, [n-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(cousin, nc-nom, cousin, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(merveilles, nc-nom, merveilles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ingénierie, nc-nom, ingénierie, [n-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1249, Result) :-
      prob_parse([ ex_si('Euro-Disney', npp-nam, 'Euro-Disney', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(divertissement, nc-nom, divertissement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1250, Result) :-
      prob_parse([ ex_si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('quatre-vingts', det-num, 'quatre-vingts', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1251, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(cinquante, det-num, cinquante, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(officier, nc-nom, officier, [n-1]), ex_si(inconnu, adj-adj, inconnu, [dl(0,n,n)-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(promu, vpp-ver:pper, promu, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(grade, nc-nom, grade, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(temporaire, adj-adj, temporaire, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(brigade, nc-nom, brigade, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prononcé, vpp-ver:pper, prononcé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(célèbre, adj-adj, célèbre, [dr(0,n,n)-1]), ex_si(émission, nc-nom, émission, [n-1]), ex_si(rejetant, vpr-ver:ppre, rejetant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitulation, nc-nom, capitulation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nazis, nc-nom, nazis, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(débâcle, nc-nom, débâcle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('mai-juin', nc-nom, 'mai-juin', [n-1]), ex_si(1940, adj-num, 1940, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1252, Result) :-
      prob_parse([ ex_si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1253, Result) :-
      prob_parse([ ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(prend, v-ver:pres, prend, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(comte, nc-nom, comte, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(meurt, v-ver:pres, meurt, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1254, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(souhaité, vpp-ver:pper, souhaité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(funérailles, nc-nom, funérailles, [n-1]), ex_si(simples, adj-adj, simples, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('lui-même', pro-pro:per, 'lui-même', [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(enterré, vpp-ver:pper, enterré, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(village, nc-nom, village, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cercueil, nc-nom, cercueil, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(chêne, nc-nom, chêne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('soixante-douze', det-num, 'soixante-douze', [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(porté, vpp-ver:pper, porté, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(tombe, nc-nom, tombe, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(concitoyens, nc-nom, concitoyens, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(village, nc-nom, village, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('aide-boucher', nc-nom, 'aide-boucher', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fromager, nc-nom, fromager, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(valet, nc-nom, valet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ferme, nc-nom, ferme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1255, Result) :-
      prob_parse([ ex_si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1256, Result) :-
      prob_parse([ ex_si('Geneviève', npp-nam, 'Geneviève', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Gaulle-Anthonics', npp-nam, 'Gaulle-Anthonics', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(81, det-num, 81, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(nièce, nc-nom, nièce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défunt, nc-nom, défunt, [dr(0,n,n)-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédée, vpp-ver:pper, décédée, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2002, adj-num, 2002, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1257, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejoint, vpp-ver:pper, rejoint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résistance, nc-nom, résistance, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Allemands', nc-nam, 'Allemands', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(occupé, vpp-ver:pper, occupé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1258, Result) :-
      prob_parse([ ex_si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1259, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(propagande, nc-nom, propagande, [n-1]), ex_si(argentine, adj-adj, argentine, [dl(0,n,n)-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(des, det-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sauvages, nc-nom, sauvages, [n-1]), ex_si(malfaisants, adj-adj, malfaisants, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(mangeaient, v-ver:impf, mangeaient, [dr(0,dl(0,np,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(prisonniers, nc-nom, prisonniers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1260, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(combattre, vinf-ver:infi, combattre, [dl(0,np,s_inf)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conscrits, nc-nom, conscrits, [n-1]), ex_si(argentins, adj-adj, argentins, [dl(0,n,n)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(bout, nc-nom, bout, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(fuir, vinf-ver:infi, fuir, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,np)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(brève, adj-adj, brève, [dr(0,n,n)-1]), ex_si(résistance, nc-nom, résistance, [n-1]), ex_si(symbolique, adj-adj, symbolique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1261, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1262, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si(montagneux, adj-adj, montagneux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(guerriers, nc-nom, guerriers, [n-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(tenaces, adj-adj, tenaces, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(1,s,s),s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(fantassins, nc-nom, fantassins, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(meilleurs, nc-adj, meilleurs, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,pp,pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si(rapproché, vpp-ver:pper, rapproché, [dl(0,n,n)-1]), ex_si(jungle, nc-nom, jungle, [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(montagne, nc-nom, montagne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(type, nc-nom, type, [dr(0,n,n)-1]), ex_si(corps, nc-nom, corps, [dr(0,dl(0,n,n),n)-1]), ex_si(à, p-prp, à, [n-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1263, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1264, Result) :-
      prob_parse([ ex_si('Arromanches-les-Bains', npp-nam, 'Arromanches-les-Bains', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(simplement, adv-adv, simplement, [dr(0,dr(0,np,np),dr(0,np,np))-1]), ex_si('Arromanches', npp-nam, 'Arromanches', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Normandie', npp-nam, 'Normandie', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dr(0,s,np)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déroulé, vpp-ver:pper, déroulé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(le, det-det:art, le, [n-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('J', nc-nom, 'J', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1265, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1266, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('D-Day', npp-nam, 'D-Day', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(maritime, adj-adj, maritime, [dl(0,n,n)-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rassemblée, vpp-ver:pper, rassemblée, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(dirigée, vpp-ver:pper, dirigée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1267, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1268, Result) :-
      prob_parse([ ex_si('Kohl', npp-nam, 'Kohl', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(adolescent, nc-nom, adolescent, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1269, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejoint, vpp-ver:pper, rejoint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CDU', npp-abr, 'CDU', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1947, pro-num, 1947, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1270, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), ex_si('Kohl', npp-nam, 'Kohl', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1271, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Klebnikov', npp-nam, 'Klebnikov', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(balles, nc-nom, balles, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(assassin, nc-nom, assassin, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(passage, nc-nom, passage, [n-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(sortait, v-ver:impf, sortait, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(ce, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), ex_si(soir, nc-nom, soir, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1272, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(arrivée, nc-nom, arrivée, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(municipal, adj-adj, municipal, [dl(0,n,n)-1]), ex_si('n°', nc-abr, 'n°', [dr(0,dl(0,n,n),np)-1]), ex_si(20, pro-num, 20, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1273, Result) :-
      prob_parse([ ex_si('Vladislav', npp-nam, 'Vladislav', [dr(0,np,np)-1]), ex_si('Listyev', npp-nam, 'Listyev', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1274, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Klebnikov', npp-nam, 'Klebnikov', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(balles, nc-nom, balles, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(assassin, nc-nom, assassin, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(passage, nc-nom, passage, [n-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(sortait, v-ver:impf, sortait, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(ce, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), ex_si(soir, nc-nom, soir, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1275, Result) :-
      prob_parse([ ex_si('Vladislav', npp-nam, 'Vladislav', [dr(0,np,np)-1]), ex_si('Listyev', npp-nam, 'Listyev', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1276, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Vladislav', npp-nam, 'Vladislav', [dl(0,n,n)-1]), ex_si('Listyev', npp-nam, 'Listyev', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(balle, nc-nom, balle, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(inconnu, nc-nom, inconnu, [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1277, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(opposants, nc-nom, opposants, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(proposée, vpp-ver:pper, proposée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1278, Result) :-
      prob_parse([ ex_si('Vladislav', npp-nam, 'Vladislav', [dr(0,np,np)-1]), ex_si('Listyev', npp-nam, 'Listyev', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1279, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(pièce, nc-nom, pièce, [n-1]), ex_si(majeure, adj-adj, majeure, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(comète, nc-nom, comète, [n-1]), ex_si('Shoemaker-Levy', npp-nam, 'Shoemaker-Levy', [dl(0,n,n)-1]), ex_si(9, adj-num, 9, [dl(0,n,n)-1]), ex_si(devait, v-ver:impf, devait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(frapper, vinf-ver:infi, frapper, [dl(0,np,s_inf)-1]), ex_si(juste, adv-adv, juste, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),n)-1]), ex_si(minuit, nc-nom, minuit, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(complétant, vpr-ver:ppre, complétant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(anneau, nc-nom, anneau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(panaches, nc-nom, panaches, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cratères, nc-nom, cratères, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(surchauffés, vpp-ver:pper, surchauffés, [dl(0,n,n)-1]), ex_si(tourbillonnants, adj-adj, tourbillonnants, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(débris, nc-nom, débris, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1280, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Jupiter', npp-nam, 'Jupiter', [np-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(balles, nc-nom, balles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mitrailleuse, nc-nom, mitrailleuse, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Eugene', npp-nam, 'Eugene', [dr(0,np,np)-1]), ex_si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(astronome, nc-nom, astronome, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(observatoire, nc-nom, observatoire, [n-1]), ex_si('Lowell', npp-nam, 'Lowell', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Flagstaff', npp-nam, 'Flagstaff', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Arizona', npp-nam, 'Arizona', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contribué, vpp-ver:pper, contribué, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(comète, nc-nom, comète, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1281, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(comète, nc-nom, comète, [n-1]), ex_si('Shoemaker-Levy', npp-nam, 'Shoemaker-Levy', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Jupiter', npp-nam, 'Jupiter', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1282, Result) :-
      prob_parse([ ex_si('Vous', cls-pro:per, 'Vous', [np-1]), ex_si(fouillez, v-ver:pres, fouillez, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(mémoire, nc-nom, mémoire, [n-1]), ex_si(visuelle, adj-adj, visuelle, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(voilà, vimp-ver:impe, voilà, [dr(0,dl(0,np,s),np)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si('Vermeer', npp-nam, 'Vermeer', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(artiste, nc-nom, artiste, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('17e', adj-num, '17e', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(peint, vpp-ver:pper, peint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(portraits, nc-nom, portraits, [n-1]), ex_si(extraordinaires, adj-adj, extraordinaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(engagées, vpp-ver:pper, engagées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordinaire, nc-nom, ordinaire, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dentelle, nc-nom, dentelle, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(collier, nc-nom, collier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(perles, nc-nom, perles, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1283, Result) :-
      prob_parse([ ex_si('Vermeer', npp-nam, 'Vermeer', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(artiste, nc-nom, artiste, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('17e', adj-num, '17e', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1284, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(collection, nc-nom, collection, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(témoignages, nc-nom, témoignages, [n-1]), ex_si(réels, adj-adj, réels, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), ex_si('Pohl', npp-nam, 'Pohl', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(dramaturges, nc-nom, dramaturges, [n-1]), ex_si(allemands, adj-adj, allemands, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(joués, vpp-ver:pper, joués, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(puissance, nc-nom, puissance, [n-1]), ex_si(réside, v-ver:pres, réside, [dr(0,dl(0,np,s),pp)-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,pp,s_q),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sens, nc-nom, sens, [n-1]), ex_si(conventionnel, adj-adj, conventionnel, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mot, nc-nom, mot, [n-1]), ex_si(drame, nc-nom, drame, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(révèle, v-ver:pres, révèle, [dr(0,dl(0,np,s),np)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(profondément, adv-adv, profondément, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(désaccord, nc-nom, désaccord, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('lui-même', pro-pro:per, 'lui-même', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(kaléidoscope, nc-nom, kaléidoscope, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(événements, nc-nom, événements, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(flatte, v-ver:pres, flatte, [dr(0,dl(0,np,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(camp, nc-nom, camp, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitalisme, nc-nom, capitalisme, [n-1]), ex_si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1285, Result) :-
      prob_parse([ ex_si('Klaus', npp-nam, 'Klaus', [dr(0,np,np)-1]), ex_si('Pohl', npp-nam, 'Pohl', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dramaturge, nc-nom, dramaturge, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1286, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tapis, nc-nom, tapis, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fabriqués, vpp-ver:pper, fabriqués, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Uttar', npp-nam, 'Uttar', [n-1]), ex_si('Pradesh', npp-nam, 'Pradesh', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abolition, nc-nom, abolition, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réglementation, nc-nom, réglementation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1287, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abolition, nc-nom, abolition, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réglementation, nc-nom, réglementation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1288, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1869, adj-num, 1869, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Naples', npp-nam, 'Naples', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1289, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Umberto', npp-nam, 'Umberto', [dr(0,np,np)-1]), ex_si('I', adj-num, 'I', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), ex_si(succède, v-ver:pres, succède, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(trône, nc-nom, trône, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1290, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('III', adj-num, 'III', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(roi, nc-nom, roi, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1291, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('Victor', npp-nam, 'Victor', [dl(0,n,n)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dl(0,n,n)-1]), ex_si('III', adj-num, 'III', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(régné, vpp-ver:pper, régné, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(1,s,s)),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1292, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(roi, nc-nom, roi, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1293, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si(cède, v-ver:pres, cède, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(pouvoirs, nc-nom, pouvoirs, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si('Umberto', npp-nam, 'Umberto', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1944, pro-num, 1944, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dernier, nc-nom, dernier, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(nommé, vpp-ver:pper, nommé, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(lieutenant, nc-nom, lieutenant, [np-1]), ex_si(général, adj-adj, général, [dl(0,np,np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(royaume, nc-nom, royaume, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(abdique, v-ver:simp, abdique, [dl(0,np,s)-1]), ex_si(finalement, adv-adv, finalement, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1294, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('III', adj-num, 'III', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(roi, nc-nom, roi, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1295, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('1869-1947', pro-num, '1869-1947', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si('1900-1946', pro-num, '1900-1946', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Ethiopie', npp-nam, 'Ethiopie', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si('1936-43', pro-num, '1936-43', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('Albanie', npp-nam, 'Albanie', [dr(0,dl(0,n,n),np)-1]), ex_si('(', ponct-pun, '(', [np-1]), ex_si('1939-43', pro-num, '1939-43', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(successeur, nc-nom, successeur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Humbert', npp-nam, 'Humbert', [np-1]), ex_si('I', adj-num, 'I', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1296, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),np)-1]), ex_si(roi, nc-nom, roi, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1297, Result) :-
      prob_parse([ ex_si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(hongrois, nc-nom, hongrois, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,n,n),np)-1]), ex_si('Liszt', npp-nam, 'Liszt', [dr(0,np,np)-1]), ex_si('Ferenc', npp-nam, 'Ferenc', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pianiste, nc-nom, pianiste, [n-1]), ex_si(virtuose, adj-adj, virtuose, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(compositeur, nc-nom, compositeur, [n-1]), ex_si(hongrois, adj-adj, hongrois, [dl(0,n,n)-1]), ex_si('/', ponct-pun, '/', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(autrichien, adj-adj, autrichien, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1811, pro-num, 1811, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1886, pro-num, 1886, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1298, Result) :-
      prob_parse([ ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(considéré, vpp-ver:pper, considéré, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(virtuoses, nc-nom, virtuoses, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(piano, nc-nom, piano, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(certainement, adv-adv, certainement, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(célèbre, adj-adj, célèbre, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('XIXe', adj-num, 'XIXe', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1299, Result) :-
      prob_parse([ ex_si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1811, pro-num, 1811, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(1886, pro-num, 1886, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1300, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Altenburg', npp-nam, 'Altenburg', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si('Jenaer', npp-nam, 'Jenaer', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(juste, adv-adv, juste, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extérieur, nc-nom, extérieur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('centre-ville', nc-nom, 'centre-ville', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Weimar', npp-nam, 'Weimar', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('au-delà', p-prp, 'au-delà', [dr(0,pp_de,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si('Ilm', npp-nam, 'Ilm', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1301, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(construit, vpp-ver:pper, construit, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('1810-1811', pro-num, '1810-1811', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(1848, pro-num, 1848, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(princesse, nc-nom, princesse, [n-1]), ex_si('Carolyne', npp-nam, 'Carolyne', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sayn', npp-nam, 'Sayn', [dr(0,np,np)-1]), ex_si('Wittgenstein', npp-nam, 'Wittgenstein', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(mari, nc-nom, mari, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1302, Result) :-
      prob_parse([ ex_si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1811, pro-num, 1811, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(1886, pro-num, 1886, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1303, Result) :-
      prob_parse([ ex_si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(compositeur, nc-nom, compositeur, [n-1]), ex_si(hongrois, adj-adj, hongrois, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1811, pro-num, 1811, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(0,n,n)),np)-1]), ex_si(1886, pro-num, 1886, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équivalent, nc-nom, équivalent, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rock, et-nom, rock, [dr(0,n,n)-1]), ex_si(star, nc-nom, star, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1304, Result) :-
      prob_parse([ ex_si('Ses', det-det:pos, 'Ses', [dr(0,np,n)-1]), ex_si(compositions, nc-nom, compositions, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(piano, nc-nom, piano, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(donnait, v-ver:impf, donnait, [dr(0,dl(0,np,s),np)-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(concerts, nc-nom, concerts, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(multitude, nc-nom, multitude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fans, nc-nom, fans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1305, Result) :-
      prob_parse([ ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pionnier, nc-nom, pionnier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(techniques, nc-nom, techniques, [n-1]), ex_si(musicales, adj-adj, musicales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(poème, nc-nom, poème, [n-1]), ex_si(symphonique, adj-adj, symphonique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(technique, nc-nom, technique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transformation, nc-nom, transformation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(thèmes, nc-nom, thèmes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1306, Result) :-
      prob_parse([ ex_si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1811, pro-num, 1811, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(1886, pro-num, 1886, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1307, Result) :-
      prob_parse([ ex_si('Eschyle', npp-nam, 'Eschyle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(525, pro-num, 525, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si('JC', npp-nam, 'JC', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(jeunesse, nc-nom, jeunesse, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(athénienne, adj-adj, athénienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1308, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(53, det-num, 53, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(conservée, vpp-ver:pper, conservée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1309, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Eschyle', npp-nam, 'Eschyle', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1310, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(écrire, vinf-ver:infi, écrire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(débute, v-ver:pres, débute, [dl(0,np,s)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(théâtre, nc-nom, théâtre, [n-1]), ex_si('Aurora', npp-nam, 'Aurora', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berkeley', npp-nam, 'Berkeley', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Ellen', npp-nam, 'Ellen', [dr(0,np,np)-1]), ex_si('McLaughlin', npp-nam, 'McLaughlin', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1311, Result) :-
      prob_parse([ ex_si('Compte', nc-nom, 'Compte', [np-1]), ex_si(tenu, vpp-ver:pper, tenu, [dr(0,dl(0,np,dr(0,s,s)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(orientation, nc-nom, orientation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(étrangère, adj-adj, étrangère, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dit, v-ver:pres, dit, [dr(0,dl(1,s,s),np)-1]), ex_si('McLaughlin', npp-nam, 'McLaughlin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(leçons, nc-nom, leçons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(cruciales, adj-adj, cruciales, [dl(0,n,n)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('2.500', det-num, '2.500', [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1312, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Eschyle', npp-nam, 'Eschyle', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1313, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('beau-frère', nc-nom, 'beau-frère', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mohammad', npp-nam, 'Mohammad', [dr(0,np,np)-1]), ex_si('Oreibi', npp-nam, 'Oreibi', [dr(0,np,np)-1]), ex_si('al-Khalifa', npp-nam, 'al-Khalifa', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(génocide, nc-nom, génocide, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saddam', npp-nam, 'Saddam', [dr(0,np,np)-1]), ex_si('Hussein', npp-nam, 'Hussein', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-t-on', cls-pro:per, '-t-on', [np-1]), ex_si(appris, vpp-ver:pper, appris, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(sources, nc-nom, sources, [n-1]), ex_si(policières, adj-adj, policières, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1314, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('beau-père', nc-nom, 'beau-père', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mohammad', npp-nam, 'Mohammad', [dr(0,np,np)-1]), ex_si('Khalifa', npp-nam, 'Khalifa', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Oussama', npp-nam, 'Oussama', [dr(0,np,np)-1]), ex_si('Ben', npp-nam, 'Ben', [dr(0,np,np)-1]), ex_si('Laden', npp-nam, 'Laden', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1315, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si(caritative, adj-adj, caritative, [dl(0,n,n)-1]), ex_si(musulmane, adj-adj, musulmane, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(soutenue, vpp-ver:pper, soutenue, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Ben', npp-nam, 'Ben', [dr(0,np,np)-1]), ex_si('Laden', npp-nam, 'Laden', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(dirigée, vpp-ver:pper, dirigée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('beau-frère', nc-nom, 'beau-frère', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Mohammad', npp-nam, 'Mohammad', [dr(0,np,np)-1]), ex_si('Jamal', npp-nam, 'Jamal', [dr(0,np,np)-1]), ex_si('Khalifa', npp-nam, 'Khalifa', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(financé, vpp-ver:pper, financé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Shah', npp-nam, 'Shah', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(comploteurs, nc-nom, comploteurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1316, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('beau-père', nc-nom, 'beau-père', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mohammad', npp-nam, 'Mohammad', [dr(0,np,np)-1]), ex_si('Khalifa', npp-nam, 'Khalifa', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Oussama', npp-nam, 'Oussama', [dr(0,np,np)-1]), ex_si('Ben', npp-nam, 'Ben', [dr(0,np,np)-1]), ex_si('Laden', npp-nam, 'Laden', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1317, Result) :-
      prob_parse([ ex_si('Spirou', npp-nam, 'Spirou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1938, pro-num, 1938, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Rob-Vel', npp-nam, 'Rob-Vel', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(éditions, nc-nom, éditions, [n-1]), ex_si('Dupuis', npp-nam, 'Dupuis', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('\'', ponct-pun:cit, '\'', [dl(0,n,n)-1]), ex_si(40, pro-num, 40, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1318, Result) :-
      prob_parse([ ex_si('D\'', det-prp, 'D\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(artistes, nc-nom, artistes, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('Jije', npp-nam, 'Jije', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Joseph', npp-nam, 'Joseph', [dr(0,np,np)-1]), ex_si('Gillain', npp-nam, 'Gillain', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(occupés, vpp-ver:pper, occupés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si(dessinée, vpp-ver:pper, dessinée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1319, Result) :-
      prob_parse([ ex_si('Spirou', npp-nam, 'Spirou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Rob-Vel', npp-nam, 'Rob-Vel', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1320, Result) :-
      prob_parse([ ex_si('Tintin', npp-nam, 'Tintin', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Schtroumpfs', nc-nam, 'Schtroumpfs', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Boule', npp-nam, 'Boule', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Bill', npp-nam, 'Bill', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Astérix', npp-nam, 'Astérix', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Natacha', npp-nam, 'Natacha', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Spirou', npp-nam, 'Spirou', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(personnages, nc-nom, personnages, [n-1]), ex_si(légendaires, adj-adj, légendaires, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créés, vpp-ver:pper, créés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(artistes, nc-nom, artistes, [n-1]), ex_si(talentueux, adj-adj, talentueux, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('Hergé', npp-nam, 'Hergé', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Franquin', npp-nam, 'Franquin', [np-1]), ex_si(et, cc-kon, et, [np-1]), ex_si('Walthéry', npp-nam, 'Walthéry', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1321, Result) :-
      prob_parse([ ex_si('Spirou', npp-nam, 'Spirou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Rob-Vel', npp-nam, 'Rob-Vel', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1322, Result) :-
      prob_parse([ ex_si('Mars', nc-nom, 'Mars', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(considérée, vpp-ver:pper, considérée, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(couleur, nc-nom, couleur, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(vif, adj-adj, vif, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1323, Result) :-
      prob_parse([ ex_si('Mars', nc-nam, 'Mars', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1324, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(probablement, adv-adv, probablement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(couleur, nc-nom, couleur, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si('Mars', npp-nam, 'Mars', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1325, Result) :-
      prob_parse([ ex_si('Mars', nc-nom, 'Mars', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1326, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(pense, v-ver:pres, pense, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(champ, nc-nom, champ, [n-1]), ex_si(magnétique, adj-adj, magnétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1327, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(subit, v-ver:pres, subit, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(élève, v-ver:pres, élève, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(température, nc-nom, température, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(degrés, nc-nom, degrés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1328, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fine, adj-adj, fine, [dl(0,n,n)-1]), ex_si(composée, vpp-ver:pper, composée, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('95,3', det-num, '95,3', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dioxyde, nc-nom, dioxyde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('2,7', det-num, '2,7', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(azote, nc-nom, azote, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('1,6', det-num, '1,6', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argon, nc-nom, argon, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('0,15', det-num, '0,15', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(oxygène, nc-nom, oxygène, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('0,03', det-num, '0,03', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1329, Result) :-
      prob_parse([ ex_si('Mars', nc-nom, 'Mars', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1330, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si(theravada, et-adj, theravada, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(95, det-num, 95, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1331, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(autorise, v-ver:pres, autorise, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(diversité, nc-nom, diversité, [n-1]), ex_si(religieuse, adj-adj, religieuse, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(religions, nc-nom, religions, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(représentées, vpp-ver:pper, représentées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1332, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(culte, nc-nom, culte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(esprits, nc-nom, esprits, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(animisme, nc-nom, animisme, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pratiqués, vpp-ver:pper, pratiqués, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1333, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si('Theravada', npp-nam, 'Theravada', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1334, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(revendique, v-ver:pres, revendique, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(allégeance, nc-nom, allégeance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Thaïlandais', nc-nam, 'Thaïlandais', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1335, Result) :-
      prob_parse([ ex_si('Leur', det-det:pos, 'Leur', [dr(0,np,n)-1]), ex_si(identité, nc-nom, identité, [n-1]), ex_si(culturelle, adj-adj, culturelle, [dl(0,n,n)-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(indissociablement, adv-adv, indissociablement, [dl(1,s,s)-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(traditions, nc-nom, traditions, [n-1]), ex_si(bouddhistes, adj-adj, bouddhistes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1336, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si(pratique, v-ver:pres, pratique, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si(folklorique, adj-adj, folklorique, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(comprend, v-ver:pres, comprend, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(élaboré, vpp-ver:pper, élaboré, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(culte, nc-nom, culte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(esprits, nc-nom, esprits, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1337, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si('Theravada', npp-nam, 'Theravada', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1338, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si('Theravada', npp-nam, 'Theravada', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pratiqué, vpp-ver:pper, pratiqué, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(voisins, adj-adj, voisins, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Laos', npp-nam, 'Laos', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Birmanie', npp-nam, 'Birmanie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Sri', npp-nam, 'Sri', [n-1]), ex_si('Lanka', npp-nam, 'Lanka', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1339, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si('Theravada', npp-nam, 'Theravada', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1340, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(maternelle, adj-adj, maternelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('80,9', det-num, '80,9', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Québécois', nc-nam, 'Québécois', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('7,8', det-num, '7,8', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(citent, v-ver:pres, citent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(maternelle, adj-adj, maternelle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1341, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(parlée, vpp-ver:pper, parlée, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Québec', npp-nam, 'Québec', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1342, Result) :-
      prob_parse([ ex_si('Veuillez', vimp-ver:impe, 'Veuillez', [dr(0,s,dl(0,np,s_inf))-1]), ex_si(noter, vinf-ver:infi, noter, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arabe, nc-nom, arabe, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(préférable, adj-adj, préférable, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(apprendre, vinf-ver:infi, apprendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(comprendre, vinf-ver:infi, comprendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(clairement, adv-adv, clairement, [dl(1,s,s)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(miracles, nc-nom, miracles, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1343, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(arabe, nc-nom, arabe, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1344, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(arabe, adj-adj, arabe, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(porte, nc-nom, porte, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(islam, nc-nom, islam, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(saint, adj-adj, saint, [dr(0,n,n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(traditions, nc-nom, traditions, [n-1]), ex_si(prophétiques, adj-adj, prophétiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1345, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(conséquent, nc-nom, conséquent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(éloigner, vinf-ver:infi, éloigner, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(conduit, v-ver:pres, conduit, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(innovation, nc-nom, innovation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mécréance, nc-nom, mécréance, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1346, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(arabe, nc-nom, arabe, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1347, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Corpus', npp-nam, 'Corpus', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(journaux, nc-nom, journaux, [n-1]), ex_si(norvégiens, adj-adj, norvégiens, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vaste, adj-adj, vaste, [dr(0,n,n)-1]), ex_si(corpus, nc-nom, corpus, [n-1]), ex_si('auto-extensible', adj-adj, 'auto-extensible', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(textes, nc-nom, textes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(journaux, nc-nom, journaux, [n-1]), ex_si(norvégiens, adj-adj, norvégiens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1348, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(collecte, nc-nom, collecte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(corpus, nc-nom, corpus, [n-1]), ex_si(dynamique, adj-adj, dynamique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(continue, adj-adj, continue, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1998, pro-num, 1998, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1349, Result) :-
      prob_parse([ ex_si('Dagbladet', npp-nam, 'Dagbladet', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1350, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si('Dagbladet', npp-nam, 'Dagbladet', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(imprimé, vpp-ver:pper, imprimé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(page, nc-nom, page, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intolérance, nc-nom, intolérance, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1351, Result) :-
      prob_parse([ ex_si('Dagbladet', npp-nam, 'Dagbladet', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1352, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Norvège', npp-nam, 'Norvège', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Verdens', npp-nam, 'Verdens', [dr(0,np,np)-1]), ex_si('Gang', npp-nam, 'Gang', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(imprime, v-ver:pres, imprime, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(rédacteur, nc-nom, rédacteur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(écrite, vpp-ver:pper, écrite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Joe', npp-nam, 'Joe', [dr(0,np,np)-1]), ex_si('Harrington', npp-nam, 'Harrington', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('moi-même', npp-pro:per, 'moi-même', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1353, Result) :-
      prob_parse([ ex_si('Verdens', npp-nam, 'Verdens', [dr(0,np,np)-1]), ex_si('Gang', npp-nam, 'Gang', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1354, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(certain, adj-adj, certain, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(collèges, nc-nom, collèges, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(cycle, nc-nom, cycle, [n-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Croix-Rouge', nc-nam, 'Croix-Rouge', [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(abbaye, nc-nom, abbaye, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Notre-Dame', npp-nam, 'Notre-Dame', [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si('Dombes', npp-nam, 'Dombes', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('SNCF', npp-abr, 'SNCF', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1355, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('SNCF', npp-abr, 'SNCF', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1356, Result) :-
      prob_parse([ ex_si('Notez', vimp-ver:impe, 'Notez', [dr(0,s,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('SBB', npp-abr, 'SBB', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('CFF', npp-abr, 'CFF', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('FFS', npp-abr, 'FFS', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(distinguent, v-ver:pres, distinguent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(allemand, nc-nom, allemand, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1357, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('SNCF', npp-abr, 'SNCF', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1358, Result) :-
      prob_parse([ ex_si('Aux', p+d-prp:det, 'Aux', [dr(0,dr(0,s,s),n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1932, pro-num, 1932, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Didrikson', npp-nam, 'Didrikson', [np-1]), ex_si(remporte, v-ver:pres, remporte, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(médailles, nc-nom, médailles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(javelot, nc-nom, javelot, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(olympique, adj-adj, olympique, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(80, adj-num, 80, [dr(0,n,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(haies, nc-nom, haies, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(médaille, nc-nom, médaille, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(saut, nc-nom, saut, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(hauteur, nc-nom, hauteur, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(record, nc-nom, record, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1359, Result) :-
      prob_parse([ ex_si('2,45', det-num, '2,45', [dr(0,np,n)-1]), ex_si(m, nc-abr, m, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(saut, nc-nom, saut, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(hauteur, nc-nom, hauteur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1360, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(saut, nc-nom, saut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Beamon', npp-nam, 'Beamon', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(éclipsé, vpp-ver:pper, éclipsé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(précédent, adj-adj, précédent, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(21, det-num, 21, [dr(0,np,n)-1]), ex_si(3, adj-num, 3, [dr(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(4, det-num, 4, [dr(0,n,n)-1]), ex_si(pouces, nc-nom, pouces, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1361, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(saut, nc-nom, saut, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(olympique, adj-adj, olympique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(resté, vpp-ver:pper, resté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si('Mike', npp-nam, 'Mike', [dr(0,np,np)-1]), ex_si('Powell', npp-nam, 'Powell', [np-1]), ex_si(fasse, vs-ver:subp, fasse, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(saut, nc-nom, saut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('29\'', npp-nam, '29\'', [dr(0,np,n)-1]), ex_si(4, adj-num, 4, [dr(0,np,n)-1]), ex_si(1, adj-num, 1, [n-1]), ex_si('/', ponct-sym, '/', [n-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si(championnats, nc-nom, championnats, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Tokyo', npp-nam, 'Tokyo', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1362, Result) :-
      prob_parse([ ex_si('2,45', det-num, '2,45', [dr(0,np,n)-1]), ex_si(m, nc-abr, m, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(saut, nc-nom, saut, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(hauteur, nc-nom, hauteur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1363, Result) :-
      prob_parse([ ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1364, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(tiers, nc-nom, tiers, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('3,3', adj-num, '3,3', [dr(0,n,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(votes, nc-nom, votes, [n-1]), ex_si(comptés, vpp-ver:pper, comptés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(législative, adj-adj, législative, [dl(0,n,n)-1]), ex_si(irakienne, adj-adj, irakienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alliance', nc-nam, 'Alliance', [n-1]), ex_si(irakienne, adj-adj, irakienne, [dl(0,n,n)-1]), ex_si(unie, vpp-ver:pper, unie, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(avance, nc-nom, avance, [n-1]), ex_si(considérable, adj-adj, considérable, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Liste', nc-nam, 'Liste', [n-1]), ex_si(irakienne, adj-adj, irakienne, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(irakien, adj-adj, irakien, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(intérim, nc-nom, intérim, [dl(0,n,n)-1]), ex_si('Iyad', npp-nam, 'Iyad', [dl(0,n,n)-1]), ex_si('Allawi', npp-nam, 'Allawi', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(traîne, v-ver:pres, traîne, [dl(0,np,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(17, det-num, 17, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(décompte, nc-nom, décompte, [n-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1365, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(libres, adj-adj, libres, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1366, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(taïwanais, adj-adj, taïwanais, [dl(0,n,n)-1]), ex_si('Lee', npp-nam, 'Lee', [dl(0,n,n)-1]), ex_si('Teng-hui', npp-nam, 'Teng-hui', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(spirituel, adj-adj, spirituel, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('TSU', npp-abr, 'TSU', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(indépendantiste, adj-adj, indépendantiste, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Frank', npp-nam, 'Frank', [dl(0,n,n)-1]), ex_si('Hsieh', npp-nam, 'Hsieh', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si(progressiste, adj-adj, progressiste, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(participent, v-ver:pres, participent, [dr(0,dl(0,np,s),pp)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marche, nc-nom, marche, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1367, Result) :-
      prob_parse([ ex_si('Chen', npp-nam, 'Chen', [dr(0,np,np)-1]), ex_si('Shui-bian', npp-nam, 'Shui-bian', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Taïwan', npp-nam, 'Taïwan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1368, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(actuel, adj-adj, actuel, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Banque', nc-nam, 'Banque', [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Henrique', npp-nam, 'Henrique', [dr(0,np,np)-1]), ex_si('Meirelles', npp-nam, 'Meirelles', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(fraude, nc-nom, fraude, [n-1]), ex_si(financière, adj-adj, financière, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1369, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(actuel, adj-adj, actuel, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Honduras', npp-nam, 'Honduras', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Manuel', npp-nam, 'Manuel', [dr(0,np,np)-1]), ex_si('Zelaya', npp-nam, 'Zelaya', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1370, Result) :-
      prob_parse([ ex_si('Geoscience', npp-nam, 'Geoscience', [dr(0,np,np)-1]), ex_si('Australia', npp-nam, 'Australia', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(séisme, nc-nom, séisme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('5,3', pro-num, '5,3', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(généré, vpp-ver:pper, généré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1371, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(séisme, nc-nom, séisme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2004, pro-num, 2004, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si('Indien', adj-nam, 'Indien', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(magnitude, nc-nom, magnitude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('9,0', pro-num, '9,0', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclenché, vpp-ver:pper, déclenché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2004, adj-num, 2004, [dl(0,n,n)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tsunamis, nc-nom, tsunamis, [n-1]), ex_si(meurtriers, adj-adj, meurtriers, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('270.000', det-num, '270.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(meurtrier, adj-adj, meurtrier, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(enregistrée, vpp-ver:pper, enregistrée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1372, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vagues, nc-nom, vagues, [n-1]), ex_si(créées, vpp-ver:pper, créées, [dl(0,n,n)-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déplace, v-ver:pres, déplace, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(massive, adj-adj, massive, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1373, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Suisse', npp-nam, 'Suisse', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ratifié, vpp-ver:pper, ratifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si(bilatéraux, adj-adj, bilatéraux, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2004, adj-num, 2004, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('Chypre', npp-nam, 'Chypre', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Estonie', npp-nam, 'Estonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Hongrie', npp-nam, 'Hongrie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Lettonie', npp-nam, 'Lettonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Malte', npp-nam, 'Malte', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('Slovénie', npp-nam, 'Slovénie', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(inclus, vpp-ver:pper, inclus, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1374, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(introduire, vinf-ver:infi, introduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(euro, nc-nom, euro, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2007, adj-num, 2007, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1375, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(devancé, vpp-ver:pper, devancé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(que, adv-adv, que, [dr(0,pp,pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Danemark', npp-nam, 'Danemark', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Suède', npp-nam, 'Suède', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Finlande', npp-nam, 'Finlande', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(classe, v-ver:pres, classe, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('7e', adj-num, '7e', [dr(0,n,n)-1]), ex_si(rang, nc-nom, rang, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(termes, nc-nom, termes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pénétration, nc-nom, pénétration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Internet', nc-nam, 'Internet', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(large, adj-adj, large, [dr(0,n,n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1376, Result) :-
      prob_parse([ ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(euro, nc-nom, euro, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1377, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(commentés, vpp-ver:pper, commentés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si(datent, v-ver:pres, datent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2002, adj-num, 2002, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('Fernando', npp-nam, 'Fernando', [dr(0,np,np)-1]), ex_si('Henrique', npp-nam, 'Henrique', [dr(0,np,np)-1]), ex_si('Cardoso', npp-nam, 'Cardoso', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1378, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Luiz', npp-nam, 'Luiz', [dr(0,np,np)-1]), ex_si('Inácio', npp-nam, 'Inácio', [dr(0,np,np)-1]), ex_si('Lula', npp-nam, 'Lula', [np-1]), ex_si(da, et-nam, da, [dr(0,dl(0,np,np),np)-1]), ex_si('Silva', npp-nam, 'Silva', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1379, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(sursauts, nc-nom, sursauts, [n-1]), ex_si(gamma, adj-adj, gamma, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(objets, nc-nom, objets, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(puissants, adj-adj, puissants, [dl(0,n,n)-1]), ex_si(observés, vpp-ver:pper, observés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Univers', nc-nam, 'Univers', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(pense, v-ver:pres, pense, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(signalent, v-ver:pres, signalent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(naissance, nc-nom, naissance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(trous, nc-nom, trous, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1380, Result) :-
      prob_parse([ ex_si('Swift', npp-nam, 'Swift', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(conçu, vpp-ver:pper, conçu, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(sursauts, nc-nom, sursauts, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réorienter, vinf-ver:infi, réorienter, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(automatiquement, adv-adv, automatiquement, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(recueillir, vinf-ver:infi, recueillir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(phénomène, nc-nom, phénomène, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1381, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(rayons, nc-nom, rayons, [n-1]), ex_si(gamma, adj-adj, gamma, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rayonnement, nc-nom, rayonnement, [n-1]), ex_si(électromagnétique, adj-adj, électromagnétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1382, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Condoleezza', npp-nam, 'Condoleezza', [dl(0,n,n)-1]), ex_si('Rice', npp-nam, 'Rice', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Corée', npp-nam, 'Corée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('avant-poste', nc-nom, 'avant-poste', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tyrannie, nc-nom, tyrannie, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dr(0,dl(0,np,s_ppres),np),dl(0,np,s_inf))-1]), ex_si(enrager, vinf-ver:infi, enrager, [dl(0,np,s_inf)-1]), ex_si('Kim', npp-nam, 'Kim', [dr(0,np,np)-1]), ex_si('Jong', npp-nam, 'Jong', [dr(0,np,np)-1]), ex_si('-il', cls-pro:per, '-il', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Corée', npp-nam, 'Corée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1383, Result) :-
      prob_parse([ ex_si('Condoleezza', npp-nam, 'Condoleezza', [dr(0,np,np)-1]), ex_si('Rice', npp-nam, 'Rice', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1384, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Condoleeza', npp-nam, 'Condoleeza', [dl(0,n,n)-1]), ex_si('Rice', npp-nam, 'Rice', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(colère, nc-nom, colère, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rencontre, nc-nom, rencontre, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(soudanais, adj-adj, soudanais, [dl(0,n,n)-1]), ex_si('Omar', npp-nam, 'Omar', [dl(0,n,n)-1]), ex_si('Hassan', npp-nam, 'Hassan', [dl(0,n,n)-1]), ex_si('al-Bashir', npp-nam, 'al-Bashir', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,pp_a,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(cours, nc-nom, cours, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,dr(0,pp,dia(0,box(0,n))),dl(0,n,n)),s)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,np,n)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(assistants, nc-nom, assistants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(maltraités, vpp-ver:pper, maltraités, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(agents, nc-nom, agents, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(sécurité, nc-nom, sécurité, [dl(0,n,n)-1]), ex_si(soudanais, adj-adj, soudanais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1385, Result) :-
      prob_parse([ ex_si('Condoleezza', npp-nam, 'Condoleezza', [dr(0,np,np)-1]), ex_si('Rice', npp-nam, 'Rice', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1386, Result) :-
      prob_parse([ ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Wilkinson', npp-nam, 'Wilkinson', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communication, nc-nom, communication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Rice', npp-nam, 'Rice', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(poussé, vpp-ver:pper, poussé, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mur, nc-nom, mur, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gardes, nc-nom, gardes, [n-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(tentait, v-ver:impf, tentait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1387, Result) :-
      prob_parse([ ex_si('Condoleezza', npp-nam, 'Condoleezza', [dr(0,np,np)-1]), ex_si('Rice', npp-nam, 'Rice', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1388, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(fournit, v-ver:pres, fournit, [dr(0,dl(0,np,s),np)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(contingents, nc-nom, contingents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1000, det-num, 1000, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1389, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(730, det-num, 730, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1390, Result) :-
      prob_parse([ ex_si('Don', npp-nam, 'Don', [dr(0,np,np)-1]), ex_si('Brash', npp-nam, 'Brash', [np-1]), ex_si(leader, nc-nom, leader, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si('néo-zélandais', adj-adj, 'néo-zélandais', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Croisés', nc-nom, 'Croisés', [n-1]), ex_si('Blancs', adj-nam, 'Blancs', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(sainte, adj-adj, sainte, [dl(0,n,n)-1]), ex_si(raciale, adj-adj, raciale, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(ventre, nc-nom, ventre, [n-1]), ex_si(mou, adj-adj, mou, [dl(0,n,n)-1]), ex_si(fasciste, adj-adj, fasciste, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détruire, vinf-ver:infi, détruire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éthos, nc-nom, éthos, [n-1]), ex_si(égalitaire, adj-adj, égalitaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Nouvelle-Zélande', npp-nam, 'Nouvelle-Zélande', [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1391, Result) :-
      prob_parse([ ex_si('Don', npp-nam, 'Don', [dr(0,np,np)-1]), ex_si('Brash', npp-nam, 'Brash', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Nouvelle-Zélande', npp-nam, 'Nouvelle-Zélande', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1392, Result) :-
      prob_parse([ ex_si('Alternativement', adv-adv, 'Alternativement', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(impétueux, adj-adj, impétueux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(émotif, adj-adj, émotif, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(brillant, adj-adj, brillant, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('non-conformiste', nc-nom, 'non-conformiste', [dr(0,n,n)-1]), ex_si('Kasparov', npp-nam, 'Kasparov', [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(redoutable, adj-adj, redoutable, [dr(0,n,n)-1]), ex_si(adversaire, nc-nom, adversaire, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1393, Result) :-
      prob_parse([ ex_si('Don', npp-nam, 'Don', [dr(0,np,np)-1]), ex_si('Brash', npp-nam, 'Brash', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si('néo-zélandais', adj-adj, 'néo-zélandais', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1394, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploration, nc-nom, exploration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Cassini', npp-nam, 'Cassini', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si('Encelade', npp-nam, 'Encelade', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1395, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Cassini', npp-nam, 'Cassini', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(autre, adj-adj, autre, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1396, Result) :-
      prob_parse([ ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quinzième, nc-num, quinzième, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(satellites, nc-nom, satellites, [n-1]), ex_si(connus, vpp-ver:pper, connus, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1397, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(thématique, adj-adj, thématique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Euro-Disney', npp-nam, 'Euro-Disney', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(banlieue, nc-nom, banlieue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(proie, nc-nom, proie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(difficultés, nc-nom, difficultés, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(porte, v-ver:pres, porte, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(si, adv-adv, si, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(mal, adv-adv, mal, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(devoir, vinf-ver:infi, devoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fermer, vinf-ver:infi, fermer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(portes, nc-nom, portes, [n-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(obtient, v-ver:pres, obtient, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(prêteurs, nc-nom, prêteurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Walt', npp-nam, 'Walt', [dr(0,np,np)-1]), ex_si('Disney', npp-nam, 'Disney', [dr(0,np,np)-1]), ex_si('Co', npp-abr, 'Co', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1398, Result) :-
      prob_parse([ ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(publiée, vpp-ver:pper, publiée, [dl(0,n,n)-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(1399, Result) :-
      prob_parse([ ex_si('Euro-Disney', npp-nam, 'Euro-Disney', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(thème, nc-nom, thème, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(parisienne, adj-adj, parisienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1400, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Pharos', npp-nam, 'Pharos', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(phare, nc-nom, phare, [n-1]), ex_si(monumental, adj-adj, monumental, [dl(0,n,n)-1]), ex_si(construit, vpp-ver:pper, construit, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(280, pro-num, 280, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('JC', npp-nam, 'JC', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(élevant, vpr-ver:ppre, élevant, [dr(0,dl(0,cl_r,dl(0,n,n)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(330, det-num, 330, [dr(0,np,n)-1]), ex_si(pieds, nc-nom, pieds, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, nc-nom, haut, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(éclairait, v-ver:impf, éclairait, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Alexandrie', npp-nam, 'Alexandrie', [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(siècles, nc-nom, siècles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(archéologues, nc-nom, archéologues, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(identifier, vinf-ver:infi, identifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(positivement, adv-adv, positivement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vestiges, nc-nom, vestiges, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1401, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(phare, nc-nom, phare, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pharos', npp-nam, 'Pharos', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Alexandrie', npp-nam, 'Alexandrie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1402, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Pharos', npp-nam, 'Pharos', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(phare, nc-nom, phare, [n-1]), ex_si(monumental, adj-adj, monumental, [dl(0,n,n)-1]), ex_si(construit, vpp-ver:pper, construit, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(280, pro-num, 280, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('JC', npp-nam, 'JC', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(élevant, vpr-ver:ppre, élevant, [dr(0,dl(0,cl_r,dl(0,n,n)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(330, det-num, 330, [dr(0,np,n)-1]), ex_si(pieds, nc-nom, pieds, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, nc-nom, haut, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(éclairait, v-ver:impf, éclairait, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Alexandrie', npp-nam, 'Alexandrie', [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(siècles, nc-nom, siècles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(archéologues, nc-nom, archéologues, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(identifier, vinf-ver:infi, identifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(positivement, adv-adv, positivement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vestiges, nc-nom, vestiges, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1403, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(phare, nc-nom, phare, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pharos', npp-nam, 'Pharos', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(construit, vpp-ver:pper, construit, [dl(0,np,s_pass)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(280, pro-num, 280, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si('J.-C', npp-nam, 'J.-C', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1404, Result) :-
      prob_parse([ ex_si('Lin', npp-nam, 'Lin', [dr(0,np,np)-1]), ex_si('Piao', npp-nam, 'Piao', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,np,np),np)-1]), ex_si(tout, pro-pro:ind, tout, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(créateur, nc-nom, créateur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Petit', adj-nam, 'Petit', [dr(0,n,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(citations, nc-nom, citations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mao', npp-nam, 'Mao', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1405, Result) :-
      prob_parse([ ex_si('Lin', npp-nam, 'Lin', [dr(0,np,np)-1]), ex_si('Piao', npp-nam, 'Piao', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Petit', npp-nam, 'Petit', [dr(0,n,n)-1]), ex_si('Livre', nc-nam, 'Livre', [n-1]), ex_si('Rouge', npp-nam, 'Rouge', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1406, Result) :-
      prob_parse([ ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('Delhi', npp-nam, 'Delhi', [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(lauréats, nc-nom, lauréats, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Congrès', npp-nam, 'Congrès', [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(syndicales, adj-adj, syndicales, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(inquiétude, nc-nom, inquiétude, [n-1]), ex_si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(menaces, nc-nom, menaces, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kailash', npp-nam, 'Kailash', [dr(0,np,np)-1]), ex_si('Satyarthi', npp-nam, 'Satyarthi', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(principal, adj-adj, principal, [dr(0,n,n)-1]), ex_si(opposant, nc-nom, opposant, [n-1]), ex_si(indien, adj-adj, indien, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1407, Result) :-
      prob_parse([ ex_si('Kailash', npp-nam, 'Kailash', [dr(0,np,np)-1]), ex_si('Satyarthi', npp-nam, 'Satyarthi', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(principal, adj-adj, principal, [dr(0,n,n)-1]), ex_si(opposant, nc-nom, opposant, [n-1]), ex_si(indien, adj-adj, indien, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1408, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(coureuse, nc-nom, coureuse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haies, nc-nom, haies, [n-1]), ex_si(suspendue, vpp-ver:pper, suspendue, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(stéroïde, nc-nom, stéroïde, [n-1]), ex_si(anabolisant, adj-adj, anabolisant, [dl(0,n,n)-1]), ex_si('Nandrolone', npp-nam, 'Nandrolone', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(innocentée, vpp-ver:pper, innocentée, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(panel, nc-nom, panel, [n-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(arbitrage, nc-nom, arbitrage, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(trois, det-num, trois, [dr(0,dl(0,n,n),np)-1]), ex_si(juges, nc-nom, juges, [dr(0,np,n)-1]), ex_si(ait, vs-ver:subp, ait, [n-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dossier, nc-nom, dossier, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prouvé, vpp-ver:pper, prouvé, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si('au-delà', p-prp, 'au-delà', [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(doute, nc-nom, doute, [n-1]), ex_si(raisonnable, adj-adj, raisonnable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1409, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(nandrolone, nc-nom, nandrolone, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(stéroïde, nc-nom, stéroïde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1410, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),dl(0,np,s_ppres))-1]), ex_si(acceptant, vpr-ver:ppre, acceptant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('FMI', npp-abr, 'FMI', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Michel', npp-nam, 'Michel', [dr(0,np,np)-1]), ex_si('Camdessus', npp-nam, 'Camdessus', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(noté, vpp-ver:pper, noté, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(impôts, nc-nom, impôts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(décline, v-ver:pres, décline, [dl(0,np,s)-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1411, Result) :-
      prob_parse([ ex_si('Michel', npp-nam, 'Michel', [dr(0,np,np)-1]), ex_si('Camdessus', npp-nam, 'Camdessus', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(directeur, nc-nom, directeur, [np-1]), ex_si(général, adj-adj, général, [dl(0,np,np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('FMI', npp-abr, 'FMI', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1412, Result) :-
      prob_parse([ ex_si('Madrid', npp-nam, 'Madrid', [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), ex_si('Luis', npp-nam, 'Luis', [dr(0,np,np)-1]), ex_si('Roldan', npp-nam, 'Roldan', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(espagnole, adj-adj, espagnole, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fui, vpp-ver:pper, fui, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(prétendument, adv-adv, prétendument, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(détourné, vpp-ver:pper, détourné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si(sterling, et-nom, sterling, [dl(0,n,n)-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,np,np),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(secrets, adj-adj, secrets, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chemin, nc-nom, chemin, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cellule, nc-nom, cellule, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(hier, adv-adv, hier, [dr(0,dl(1,s,s),n)-1]), ex_si(soir, nc-nom, soir, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(capturé, vpp-ver:pper, capturé, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Bangkok', npp-nam, 'Bangkok', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1413, Result) :-
      prob_parse([ ex_si('Luis', npp-nam, 'Luis', [dr(0,np,np)-1]), ex_si('Roldan', npp-nam, 'Roldan', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(directeur, nc-nom, directeur, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1414, Result) :-
      prob_parse([ ex_si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mur, nc-nom, mur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tombé, vpp-ver:pper, tombé, [dl(0,np,s_ppart)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1989, adj-num, 1989, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sections, nc-nom, sections, [n-1]), ex_si(est, v-ver:pres, est, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(ouest, nc-nom, ouest, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réunies, vpp-ver:pper, réunies, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(3, det-num, 3, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1415, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mur, nc-nom, mur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(démoli, vpp-ver:pper, démoli, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1989, adj-num, 1989, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1416, Result) :-
      prob_parse([ ex_si('Rolf', npp-nam, 'Rolf', [dr(0,np,np)-1]), ex_si('Ekeus', npp-nam, 'Ekeus', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),n)-1]), ex_si(diplomate, nc-nom, diplomate, [n-1]), ex_si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(préside, v-ver:pres, préside, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), ex_si('Bagdad', npp-nam, 'Bagdad', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), ex_si(coopératif, adj-adj, coopératif, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(aidant, vpr-ver:ppre, aidant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(établir, vinf-ver:infi, établir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(procédures, nc-nom, procédures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vérification, nc-nom, vérification, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(destruction, nc-nom, destruction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sait, v-ver:pres, sait, [dr(0,dl(0,np,s),s_whq)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(comment, advwh-adv, comment, [dr(0,s_whq,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Irakiens', nc-nam, 'Irakiens', [n-1]), ex_si(réagiront, v-ver:futu, réagiront, [dl(0,np,s)-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(opérationnel, adj-adj, opérationnel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1417, Result) :-
      prob_parse([ ex_si('Rolf', npp-nam, 'Rolf', [dr(0,np,np)-1]), ex_si('Ekeus', npp-nam, 'Ekeus', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diplomate, nc-nom, diplomate, [n-1]), ex_si(suédois, adj-adj, suédois, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1418, Result) :-
      prob_parse([ ex_si('Heaney', npp-nam, 'Heaney', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejoint, vpp-ver:pper, rejoint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(distingué, vpp-ver:pper, distingué, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Irlandais', nc-nam, 'Irlandais', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(honorés, vpp-ver:pper, honorés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(contribution, nc-nom, contribution, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si(irlandaise, adj-adj, irlandaise, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vingtième, adj-num, vingtième, [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1419, Result) :-
      prob_parse([ ex_si('Heaney', npp-nam, 'Heaney', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1420, Result) :-
      prob_parse([ ex_si('Parce', adv-kon, 'Parce', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Aldrich', npp-nam, 'Aldrich', [dr(0,np,np)-1]), ex_si('Hazen', npp-nam, 'Hazen', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Rick', npp-nam, 'Rick', [np-1]), ex_si(')', ponct-pun, ')', [dr(0,dl(0,np,np),np)-1]), ex_si('Ames', npp-nam, 'Ames', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(colombienne, adj-adj, colombienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Maria', npp-nam, 'Maria', [dr(0,np,np)-1]), ex_si(del, et-prp, del, [dr(0,dl(0,np,np),n)-1]), ex_si('Rosario', npp-nam, 'Rosario', [dr(0,np,np)-1]), ex_si('Casas', npp-nam, 'Casas', [np-1]), ex_si('Ames', npp-nam, 'Ames', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(arrêtés, vpp-ver:pper, arrêtés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('FBI', npp-abr, 'FBI', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accusation, nc-nom, accusation, [n-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(espions, nc-nom, espions, [dr(0,np,n)-1]), ex_si(russes, adj-adj, russes, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(si, adv-adv, si, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(riche, adj-adj, riche, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),pp)-1]), ex_si(mystères, nc-nom, mystères, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(puzzles, nc-nom, puzzles, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(énigmes, nc-nom, énigmes, [dr(0,dl(0,n,n),n)-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(contradictions, nc-nom, contradictions, [n-1]), ex_si(que, prorel-pro:rel, que, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réponses, nc-nom, réponses, [n-1]), ex_si(pourraient, v-ver:cond, pourraient, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dl(1,s,s)-1]), ex_si(démêlées, vpp-ver:pper, démêlées, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(même, adv-adv, même, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,dl(1,s,s),n)-1]), ex_si(que, cs-kon, que, [dr(0,n,s_q)-1]), ex_si('contre-intelligence', nc-nom, 'contre-intelligence', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIA', npp-abr, 'CIA', [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1421, Result) :-
      prob_parse([ ex_si('Aldrich', npp-nam, 'Aldrich', [dr(0,np,np)-1]), ex_si('Hazen', npp-nam, 'Hazen', [dr(0,np,np)-1]), ex_si('Ames', npp-nam, 'Ames', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(marié, vpp-ver:pper, marié, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Rosario', npp-nam, 'Rosario', [dr(0,np,np)-1]), ex_si('Casas', npp-nam, 'Casas', [dr(0,np,np)-1]), ex_si('Ames', npp-nam, 'Ames', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1422, Result) :-
      prob_parse([ ex_si('Fest', npp-nam, 'Fest', [dr(0,s,s_q)-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Oscars', nc-nam, 'Oscars', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Daniel', npp-nam, 'Daniel', [dr(0,np,np)-1]), ex_si('Day-Lewis', npp-nam, 'Day-Lewis', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(tort, nc-nom, tort, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(attentat, nc-nom, attentat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('IRA', npp-abr, 'IRA', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ours', nc-nom, 'Ours', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(lundi, nc-nom, lundi, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1423, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(décerne, v-ver:pres, décerne, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ours', nc-nam, 'Ours', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1424, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bain, nc-nom, bain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sang, nc-nom, sang, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(partition, nc-nom, partition, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(duquel, p+pro-adj, duquel, [dr(0,dl(0,pp,dl(0,n,n)),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déracinées, vpp-ver:pper, déracinées, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('200.000', pro-num, '200.000', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mortes, adj-adj, mortes, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possession, nc-nom, possession, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cachemire', npp-nam, 'Cachemire', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1425, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possession, nc-nom, possession, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cachemire', nc-nam, 'Cachemire', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1426, Result) :-
      prob_parse([ ex_si('Bukowski', npp-nam, 'Bukowski', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attiré, vpp-ver:pper, attiré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attention, nc-nom, attention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Martin', npp-nam, 'Martin', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Black', npp-nam, 'Black', [dr(0,np,np)-1]), ex_si('Sparrow', npp-nam, 'Sparrow', [dr(0,np,np)-1]), ex_si('Press', npp-nam, 'Press', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1965, pro-num, 1965, [np-1]), ex_si(spécifiquement, adv-adv, spécifiquement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(publier, vinf-ver:infi, publier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1427, Result) :-
      prob_parse([ ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Martin', npp-nam, 'Martin', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Black', npp-nam, 'Black', [dr(0,np,np)-1]), ex_si('Sparrow', npp-nam, 'Sparrow', [dr(0,np,np)-1]), ex_si('Press', npp-nam, 'Press', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1428, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si('néo-zélandais', adj-adj, 'néo-zélandais', [dl(0,n,n)-1]), ex_si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), ex_si('Jackson', npp-nam, 'Jackson', [dl(0,n,n)-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(réaliser, vinf-ver:infi, réaliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(trilogie, nc-nom, trilogie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(264, det-num, 264, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('néo-zélandais', adj-adj, 'néo-zélandais', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(133, det-num, 133, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(classique, nc-nom, classique, [n-1]), ex_si(fantastique, adj-adj, fantastique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tolkien', npp-nam, 'Tolkien', [np-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Seigneur', npp-nam, 'Seigneur', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(anneaux, nc-nom, anneaux, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(rapporté, vpp-ver:pper, rapporté, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(mardi, nc-nom, mardi, [dr(0,dl(1,s,s),n)-1]), ex_si(soir, nc-nom, soir, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1429, Result) :-
      prob_parse([ ex_si('Tolkien', npp-nam, 'Tolkien', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épopée, nc-nom, épopée, [n-1]), ex_si(fantastique, adj-adj, fantastique, [dl(0,n,n)-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Seigneur', nc-nam, 'Seigneur', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Anneaux', nc-nam, 'Anneaux', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1430, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(examinons, v-ver:pres, examinons, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(relation, nc-nom, relation, [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(familles, nc-nom, familles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(establishment, nc-nom, establishment, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(comment, advwh-adv, comment, [dr(0,s_whq,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,cl_r,dl(0,np,s)),dia(1,box(1,pp_de))))-1]), ex_si(sortirait, v-ver:impf, sortirait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Texas', npp-nam, 'Texas', [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('W.', npp-abr, 'W.', [dl(0,n,n)-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('Dole', npp-nam, 'Dole', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(piste, nc-nom, piste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(2000, adj-num, 2000, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1431, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Laura', npp-nam, 'Laura', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1432, Result) :-
      prob_parse([ ex_si('Colin', npp-nam, 'Colin', [dr(0,np,np)-1]), ex_si('L.', npp-abr, 'L.', [dr(0,np,np)-1]), ex_si('Powell', npp-nam, 'Powell', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Laura', npp-nam, 'Laura', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(parole, nc-nom, parole, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(soirée, nc-nom, soirée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ouverture, nc-nom, ouverture, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Philadelphie', npp-nam, 'Philadelphie', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(démocrates, nc-nom, démocrates, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prévu, vpp-ver:pper, prévu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(provisoirement, adv-adv, provisoirement, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), ex_si('Rodham', npp-nam, 'Rodham', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(adressent, v-ver:pres, adressent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(délégués, nc-nom, délégués, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(soirée, nc-nom, soirée, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1433, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Laura', npp-nam, 'Laura', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1434, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(alpiniste, nc-nom, alpiniste, [n-1]), ex_si(népalais, adj-adj, népalais, [dl(0,n,n)-1]), ex_si('Ang', npp-nam, 'Ang', [dl(0,n,n)-1]), ex_si('Rita', npp-nam, 'Rita', [dr(0,np,np)-1]), ex_si('Sherpa', npp-nam, 'Sherpa', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(battu, vpp-ver:pper, battu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ascensions, nc-nom, ascensions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mont, nc-nom, mont, [n-1]), ex_si('Everest', npp-nam, 'Everest', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1435, Result) :-
      prob_parse([ ex_si('Alison', npp-nam, 'Alison', [dr(0,np,np)-1]), ex_si('Hargreaves', npp-nam, 'Hargreaves', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(oxygène, nc-nom, oxygène, [n-1]), ex_si(artificiel, adj-adj, artificiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1436, Result) :-
      prob_parse([ ex_si('Sans', p-prp, 'Sans', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(compter, vinf-ver:infi, compter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réacteurs, nc-nom, réacteurs, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(conception, nc-nom, conception, [n-1]), ex_si(différente, adj-adj, différente, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(réussi, vpp-ver:pper, réussi, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1437, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1438, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(heurté, vpp-ver:pper, heurté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(iceberg, nc-nom, iceberg, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si(inaugural, adj-adj, inaugural, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Southampton', npp-nam, 'Southampton', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1439, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1440, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('1.500', det-num, '1.500', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mortes, adj-adj, mortes, [dl(0,np,s_ppart)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1441, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1442, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(matin, nc-nom, matin, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1912, adj-num, 1912, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(paquebot, nc-nom, paquebot, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(luxe, nc-nom, luxe, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Atlantique', npp-nam, 'Atlantique', [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(large, nc-nom, large, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Terre-Neuve', npp-nam, 'Terre-Neuve', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(heurté, vpp-ver:pper, heurté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(iceberg, nc-nom, iceberg, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1443, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1444, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(récupération, nc-nom, récupération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capsule, nc-nom, capsule, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(transportait, v-ver:impf, transportait, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(astronaute, nc-nom, astronaute, [n-1]), ex_si('Virgil', npp-nam, 'Virgil', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Gus', npp-nam, 'Gus', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Grissom', npp-nam, 'Grissom', [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bref, adj-adj, bref, [dr(0,n,n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(suborbital, adj-adj, suborbital, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(1961, adj-num, 1961, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(le, det-det:art, le, [np-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('30e', adj-num, '30e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(alunissage, nc-nom, alunissage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1445, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(touchée, vpp-ver:pper, touchée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1446, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dr(0,s,s))),np)-1]), ex_si(trente, det-num, trente, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('[1969]', ponct-pun, '[1969]', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('Neil', npp-nam, 'Neil', [let-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,np,np)-1]), ex_si(fait, vpp-ver:pper, fait, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(premier, adj-num, premier, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(petit, adj-adj, petit, [dr(0,np,n)-1]), ex_si(pas, nc-nom, pas, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si(humanité, nc-nom, humanité, [dr(0,dl(0,n,n),np)-1]), ex_si(sur, p-prp, sur, [dr(0,np,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(lune, nc-nom, lune, [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,np,n)-1]), ex_si(déclarant, vpr-ver:ppre, déclarant, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(il, cls-pro:per, il, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('s\'', clr-pro:per, 's\'', [dr(0,s_q,s)-1]), ex_si(agissait, v-ver:impf, agissait, [np-1]), ex_si('d\'', p-prp, 'd\'', [cl_r-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,pp_de,np)-1]), ex_si(bond, nc-nom, bond, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [let-1]), ex_si(géant, nc-nom, géant, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si('l\'', det-det:art, 'l\'', [n-1]), ex_si(humanité, nc-nom, humanité, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(seulement, adv-adv, seulement, [let-1]), ex_si(pour, p-prp, pour, [let-1]), ex_si(que, cs-kon, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),s_q)-1]), ex_si(programme, nc-nom, programme, [dr(0,s_q,s)-1]), ex_si(spatial, adj-adj, spatial, [dr(0,np,n)-1]), ex_si(se, clr-pro:per, se, [n-1]), ex_si(retire, v-ver:pres, retire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [cl_r-1]), ex_si(rouler, vinf-ver:infi, rouler, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(orbite, nc-nom, orbite, [dl(0,np,s_inf)-1]), ex_si(terrestre, adj-adj, terrestre, [dr(0,dl(1,s,s),n)-1]), ex_si(basse, adj-adj, basse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1447, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(touchée, vpp-ver:pper, touchée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1448, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1960, adj-num, 1960, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(pense, v-ver:pres, pense, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(pouvons, v-ver:pres, pouvons, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(éliminer, vinf-ver:infi, éliminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tuberculose, nc-nom, tuberculose, [n-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(développons, v-ver:pres, développons, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(volonté, nc-nom, volonté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('O\'Brien', npp-nam, 'O\'Brien', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(investissement, nc-nom, investissement, [n-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,np,np),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(nécessaires, adj-adj, nécessaires, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(démontrer, vinf-ver:infi, démontrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1449, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(touchée, vpp-ver:pper, touchée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1450, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Killing', et-nom, 'Killing', [dr(0,s,np)-1]), ex_si(the, et-det:art, the, [dr(0,np,n)-1]), ex_si('Dream', npp-nam, 'Dream', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Earl', npp-nam, 'Earl', [dr(0,np,np)-1]), ex_si('Ray', npp-nam, 'Ray', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), ex_si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), ex_si('King', npp-nam, 'King', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('JR', npp-abr, 'JR', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Gerald', npp-nam, 'Gerald', [dr(0,np,np)-1]), ex_si('Posner', npp-nam, 'Posner', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Harvest', npp-nam, 'Harvest', [np-1]), ex_si('/', ponct-pun, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('Harcourt', npp-nam, 'Harcourt', [dr(0,np,np)-1]), ex_si('Brace', npp-nam, 'Brace', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('15$', pro-num, '15$', [dr(0,np,n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [let-1]), ex_si(écrivain, nc-nom, écrivain, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si('s\'', clr-pro:per, 's\'', [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [cl_r-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(théories, nc-nom, théories, [dr(0,pp_a,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(complot, nc-nom, complot, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Kennedy', npp-nam, 'Kennedy', [dr(0,dl(0,n,n),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Case', npp-nam, 'Case', [let-1]), ex_si('Closed', npp-nam, 'Closed', [np-1]), ex_si('"', ponct-pun:cit, '"', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [let-1]), ex_si(en, clo-pro:per, en, [cl_r-1]), ex_si(prend, v-ver:pres, prend, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(la, det-det:art, la, [dr(0,pp_de,np)-1]), ex_si(revendication, nc-nom, revendication, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(innocence, nc-nom, innocence, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Ray', npp-nam, 'Ray', [dr(0,dl(0,n,n),np)-1]), ex_si(dans, p-prp, dans, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),np)-1]), ex_si(meurtre, nc-nom, meurtre, [np-1]), ex_si(de, p-prp, de, [n-1]), ex_si('King', npp-nam, 'King', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1968, pro-num, 1968, [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(1451, Result) :-
      prob_parse([ ex_si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), ex_si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), ex_si('King', npp-nam, 'King', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1452, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(crédité, vpp-ver:pper, crédité, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(inspiré, vpp-ver:pper, inspiré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(démocratie, nc-nom, démocratie, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(communisme, nc-nom, communisme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(inaugurer, vinf-ver:infi, inaugurer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(prochain, adj-adj, prochain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1453, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1454, Result) :-
      prob_parse([ ex_si('Ne', adv-adv, 'Ne', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(voulant, vpr-ver:ppre, voulant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(renoncer, vinf-ver:infi, renoncer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(rêve, nc-nom, rêve, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(commencer, vinf-ver:infi, commencer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pèlerinage, nc-nom, pèlerinage, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si('Sainte', adj-nam, 'Sainte', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pape', npp-nam, 'Pape', [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pèlerinage, nc-nom, pèlerinage, [n-1]), ex_si(virtuel, adj-adj, virtuel, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Ur', npp-nam, 'Ur', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(antique, adj-adj, antique, [dl(0,n,n)-1]), ex_si(traditionnellement, adv-adv, traditionnellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(considérée, vpp-ver:pper, considérée, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(naissance, nc-nom, naissance, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Abraham', npp-nam, 'Abraham', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1455, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1456, Result) :-
      prob_parse([ ex_si('JERUSALEM', npp-nam, 'JERUSALEM', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('AP', nc-abr, 'AP', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,s),s)-1]), ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(culminant, adj-adj, culminant, [dl(0,n,n)-1]), ex_si(spirituel, adj-adj, spirituel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pontificat, nc-nom, pontificat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entamé, vpp-ver:pper, entamé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pontife, nc-nom, pontife, [n-1]), ex_si(catholique, adj-adj, catholique, [dl(0,n,n)-1]), ex_si(romain, adj-adj, romain, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(réalisant, vpr-ver:ppre, réalisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(rêve, nc-nom, rêve, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(visiter, vinf-ver:infi, visiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Christ', npp-nam, 'Christ', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1457, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1458, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(1756, adj-num, 1756, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(compositeur, nc-nom, compositeur, [n-1]), ex_si('Wolfgang', npp-nam, 'Wolfgang', [dl(0,n,n)-1]), ex_si('Amadeus', npp-nam, 'Amadeus', [dl(0,n,n)-1]), ex_si('Mozart', npp-nam, 'Mozart', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Salzbourg', npp-nam, 'Salzbourg', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1459, Result) :-
      prob_parse([ ex_si('Wolfgang', npp-nam, 'Wolfgang', [dr(0,np,np)-1]), ex_si('Amadeus', npp-nam, 'Amadeus', [dr(0,np,np)-1]), ex_si('Mozart', npp-nam, 'Mozart', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Salzbourg', npp-nam, 'Salzbourg', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1460, Result) :-
      prob_parse([ ex_si('Se', clr-pro:per, 'Se', [cl_r-1]), ex_si(tenant, vpr-ver:ppre, tenant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écart, nc-nom, écart, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(voyant, vpr-ver:ppre, voyant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(tout, pro-pro:ind, tout, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(entendant, vpr-ver:ppre, entendant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(musique, nc-nom, musique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mozart', npp-nam, 'Mozart', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(lui, clo-pro:per, lui, [np-1]), ex_si(seul, adj-adj, seul, [dl(0,np,np)-1]), ex_si(comprend, v-ver:pres, comprend, [dr(0,dl(0,np,s),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(manifestation, nc-nom, manifestation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(amour, nc-nom, amour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dieu', npp-nam, 'Dieu', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,s),np)-1]), ex_si('Antonio', npp-nam, 'Antonio', [dr(0,np,np)-1]), ex_si('Salieri', npp-nam, 'Salieri', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ambitieux, adj-adj, ambitieux, [dr(0,n,n)-1]), ex_si(compositeur, nc-nom, compositeur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(orchestre, nc-nom, orchestre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(favori, adj-adj, favori, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cour, nc-nom, cour, [n-1]), ex_si(impériale, adj-adj, impériale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1781, pro-num, 1781, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1461, Result) :-
      prob_parse([ ex_si('Wolfgang', npp-nam, 'Wolfgang', [dr(0,np,np)-1]), ex_si('Amadeus', npp-nam, 'Amadeus', [dr(0,np,np)-1]), ex_si('Mozart', npp-nam, 'Mozart', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Salzbourg', npp-nam, 'Salzbourg', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1462, Result) :-
      prob_parse([ ex_si('Moreau', npp-nam, 'Moreau', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(72, det-num, 72, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Ours', nc-nam, 'Ours', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(carrière, nc-nom, carrière, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1463, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Palme', nc-nom, 'Palme', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décernée, vpp-ver:pper, décernée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cannes', npp-nam, 'Cannes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1464, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cinquième, adj-num, cinquième, [dr(0,n,n)-1]), ex_si(festival, nc-nom, festival, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Coq', nc-nam, 'Coq', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Or', npp-nam, 'Or', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Cent', npp-nam, 'Cent', [dr(0,n,n)-1]), ex_si('Fleurs', npp-nam, 'Fleurs', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tiendra, v-ver:futu, tiendra, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kunming', npp-nam, 'Kunming', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('sud-est', nc-nom, 'sud-est', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(13, adj-num, 13, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(proposera, v-ver:futu, proposera, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cérémonies, nc-nom, cérémonies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(remise, nc-nom, remise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(expositions, nc-nom, expositions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(échanges, nc-nom, échanges, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1465, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Palme', nc-nom, 'Palme', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décernée, vpp-ver:pper, décernée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cannes', npp-nam, 'Cannes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1466, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('vice-président', nc-nom, 'vice-président', [n-1]), ex_si('Al', npp-nam, 'Al', [dl(0,n,n)-1]), ex_si('Gore', npp-nam, 'Gore', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(décrivant, vpr-ver:ppre, décrivant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(adjoint, nc-nom, adjoint, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bonne, adj-adj, bonne, [dr(0,n,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('XXIe', adj-num, 'XXIe', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1467, Result) :-
      prob_parse([ ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1468, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(emprunté, vpp-ver:pper, emprunté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(poignée, nc-nom, poignée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(idées, nc-nom, idées, [n-1]), ex_si(brillantes, adj-adj, brillantes, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réflexion, nc-nom, réflexion, [n-1]), ex_si(préféré, vpp-ver:pper, préféré, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Democratic', npp-nam, 'Democratic', [dr(0,n,n)-1]), ex_si('Leadership', npp-nam, 'Leadership', [dr(0,n,n)-1]), ex_si('Council', npp-nam, 'Council', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Medicare', npp-nam, 'Medicare', [np-1]), ex_si(suggérées, vpp-ver:pper, suggérées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(brillantes, adj-adj, brillantes, [dr(0,n,n)-1]), ex_si(sommités, nc-nom, sommités, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Louisianais', nc-nam, 'Louisianais', [n-1]), ex_si('John', npp-nam, 'John', [dl(0,n,n)-1]), ex_si('Breaux', npp-nam, 'Breaux', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1469, Result) :-
      prob_parse([ ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1470, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sept, adj-num, sept, [dr(0,n,n)-1]), ex_si(expéditions, nc-nom, expéditions, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(autorisées, vpp-ver:pper, autorisées, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(gravir, vinf-ver:infi, gravir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mont, nc-nom, mont, [n-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(haut, nc-nom, haut, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(seul, adv-adv, seul, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(alpiniste, nc-nom, alpiniste, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1471, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, nc-nom, haut, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1472, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(alpinistes, nc-nom, alpinistes, [n-1]), ex_si(tibétains, adj-adj, tibétains, [dl(0,n,n)-1]), ex_si(composée, vpp-ver:pper, composée, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conquis, vpp-ver:pper, conquis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mont, nc-nom, mont, [n-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(troisième, adj-num, troisième, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(culmine, v-ver:pres, culmine, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dimanche, nc-nom, dimanche, [dl(1,s,s)-1]), ex_si(ici, adv-adv, ici, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si(chinoise, adj-adj, chinoise, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(alpinisme, nc-nom, alpinisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1473, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, nc-nom, haut, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1474, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(arriver, vinf-ver:infi, arriver, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(pied, nc-nom, pied, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(montagne, nc-nom, montagne, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1475, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(haut, adj-adj, haut, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1476, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(que, adv-adv, que, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(environ, adv-adv, environ, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(photographiée, vpp-ver:pper, photographiée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(13, det-num, 13, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Voyager', npp-nam, 'Voyager', [n-1]), ex_si(2, adj-num, 2, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1477, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si('Titan', npp-nam, 'Titan', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(5100, det-num, 5100, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1478, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(distance, nc-nom, distance, [n-1]), ex_si(nouvellement, adv-adv, nouvellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(suggérée, vpp-ver:pper, suggérée, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(proche, adj-adj, proche, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(positions, nc-nom, positions, [n-1]), ex_si(actuelles, adj-adj, actuelles, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('2.870.972.200', det-num, '2.870.972.200', [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Uranus', npp-nam, 'Uranus', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('4.498.252.900', det-num, '4.498.252.900', [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si('Neptune', npp-nam, 'Neptune', [np-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(1479, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si('Titan', npp-nam, 'Titan', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(5100, det-num, 5100, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1480, Result) :-
      prob_parse([ ex_si('Mars', npp-nam, 'Mars', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(confirmée, vpp-ver:pper, confirmée, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Deimos', npp-nam, 'Deimos', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si('7,5', det-num, '7,5', [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1481, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(3746, det-num, 3746, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1482, Result) :-
      prob_parse([ ex_si('Io', nc-nam, 'Io', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('3.598', det-num, '3.598', [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('2.236', det-num, '2.236', [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(légèrement, adv-adv, légèrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1483, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('3.746', det-num, '3.746', [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1484, Result) :-
      prob_parse([ ex_si('Salma', npp-nam, 'Salma', [dr(0,np,np)-1]), ex_si('Hayek', npp-nam, 'Hayek', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attiré, vpp-ver:pper, attiré, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(foule, nc-nom, foule, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Veracruz', npp-nam, 'Veracruz', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Personne', pro-pro:ind, 'Personne', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(écrit, v-ver:pres, écrit, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(colonel, nc-nom, colonel, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(court, adj-adj, court, [dr(0,n,n)-1]), ex_si(roman, nc-nom, roman, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lauréat, nc-nom, lauréat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('Gabriel', npp-nam, 'Gabriel', [dl(0,n,n)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dl(0,n,n)-1]), ex_si('Marquez', npp-nam, 'Marquez', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1485, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lauréat, nc-nom, lauréat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1486, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(écrivains, nc-nom, écrivains, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), ex_si('Dickens', npp-nam, 'Dickens', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('William', npp-nam, 'William', [dr(0,np,np)-1]), ex_si('Faulkner', npp-nam, 'Faulkner', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),dl(0,np,s_ppres))-1]), ex_si(passant, vpr-ver:ppre, passant, [dr(0,dl(0,np,s_ppres),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(insistance, nc-nom, insistance, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(local, nc-nom, local, [n-1]), ex_si(conduit, vpp-ver:pres, conduit, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(universel, nc-nom, universel, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1487, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(lauréat, nc-nom, lauréat, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1488, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(éminents, adj-adj, éminents, [dr(0,n,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(apparitions, nc-nom, apparitions, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(émission, nc-nom, émission, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(paléontologue, nc-nom, paléontologue, [n-1]), ex_si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), ex_si('Jay', npp-nam, 'Jay', [dl(0,n,n)-1]), ex_si('Gould', npp-nam, 'Gould', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), ex_si('Hawking', npp-nam, 'Hawking', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(physicien, nc-nom, physicien, [n-1]), ex_si(théoricien, nc-nom, théoricien, [dl(0,n,n)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(brillance, nc-nom, brillance, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(comparée, vpp-ver:pper, comparée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Einstein', npp-nam, 'Einstein', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1489, Result) :-
      prob_parse([ ex_si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), ex_si('Hawking', npp-nam, 'Hawking', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(physicien, nc-nom, physicien, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1490, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(yakuzas, nc-nom, yakuzas, [n-1]), ex_si(japonais, adj-adj, japonais, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [n-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(vient, v-ver:pres, vient, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(second, nc-num, second, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(yakuza, nc-nom, yakuza, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1491, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(yakuzas, nc-nom, yakuzas, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mafia, nc-nom, mafia, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1492, Result) :-
      prob_parse([ ex_si('Munir', npp-nam, 'Munir', [dr(0,np,np)-1]), ex_si('Mezyed', npp-nam, 'Mezyed', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(poète, nc-nom, poète, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(critique, nc-nom, critique, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suscité, vpp-ver:pper, suscité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sentiments, nc-nom, sentiments, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(émotions, nc-nom, émotions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récité, vpp-ver:pper, récité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(poésie, nc-nom, poésie, [n-1]), ex_si(fluide, adj-adj, fluide, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(arabe, nc-nom, arabe, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démontré, vpp-ver:pper, démontré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(style, nc-nom, style, [n-1]), ex_si(unique, adj-adj, unique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(bouleversant, vpr-ver:ppre, bouleversant, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1493, Result) :-
      prob_parse([ ex_si('Gotthold', npp-nam, 'Gotthold', [dr(0,np,np)-1]), ex_si('Ephraim', npp-nam, 'Ephraim', [dr(0,np,np)-1]), ex_si('Lessing', npp-nam, 'Lessing', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1729, pro-num, 1729, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1781, pro-num, 1781, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1494, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CIO', npp-abr, 'CIO', [n-1]), ex_si(examinera, v-ver:futu, examinera, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(soumis, vpp-ver:pper, soumis, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(comités, nc-nom, comités, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(organisation, nc-nom, organisation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1998, pro-num, 1998, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Nagano', npp-nam, 'Nagano', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2000, pro-num, 2000, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,np,np),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(respectivement, adv-adv, respectivement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1495, Result) :-
      prob_parse([ ex_si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Nagano', npp-nam, 'Nagano', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1496, Result) :-
      prob_parse([ ex_si('Hodler', npp-nam, 'Hodler', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(irrégularités, nc-nom, irrégularités, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(campagnes, nc-nom, campagnes, [n-1]), ex_si(organisées, vpp-ver:pper, organisées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Atlanta', npp-nam, 'Atlanta', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('JO', npp-abr, 'JO', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2000, pro-num, 2000, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1497, Result) :-
      prob_parse([ ex_si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Nagano', npp-nam, 'Nagano', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1498, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(puissance, nc-nom, puissance, [n-1]), ex_si(stupéfiante, adj-adj, stupéfiante, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Tevatron', nc-nam, 'Tevatron', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(quark, et-nom, quark, [n-1]), ex_si(top, nc-nom, top, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, nc-nom, dernière, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(six, adj-num, six, [dr(0,n,n)-1]), ex_si(saveurs, nc-nom, saveurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(prédites, vpp-ver:pper, prédites, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1499, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(quark, et-nom, quark, [n-1]), ex_si(top, adj-adj, top, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, nc-nom, dernière, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(six, adj-num, six, [dr(0,n,n)-1]), ex_si(saveurs, nc-nom, saveurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(prédites, vpp-ver:pper, prédites, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1500, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pari, nc-nom, pari, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(valu, vpp-ver:pper, valu, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dîner, nc-nom, dîner, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(portait, v-ver:impf, portait, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(quark, et-nom, quark, [n-1]), ex_si(top, adj-adj, top, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(particule, nc-nom, particule, [n-1]), ex_si(élémentaire, adj-adj, élémentaire, [dl(0,n,n)-1]), ex_si(découverte, vpp-ver:pper, découverte, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1501, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(quark, et-nom, quark, [n-1]), ex_si(top, adj-adj, top, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, nc-nom, dernière, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(six, adj-num, six, [dr(0,n,n)-1]), ex_si(saveurs, nc-nom, saveurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(prédites, vpp-ver:pper, prédites, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1502, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(trillionièmes, nc-nom, trillionièmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(seconde, nc-num, seconde, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Big', npp-nam, 'Big', [dr(0,n,n)-1]), ex_si('Bang', npp-nam, 'Bang', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-ils', cls-pro:per, '-ils', [np-1]), ex_si(raisonné, vpp-ver:pper, raisonné, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(primordiale, adj-adj, primordiale, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(degrés, nc-nom, degrés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chaleur, nc-nom, chaleur, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(contenait, v-ver:impf, contenait, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(quantités, nc-nom, quantités, [n-1]), ex_si(égales, adj-adj, égales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(antimatière, nc-nom, antimatière, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1503, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Big', npp-nam, 'Big', [dr(0,n,n)-1]), ex_si('Bang', npp-nam, 'Bang', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(primordiale, adj-adj, primordiale, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,dia(0,box(0,n))),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1504, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('Naeye', npp-nam, 'Naeye', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(télescopes, nc-nom, télescopes, [n-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(capables, adj-adj, capables, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(regarder, vinf-ver:infi, regarder, [dl(0,np,s_inf)-1]), ex_si(si, adv-adv, si, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(loin, adv-adv, loin, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(donc, adv-adv, donc, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(verront, v-ver:futu, verront, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(galaxies, nc-nom, galaxies, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(assembler, vinf-ver:infi, assembler, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,dl(1,s,s),n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Big', npp-nam, 'Big', [dr(0,n,n)-1]), ex_si('Bang', npp-nam, 'Bang', [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1505, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Big', npp-nam, 'Big', [dr(0,n,n)-1]), ex_si('Bang', npp-nam, 'Bang', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(primordiale, adj-adj, primordiale, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,dia(0,box(0,n))),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1506, Result) :-
      prob_parse([ ex_si('Jackson', npp-nam, 'Jackson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(constaté, vpp-ver:pper, constaté, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(maintenu, vpp-ver:pper, maintenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(monopole, nc-nom, monopole, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Windows', npp-nam, 'Windows', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(établissant, vpr-ver:ppre, établissant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fabricants, nc-nom, fabricants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(promouvoir, vinf-ver:infi, promouvoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(fabricants, nc-nom, fabricants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(logiciels, nc-nom, logiciels, [n-1]), ex_si(rivaux, adj-adj, rivaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1507, Result) :-
      prob_parse([ ex_si('Microsoft', npp-nam, 'Microsoft', [dr(0,np,np)-1]), ex_si('Windows', npp-nam, 'Windows', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1508, Result) :-
      prob_parse([ ex_si('Espérant', vpr-ver:ppre, 'Espérant', [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(desserrer, vinf-ver:infi, desserrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mainmise, nc-nom, mainmise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si(personnels, adj-adj, personnels, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(minuscule, adj-adj, minuscule, [dr(0,n,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Seattle', npp-nam, 'Seattle', [np-1]), ex_si(dévoilera, v-ver:futu, dévoilera, [dr(0,dl(0,np,s),np)-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(barre, nc-nom, barre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(menu, nc-nom, menu, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écran, nc-nom, écran, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(contourne, v-ver:pres, contourne, [dr(0,dl(0,np,s),np)-1]), ex_si('Windows', npp-nam, 'Windows', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(directs, adj-adj, directs, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(programmes, nc-nom, programmes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Internet', nc-nam, 'Internet', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1509, Result) :-
      prob_parse([ ex_si('Microsoft', npp-nam, 'Microsoft', [dr(0,np,np)-1]), ex_si('Windows', npp-nam, 'Windows', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1510, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Oman', npp-nam, 'Oman', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(membres, nc-nom, membres, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('CCG', npp-abr, 'CCG', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(regroupe, v-ver:pres, regroupe, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [n-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Bahreïn', npp-nam, 'Bahreïn', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Émirats', nc-nam, 'Émirats', [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(unis, adj-adj, unis, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('EAU', npp-abr, 'EAU', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1511, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [np-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Émirats', nc-nam, 'Émirats', [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(unis, adj-adj, unis, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Oman', npp-nam, 'Oman', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Bahreïn', npp-nam, 'Bahreïn', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1512, Result) :-
      prob_parse([ ex_si('Bahreïn', npp-nam, 'Bahreïn', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [np-1]), ex_si(membres, nc-nom, membres, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CCG', npp-abr, 'CCG', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(territorial, adj-adj, territorial, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Bahreïn', npp-nam, 'Bahreïn', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(boycotter, vinf-ver:infi, boycotter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CCG', npp-abr, 'CCG', [n-1]), ex_si(convoqué, vpp-ver:pper, convoqué, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(qatarie, adj-adj, qatarie, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Doha', npp-nam, 'Doha', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1513, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [np-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Émirats', nc-nam, 'Émirats', [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(unis, adj-adj, unis, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Oman', npp-nam, 'Oman', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Bahreïn', npp-nam, 'Bahreïn', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1514, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Égypte', npp-nam, 'Égypte', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Syrie', npp-nam, 'Syrie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [n-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Bahreïn', npp-nam, 'Bahreïn', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('Oman', npp-nam, 'Oman', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Émirats', nc-nam, 'Émirats', [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(unis, adj-adj, unis, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Damas', npp-nam, 'Damas', [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mécanisme, nc-nom, mécanisme, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(garantir, vinf-ver:infi, garantir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1515, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [np-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Émirats', nc-nam, 'Émirats', [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(unis, adj-adj, unis, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Oman', npp-nam, 'Oman', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Bahreïn', npp-nam, 'Bahreïn', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1516, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(ardents, adj-adj, ardents, [dr(0,n,n)-1]), ex_si(partisans, nc-nom, partisans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Stellafane', npp-nam, 'Stellafane', [np-1]), ex_si(figure, v-ver:pres, figure, [dr(0,dr(0,s,pp),np)-1]), ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('H.', npp-abr, 'H.', [dr(0,np,np)-1]), ex_si('Levy', npp-nam, 'Levy', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(codécouvreur, nc-nom, codécouvreur, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Eugene', npp-nam, 'Eugene', [dl(0,n,n)-1]), ex_si('Shoemaker', npp-nam, 'Shoemaker', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(comète, nc-nom, comète, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(brisée, vpp-ver:pper, brisée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(1,s,s),s_q)-1]), ex_si(elle, cls-pro:per, elle, [dr(0,dl(1,s,s),s_q)-1]), ex_si(était, v-ver:impf, était, [np-1]), ex_si(attirée, vpp-ver:pper, attirée, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vers, p-prp, vers, [np-1]), ex_si('Jupiter', npp-nam, 'Jupiter', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(créant, vpr-ver:ppre, créant, [dr(0,np,n)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(artifice, nc-nom, artifice, [n-1]), ex_si(visible, adj-adj, visible, [n-1]), ex_si(depuis, p-prp, depuis, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1517, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(comète, nc-nom, comète, [n-1]), ex_si('Shoemaker-Levy', npp-nam, 'Shoemaker-Levy', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Carolyn', npp-nam, 'Carolyn', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(astronome, nc-nom, astronome, [n-1]), ex_si('David', npp-nam, 'David', [dl(0,n,n)-1]), ex_si('H.', npp-abr, 'H.', [dl(0,n,n)-1]), ex_si('Levy', npp-nam, 'Levy', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1518, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Park', npp-nam, 'Park', [dr(0,n,n)-1]), ex_si('Trust', npp-nam, 'Trust', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(identifié, vpp-ver:pper, identifié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(sites, nc-nom, sites, [n-1]), ex_si(hautement, adv-adv, hautement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(prioritaires, adj-adj, prioritaires, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Blue', npp-nam, 'Blue', [dr(0,n,n)-1]), ex_si('Ridge', npp-nam, 'Ridge', [dr(0,n,n)-1]), ex_si('Parkway', npp-nam, 'Parkway', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Caroline', npp-nam, 'Caroline', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Virginie', npp-nam, 'Virginie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(comportant, vpr-ver:ppre, comportant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(propriétés, nc-nom, propriétés, [n-1]), ex_si(privées, adj-adj, privées, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(vendues, vpp-ver:pper, vendues, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1519, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1520, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(espoirs, nc-nom, espoirs, [n-1]), ex_si(reposent, v-ver:pres, reposent, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(participations, nc-nom, participations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Talisman', npp-nam, 'Talisman', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(comtés, nc-nom, comtés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Palm', npp-nam, 'Palm', [dr(0,np,np)-1]), ex_si('Beach', npp-nam, 'Beach', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Hendry', npp-nam, 'Hendry', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('vice-président', nc-nom, 'vice-président', [n-1]), ex_si('Al', npp-nam, 'Al', [dl(0,n,n)-1]), ex_si('Gore', npp-nam, 'Gore', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncée, vpp-ver:pper, annoncée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(pompe, nc-nom, pompe, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('50e', adj-num, '50e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1521, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1522, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(expulsion, nc-nom, expulsion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Albanais', nc-nam, 'Albanais', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(distrait, vpp-ver:pper, distrait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secours, nc-nom, secours, [n-1]), ex_si(parallèle, adj-adj, parallèle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(que, adv-adv, que, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(durcir, vinf-ver:infi, durcir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(19, adj-num, 19, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(prêts, adj-adj, prêts, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(approuver, vinf-ver:infi, approuver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(attaques, nc-nom, attaques, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cibles, nc-nom, cibles, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sensibles, adj-adj, sensibles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Milosevic', npp-nam, 'Milosevic', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(yougoslave, adj-adj, yougoslave, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1523, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1524, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ministres, nc-nom, ministres, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(membres, nc-nom, membres, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rencontré, vpp-ver:pper, rencontré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tôt, adv-adv, tôt, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(ce, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), ex_si(matin, nc-nom, matin, [n-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(homologue, nc-nom, homologue, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Evgueni', npp-nam, 'Evgueni', [dr(0,np,np)-1]), ex_si('Primakov', npp-nam, 'Primakov', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si('OTAN-Russie', npp-nam, 'OTAN-Russie', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1525, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1526, Result) :-
      prob_parse([ ex_si('Sotheby\'s', npp-nam, 'Sotheby\'s', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(puissantes, adj-adj, puissantes, [dr(0,n,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(enchères, nc-nom, enchères, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(échangé, vpp-ver:pper, échangé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(listes, nc-nom, listes, [n-1]), ex_si(confidentielles, adj-adj, confidentielles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(super, adj-adv, super, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(riches, adj-adj, riches, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(épargnés, vpp-ver:pper, épargnés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(paiement, nc-nom, paiement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(frais, nc-nom, frais, [n-1]), ex_si(facturés, vpp-ver:pper, facturés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(vendeurs, nc-nom, vendeurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(proches, adj-adj, proches, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(sociétés, nc-nom, sociétés, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si(antitrust, adj-adj, antitrust, [dl(0,n,n)-1]), ex_si(les, clo-pro:per, les, [dl(0,n,n)-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1527, Result) :-
      prob_parse([ ex_si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(enchères, nc-nom, enchères, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1528, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rio', npp-nam, 'Rio', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Janeiro', npp-nam, 'Janeiro', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(récupéré, vpp-ver:pper, récupéré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(volées, vpp-ver:pper, volées, [dl(0,np,np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Salvador', npp-nam, 'Salvador', [dr(0,np,np)-1]), ex_si('Dali', npp-nam, 'Dali', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Henri', npp-nam, 'Henri', [dr(0,np,np)-1]), ex_si('Matisse', npp-nam, 'Matisse', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1529, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récupéré, vpp-ver:pper, récupéré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(objets, nc-nom, objets, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(volés, vpp-ver:pper, volés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exception, nc-nom, exception, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(sculptures, nc-nom, sculptures, [n-1]), ex_si(chinoises, adj-adj, chinoises, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(céramique, nc-nom, céramique, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('7e', adj-num, '7e', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(collection, nc-nom, collection, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argenterie, nc-nom, argenterie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1530, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récupérées, vpp-ver:pper, récupérées, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dali', npp-nam, 'Dali', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1531, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si(volées, vpp-ver:pper, volées, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Warhol', npp-nam, 'Warhol', [np-1]), ex_si(retrouvées, vpp-ver:pper, retrouvées, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Amsterdam', npp-nam, 'Amsterdam', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lithographies, nc-nom, lithographies, [n-1]), ex_si(volées, vpp-ver:pper, volées, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(artiste, nc-nom, artiste, [n-1]), ex_si(pop, nc-nom, pop, [dl(0,n,n)-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Andy', npp-nam, 'Andy', [dl(0,n,n)-1]), ex_si('Warhol', npp-nam, 'Warhol', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1532, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tableaux, nc-nom, tableaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dali', npp-nam, 'Dali', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(portés, vpp-ver:pper, portés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(disparus, vpp-ver:pper, disparus, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1533, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récupérées, vpp-ver:pper, récupérées, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dali', npp-nam, 'Dali', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1534, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(portraits, nc-nom, portraits, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Reynolds', npp-nam, 'Reynolds', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Gainsborough', npp-nam, 'Gainsborough', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,np,np),np)-1]), ex_si(1990, pro-num, 1990, [np-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(recherchées, vpp-ver:pper, recherchées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si('Art', npp-nam, 'Art', [dl(0,n,n)-1]), ex_si('Loss', npp-nam, 'Loss', [dl(0,n,n)-1]), ex_si('Register', npp-nam, 'Register', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récupérés, vpp-ver:pper, récupérés, [dl(0,np,s_pass)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(apportés, vpp-ver:pper, apportés, [dl(0,np,s_pass)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('Sotheby\'s', npp-nam, 'Sotheby\'s', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(évalués, vpp-ver:pper, évalués, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1535, Result) :-
      prob_parse([ ex_si('De', p-prp, 'De', [dr(0,dr(0,s,s),n)-1]), ex_si(même, adj-adj, même, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lithographie, nc-nom, lithographie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(artiste, nc-nom, artiste, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si('Edvard', npp-nam, 'Edvard', [dl(0,n,n)-1]), ex_si('Munch', npp-nam, 'Munch', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(volée, vpp-ver:pper, volée, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(galerie, nc-nom, galerie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Oslo', npp-nam, 'Oslo', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récupérée, vpp-ver:pper, récupérée, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1536, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(portraits, nc-nom, portraits, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lithographie, nc-nom, lithographie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Edvard', npp-nam, 'Edvard', [dr(0,np,np)-1]), ex_si('Munch', npp-nam, 'Munch', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dl(0,np,s_pass)-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si('Art', npp-nam, 'Art', [dl(0,n,n)-1]), ex_si('Loss', npp-nam, 'Loss', [dl(0,n,n)-1]), ex_si('Register', npp-nam, 'Register', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1537, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Herman', npp-nam, 'Herman', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-nam, 'GM', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Gerhardt', npp-nam, 'Gerhardt', [dr(0,np,np)-1]), ex_si('Schroeder', npp-nam, 'Schroeder', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Basse-Saxe', npp-nam, 'Basse-Saxe', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('VW', npp-abr, 'VW', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(poids, nc-nom, poids, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(influencer, vinf-ver:infi, influencer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enquêtes, nc-nom, enquêtes, [n-1]), ex_si(menées, vpp-ver:pper, menées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(procureurs, nc-nom, procureurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hesse', npp-nam, 'Hesse', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(allégations, nc-nom, allégations, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(espionnage, nc-nom, espionnage, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1538, Result) :-
      prob_parse([ ex_si('Gerhardt', npp-nam, 'Gerhardt', [dr(0,np,np)-1]), ex_si('Schroeder', npp-nam, 'Schroeder', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('VW', npp-abr, 'VW', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1539, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Occident', npp-nam, 'Occident', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(préféré, vpp-ver:pper, préféré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(concentrer, vinf-ver:infi, concentrer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plutôt, adv-kon, plutôt, [dr(0,dl(0,pp,pp),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1540, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(éléphants, nc-nom, éléphants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(chassés, vpp-ver:pper, chassés, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(dépouillés, vpp-ver:pper, dépouillés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(cachés, vpp-ver:pper, cachés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1541, Result) :-
      prob_parse([ ex_si('Leur', det-det:pos, 'Leur', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effondré, vpp-ver:pper, effondré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si('1,2', det-num, '1,2', [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(1,s,s)),np)-1]), ex_si('600.000', pro-num, '600.000', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décennie, nc-nom, décennie, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CITES', npp-abr, 'CITES', [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Convention', npp-nam, 'Convention', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(menacées, vpp-ver:pper, menacées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(extinction, nc-nom, extinction, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(interdise, v-ver:pres, interdise, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivoire, nc-nom, ivoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1542, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(éléphants, nc-nom, éléphants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ivoire, nc-nom, ivoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1543, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Amsterdam', npp-nam, 'Amsterdam', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lithographies, nc-nom, lithographies, [n-1]), ex_si(volées, vpp-ver:pper, volées, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(artiste, nc-nom, artiste, [n-1]), ex_si(pop, nc-nom, pop, [dl(0,n,n)-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Andy', npp-nam, 'Andy', [dl(0,n,n)-1]), ex_si('Warhol', npp-nam, 'Warhol', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1544, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(81, det-num, 81, [dr(0,np,n)-1]), ex_si(lithographies, nc-nom, lithographies, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Andy', npp-nam, 'Andy', [dr(0,np,np)-1]), ex_si('Warhol', npp-nam, 'Warhol', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1545, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Occident', npp-nam, 'Occident', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(préféré, vpp-ver:pper, préféré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(concentrer, vinf-ver:infi, concentrer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plutôt, adv-kon, plutôt, [dr(0,dl(0,pp,pp),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1546, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(éléphants, nc-nom, éléphants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(chassés, vpp-ver:pper, chassés, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(dépouillés, vpp-ver:pper, dépouillés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(cachés, vpp-ver:pper, cachés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1547, Result) :-
      prob_parse([ ex_si('Leur', det-det:pos, 'Leur', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effondré, vpp-ver:pper, effondré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si('1,2', det-num, '1,2', [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(1,s,s)),np)-1]), ex_si('600.000', pro-num, '600.000', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décennie, nc-nom, décennie, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CITES', npp-abr, 'CITES', [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Convention', npp-nam, 'Convention', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(menacées, vpp-ver:pper, menacées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(extinction, nc-nom, extinction, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(interdise, v-ver:pres, interdise, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivoire, nc-nom, ivoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1548, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(convention, nc-nom, convention, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interdit, vpp-ver:pper, interdit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivoire, nc-nom, ivoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1549, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(fluviale, adj-adj, fluviale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déluge, nc-nom, déluge, [n-1]), ex_si(nourrit, v-ver:pres, nourrit, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,n,n)-1]), ex_si(restante, adj-adj, restante, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1550, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tiers, nc-nom, tiers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,n,n)-1]), ex_si(restante, adj-adj, restante, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bassin, nc-nom, bassin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amazone', npp-nam, 'Amazone', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(consumé, vpp-ver:pper, consumé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(surface, nc-nom, surface, [n-1]), ex_si(deux, det-num, deux, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1551, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,n,n)-1]), ex_si(amazonienne, adj-adj, amazonienne, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaste, adj-adj, vaste, [dr(0,n,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1552, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(shérif, nc-nom, shérif, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(robot, nc-nom, robot, [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(contribution, nc-nom, contribution, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ventura', npp-nam, 'Ventura', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déminage, nc-nom, déminage, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(répondu, vpp-ver:pper, répondu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(appels, nc-nom, appels, [n-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1553, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(bombes, nc-nom, bombes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1554, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(calories, nc-nom, calories, [n-1]), ex_si(provenaient, v-ver:impf, provenaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(graisses, nc-nom, graisses, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1555, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(mâles, nc-nom, mâles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(correspond, v-ver:pres, correspond, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(moyen, adj-adj, moyen, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(longévité, nc-nom, longévité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1556, Result) :-
      prob_parse([ ex_si('Comme', adv-adv, 'Comme', [dr(0,dr(0,s,s),dl(0,np,s))-1]), ex_si(prévu, vpp-ver:pper, prévu, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(signes, nc-nom, signes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(diabète, nc-nom, diabète, [n-1]), ex_si(imminent, adj-adj, imminent, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(foies, nc-nom, foies, [n-1]), ex_si(grossièrement, adv-adv, grossièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(hypertrophiés, adj-adj, hypertrophiés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mourir, vinf-ver:infi, mourir, [dl(0,np,s_inf)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(nourries, vpp-ver:pper, nourries, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1557, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(mâles, adj-adj, mâles, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nourries, vpp-ver:pper, nourries, [dl(0,np,s_pass)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(calories, nc-nom, calories, [n-1]), ex_si(provenaient, v-ver:impf, provenaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(graisses, nc-nom, graisses, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1558, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(bases, nc-nom, bases, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(volé, vpp-ver:pper, volé, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(récupéré, vpp-ver:pper, récupéré, [dl(0,np,s_pass)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si('quelqu\'un', pro-pro:ind, 'quelqu\'un', [np-1]), ex_si(cherche, v-ver:pres, cherche, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(évaluer, vinf-ver:infi, évaluer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(propose, v-ver:pres, propose, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(marchands, nc-nom, marchands, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(enchères, nc-nom, enchères, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(répond, v-ver:pres, répond, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(offre, nc-nom, offre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(récompense, nc-nom, récompense, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tente, v-ver:pres, tente, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(douanes, nc-nom, douanes, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(demande, v-ver:pres, demande, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rançon, nc-nom, rançon, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1559, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(registres, nc-nom, registres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(inventaire, nc-nom, inventaire, [n-1]), ex_si(centralisés, adj-ver:pper, centralisés, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(musées, nc-nom, musées, [n-1]), ex_si(aident, v-ver:pres, aident, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sensibilisation, nc-nom, sensibilisation, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1560, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si('chefs-d\'oeuvre', nc-nom, 'chefs-d\'oeuvre', [n-1]), ex_si(volés, vpp-ver:pper, volés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Renoir', npp-nam, 'Renoir', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1561, Result) :-
      prob_parse([ ex_si('Cinq', det-num, 'Cinq', [dr(0,np,n)-1]), ex_si('chefs-d\'oeuvre', nc-nom, 'chefs-d\'oeuvre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Renoir', npp-nam, 'Renoir', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récupérés, vpp-ver:pper, récupérés, [dl(0,np,s_pass)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(voleur, nc-nom, voleur, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(avoué, vpp-ver:pper, avoué, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1562, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(stupéfiant, adj-adj, stupéfiant, [dr(0,n,n)-1]), ex_si(butin, nc-nom, butin, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si('Gardner', npp-nam, 'Gardner', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('peut-être', adv-adv, 'peut-être', [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1563, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(douzaine, nc-num, douzaine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si('Gardner', npp-nam, 'Gardner', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1564, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Herald', npp-nam, 'Herald', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(heureux, adj-adj, heureux, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Kennedy', npp-nam, 'Kennedy', [np-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(vigoureusement, adv-adv, vigoureusement, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réexamen, nc-nom, réexamen, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(sortir, vinf-ver:infi, sortir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1565, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(parlant, vpr-ver:ppre, parlant, [dl(0,np,s_ppres)-1]), ex_si(sérieusement, adv-adv, sérieusement, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(prendrai, v-ver:futu, prendrai, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(changement, nc-nom, changement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(indication, nc-nom, indication, [n-1]), ex_si(sobre, adj-adj, sobre, [dl(0,n,n)-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),s)-1]), ex_si(nous, pro-pro:per, nous, [np-1]), ex_si(tous, pro-pro:ind, tous, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dl(0,n,n)-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,dl(0,n,n),dl(0,np,np)),dr(0,s,dia(1,box(1,pp))))-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(nous, clr-pro:per, nous, [cl_r-1]), ex_si(situions, v-ver:pres, situions, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(continuum, nc-nom, continuum, [n-1]), ex_si('libéral-conservateur', adj-adj, 'libéral-conservateur', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(profondément, adv-adv, profondément, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(préoccupés, vpp-ver:pper, préoccupés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(impacts, nc-nom, impacts, [n-1]), ex_si(dommageables, adj-adj, dommageables, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(cherchons, v-ver:pres, cherchons, [dr(0,s,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(moyens, nc-nom, moyens, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(travailler, vinf-ver:infi, travailler, [dl(0,np,s_inf)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(résoudre, vinf-ver:infi, résoudre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(possible, adj-adj, possible, [let-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1566, Result) :-
      prob_parse([ ex_si('Tous', pro-pro:ind, 'Tous', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(profondément, adv-adv, profondément, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(préoccupés, vpp-ver:pper, préoccupés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(cherchent, v-ver:pres, cherchent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(moyens, nc-nom, moyens, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(résoudre, vinf-ver:infi, résoudre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1567, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(voulez, v-ver:pres, voulez, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(quel, detwh-pro:rel, quel, [dr(0,dr(0,s_whq,dr(0,s,dia(1,box(1,np)))),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(fera, v-ver:futu, fera, [dr(0,dl(0,np,s),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(prochains, adj-adj, prochains, [dr(0,n,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sélectionnez, vimp-ver:impe, sélectionnez, [dr(0,s,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(météo, nc-nom, météo, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('multi-écran', nc-nom, 'multi-écran', [n-1]), ex_si(principal, adj-adj, principal, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(trouverez, v-ver:pres, trouverez, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(prévisions, nc-nom, prévisions, [n-1]), ex_si(détaillées, vpp-ver:pper, détaillées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(météorologiques, adj-adj, météorologiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1568, Result) :-
      prob_parse([ ex_si('Ou', cc-kon, 'Ou', [dr(0,s,s)-1]), ex_si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(pouvez, v-ver:pres, pouvez, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(lire, vinf-ver:infi, lire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(titres, nc-nom, titres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si(préféré, vpp-ver:pper, préféré, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(tapant, vpr-ver:ppre, tapant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(300, pro-num, 300, [np-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(combiné, nc-nom, combiné, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(feriez, v-ver:futu, feriez, [dr(0,dl(0,np,s),np)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Ceefax', npp-nam, 'Ceefax', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1569, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(météo, nc-nom, météo, [dl(0,n,n)-1]), ex_si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(fera, v-ver:futu, fera, [dr(0,dl(0,np,s),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prochains, adj-adj, prochains, [dr(0,n,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1570, Result) :-
      prob_parse([ ex_si('Volkswagen', npp-nam, 'Volkswagen', [np-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(commencer, vinf-ver:infi, commencer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(coopérer, vinf-ver:infi, coopérer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pleinement, adv-adv, pleinement, [dl(1,s,s)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(procureurs, nc-nom, procureurs, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(présumé, vpp-ver:pper, présumé, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(secrets, adj-adj, secrets, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('General', npp-nam, 'General', [dr(0,np,np)-1]), ex_si('Motors', npp-nam, 'Motors', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1571, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(allemandes, adj-adj, allemandes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('VW', npp-nam, 'VW', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1572, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(tentative, nc-nom, tentative, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(empêcher, vinf-ver:infi, empêcher, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(anciens, adj-adj, anciens, [dr(0,n,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(travailler, vinf-ver:infi, travailler, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Volkswagen', npp-nam, 'Volkswagen', [np-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rejetée, vpp-ver:pper, rejetée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Francfort', npp-nam, 'Francfort', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1573, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(débauchage, nc-nom, débauchage, [n-1]), ex_si(anticoncurrentiel, adj-adj, anticoncurrentiel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rejetées, vpp-ver:pper, rejetées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1574, Result) :-
      prob_parse([ ex_si('Certains', det-pro:ind, 'Certains', [dr(0,np,n)-1]), ex_si(passagers, nc-nom, passagers, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(escortés, vpp-ver:pper, escortés, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(hors, p-prp, hors, [dr(0,pp,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fauteuil, nc-nom, fauteuil, [n-1]), ex_si(roulant, vpr-ver:ppre, roulant, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(équipage, nc-nom, équipage, [n-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gants, nc-nom, gants, [n-1]), ex_si(bleus, adj-adj, bleus, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1575, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(fauteuils, nc-nom, fauteuils, [n-1]), ex_si(roulants, adj-adj, roulants, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(conduire, vinf-ver:infi, conduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(passagers, nc-nom, passagers, [n-1]), ex_si(hors, p-prp, hors, [dr(0,pp,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1576, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(impliquant, vpr-ver:ppre, impliquant, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(associés, nc-nom, associés, [n-1]), ex_si(porte, v-ver:pres, porte, [dr(0,dl(0,np,s),pp)-1]), ex_si(principalement, adv-adv, principalement, [dr(0,pp,pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soupçons, nc-nom, soupçons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(systématique, adj-adj, systématique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secrets, nc-nom, secrets, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1577, Result) :-
      prob_parse([ ex_si('Sept', det-num, 'Sept', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(cadres, nc-nom, cadres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partis, vpp-ver:pper, partis, [dl(0,np,s_ppart)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1578, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('VW', npp-abr, 'VW', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(soumis, vpp-ver:pper, soumis, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pression, nc-nom, pression, [n-1]), ex_si(intense, adj-adj, intense, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bonn', npp-nam, 'Bonn', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(collègues, nc-nom, collègues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(rechercher, vinf-ver:infi, rechercher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(conciliation, nc-nom, conciliation, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(déclarations, nc-nom, déclarations, [n-1]), ex_si(franches, adj-adj, franches, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(considérées, vpp-ver:pper, considérées, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),np)-1]), ex_si(atteinte, nc-nom, atteinte, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réputation, nc-nom, réputation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1579, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(inquiète, v-ver:pres, inquiète, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enquêtes, nc-nom, enquêtes, [n-1]), ex_si(judiciaires, adj-adj, judiciaires, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(politiques, adj-adj, politiques, [n-1]), ex_si(intérieures, adj-adj, intérieures, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1580, Result) :-
      prob_parse([ ex_si('Monsieur', nc-abr, 'Monsieur', [dr(0,np,np)-1]), ex_si('Piech', npp-nam, 'Piech', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(suggestions, nc-nom, suggestions, [n-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(actions, nc-nom, actions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('VW', npp-abr, 'VW', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(embauchant, vpr-ver:ppre, embauchant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(sept, adj-num, sept, [dr(0,n,n)-1]), ex_si(collègues, nc-nom, collègues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(consternation, nc-nom, consternation, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(désaccord, nc-nom, désaccord, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(style, nc-nom, style, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(allemandes, adj-adj, allemandes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1581, Result) :-
      prob_parse([ ex_si('Piech', npp-nam, 'Piech', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), ex_si(nationaliste, adj-adj, nationaliste, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1582, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Federal', npp-nam, 'Federal', [dr(0,n,n)-1]), ex_si('Bureau', npp-nam, 'Bureau', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), ex_si('Investigation', npp-nam, 'Investigation', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entamé, vpp-ver:pper, entamé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(circonstances, nc-nom, circonstances, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', nc-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(comprendre, vinf-ver:infi, comprendre, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(considérait, v-ver:impf, considérait, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espionnage, nc-nom, espionnage, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(particulière, adj-adj, particulière, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1583, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débuté, vpp-ver:pper, débuté, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instigation, nc-nom, instigation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Commerce', nc-nam, 'Commerce', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1584, Result) :-
      prob_parse([ ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partagé, vpp-ver:pper, partagé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1,4', det-num, '1,4', [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grameen', npp-nam, 'Grameen', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pionnier, nc-nom, pionnier, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(microcrédit, nc-nom, microcrédit, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1585, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(pauvres, adj-adj, pauvres, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remplissent, v-ver:pres, remplissent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(requises, vpp-ver:pper, requises, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si(traditionnels, adj-adj, traditionnels, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(seulement, adv-adv, seulement, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(garantie, nc-nom, garantie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1586, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(actionnaires, nc-nom, actionnaires, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(appauvries, adj-adj, appauvries, [dl(0,n,n)-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(soutient, v-ver:pres, soutient, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1587, Result) :-
      prob_parse([ ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grameen', npp-nam, 'Grameen', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1588, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(liesse, nc-nom, liesse, [n-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(acclamait, v-ver:impf, acclamait, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Dhaka', npp-nam, 'Dhaka', [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(voulait, v-ver:impf, voulait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(travailler, vinf-ver:infi, travailler, [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(choses, nc-nom, choses, [n-1]), ex_si(nouvelles, adj-adj, nouvelles, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(utiliserait, v-ver:cond, utiliserait, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,s),np)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si(lancer, vinf-ver:infi, lancer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(aliments, nc-nom, aliments, [dr(0,dl(0,n,n),n)-1]), ex_si(peu, adv-adv, peu, [n-1]), ex_si(coûteux, adj-adj, coûteux, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mais, cc-kon, mais, [dl(0,n,n)-1]), ex_si(nutritifs, adj-adj, nutritifs, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pauvres, nc-nom, pauvres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(place, nc-nom, place, [dr(0,pp,n)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(ophtalmologique, adj-adj, ophtalmologique, [n-1]), ex_si(pour, p-prp, pour, [dl(0,n,n)-1]), ex_si(traiter, vinf-ver:infi, traiter, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(patients, nc-nom, patients, [dr(0,np,n)-1]), ex_si(démunis, vpp-ver:pper, démunis, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(1589, Result) :-
      prob_parse([ ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(lancer, vinf-ver:infi, lancer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1590, Result) :-
      prob_parse([ ex_si('Suite', nc-nom, 'Suite', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(flux, nc-nom, flux, [n-1]), ex_si(constant, adj-adj, constant, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fuites, nc-nom, fuites, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déclarations, nc-nom, déclarations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(découvertes, nc-nom, découvertes, [n-1]), ex_si(apparemment, adv-adv, apparemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(incriminantes, adj-adj, incriminantes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(bâillonné, vpp-ver:pper, bâillonné, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(hautes, adj-adj, hautes, [dr(0,n,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(juridiques, adj-adj, juridiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1591, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(fuites, nc-nom, fuites, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bâillon, nc-nom, bâillon, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(placé, vpp-ver:pper, placé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hollande', npp-nam, 'Hollande', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1592, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(porte, v-ver:pres, porte, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pacifiste, nc-nom, pacifiste, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(entrepreneur, nc-nom, entrepreneur, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1866, pro-num, 1866, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1593, Result) :-
      prob_parse([ ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(laissé, vpp-ver:pper, laissé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(fortune, nc-nom, fortune, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(récompense, v-ver:pres, récompense, [dr(0,dl(0,np,s),np)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1901, pro-num, 1901, [np-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réalisations, nc-nom, réalisations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(chimie, nc-nom, chimie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(médecine, nc-nom, médecine, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(efforts, nc-nom, efforts, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(promouvoir, vinf-ver:infi, promouvoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1594, Result) :-
      prob_parse([ ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1866, pro-num, 1866, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1595, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Ferdinand', npp-nam, 'Ferdinand', [dr(0,np,np)-1]), ex_si('Piech', npp-nam, 'Piech', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(disposait, v-ver:impf, disposait, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(confidentiel, adj-adj, confidentiel, [dl(0,n,n)-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(usine, nc-nom, usine, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(bas, adj-adj, bas, [dr(0,n,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1596, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(comprenaient, v-ver:impf, comprenaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(plans, nc-nom, plans, [n-1]), ex_si(secrets, adj-adj, secrets, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(usine, nc-nom, usine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1597, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(témoins, nc-nom, témoins, [n-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entendu, vpp-ver:pper, entendu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),dl(0,np,s)),dr(0,dl(0,np,s),dl(0,np,s))),dr(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(déchiquetés, vpp-ver:pper, déchiquetés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(toute, adv-adv, toute, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(nuit, nc-nom, nuit, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Jorge', npp-nam, 'Jorge', [dr(0,np,np)-1]), ex_si('Alvarez', npp-nam, 'Alvarez', [dr(0,np,np)-1]), ex_si('Aguirre', npp-nam, 'Aguirre', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Rosario', npp-nam, 'Rosario', [dr(0,np,np)-1]), ex_si('Piazza', npp-nam, 'Piazza', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si('ex-Opel', nc-nom, 'ex-Opel', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si('VW', npp-nam, 'VW', [np-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(1598, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(quittant, vpr-ver:ppre, quittant, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [np-1]), ex_si(comprenaient, v-ver:impf, comprenaient, [dr(0,dl(0,np,s),np)-1]), ex_si('Jose', npp-nam, 'Jose', [dr(0,np,np)-1]), ex_si('Gutierrez', npp-nam, 'Gutierrez', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Jorge', npp-nam, 'Jorge', [dr(0,np,np)-1]), ex_si('Alvarez', npp-nam, 'Alvarez', [dr(0,np,np)-1]), ex_si('Aguirre', npp-nam, 'Aguirre', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Rosario', npp-nam, 'Rosario', [dr(0,np,np)-1]), ex_si('Piazza', npp-nam, 'Piazza', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1599, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Bangladesh', npp-nam, 'Bangladesh', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(pauvres, adj-adj, pauvres, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sécheresse, nc-nom, sécheresse, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(famine, nc-nom, famine, [n-1]), ex_si(dévastatrices, adj-adj, dévastatrices, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1974, pro-num, 1974, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('1,5', det-num, '1,5', [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1600, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(tentait, v-ver:impf, tentait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(aider, vinf-ver:infi, aider, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(villageois, nc-nom, villageois, [n-1]), ex_si(affamés, adj-ver:pper, affamés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rencontré, vpp-ver:pper, rencontré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(21, det-num, 21, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sufia', npp-nam, 'Sufia', [dr(0,np,np)-1]), ex_si('Begum', npp-nam, 'Begum', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(accablée, vpp-ver:pper, accablée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(dette, nc-nom, dette, [n-1]), ex_si(minuscule, adj-adj, minuscule, [dl(0,n,n)-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(écrasante, adj-adj, écrasante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(souvient, v-ver:pres, souvient, [dl(0,cl_r,dl(1,s,dr(0,s,np)))-1]), ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(autobiographie, nc-nom, autobiographie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Banker', et-nom, 'Banker', [np-1]), ex_si(to, et-prp, to, [dr(0,dl(0,np,np),np)-1]), ex_si(the, et-det:art, the, [dr(0,np,n)-1]), ex_si('Poor', npp-nam, 'Poor', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1601, Result) :-
      prob_parse([ ex_si('1,5', det-num, '1,5', [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(ravages, nc-nom, ravages, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécheresse, nc-nom, sécheresse, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(famine, nc-nom, famine, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1974, pro-num, 1974, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Bangladesh', npp-nam, 'Bangladesh', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1602, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(briser, vinf-ver:infi, briser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cercle, nc-nom, cercle, [n-1]), ex_si(vicieux, adj-adj, vicieux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dette, nc-nom, dette, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pauvreté, nc-nom, pauvreté, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prêté, vpp-ver:pper, prêté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(27, det-num, 27, [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Begum', npp-nam, 'Begum', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(40, pro-num, 40, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(voisins, nc-nom, voisins, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(village, nc-nom, village, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Joba', npp-nam, 'Joba', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1603, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(leur, clo-pro:per, leur, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(rembourser, vinf-ver:infi, rembourser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(suivante, adj-adj, suivante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si(stables, adj-adj, stables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1604, Result) :-
      prob_parse([ ex_si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(village, nc-nom, village, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Joba', npp-nam, 'Joba', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1605, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rétablir, vinf-ver:infi, rétablir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(diplomatiques, adj-adj, diplomatiques, [dl(0,n,n)-1]), ex_si(complets, adj-adj, complets, [dl(0,n,n)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(huit, det-num, huit, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(74, det-num, 74, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Malouines', adj-nam, 'Malouines', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1606, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(diplomatiques, adj-adj, diplomatiques, [dl(0,n,n)-1]), ex_si(complètes, adj-adj, complètes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rétablies, vpp-ver:pper, rétablies, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1990, pro-num, 1990, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1607, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(emprunteurs, nc-nom, emprunteurs, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(former, vinf-ver:infi, former, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(supervisent, v-ver:pres, supervisent, [dr(0,dl(0,np,s),np)-1]), ex_si(étroitement, adv-adv, étroitement, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1608, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(pression, nc-nom, pression, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pairs, nc-nom, pairs, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(substitue, v-ver:pres, substitue, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(garanties, nc-nom, garanties, [n-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(emprunteurs, nc-nom, emprunteurs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(commencer, vinf-ver:infi, commencer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rembourser, vinf-ver:infi, rembourser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(principal, nc-nom, principal, [dr(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(puissent, vs-ver:subp, puissent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(contracter, vinf-ver:infi, contracter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1609, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intérêt, nc-nom, intérêt, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fixé, vpp-ver:pper, fixé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si('%.', nc-abr, '%.', [n-1])], Result).
sent(1610, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(emprunteurs, nc-nom, emprunteurs, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(commencer, vinf-ver:infi, commencer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rembourser, vinf-ver:infi, rembourser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(principal, adj-adj, principal, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(semaines, nc-nom, semaines, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1611, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(policier, nc-nom, policier, [n-1]), ex_si(belge, adj-adj, belge, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(marchand, nc-nom, marchand, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si('Suédois', nc-nam, 'Suédois', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1612, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si('Suédois', nc-nam, 'Suédois', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêtés, vpp-ver:pper, arrêtés, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(infiltration, nc-nom, infiltration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(belge, adj-adj, belge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1613, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(soupçonné, vpp-ver:pper, soupçonné, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(volé, vpp-ver:pper, volé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(collection, nc-nom, collection, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(objets, nc-nom, objets, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(anciens, adj-adj, anciens, [dl(0,n,n)-1]), ex_si(népalais, adj-adj, népalais, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(tibétains, adj-adj, tibétains, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(11, det-num, 11, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('South', npp-nam, 'South', [dr(0,np,np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(caché, vpp-ver:pper, caché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(antiquités, nc-nom, antiquités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1614, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(soupçonné, vpp-ver:pper, soupçonné, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(volé, vpp-ver:pper, volé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(collection, nc-nom, collection, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(objets, nc-nom, objets, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(népalais, adj-adj, népalais, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(tibétain, adj-adj, tibétain, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1615, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(norvégienne, adj-adj, norvégienne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(relâché, vpp-ver:pper, relâché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(arrêtées, vpp-ver:pper, arrêtées, [dl(0,n,n)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tableau, nc-nom, tableau, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Edvard', npp-nam, 'Edvard', [dr(0,np,np)-1]), ex_si('Munch', npp-nam, 'Munch', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,np,n)-1]), ex_si('Le', det-det:art, 'Le', [n-1]), ex_si('Cri\'', npp-nam, 'Cri\'', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(volé, vpp-ver:pper, volé, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Galerie', nc-nam, 'Galerie', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Oslo', npp-nam, 'Oslo', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1616, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(norvégienne, adj-adj, norvégienne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tableau, nc-nom, tableau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Munch', npp-nam, 'Munch', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('\'', ponct-pun:cit, '\'', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Cri\'.', npp-nam, 'Cri\'.', [n-1])], Result).
sent(1617, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(offres, nc-nom, offres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(récompenses, nc-nom, récompenses, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(récupérer, vinf-ver:infi, récupérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(volées, vpp-ver:pper, volées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1618, Result) :-
      prob_parse([ ex_si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(volées, vpp-ver:pper, volées, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(récupérées, vpp-ver:pper, récupérées, [dl(0,np,s_pass)-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(récompenses, nc-nom, récompenses, [n-1]), ex_si(offertes, vpp-ver:pper, offertes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1619, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marchands, nc-nom, marchands, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(tenus, vpp-ver:pper, tenus, [dr(0,dr(0,dl(0,np,s_pass),dl(0,np,s_inf)),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(achats, nc-nom, achats, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exception, nc-nom, exception, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(achetés, vpp-ver:pper, achetés, [dl(0,np,np)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(enchères, nc-nom, enchères, [n-1]), ex_si(publiques, adj-adj, publiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1620, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(achetées, vpp-ver:pper, achetées, [dr(0,dl(0,n,n),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(enchères, nc-nom, enchères, [n-1]), ex_si(publiques, adj-adj, publiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dispensées, vpp-ver:pper, dispensées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(enregistrement, nc-nom, enregistrement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1621, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(argentin, adj-adj, argentin, [dl(0,n,n)-1]), ex_si(marque, v-ver:pres, marque, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(étape, nc-nom, étape, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(normalisation, nc-nom, normalisation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1622, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(deviennent, v-ver:pres, deviennent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(coopératives, adj-adj, coopératives, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1623, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(reste, v-ver:pres, reste, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(17, adj-num, 17, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(interdisent, v-ver:pres, interdisent, [dr(0,dl(0,np,s),np)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élevage, nc-nom, élevage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bovins, nc-nom, bovins, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(apparition, nc-nom, apparition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vache, nc-nom, vache, [n-1]), ex_si(folle, adj-adj, folle, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1980, adj-num, 1980, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1624, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(refus, nc-nom, refus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(bétail, nc-nom, bétail, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(tensions, nc-nom, tensions, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1625, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(espionnage, nc-nom, espionnage, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si(impliquant, vpr-ver:ppre, impliquant, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('VW', npp-nam, 'VW', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(embauche, nc-nom, embauche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jos', npp-nam, 'Jos', [dr(0,np,np)-1]), ex_si('Ignacio', npp-nam, 'Ignacio', [dr(0,np,np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(employé, nc-nom, employé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(filiale, nc-nom, filiale, [n-1]), ex_si('Adam', npp-nam, 'Adam', [dl(0,n,n)-1]), ex_si('Opel', npp-nam, 'Opel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('VW', npp-abr, 'VW', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1626, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(espionnage, nc-nom, espionnage, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si(impliquant, vpr-ver:ppre, impliquant, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('VW', npp-abr, 'VW', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1627, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(privatisation, nc-nom, privatisation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(encouragé, vpp-ver:pper, encouragé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(investissements, nc-nom, investissements, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1628, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(recherché, vpp-ver:pper, recherché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expertise, nc-nom, expertise, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(privatisation, nc-nom, privatisation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(agriculture, nc-nom, agriculture, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1629, Result) :-
      prob_parse([ ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(201, det-num, 201, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(trimestre, nc-nom, trimestre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1630, Result) :-
      prob_parse([ ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(201, det-num, 201, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(trimestre, nc-nom, trimestre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1631, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Federal', npp-nam, 'Federal', [dr(0,n,n)-1]), ex_si('Bureau', npp-nam, 'Bureau', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), ex_si('Investigation', npp-nam, 'Investigation', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entamé, vpp-ver:pper, entamé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(circonstances, nc-nom, circonstances, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', nc-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(comprendre, vinf-ver:infi, comprendre, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(considérait, v-ver:impf, considérait, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espionnage, nc-nom, espionnage, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(particulière, adj-adj, particulière, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1632, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(pense, v-ver:pres, pense, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espionnage, nc-nom, espionnage, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('bien-être', nc-nom, 'bien-être', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1633, Result) :-
      prob_parse([ ex_si('PM', npp-abr, 'PM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(racheter, vinf-ver:infi, racheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(biscuits, nc-nom, biscuits, [n-1]), ex_si('Belin', npp-nam, 'Belin', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('RJR', npp-abr, 'RJR', [dr(0,np,np)-1]), ex_si('Nabisco', npp-nam, 'Nabisco', [np-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1634, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(diversifier, vinf-ver:infi, diversifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1635, Result) :-
      prob_parse([ ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(enquêtes, nc-nom, enquêtes, [n-1]), ex_si(criminelles, adj-adj, criminelles, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(soupçons, nc-nom, soupçons, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),s)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(volé, vpp-ver:pper, volé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(confidentielles, adj-adj, confidentielles, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(défection, nc-nom, défection, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('VW', npp-nam, 'VW', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1636, Result) :-
      prob_parse([ ex_si('Lopez', npp-nam, 'Lopez', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('VW', npp-nam, 'VW', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1637, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(achetant, vpr-ver:ppre, achetant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(filiale, nc-nom, filiale, [n-1]), ex_si(héritent, v-ver:pres, héritent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(contacts, nc-nom, contacts, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(informels, adj-adj, informels, [dl(0,n,n)-1]), ex_si(cultivés, vpp-ver:pper, cultivés, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(contribuer, vinf-ver:infi, contribuer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(adoucir, vinf-ver:infi, adoucir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(déplacement, nc-nom, déplacement, [n-1]), ex_si(futur, adj-adj, futur, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1638, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(libéralisation, nc-nom, libéralisation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monopole, nc-nom, monopole, [n-1]), ex_si(étatique, adj-adj, étatique, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1639, Result) :-
      prob_parse([ ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(établi, vpp-ver:pper, établi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(motifs, nc-nom, motifs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(suspicion, nc-nom, suspicion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(espionnage, nc-nom, espionnage, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(présentant, vpr-ver:ppre, présentant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(déclarations, nc-nom, déclarations, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),n)-1]), ex_si(serment, nc-nom, serment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1640, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agira, v-ver:futu, agira, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('VW', npp-abr, 'VW', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(copié, vpp-ver:pper, copié, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-nam, 'GM', [np-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(essentiel, adj-adj, essentiel, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prouver, vinf-ver:infi, prouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espionnage, nc-nom, espionnage, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1641, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(espionnage, nc-nom, espionnage, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si(impliquant, vpr-ver:ppre, impliquant, [dr(0,dl(0,n,n),np)-1]), ex_si('GM', npp-abr, 'GM', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('VW', npp-abr, 'VW', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1642, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('BAT', npp-abr, 'BAT', [np-1]), ex_si(met, v-ver:pres, met, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('joint-venture', nc-nom, 'joint-venture', [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Yava', npp-nam, 'Yava', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(fabrique, nc-nom, fabrique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1643, Result) :-
      prob_parse([ ex_si('BAT', npp-abr, 'BAT', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acquis, vpp-ver:pper, acquis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Hongrie', npp-nam, 'Hongrie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1644, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(vende, v-ver:pres, vende, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(bas, adj-adj, bas, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(volumes, nc-nom, volumes, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(grimper, vinf-ver:infi, grimper, [dl(0,np,s_inf)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(résultat, nc-nom, résultat, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(tabac, nc-nom, tabac, [dl(0,n,n)-1]), ex_si(domestique, adj-adj, domestique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si('25,1', det-num, '25,1', [dr(0,np,n)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si(cent, pro-num, cent, [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(858, det-num, 858, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1645, Result) :-
      prob_parse([ ex_si('PM', npp-abr, 'PM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(rétablir, vinf-ver:infi, rétablir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(position, nc-nom, position, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Marlboro', npp-nam, 'Marlboro', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1646, Result) :-
      prob_parse([ ex_si('PM', nc-abr, 'PM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(fermes, adj-adj, fermes, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(comprennent, v-ver:pres, comprennent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(participation, nc-nom, participation, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(coentreprise, nc-nom, coentreprise, [n-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Constellation', npp-nam, 'Constellation', [np-1]), ex_si(in, et-prp, in, [dr(0,dl(0,np,np),np)-1]), ex_si('Samara', npp-nam, 'Samara', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(impliquant, vpr-ver:ppre, impliquant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(usine, nc-nom, usine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1647, Result) :-
      prob_parse([ ex_si('PM', nc-abr, 'PM', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acquis, vpp-ver:pper, acquis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(usines, nc-nom, usines, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1648, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(affichaient, v-ver:impf, affichaient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bénéfice, nc-nom, bénéfice, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(trimestres, nc-nom, trimestres, [n-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exportation, nc-nom, exportation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(diversification, nc-nom, diversification, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(vendus, vpp-ver:pper, vendus, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(aliments, nc-nom, aliments, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1649, Result) :-
      prob_parse([ ex_si('PM', nc-abr, 'PM', [np-1]), ex_si(entrait, v-ver:impf, entrait, [dr(0,dl(0,np,s),pp)-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(aliments, nc-nom, aliments, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1650, Result) :-
      prob_parse([ ex_si('Jusqu\'', p-prp, 'Jusqu\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(présent, nc-nom, présent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Britanniques', nc-nam, 'Britanniques', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(préféré, vpp-ver:pper, préféré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(approche, nc-nom, approche, [n-1]), ex_si(volontaire, adj-adj, volontaire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(restreindre, vinf-ver:infi, restreindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(taxes, nc-nom, taxes, [n-1]), ex_si(élevées, vpp-ver:pper, élevées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1651, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diminué, vpp-ver:pper, diminué, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1652, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rétablir, vinf-ver:infi, rétablir, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(partenaire, nc-nom, partenaire, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(digne, adj-adj, digne, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(confiance, nc-nom, confiance, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(stimulée, vpp-ver:pper, stimulée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souscription, nc-nom, souscription, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(crédit, nc-nom, crédit, [n-1]), ex_si(acheteur, adj-adj, acheteur, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('9,5', det-num, '9,5', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(garantie, nc-nom, garantie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(crédits, nc-nom, crédits, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exportation, nc-nom, exportation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1653, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Département', nc-nam, 'Département', [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(garantie, nc-nom, garantie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(crédits, nc-nom, crédits, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exportation, nc-nom, exportation, [n-1]), ex_si(souscrit, vpp-ver:pper, souscrit, [dr(0,dl(0,np,s),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1654, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(changements, nc-nom, changements, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suppression, nc-nom, suppression, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(barrières, nc-nom, barrières, [n-1]), ex_si(commerciales, adj-adj, commerciales, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Extrême-Orient', npp-nam, 'Extrême-Orient', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si('multinationales-Philip', npp-nam, 'multinationales-Philip', [n-1]), ex_si('Morris', npp-nam, 'Morris', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('BAT', npp-abr, 'BAT', [dr(0,np,np)-1]), ex_si('Industries', npp-nam, 'Industries', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('R', npp-abr, 'R', [dr(0,np,np)-1]), ex_si('J', nc-nam, 'J', [dr(0,np,np)-1]), ex_si('Reynolds', npp-nam, 'Reynolds', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Rothmans', npp-nam, 'Rothmans', [dr(0,np,np)-1]), ex_si('International-d\'accéder', npp-nam, 'International-d\'accéder', [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(potentiels, adj-adj, potentiels, [dl(0,n,n)-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1655, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(libéralisation, nc-nom, libéralisation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produite, vpp-ver:pper, produite, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1656, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(obsédée, vpp-ver:pper, obsédée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Malouines', adj-nam, 'Malouines', [dl(0,n,n)-1]), ex_si(même, adj-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('1994,12', det-num, '1994,12', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(défaite, nc-nom, défaite, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(74, det-num, 74, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1657, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1658, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(marque, v-ver:pres, marque, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(incursion, nc-nom, incursion, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Lituanie', npp-nam, 'Lituanie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devancé, vpp-ver:pper, devancé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('British', npp-nam, 'British', [dr(0,np,np)-1]), ex_si('American', npp-nam, 'American', [dr(0,np,np)-1]), ex_si('Tobacco', npp-nam, 'Tobacco', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(acquérir, vinf-ver:infi, acquérir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('Klaipeda', npp-nam, 'Klaipeda', [dl(0,n,n)-1]), ex_si('Tobacco', npp-nam, 'Tobacco', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dr(0,n,n)-1]), ex_si(investissement, nc-nom, investissement, [n-1]), ex_si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(baltes, adj-adj, baltes, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1659, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(acquisition, nc-nom, acquisition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('Klaipeda', npp-nam, 'Klaipeda', [dl(0,n,n)-1]), ex_si('Tobacco', npp-nam, 'Tobacco', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dr(0,n,n)-1]), ex_si(investissement, nc-nom, investissement, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(baltes, adj-adj, baltes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1660, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(lever, vinf-ver:infi, lever, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(financières, adj-adj, financières, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(commerciales, adj-adj, commerciales, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(provenance, nc-nom, provenance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(imposées, vpp-ver:pper, imposées, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1661, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(levé, vpp-ver:pper, levé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1662, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si('Douglas', npp-nam, 'Douglas', [dl(0,n,n)-1]), ex_si('Hurd', npp-nam, 'Hurd', [dl(0,n,n)-1]), ex_si(rencontrera, v-ver:pres, rencontrera, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Carlos', npp-nam, 'Carlos', [dl(0,n,n)-1]), ex_si('Menem', npp-nam, 'Menem', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(prochaine, adj-adj, prochaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1663, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si('Douglas', npp-nam, 'Douglas', [dl(0,n,n)-1]), ex_si('Hurd', npp-nam, 'Hurd', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1664, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(lever, vinf-ver:infi, lever, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(150, det-num, 150, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(appliquée, vpp-ver:pper, appliquée, [dr(0,dl(0,n,n),pp)-1]), ex_si(autour, p-prp, autour, [dr(0,pp_a,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envahies, vpp-ver:pper, envahies, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1665, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(levée, vpp-ver:pper, levée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1666, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(mines, nc-nom, mines, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouvent, v-ver:pres, trouvent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(arides, adj-adj, arides, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(attirés, vpp-ver:pper, attirés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bassins, nc-nom, bassins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rétention, nc-nom, rétention, [n-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(intégrante, adj-adj, intégrante, [dl(0,np,np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(minières, adj-adj, minières, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1667, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(bu, vpp-ver:pper, bu, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bassins, nc-nom, bassins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rétention, nc-nom, rétention, [n-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1668, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(barrage, nc-nom, barrage, [n-1]), ex_si(couvrant, vpr-ver:ppre, couvrant, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(remplit, v-ver:pres, remplit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tonnes, nc-nom, tonnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(miniers, adj-adj, miniers, [dl(0,n,n)-1]), ex_si(toxiques, adj-adj, toxiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1669, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(usées, vpp-ver:pper, usées, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mines, nc-nom, mines, [n-1]), ex_si(représentent, v-ver:pres, représentent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1670, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(échanges, nc-nom, échanges, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(considérablement, adv-adv, considérablement, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(questions, nc-nom, questions, [n-1]), ex_si(financières, adj-adj, financières, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(pétrolières, adj-adj, pétrolières, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(halieutiques, adj-adj, halieutiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(aborder, vinf-ver:infi, aborder, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1671, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(continue, v-ver:pres, continue, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(refuser, vinf-ver:infi, refuser, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(discuter, vinf-ver:infi, discuter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(questions, nc-nom, questions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(souveraineté, nc-nom, souveraineté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1672, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(négociateurs, nc-nom, négociateurs, [n-1]), ex_si(argentins, adj-adj, argentins, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Hurd', npp-nam, 'Hurd', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(signifiait, v-ver:impf, signifiait, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(relation, nc-nom, relation, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(large, adj-adj, large, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(riche, adj-adj, riche, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(relation, nc-nom, relation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(non, adv-adv, non, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(seule, adj-adj, seule, [dr(0,n,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1673, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(deviennent, v-ver:pres, deviennent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(coopératives, adj-adj, coopératives, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1674, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si(fonctionnerait, v-ver:cond, fonctionnerait, [dl(0,np,s)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(interruption, nc-nom, interruption, [n-1]), ex_si(sept, det-num, sept, [dr(0,dl(1,s,s),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(sept, pro-num, sept, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(utiliserait, v-ver:cond, utiliserait, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tonnes, nc-nom, tonnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(lixivier, nc-nom, lixivier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(minerai, nc-nom, minerai, [n-1]), ex_si(concassé, vpp-ver:pper, concassé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1675, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(faible, adj-adj, faible, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(versée, vpp-ver:pper, versée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dessus, adv-adv, dessus, [pp-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(extraire, vinf-ver:infi, extraire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(roche, nc-nom, roche, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1676, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(régis, vpp-ver:pper, régis, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(embargo, nc-nom, embargo, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,dr(0,dl(0,n,n),pp_a),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1677, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(maintenu, vpp-ver:pper, maintenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(embargo, nc-nom, embargo, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1678, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(nouveau, adj-adj, nouveau, [n-1]), ex_si(envenimées, vpp-ver:pper, envenimées, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(étendre, vinf-ver:infi, étendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(territoriales, adj-adj, territoriales, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(200, det-num, 200, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,np,np),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Géorgie', npp-nam, 'Géorgie', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Sandwich', npp-nam, 'Sandwich', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1679, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(colère, nc-nom, colère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1680, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêt, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(autoriser, vinf-ver:infi, autoriser, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(argentines, adj-adj, argentines, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gisements, nc-nom, gisements, [n-1]), ex_si(pétrolifères, adj-adj, pétrolifères, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(territoriales, adj-adj, territoriales, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Malouines', npp-nam, 'Malouines', [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(condition, nc-nom, condition, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(reconnaissent, v-ver:pres, reconnaissent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(extrait, vpp-ver:pper, extrait, [dl(0,n,n)-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1681, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Britanniques', nc-nam, 'Britanniques', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêts, adj-adj, prêts, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(argentines, adj-adj, argentines, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(champs, nc-nom, champs, [n-1]), ex_si(pétroliers, adj-adj, pétroliers, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1682, Result) :-
      prob_parse([ ex_si('RJ', npp-abr, 'RJ', [dr(0,np,np)-1]), ex_si('Reynolds', npp-nam, 'Reynolds', [dr(0,np,np)-1]), ex_si('Tobacco', npp-nam, 'Tobacco', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(prévoyait, v-ver:impf, prévoyait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(usine, nc-nom, usine, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1683, Result) :-
      prob_parse([ ex_si('RJR', npp-abr, 'RJR', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(construit, vpp-ver:pper, construit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(usines, nc-nom, usines, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1684, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hydrogène, nc-nom, hydrogène, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(chimiques, adj-adj, chimiques, [dl(0,n,n)-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tryptophane, nc-nom, tryptophane, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(acides, nc-nom, acides, [n-1]), ex_si(aminés, adj-adj, aminés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1685, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(pharmaceutiques, adj-adj, pharmaceutiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1686, Result) :-
      prob_parse([ ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(cité, vpp-ver:pper, cité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(forts, adj-adj, forts, [dr(0,n,n)-1]), ex_si(gains, nc-nom, gains, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(volume, nc-nom, volume, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(orientale, adj-adj, orientale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Corée', npp-nam, 'Corée', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1687, Result) :-
      prob_parse([ ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gains, nc-nom, gains, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1688, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(intérieurs, adj-adj, intérieurs, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1990, adj-num, 1990, [dl(0,n,n)-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fortement, adv-adv, fortement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réduits, vpp-ver:pper, réduits, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(interdiction, nc-nom, interdiction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lieux, nc-nom, lieux, [n-1]), ex_si(publics, adj-adj, publics, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(avertissements, nc-nom, avertissements, [n-1]), ex_si(sanitaires, adj-adj, sanitaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(affichaient, v-ver:impf, affichaient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bénéfice, nc-nom, bénéfice, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1689, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diminué, vpp-ver:pper, diminué, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1690, Result) :-
      prob_parse([ ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(agroalimentaire, nc-nom, agroalimentaire, [dl(0,n,n)-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(fabrique, v-ver:pres, fabrique, [dr(0,dl(0,np,s),np)-1]), ex_si('Marlboro', npp-nam, 'Marlboro', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cigarette, nc-nom, cigarette, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vendue, vpp-ver:pper, vendue, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(fi, nc-nom, fi, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(fort, adj-adj, fort, [dr(0,n,n)-1]), ex_si(sentiment, nc-nom, sentiment, [n-1]), ex_si('anti-tabac', adj-adj, 'anti-tabac', [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1691, Result) :-
      prob_parse([ ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(propriétaire, nc-nom, propriétaire, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si('Marlboro', npp-nam, 'Marlboro', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1692, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(frères, nc-nom, frères, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(exploitaient, v-ver:impf, exploitaient, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(placage, nc-nom, placage, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('North', npp-nam, 'North', [dr(0,np,np)-1]), ex_si('Hollywood', npp-nam, 'Hollywood', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déversé, vpp-ver:pper, déversé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gallons, nc-nom, gallons, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(usées, adj-ver:pper, usées, [dl(0,n,n)-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(égouts, nc-nom, égouts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(plaidé, vpp-ver:pper, plaidé, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coupable, adj-adj, coupable, [dl(0,n,n)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(purger, vinf-ver:infi, purger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(manipulé, vpp-ver:pper, manipulé, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(stocké, vpp-ver:pper, stocké, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(imprudente, adj-adj, imprudente, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(matières, nc-nom, matières, [n-1]), ex_si(dangereuses, adj-adj, dangereuses, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1693, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(californienne, adj-adj, californienne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusée, vpp-ver:pper, accusée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(stockage, nc-nom, stockage, [n-1]), ex_si(imprudent, adj-adj, imprudent, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(chimiques, adj-adj, chimiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1694, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Nations', nc-nam, 'Nations', [n-1]), ex_si(unies, vpp-ver:pper, unies, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(hier, adv-adv, hier, [dr(0,dl(1,s,s),n)-1]), ex_si(soir, nc-nom, soir, [n-1]), ex_si(huit, det-num, huit, [dr(0,np,n)-1]), ex_si(juges, nc-nom, juges, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(jugera, v-ver:cond, jugera, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(accusées, vpp-ver:pper, accusées, [dr(0,dl(0,n,n),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(meurtres, nc-nom, meurtres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(atrocités, nc-nom, atrocités, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('ex-Yougoslavie', npp-nam, 'ex-Yougoslavie', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1695, Result) :-
      prob_parse([ ex_si(11, det-num, 11, [dr(0,np,n)-1]), ex_si(juges, nc-nom, juges, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Yougoslavie', npp-nam, 'Yougoslavie', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prêté, vpp-ver:pper, prêté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(serment, nc-nom, serment, [np-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1696, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(exploitations, nc-nom, exploitations, [n-1]), ex_si(minières, adj-adj, minières, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Nevada', npp-nam, 'Nevada', [n-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(extraire, vinf-ver:infi, extraire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(métal, nc-nom, métal, [n-1]), ex_si(précieux, adj-adj, précieux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1697, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mines, nc-nom, mines, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1698, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cérémonie, nc-nom, cérémonie, [n-1]), ex_si(discrète, adj-adj, discrète, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(albanais, adj-adj, albanais, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(enterrer, vinf-ver:infi, enterrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(différends, nc-nom, différends, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(suspens, nc-nom, suspens, [n-1]), ex_si(causés, vpp-ver:pper, causés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(incident, nc-nom, incident, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(canal, nc-nom, canal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corfou', npp-nam, 'Corfou', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1699, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Albanie', npp-nam, 'Albanie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(incident, nc-nom, incident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corfou', npp-nam, 'Corfou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(duré, vpp-ver:pper, duré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(longtemps, adv-adv, longtemps, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1700, Result) :-
      prob_parse([ ex_si('Connue', vpp-ver:pper, 'Connue', [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lixiviation, nc-nom, lixiviation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tas, nc-nom, tas, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(méthode, nc-nom, méthode, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(décennie, nc-nom, décennie, [n-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(extraire, vinf-ver:infi, extraire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(économiquement, adv-adv, économiquement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(morceaux, nc-nom, morceaux, [n-1]), ex_si(microscopiques, adj-adj, microscopiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(minerai, nc-nom, minerai, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(faible, adj-adj, faible, [dr(0,n,n)-1]), ex_si(teneur, nc-nom, teneur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1701, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(minière, adj-adj, minière, [dl(0,n,n)-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(méthode, nc-nom, méthode, [n-1]), ex_si(connue, vpp-ver:pper, connue, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lixiviation, nc-nom, lixiviation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tas, nc-nom, tas, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1702, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(quatrième, adj-num, quatrième, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(impose, v-ver:pres, impose, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sanctions, nc-nom, sanctions, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(précédents, adj-adj, précédents, [dl(0,n,n)-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Rhodésie', npp-nam, 'Rhodésie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,np),dr(0,np,np))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1703, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sanctions, nc-nom, sanctions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1704, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(extension, nc-nom, extension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(effective, adj-adj, effective, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exclusivité, nc-nom, exclusivité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(commercialisation, nc-nom, commercialisation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(conçue, vpp-ver:pper, conçue, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(sociétés, nc-nom, sociétés, [n-1]), ex_si(pharmaceutiques, adj-adj, pharmaceutiques, [dl(0,n,n)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rendement, nc-nom, rendement, [n-1]), ex_si(équitable, adj-adj, équitable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1705, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(prospectifs, adj-adj, prospectifs, [dl(0,n,n)-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(durée, nc-nom, durée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approbation, nc-nom, approbation, [n-1]), ex_si(réglementaire, adj-adj, réglementaire, [dl(0,n,n)-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(développés, vpp-ver:pper, développés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1706, Result) :-
      prob_parse([ ex_si('Cancer', npp-nam, 'Cancer', [dr(0,np,np)-1]), ex_si('Research', npp-nam, 'Research', [dr(0,np,np)-1]), ex_si('Campaign', npp-nam, 'Campaign', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(pharmaceutique, adj-adj, pharmaceutique, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(pionnier, adj-adj, pionnier, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1707, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(changements, nc-nom, changements, [n-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(programmes, nc-nom, programmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(conjoints, adj-adj, conjoints, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1708, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pêcheurs, nc-nom, pêcheurs, [n-1]), ex_si(utilisant, vpr-ver:ppre, utilisant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(poison, nc-nom, poison, [n-1]), ex_si(cyanure, nc-nom, cyanure, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sodium, nc-nom, sodium, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contribué, vpp-ver:pper, contribué, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(destruction, nc-nom, destruction, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(récifs, nc-nom, récifs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1709, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(pêche, nc-nom, pêche, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(destruction, nc-nom, destruction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(récifs, nc-nom, récifs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1710, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(efforcent, v-ver:pres, efforcent, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intervalle, nc-nom, intervalle, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(commercialisation, nc-nom, commercialisation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1711, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(efforcent, v-ver:pres, efforcent, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(moyenne, nc-nom, moyenne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(huit, det-num, huit, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(neuf, det-num, neuf, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1712, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(délocalisation, nc-nom, délocalisation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éliminer, vinf-ver:infi, éliminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(chrome, nc-nom, chrome, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(placage, nc-nom, placage, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(remplaçant, vpr-ver:ppre, remplaçant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(type, nc-nom, type, [dr(0,n,n)-1]), ex_si(savon, nc-nom, savon, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1713, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(alternatives, nc-nom, alternatives, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(type, nc-nom, type, [dr(0,n,n)-1]), ex_si(savon, nc-nom, savon, [n-1]), ex_si(existent, v-ver:pres, existent, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1714, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(fabricants, nc-nom, fabricants, [n-1]), ex_si(japonais, adj-adj, japonais, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(essaient, v-ver:pres, essaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(indépendantes, adj-adj, indépendantes, [dl(0,n,n)-1]), ex_si(complètes, vpp-ver:pper, complètes, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commercialisation, nc-nom, commercialisation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1715, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(scindé, vpp-ver:pper, scindé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gestion, nc-nom, gestion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1716, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(toxiques, adj-adj, toxiques, [dl(0,n,n)-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(éliminés, vpp-ver:pper, éliminés, [dl(0,np,s_pass)-1]), ex_si(correctement, adv-adv, correctement, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(écouler, vinf-ver:infi, écouler, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(étangs, nc-nom, étangs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(égouts, nc-nom, égouts, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réservoirs, nc-nom, réservoirs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1717, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(fuites, nc-nom, fuites, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(causées, vpp-ver:pper, causées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mauvaise, adj-adj, mauvaise, [dr(0,n,n)-1]), ex_si(élimination, nc-nom, élimination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(toxiques, adj-adj, toxiques, [dl(0,n,n)-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1718, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(79, det-num, 79, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(interrogées, vpp-ver:pper, interrogées, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(sondage, nc-nom, sondage, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(adultes, nc-nom, adultes, [n-1]), ex_si(souffrant, vpr-ver:ppre, souffrant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(incurable, adj-adj, incurable, [dl(0,n,n)-1]), ex_si(reçoivent, v-ver:pres, reçoivent, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(médicale, adj-adj, médicale, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(paisible, adj-adj, paisible, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1719, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(sondage, nc-nom, sondage, [n-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dl(0,n,n)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(approuvent, v-ver:pres, approuvent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(permettent, v-ver:pres, permettent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(retirer, vinf-ver:infi, retirer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si(terminale, adj-adj, terminale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1720, Result) :-
      prob_parse([ ex_si('Michaela', npp-nam, 'Michaela', [dr(0,np,np)-1]), ex_si('Roeder', npp-nam, 'Roeder', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(31, det-num, 31, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(reconnue, vpp-ver:pper, reconnue, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accusation, nc-nom, accusation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(homicide, nc-nom, homicide, [n-1]), ex_si(involontaire, adj-adj, involontaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(pitié, nc-nom, pitié, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1721, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(infirmière, nc-nom, infirmière, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(reconnue, vpp-ver:pper, reconnue, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(homicide, nc-nom, homicide, [n-1]), ex_si(involontaire, adj-adj, involontaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(pitié, nc-nom, pitié, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(injection, nc-nom, injection, [n-1]), ex_si(létale, adj-adj, létale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1722, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(médecin, nc-nom, médecin, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Michigan', npp-nam, 'Michigan', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Oregon', npp-nam, 'Oregon', [n-1]), ex_si(atteinte, nc-nom, atteinte, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alzheimer', npp-nam, 'Alzheimer', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(suicider, vinf-ver:infi, suicider, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1723, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(docteur, nc-nom, docteur, [n-1]), ex_si('Kevorkian', npp-nam, 'Kevorkian', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Janet', npp-nam, 'Janet', [dr(0,np,np)-1]), ex_si('Adkins', npp-nam, 'Adkins', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(dispositif, nc-nom, dispositif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(suicide, nc-nom, suicide, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1724, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(placage, nc-nom, placage, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déversé, vpp-ver:pper, déversé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gallons, nc-nom, gallons, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(usées, adj-adj, usées, [dl(0,n,n)-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(égouts, nc-nom, égouts, [n-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(plaidé, vpp-ver:pper, plaidé, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1725, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(placage, nc-nom, placage, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déversé, vpp-ver:pper, déversé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(usées, vpp-ver:pper, usées, [dl(0,n,n)-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réseau, nc-nom, réseau, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(égouts, nc-nom, égouts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1726, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bassins, nc-nom, bassins, [n-1]), ex_si(produits, vpp-ver:pper, produits, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lixiviation, nc-nom, lixiviation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(minerai, nc-nom, minerai, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dangers, nc-nom, dangers, [n-1]), ex_si(potentiels, adj-adj, potentiels, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1727, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(usées, vpp-ver:pper, usées, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mines, nc-nom, mines, [n-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1728, Result) :-
      prob_parse([ ex_si('Janet', npp-nam, 'Janet', [dr(0,np,np)-1]), ex_si('Elaine', npp-nam, 'Elaine', [dr(0,np,np)-1]), ex_si('Adkins', npp-nam, 'Adkins', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(54, det-num, 54, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(machine, nc-nom, machine, [n-1]), ex_si(controversée, adj-adj, controversée, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(suicider, vinf-ver:infi, suicider, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Michigan', npp-nam, 'Michigan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1729, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(atteint, v-ver:pres, atteint, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si('Alzheimer', npp-nam, 'Alzheimer', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Michigan', npp-nam, 'Michigan', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(suicide, nc-nom, suicide, [n-1]), ex_si(assisté, vpp-ver:pper, assisté, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1730, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(adolescente, nc-nom, adolescente, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(cérébrale, adj-adj, cérébrale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retirée, vpp-ver:pper, retirée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipement, nc-nom, équipement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(naissance, nc-nom, naissance, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(prématurée, adj-adj, prématurée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1731, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(enceintes, adj-adj, enceintes, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(autorisées, vpp-ver:pper, autorisées, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mourir, vinf-ver:infi, mourir, [dl(0,np,s_inf)-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(accouché, vpp-ver:pper, accouché, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(bébé, nc-nom, bébé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1732, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(6400, det-num, 6400, [dr(0,np,n)-1]), ex_si(oiseaux, nc-nom, oiseaux, [n-1]), ex_si(migrateurs, adj-adj, migrateurs, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Nevada', npp-nam, 'Nevada', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(buvant, vpr-ver:ppre, buvant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(bassins, nc-nom, bassins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retenue, nc-nom, retenue, [n-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(produits, vpp-ver:pper, produits, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(exploitations, nc-nom, exploitations, [n-1]), ex_si(aurifères, adj-adj, aurifères, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1733, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(bu, vpp-ver:pper, bu, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bassins, nc-nom, bassins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rétention, nc-nom, rétention, [n-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1734, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(interdire, vinf-ver:infi, interdire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(comateux, adj-adj, comateux, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(connaître, vinf-ver:infi, connaître, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(désirs, nc-nom, désirs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1735, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(comateux, adj-adj, comateux, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(mentalement, adv-adv, mentalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(incapable, adj-adj, incapable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(communiquer, vinf-ver:infi, communiquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(sentiments, nc-nom, sentiments, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1736, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(patiente, nc-nom, patiente, [n-1]), ex_si(atteinte, vpp-ver:pper, atteinte, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alzheimer', npp-nam, 'Alzheimer', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parcouru, vpp-ver:pper, parcouru, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('3.000', det-num, '3.000', [dr(0,np,n)-1]), ex_si(km, nc-nom, km, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(suicider, vinf-ver:infi, suicider, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médecin, nc-nom, médecin, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(construit, vpp-ver:pper, construit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(appareil, nc-nom, appareil, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(administré, vpp-ver:pper, administré, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(mortelle, adj-adj, mortelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(chimiques, adj-adj, chimiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1737, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('Kevorkian', npp-nam, 'Kevorkian', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(injecté, vpp-ver:pper, injecté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(chimiques, adj-adj, chimiques, [dl(0,n,n)-1]), ex_si(mortels, adj-adj, mortels, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1738, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(enquêteurs, nc-nom, enquêteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(audience, nc-nom, audience, [n-1]), ex_si(préliminaire, adj-adj, préliminaire, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Delbert', npp-nam, 'Delbert', [np-1]), ex_si(leur, clo-pro:per, leur, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Billy', npp-nam, 'Billy', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(64, det-num, 64, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(compassion, nc-nom, compassion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1739, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Delbert', npp-nam, 'Delbert', [dr(0,np,np)-1]), ex_si('Ward', npp-nam, 'Ward', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(étranglé, vpp-ver:pper, étranglé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(frère, nc-nom, frère, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1740, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(placage, nc-nom, placage, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(asphyxiés, vpp-ver:pper, asphyxiés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hydrogène, nc-nom, hydrogène, [n-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(tentaient, v-ver:impf, tentaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(nettoyer, vinf-ver:infi, nettoyer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réservoir, nc-nom, réservoir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(boue, nc-nom, boue, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1741, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(émanations, nc-nom, émanations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(nettoyaient, v-ver:impf, nettoyaient, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(cuve, nc-nom, cuve, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1742, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pêcheurs, nc-nom, pêcheurs, [n-1]), ex_si('Muru-ami', npp-nam, 'Muru-ami', [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(chasser, vinf-ver:infi, chasser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(poissons, nc-nom, poissons, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(récifs, nc-nom, récifs, [n-1]), ex_si(coralliens, adj-adj, coralliens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1743, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pêcheurs, nc-nom, pêcheurs, [n-1]), ex_si(philippins, adj-adj, philippins, [dl(0,n,n)-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(pêcher, vinf-ver:infi, pêcher, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1744, Result) :-
      prob_parse([ ex_si('NUCOR', npp-abr, 'NUCOR', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(principal, adj-adj, principal, [dr(0,n,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('mini-aciéries', nc-nom, 'mini-aciéries', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(fortement, adv-adv, fortement, [dl(1,s,s)-1]), ex_si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capacité, nc-nom, capacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(usine, nc-nom, usine, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Crawfordsville', npp-nam, 'Crawfordsville', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Indiana', npp-nam, 'Indiana', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bouleversé, vpp-ver:pper, bouleversé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(technologie, nc-nom, technologie, [n-1]), ex_si(radicale, adj-adj, radicale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1745, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(procédé, nc-nom, procédé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(moulage, nc-nom, moulage, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(paroi, nc-nom, paroi, [n-1]), ex_si(mince, adj-adj, mince, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bouleversé, vpp-ver:pper, bouleversé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1746, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(toute, adv-pro:ind, toute, [dr(0,n,n)-1]), ex_si(périphérie, nc-nom, périphérie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pygmées, nc-nom, pygmées, [n-1]), ex_si('Baka', npp-nam, 'Baka', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('sud-est', nc-nom, 'sud-est', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cameroun', npp-nam, 'Cameroun', [n-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(composé, nc-nom, composé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(étourdir, vinf-ver:infi, étourdir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(abeilles, nc-nom, abeilles, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(raids, nc-nom, raids, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(nids, nc-nom, nids, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(miel, nc-nom, miel, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1747, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(cueilleurs, nc-nom, cueilleurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(miel, nc-nom, miel, [n-1]), ex_si(camerounais, adj-adj, camerounais, [dl(0,n,n)-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(cyanure, nc-nom, cyanure, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(étourdir, vinf-ver:infi, étourdir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(abeilles, nc-nom, abeilles, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1748, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(présidents, nc-nom, présidents, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Honduras', npp-nam, 'Honduras', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salvador', npp-nam, 'Salvador', [n-1]), ex_si(devaient, v-ver:impf, devaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(entamer, vinf-ver:infi, entamer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Salvador', npp-nam, 'Salvador', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contexte, nc-nom, contexte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tensions, nc-nom, tensions, [n-1]), ex_si(persistantes, adj-adj, persistantes, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(frontalières, adj-adj, frontalières, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1749, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Honduras', npp-nam, 'Honduras', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Salvador', npp-nam, 'Salvador', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entrés, vpp-ver:pper, entrés, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1750, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(destroyers, nc-nom, destroyers, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(heurté, vpp-ver:pper, heurté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mines, nc-nom, mines, [n-1]), ex_si(posées, vpp-ver:pper, posées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Albanie', npp-nam, 'Albanie', [n-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(exerçaient, v-ver:impf, exerçaient, [dr(0,dl(0,np,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(passant, vpr-ver:ppre, passant, [dr(0,dl(0,np,s_ppres),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(canal, nc-nom, canal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corfou', npp-nam, 'Corfou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1751, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(incident, nc-nom, incident, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(canal, nc-nom, canal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corfou', npp-nam, 'Corfou', [np-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(destroyer, nc-nom, destroyer, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(coulé, vpp-ver:pper, coulé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Albanie', npp-nam, 'Albanie', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(canal, nc-nom, canal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corfou', npp-nam, 'Corfou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1752, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Occident', npp-nam, 'Occident', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(préféré, vpp-ver:pper, préféré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(concentrer, vinf-ver:infi, concentrer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plutôt, adv-kon, plutôt, [dr(0,dl(0,pp,pp),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(humains, nc-nom, humains, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1753, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(éléphants, nc-nom, éléphants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(chassés, vpp-ver:pper, chassés, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(dépouillés, vpp-ver:pper, dépouillés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(cachés, vpp-ver:pper, cachés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1754, Result) :-
      prob_parse([ ex_si('Leur', det-det:pos, 'Leur', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effondré, vpp-ver:pper, effondré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si('1,2', det-num, '1,2', [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(1,s,s)),np)-1]), ex_si('600.000', pro-num, '600.000', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décennie, nc-nom, décennie, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CITES', npp-abr, 'CITES', [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Convention', npp-nam, 'Convention', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(menacées, vpp-ver:pper, menacées, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(extinction, nc-nom, extinction, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(interdise, v-ver:pres, interdise, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivoire, nc-nom, ivoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1755, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(éléphants, nc-nom, éléphants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décimée, vpp-ver:pper, décimée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1756, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(relatif, adj-adj, relatif, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(extradition, nc-nom, extradition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Libyens', nc-nam, 'Libyens', [n-1]), ex_si(accusés, vpp-ver:pper, accusés, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(exploser, vinf-ver:infi, exploser, [dl(0,np,s_inf)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pan', npp-nam, 'Pan', [dr(0,n,n)-1]), ex_si('Am', npp-nam, 'Am', [n-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Lockerbie', npp-nam, 'Lockerbie', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1988, pro-num, 1988, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1757, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(concernait, v-ver:impf, concernait, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extradition, nc-nom, extradition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(suspects, nc-nom, suspects, [n-1]), ex_si(libyens, adj-adj, libyens, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attentat, nc-nom, attentat, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pan', npp-nam, 'Pan', [dr(0,n,n)-1]), ex_si('Am', npp-nam, 'Am', [dr(0,n,n)-1]), ex_si('Lockerbie', npp-nam, 'Lockerbie', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1758, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si(pharmaceutiques, adj-adj, pharmaceutiques, [dl(0,n,n)-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(imminentes, adj-adj, imminentes, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(promettent, v-ver:pres, promettent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ère, nc-nom, ère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maîtrise, nc-nom, maîtrise, [n-1]), ex_si(accrue, vpp-ver:pper, accrue, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1759, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(maintenir, vinf-ver:infi, maintenir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(bas, adj-adj, bas, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1760, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(touristes, nc-nom, touristes, [n-1]), ex_si(paient, v-ver:pres, paient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(venir, vinf-ver:infi, venir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si(africaine, adj-adj, africaine, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(contrebandiers, nc-nom, contrebandiers, [n-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(paient, v-ver:pres, paient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(supplémentaires, adj-adj, supplémentaires, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(achetant, vpr-ver:ppre, achetant, [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(strictement, adv-adv, strictement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(illégale, adj-adj, illégale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivoire, nc-nom, ivoire, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(corne, nc-nom, corne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rhinocéros, nc-nom, rhinocéros, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1761, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(africains, adj-adj, africains, [dl(0,n,n)-1]), ex_si(encouragent, v-ver:pres, encouragent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(attirer, vinf-ver:infi, attirer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(touristes, nc-nom, touristes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1762, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(propriétaires, nc-nom, propriétaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Phinda', npp-nam, 'Phinda', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Conservation', nc-nam, 'Conservation', [n-1]), ex_si('Corporation', npp-nam, 'Corporation', [dl(0,n,n)-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,n,n)-1]), ex_si(publicité, nc-nom, publicité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(philosophie, nc-nom, philosophie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conservation, nc-nom, conservation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(sauvage, adj-adj, sauvage, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(approche, nc-nom, approche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conservation, nc-nom, conservation, [n-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(populations, nc-nom, populations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(gagne, v-ver:pres, gagne, [dr(0,dl(0,np,s),np)-1]), ex_si(lentement, adv-adv, lentement, [dl(1,s,s)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réserves, nc-nom, réserves, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(1,s,s)),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(menacées, vpp-ver:pper, menacées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(populations, nc-nom, populations, [n-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si(affamées, adj-adj, affamées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(pauvres, adj-adj, pauvres, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(colère, nc-nom, colère, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1763, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Conservation', npp-nam, 'Conservation', [dr(0,n,n)-1]), ex_si('Corporation', npp-nam, 'Corporation', [n-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(menace, v-ver:pres, menace, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1764, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(énormément, adv-adv, énormément, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(complexe, adj-adj, complexe, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(coûteux, adj-adj, coûteux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1765, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(compliquée, vpp-ver:pper, compliquée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1766, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(concernent, v-ver:pres, concernent, [dr(0,dl(0,np,s),np)-1]), ex_si(240, det-num, 240, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_pass))-1]), ex_si(interrogé, vpp-ver:pper, interrogé, [dl(0,np,s_pass)-1]), ex_si(trois, det-num, trois, [dr(0,dl(1,s,s),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1767, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(cliniques, adj-adj, cliniques, [dl(0,n,n)-1]), ex_si(impliquent, v-ver:pres, impliquent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(moyenne, nc-nom, moyenne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(200, det-num, 200, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1768, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(défenseurs, nc-nom, défenseurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nature, nc-nom, nature, [n-1]), ex_si(craignent, v-ver:pres, craignent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(ressources, nc-nom, ressources, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(précieuses, adj-adj, précieuses, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Namibie', npp-nam, 'Namibie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si(abondante, adj-adj, abondante, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(surtout, adv-adv, surtout, [dr(0,np,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(rhinocéros, nc-nom, rhinocéros, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si(menacé, vpp-ver:pper, menacé, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(confrontée, vpp-ver:pper, confrontée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(majeure, adj-adj, majeure, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(braconnage, nc-nom, braconnage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1769, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rhinocéros, nc-nom, rhinocéros, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(gravement, adv-adv, gravement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(menacés, vpp-ver:pper, menacés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(braconnage, nc-nom, braconnage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1770, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Voyant', vpr-ver:ppre, 'Voyant', [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(exploiter, vinf-ver:infi, exploiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bloc, nc-nom, bloc, [n-1]), ex_si(16, adj-num, 16, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prise, vpp-ver:pper, prise, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(travaillons, v-ver:pres, travaillons, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(durable, adj-adj, durable, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(environnemental, adj-adj, environnemental, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(1,s,s),np)-1]), ex_si('Danila', npp-nam, 'Danila', [dr(0,np,np)-1]), ex_si('Silva', npp-nam, 'Silva', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('EcoCiencia', npp-nam, 'EcoCiencia', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1771, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(techniques, nc-nom, techniques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sylviculture, nc-nom, sylviculture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(durables, adj-adj, durables, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(employées, vpp-ver:pper, employées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1772, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cependant, adv-adv, cependant, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(considérablement, adv-adv, considérablement, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(destruction, nc-nom, destruction, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(renforçant, vpr-ver:ppre, renforçant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s))),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(éliminant, vpr-ver:ppre, éliminant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(incitations, nc-nom, incitations, [n-1]), ex_si(fiscales, adj-adj, fiscales, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(conduisaient, v-ver:impf, conduisaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(défrichements, nc-nom, défrichements, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1773, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1990, adj-num, 1990, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(sauver, vinf-ver:infi, sauver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1774, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(chaotique, adj-adj, chaotique, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(engloutit, v-ver:pres, engloutit, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(amazonienne, adj-adj, amazonienne, [dl(0,n,n)-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(enfin, adv-adv, enfin, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(maîtrisé, vpp-ver:pper, maîtrisé, [dl(0,np,s_pass)-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(élaboré, vpp-ver:pper, élaboré, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(amazoniens, adj-adj, amazoniens, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(éminents, adj-adj, éminents, [dr(0,n,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1775, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(amazonienne, adj-adj, amazonienne, [dl(0,n,n)-1]), ex_si(souffre, v-ver:pres, souffre, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(chaotique, adj-adj, chaotique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1776, Result) :-
      prob_parse([ ex_si('Leakey', npp-nam, 'Leakey', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(estimé, vpp-ver:pper, estimé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(riche, adj-adj, riche, [dr(0,n,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Kenya', npp-nam, 'Kenya', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('sous-tend', v-ver:pres, 'sous-tend', [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(touristique, adj-adj, touristique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(450, det-num, 450, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(308, det-num, 308, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(gérée, vpp-ver:pper, gérée, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(rentable, adj-adj, rentable, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(durable, adj-adj, durable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1777, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(africains, adj-adj, africains, [dl(0,n,n)-1]), ex_si(encouragent, v-ver:pres, encouragent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(attirer, vinf-ver:infi, attirer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(touristes, nc-nom, touristes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1778, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(exigeait, v-ver:impf, exigeait, [dr(0,dl(0,np,s),s_q)-1]), ex_si(autrefois, adv-adv, autrefois, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(colons, nc-nom, colons, [n-1]), ex_si(défrichent, v-ver:pres, défrichent, [dr(0,dl(0,np,s),np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(propriété, nc-nom, propriété, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1779, Result) :-
      prob_parse([ ex_si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1980, adj-num, 1980, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(nations, nc-nom, nations, [n-1]), ex_si(accordaient, v-ver:impf, accordaient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(même, adv-adv, même, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(crédits, nc-nom, crédits, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(impôt, nc-nom, impôt, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(individus, nc-nom, individus, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(coupaient, v-ver:impf, coupaient, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(brûlaient, v-ver:impf, brûlaient, [dr(0,dl(0,np,s),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(exploitaient, v-ver:impf, exploitaient, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1780, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Marshall', npp-nam, 'Marshall', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(formation, nc-nom, formation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si('ABB', npp-nam, 'ABB', [dr(0,np,np)-1]), ex_si('Robotics', npp-nam, 'Robotics', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Milton', npp-nam, 'Milton', [dr(0,np,np)-1]), ex_si('Keynes', npp-nam, 'Keynes', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(espère, v-ver:pres, espère, [dr(0,dl(0,np,s),s_q)-1]), ex_si(ardemment, adv-adv, ardemment, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(alimentaire, adj-adj, alimentaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(boissons, nc-nom, boissons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(confiserie, nc-nom, confiserie, [n-1]), ex_si(deviendra, v-ver:futu, deviendra, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prochain, adj-adj, prochain, [dr(0,n,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1781, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(alimentaire, adj-adj, alimentaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1782, Result) :-
      prob_parse([ ex_si('Mike', npp-nam, 'Mike', [dr(0,np,np)-1]), ex_si('Wilson', npp-nam, 'Wilson', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(marketing, nc-nom, marketing, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si('Fanuc', npp-nam, 'Fanuc', [dr(0,np,np)-1]), ex_si('Robotics', npp-nam, 'Robotics', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Coventry', npp-nam, 'Coventry', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(0,np,s),s_q)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(propos, nc-nom, propos, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(améliorations, nc-nom, améliorations, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(performances, nc-nom, performances, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(':', ponct-pun, ':', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Notre', det-det:pos, 'Notre', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(robot, nc-nom, robot, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soudage, nc-nom, soudage, [n-1]), ex_si('ARC', npp-abr, 'ARC', [dl(0,n,n)-1]), ex_si('Mate', npp-nam, 'Mate', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(par, p-prp, par, [n-1]), ex_si(exemple, nc-nom, exemple, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(30, det-num, 30, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(cher, adj-adj, cher, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(termes, nc-nom, termes, [n-1]), ex_si(réels, adj-adj, réels, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1783, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(soudage, nc-nom, soudage, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(courante, adj-adj, courante, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(automobile, nc-nom, automobile, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1784, Result) :-
      prob_parse([ ex_si('Malgré', p-prp, 'Malgré', [dr(0,dr(0,s,s),np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chirurgiens, nc-nom, chirurgiens, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enthousiastes, adj-adj, enthousiastes, [dl(0,n,n)-1]), ex_si(disent, v-ver:pres, disent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(faudra, v-ver:futu, faudra, [dr(0,dl(0,np,s),np)-1]), ex_si(probablement, adv-adv, probablement, [dr(0,np,np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(envisagent, v-ver:pres, envisagent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(laisser, vinf-ver:infi, laisser, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(robot, nc-nom, robot, [n-1]), ex_si(opérer, vinf-ver:infi, opérer, [dl(0,np,s_inf)-1]), ex_si(seul, adj-adj, seul, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1785, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(assister, vinf-ver:infi, assister, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(procédures, nc-nom, procédures, [n-1]), ex_si(chirurgicales, adj-adj, chirurgicales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1786, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(concurrence, nc-nom, concurrence, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(secteurs, nc-nom, secteurs, [n-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(maritime, adj-adj, maritime, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entraîné, vpp-ver:pper, entraîné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vagues, nc-nom, vagues, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(investissements, nc-nom, investissements, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(économiser, vinf-ver:infi, économiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('main-d\'oeuvre', nc-nom, 'main-d\'oeuvre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(telles, adj-adj, telles, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(outils, nc-nom, outils, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(découpe, nc-nom, découpe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aluminium, nc-nom, aluminium, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(machine, nc-nom, machine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soudage, nc-nom, soudage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1787, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(automobile, nc-nom, automobile, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(avancées, nc-nom, avancées, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découpe, nc-nom, découpe, [n-1]), ex_si(robotisée, adj-ver:pper, robotisée, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(métaux, nc-nom, métaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1788, Result) :-
      prob_parse([ ex_si('Imaginons', vimp-ver:impe, 'Imaginons', [dr(0,s,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(robot, nc-nom, robot, [n-1]), ex_si('Janis', npp-nam, 'Janis', [dl(0,n,n)-1]), ex_si('Joplin', npp-nam, 'Joplin', [dl(0,n,n)-1]), ex_si(assis, vpp-ver:pper, assis, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(banc, nc-nom, banc, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(parlant, vpr-ver:ppre, parlant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Summer', npp-nam, 'Summer', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), ex_si('Love', npp-nam, 'Love', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(chantant, vpr-ver:ppre, chantant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Me', npp-nam, 'Me', [np-1]), ex_si(and, et-nam, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Bobby', npp-nam, 'Bobby', [dr(0,np,np)-1]), ex_si('McGee', npp-nam, 'McGee', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(présentant, vpr-ver:ppre, présentant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(robot, nc-nom, robot, [n-1]), ex_si('David', npp-nam, 'David', [dl(0,n,n)-1]), ex_si('Bowie', npp-nam, 'Bowie', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1789, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(servent, v-ver:pres, servent, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(chanteurs, nc-nom, chanteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cire, nc-nom, cire, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Rock', npp-nam, 'Rock', [dr(0,n,n)-1]), ex_si('Hall', npp-nam, 'Hall', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), ex_si('Fame', npp-nam, 'Fame', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1790, Result) :-
      prob_parse([ ex_si('Contrairement', adv-adv, 'Contrairement', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(passe, v-ver:pres, passe, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amazonie', nc-nom, 'Amazonie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(coupée, vpp-ver:pper, coupée, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(brûlée, vpp-ver:pper, brûlée, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rythme, nc-nom, rythme, [n-1]), ex_si(alarmant, adj-adj, alarmant, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(veulent, v-ver:pres, veulent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(sauver, vinf-ver:infi, sauver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Acre', npp-nam, 'Acre', [n-1]), ex_si(semblent, v-ver:pres, semblent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1791, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cycle, nc-nom, cycle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défrichement, nc-nom, défrichement, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(coupe, nc-nom, coupe, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(brûlis, nc-nom, brûlis, [n-1]), ex_si(cause, v-ver:pres, cause, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1792, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Fiat', npp-nam, 'Fiat', [np-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(piles, nc-nom, piles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(stocks, nc-nom, stocks, [n-1]), ex_si(contrôlées, vpp-ver:pper, contrôlées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(publicités, nc-nom, publicités, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(papier, nc-nom, papier, [n-1]), ex_si(glacé, adj-adj, glacé, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('IBM', npp-abr, 'IBM', [np-1]), ex_si(éteint, v-ver:pres, éteint, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lumières, nc-nom, lumières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(entrepôt, nc-nom, entrepôt, [n-1]), ex_si(automatisé, adj-adj, automatisé, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Greenock', npp-nam, 'Greenock', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(clair, adj-adj, clair, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('Cendrillon', npp-nam, 'Cendrillon', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouvel, adj-adj, nouvel, [dr(0,n,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(belles, adj-adj, belles, [dr(0,n,n)-1]), ex_si(fringues, nc-nom, fringues, [n-1]), ex_si('high-tech', adj-adj, 'high-tech', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1793, Result) :-
      prob_parse([ ex_si('Fiat', npp-nam, 'Fiat', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gestion, nc-nom, gestion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(stocks, nc-nom, stocks, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1794, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(automobile, nc-nom, automobile, [dl(0,n,n)-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('450.000', adj-num, '450.000', [dr(0,n,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(industriels, adj-adj, industriels, [dl(0,n,n)-1]), ex_si(installés, vpp-ver:pper, installés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(évolue, v-ver:pres, évolue, [dl(0,np,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(applications, nc-nom, applications, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(développent, v-ver:pres, développent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1795, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(courante, adj-adj, courante, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(automobiles, nc-nom, automobiles, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1796, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),n)-1]), ex_si(présent, nc-nom, présent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('GMFanuc', npp-nam, 'GMFanuc', [dr(0,np,np)-1]), ex_si('Robotics', npp-nam, 'Robotics', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(robotique, adj-adj, robotique, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pulvérisation, nc-nom, pulvérisation, [n-1]), ex_si(manuelle, adj-adj, manuelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(reproduire, vinf-ver:infi, reproduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(motif, nc-nom, motif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pulvérisation, nc-nom, pulvérisation, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(précision, nc-nom, précision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('0,03', det-num, '0,03', [dr(0,np,n)-1]), ex_si(pouce, nc-nom, pouce, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(programmée, vpp-ver:pper, programmée, [dl(0,np,s_pass)-1]), ex_si(facilement, adv-adv, facilement, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(traiter, vinf-ver:infi, traiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(large, adj-adj, large, [dr(0,n,n)-1]), ex_si(gamme, nc-nom, gamme, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(vêtements, nc-nom, vêtements, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1797, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(pulvériser, vinf-ver:infi, pulvériser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(teinture, nc-nom, teinture, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vêtements, nc-nom, vêtements, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1798, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retenu, vpp-ver:pper, retenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(jugement, nc-nom, jugement, [n-1]), ex_si(lundi, nc-nom, lundi, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(appels, nc-nom, appels, [n-1]), ex_si(rivaux, adj-adj, rivaux, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(renforcer, vinf-ver:infi, renforcer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(manifestations, nc-nom, manifestations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(colère, nc-nom, colère, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Indonésie', npp-nam, 'Indonésie', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(signe, nc-nom, signe, [n-1]), ex_si(sain, adj-adj, sain, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(démocratie, nc-nom, démocratie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si(fortement, adv-adv, fortement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(musulmane, adj-adj, musulmane, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1799, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(protestations, nc-nom, protestations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Indonésie', npp-nam, 'Indonésie', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(signe, nc-nom, signe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(démocratie, nc-nom, démocratie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si(fortement, adv-adv, fortement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(musulmane, adj-adj, musulmane, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1800, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(atomique, adj-adj, atomique, [dl(0,n,n)-1]), ex_si(détaillant, vpr-ver:ppre, détaillant, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(reproche, v-ver:pres, reproche, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Téhéran', npp-nam, 'Téhéran', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(coopéré, vpp-ver:pper, coopéré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tentatives, nc-nom, tentatives, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(organe, nc-nom, organe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(aspects, nc-nom, aspects, [n-1]), ex_si(suspects, adj-adj, suspects, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(iranien, adj-adj, iranien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1801, Result) :-
      prob_parse([ ex_si('Téhéran', npp-nam, 'Téhéran', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(coopéré, vpp-ver:pper, coopéré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tentatives, nc-nom, tentatives, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(organe, nc-nom, organe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(surveillance, nc-nom, surveillance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(enquêter, vinf-ver:infi, enquêter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(aspects, nc-nom, aspects, [n-1]), ex_si(suspects, adj-adj, suspects, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(iranien, adj-adj, iranien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1802, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(iraniens, adj-adj, iraniens, [dl(0,n,n)-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('54.000', det-num, '54.000', [dr(0,np,n)-1]), ex_si(centrifugeuses, nc-nom, centrifugeuses, [n-1]), ex_si(produiraient, v-ver:cond, produiraient, [dr(0,dl(0,np,s),np)-1]), ex_si(suffisamment, adv-adv, suffisamment, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(uranium, nc-nom, uranium, [n-1]), ex_si(enrichi, vpp-ver:pper, enrichi, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(alimenter, vinf-ver:infi, alimenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réacteur, nc-nom, réacteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1.000', det-num, '1.000', [dr(0,np,n)-1]), ex_si(mégawatts, nc-nom, mégawatts, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(construit, vpp-ver:pper, construit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bushehr', npp-nam, 'Bushehr', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1803, Result) :-
      prob_parse([ ex_si('54.000', det-num, '54.000', [dr(0,np,n)-1]), ex_si(centrifugeuses, nc-nom, centrifugeuses, [n-1]), ex_si(produiraient, v-ver:cond, produiraient, [dr(0,dl(0,np,s),np)-1]), ex_si(suffisamment, adv-adv, suffisamment, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(uranium, nc-nom, uranium, [n-1]), ex_si(enrichi, vpp-ver:pper, enrichi, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(alimenter, vinf-ver:infi, alimenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réacteur, nc-nom, réacteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1.000', det-num, '1.000', [dr(0,np,n)-1]), ex_si(mégawatts, nc-nom, mégawatts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1804, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(usine, nc-nom, usine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Arak', npp-nam, 'Arak', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(secret, adj-adj, secret, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enrichissement, nc-nom, enrichissement, [n-1]), ex_si(iranien, adj-adj, iranien, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2003, pro-num, 2003, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(refus, nc-nom, refus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Téhéran', npp-nam, 'Téhéran', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(cesser, vinf-ver:infi, cesser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enrichissement, nc-nom, enrichissement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(uranium, nc-nom, uranium, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(constatations, nc-nom, constatations, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(inspecteurs, nc-nom, inspecteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AIEA', npp-abr, 'AIEA', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accru, vpp-ver:pper, accru, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soupçons, nc-nom, soupçons, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1805, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(iranien, adj-adj, iranien, [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(soupçons, nc-nom, soupçons, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(constatations, nc-nom, constatations, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(inspecteurs, nc-nom, inspecteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AIEA', npp-abr, 'AIEA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1806, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(auxquelles, p+pro-pro:rel, auxquelles, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_a))))-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(substance, nc-nom, substance, [n-1]), ex_si(présente, adj-adj, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vin, nc-nom, vin, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(longtemps, adv-adv, longtemps, [dl(1,s,s)-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(gras, adj-adj, gras, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1807, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(souris, nc-nom, souris, [n-1]), ex_si(nourries, vpp-ver:pper, nourries, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(vin, nc-nom, vin, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(longtemps, adv-adv, longtemps, [dl(1,s,s)-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(gras, adj-adj, gras, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1808, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AIEA', npp-abr, 'AIEA', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(renvoyé, vpp-ver:pper, renvoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(devant, p-prp, devant, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(suggérant, vpr-ver:ppre, suggérant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(enfreint, vpp-ver:pper, enfreint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('non-prolifération', nc-nom, 'non-prolifération', [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fabriquer, vinf-ver:infi, fabriquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1809, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fabriquer, vinf-ver:infi, fabriquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AIEA', npp-abr, 'AIEA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1810, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [dr(0,np,np)-1]), ex_si('Obrador', npp-nam, 'Obrador', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fraude, nc-nom, fraude, [n-1]), ex_si(électorale, adj-adj, électorale, [dl(0,n,n)-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coûté, vpp-ver:pper, coûté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidence, nc-nom, présidence, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(recomptage, nc-nom, recomptage, [n-1]), ex_si(confirmant, vpr-ver:ppre, confirmant, [dr(0,dl(0,n,n),np)-1]), ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('Calderon', npp-nam, 'Calderon', [np-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(élu, vpp-ver:pper, élu, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1811, Result) :-
      prob_parse([ ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('Calderon', npp-nam, 'Calderon', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1812, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [dr(0,np,np)-1]), ex_si('Obrador', npp-nam, 'Obrador', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pourcentage, nc-nom, pourcentage, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),np)-1]), ex_si(président, nc-nom, président, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(légitime, adj-adj, légitime, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1813, Result) :-
      prob_parse([ ex_si('Mr', nc-abr, 'Mr', [dr(0,np,np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [dr(0,np,np)-1]), ex_si('Obrador', npp-nam, 'Obrador', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1814, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Lopez', npp-nam, 'Lopez', [dr(0,np,np)-1]), ex_si('Obrador', npp-nam, 'Obrador', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(assermenté, vpp-ver:pper, assermenté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sénatrice, nc-nom, sénatrice, [n-1]), ex_si('Rosario', npp-nam, 'Rosario', [dl(0,n,n)-1]), ex_si('Ibarra', npp-nam, 'Ibarra', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(militante, nc-nom, militante, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(placé, vpp-ver:pper, placé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(écharpe, nc-nom, écharpe, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(verte, adj-adj, verte, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(blanche, adj-adj, blanche, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(épaules, nc-nom, épaules, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1815, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(sénatrice, nc-nom, sénatrice, [n-1]), ex_si('Rosario', npp-nam, 'Rosario', [dl(0,n,n)-1]), ex_si('Ibarra', npp-nam, 'Ibarra', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(militante, nc-nom, militante, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1816, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Carstens', npp-nam, 'Carstens', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('FMI', npp-abr, 'FMI', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(travailler, vinf-ver:infi, travailler, [dl(0,np,s_inf)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Calderon', npp-nam, 'Calderon', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(dirigera, v-ver:simp, dirigera, [dr(0,dl(0,np,s),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(efforts, nc-nom, efforts, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(avancer, vinf-ver:infi, avancer, [dl(0,np,s_inf)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(emplois, nc-nom, emplois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1817, Result) :-
      prob_parse([ ex_si('Monsieur', nc-abr, 'Monsieur', [dr(0,np,np)-1]), ex_si('Carstens', npp-nam, 'Carstens', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('FMI', npp-abr, 'FMI', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1818, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(toucher, vinf-ver:infi, toucher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(investisseurs, nc-nom, investisseurs, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(précipitent, v-ver:pres, précipitent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(attirés, vpp-ver:pper, attirés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(richesse, nc-nom, richesse, [n-1]), ex_si(croissante, vpr-ver:ppre, croissante, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1819, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(profitable, adj-adj, profitable, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1820, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Huawei', npp-nam, 'Huawei', [np-1]), ex_si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(questions, nc-nom, questions, [n-1]), ex_si(relatives, adj-adj, relatives, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(entravent, v-ver:pres, entravent, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(progrès, nc-nom, progrès, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(découlant, vpr-ver:ppre, découlant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(allégations, nc-nom, allégations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2001, pro-num, 2001, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusée, vpp-ver:pper, accusée, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(travailler, vinf-ver:infi, travailler, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(talibans, nc-nom, talibans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1821, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Huawei', npp-nam, 'Huawei', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusée, vpp-ver:pper, accusée, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(travailler, vinf-ver:infi, travailler, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(taliban, adj-adj, taliban, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1822, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si('Huawei', npp-nam, 'Huawei', [np-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(expansion, nc-nom, expansion, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(facile, adj-adj, facile, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(obtention, nc-nom, obtention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(visas, nc-nom, visas, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(ingénieurs, nc-nom, ingénieurs, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(travaillant, vpr-ver:ppre, travaillant, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(défi, nc-nom, défi, [n-1]), ex_si(particulier, adj-adj, particulier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1823, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ingénieurs, nc-nom, ingénieurs, [n-1]), ex_si(chinois, adj-adj, chinois, [dl(0,n,n)-1]), ex_si(travaillant, vpr-ver:ppre, travaillant, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(visas, nc-nom, visas, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1824, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(déployés, vpp-ver:pper, déployés, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(sécuriser, vinf-ver:infi, sécuriser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bogor', npp-nam, 'Bogor', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(entretenir, vinf-ver:infi, entretenir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(homologue, nc-nom, homologue, [n-1]), ex_si(indonésien, adj-adj, indonésien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Susilo', npp-nam, 'Susilo', [dr(0,np,np)-1]), ex_si('Bambang', npp-nam, 'Bambang', [dr(0,np,np)-1]), ex_si('Yudhoyono', npp-nam, 'Yudhoyono', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1825, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bogor', npp-nam, 'Bogor', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1826, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(accordée, vpp-ver:pper, accordée, [dl(0,n,n)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('vice-président', nc-nom, 'vice-président', [n-1]), ex_si('Dick', npp-nam, 'Dick', [dl(0,n,n)-1]), ex_si('Cheney', npp-nam, 'Cheney', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nom, 'Défense', [n-1]), ex_si('Donald', npp-nam, 'Donald', [dl(0,n,n)-1]), ex_si('Rumsfeld', npp-nam, 'Rumsfeld', [dl(0,n,n)-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(appréciée, vpp-ver:pper, appréciée, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(présidence, nc-nom, présidence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1827, Result) :-
      prob_parse([ ex_si('Dick', npp-nam, 'Dick', [dr(0,np,np)-1]), ex_si('Cheney', npp-nam, 'Cheney', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('vice-président', nc-nom, 'vice-président', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si('Donald', npp-nam, 'Donald', [dl(0,n,n)-1]), ex_si('Rumsfeld', npp-nam, 'Rumsfeld', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1828, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(militants, nc-nom, militants, [n-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Al-Qaida', npp-nam, 'Al-Qaida', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('attentats-suicides', nc-nom, 'attentats-suicides', [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Indonésie', npp-nam, 'Indonésie', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1829, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(militants, nc-nom, militants, [n-1]), ex_si(liés, vpp-ver:pper, liés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Al-Qaida', npp-nam, 'Al-Qaida', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(frapper, vinf-ver:infi, frapper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(occidentaux, adj-adj, occidentaux, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Indonésie', npp-nam, 'Indonésie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1830, Result) :-
      prob_parse([ ex_si('BEYROUTH', npp-nam, 'BEYROUTH', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(21, det-num, 21, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Xinhua', npp-abr, 'Xinhua', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,s),s)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,s),s)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(libanais, adj-adj, libanais, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Industrie', nc-nom, 'Industrie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(chrétien, adj-adj, chrétien, [dl(0,n,n)-1]), ex_si('Pierre', npp-nam, 'Pierre', [dl(0,n,n)-1]), ex_si('Gemayel', npp-nam, 'Gemayel', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(balle, nc-nom, balle, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banlieue, nc-nom, banlieue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Beyrouth', npp-nam, 'Beyrouth', [np-1]), ex_si(mardi, nc-nom, mardi, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si('al-Jazeera', npp-nam, 'al-Jazeera', [dl(0,n,n)-1]), ex_si(citant, vpr-ver:ppre, citant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(libanais, adj-adj, libanais, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Intérieur', nc-nom, 'Intérieur', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1831, Result) :-
      prob_parse([ ex_si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), ex_si('Gemayel', npp-nam, 'Gemayel', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banlieue, nc-nom, banlieue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Beyrouth', npp-nam, 'Beyrouth', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1832, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gemayel', npp-nam, 'Gemayel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(certain, adj-adj, certain, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(approfondir, vinf-ver:infi, approfondir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(démission, nc-nom, démission, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(ministres, nc-nom, ministres, [n-1]), ex_si('pro-syriens', adj-adj, 'pro-syriens', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Hezbollah', npp-nam, 'Hezbollah', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,dl(1,s,s),n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(table, nc-nom, table, [n-1]), ex_si(ronde, adj-adj, ronde, [dl(0,n,n)-1]), ex_si(multipartite, adj-adj, multipartite, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1833, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(démission, nc-nom, démission, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(ministres, nc-nom, ministres, [n-1]), ex_si('pro-syriens', adj-adj, 'pro-syriens', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(profonde, adj-adj, profonde, [dr(0,n,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débuté, vpp-ver:pper, débuté, [dl(0,np,s_ppart)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1834, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tournure, nc-nom, tournure, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pire, nc-nom, pire, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approbation, nc-nom, approbation, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cabinet, nc-nom, cabinet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ministres, nc-nom, ministres, [n-1]), ex_si(soutenus, vpp-ver:pper, soutenus, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Syrie', npp-nam, 'Syrie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ex-Premier', adj-num, 'ex-Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Rafic', npp-nam, 'Rafic', [dl(0,n,n)-1]), ex_si('Hariri', npp-nam, 'Hariri', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1835, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(aggravée, vpp-ver:pper, aggravée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(document, nc-nom, document, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1836, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Rafic', npp-nam, 'Rafic', [dl(0,n,n)-1]), ex_si('Hariri', npp-nam, 'Hariri', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(également, adv-adv, également, [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(figure, nc-nom, figure, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('anti-syrienne', adj-adj, 'anti-syrienne', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(attentat, nc-nom, attentat, [n-1]), ex_si(suicide, nc-nom, suicide, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entraîné, vpp-ver:pper, entraîné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(montée, nc-nom, montée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vagues, nc-nom, vagues, [n-1]), ex_si('anti-syriennes', adj-adj, 'anti-syriennes', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(syriennes, adj-adj, syriennes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1837, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(syriennes, adj-adj, syriennes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retirées, vpp-ver:pper, retirées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rafic', npp-nam, 'Rafic', [dr(0,np,np)-1]), ex_si('Hariri', npp-nam, 'Hariri', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1838, Result) :-
      prob_parse([ ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Reuters', npp-nam, 'Reuters', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('Dell', npp-nam, 'Dell', [dr(0,np,np)-1]), ex_si('Inc', npp-abr, 'Inc', [np-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(annoncer, vinf-ver:infi, annoncer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(trimestriels, adj-adj, trimestriels, [dl(0,n,n)-1]), ex_si(préliminaires, adj-adj, préliminaires, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fermeture, nc-nom, fermeture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(mardi, nc-nom, mardi, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(retardé, vpp-ver:pper, retardé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(publication, nc-nom, publication, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(complexités, nc-nom, complexités, [n-1]), ex_si(comptables, adj-adj, comptables, [dl(0,n,n)-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(réglementaire, adj-adj, réglementaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1839, Result) :-
      prob_parse([ ex_si('Mardi', nc-nom, 'Mardi', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(trimestriels, adj-adj, trimestriels, [dl(0,n,n)-1]), ex_si(préliminaires, adj-adj, préliminaires, [dl(0,n,n)-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(annoncés, vpp-ver:pper, annoncés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1840, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(démocrates, nc-nom, démocrates, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(changements, nc-nom, changements, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sénat', npp-nam, 'Sénat', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1841, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(démocrates, nc-nom, démocrates, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1842, Result) :-
      prob_parse([ ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Reuters', npp-nam, 'Reuters', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('Wal-Mart', npp-nam, 'Wal-Mart', [dr(0,np,np)-1]), ex_si('Stores', npp-nam, 'Stores', [np-1]), ex_si('Inc', et-abr, 'Inc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1843, Result) :-
      prob_parse([ ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accordé, vpp-ver:pper, accordé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(motion, nc-nom, motion, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(annuler, vinf-ver:infi, annuler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(recours, nc-nom, recours, [n-1]), ex_si(collectif, adj-adj, collectif, [dl(0,n,n)-1]), ex_si(accusant, vpr-ver:ppre, accusant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(détaillant, nc-nom, détaillant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(refuser, vinf-ver:infi, refuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pauses, nc-nom, pauses, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1844, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pauses, nc-nom, pauses, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(refusées, vpp-ver:pper, refusées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(motion, nc-nom, motion, [n-1]), ex_si(accordée, vpp-ver:pper, accordée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1845, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Air', npp-nam, 'Air', [dr(0,np,np)-1]), ex_si('Force', npp-nam, 'Force', [dr(0,np,np)-1]), ex_si('One', npp-nam, 'One', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,s,s),n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2006, adj-num, 2006, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(irakien, adj-adj, irakien, [dl(0,n,n)-1]), ex_si('Nouri', npp-nam, 'Nouri', [dl(0,n,n)-1]), ex_si('al-Maliki', npp-nam, 'al-Maliki', [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rencontreront, v-ver:futu, rencontreront, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(prochaine, adj-adj, prochaine, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Jordanie', npp-nam, 'Jordanie', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(discuter, vinf-ver:infi, discuter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(détérioration, nc-nom, détérioration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(sécuritaire, adj-adj, sécuritaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1846, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Jordanie', npp-nam, 'Jordanie', [n-1]), ex_si(accueillera, v-ver:futu, accueillera, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rencontre, nc-nom, rencontre, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(irakien, adj-adj, irakien, [dl(0,n,n)-1]), ex_si('Nouri', npp-nam, 'Nouri', [dl(0,n,n)-1]), ex_si('al-Maliki', npp-nam, 'al-Maliki', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1847, Result) :-
      prob_parse([ ex_si('Quatorze', det-num, 'Quatorze', [dr(0,np,n)-1]), ex_si(invités, nc-nom, invités, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(équipage, nc-nom, équipage, [n-1]), ex_si(restaient, v-ver:impf, restaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(malades, adj-adj, malades, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(isolement, nc-nom, isolement, [n-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivé, vpp-ver:pper, arrivé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Port', npp-nam, 'Port', [dr(0,np,np)-1]), ex_si('Everglades', npp-nam, 'Everglades', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Carnival', npp-nam, 'Carnival', [dr(0,np,np)-1]), ex_si('Cruise', npp-nam, 'Cruise', [dr(0,np,np)-1]), ex_si('Lines', npp-nam, 'Lines', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Carnival', npp-nam, 'Carnival', [dr(0,np,np)-1]), ex_si('Corp', npp-nam, 'Corp', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1848, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Carnival', npp-nam, 'Carnival', [dr(0,n,n)-1]), ex_si('Cruise', npp-nam, 'Cruise', [dr(0,n,n)-1]), ex_si('Lines', npp-nam, 'Lines', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Carnival', npp-nam, 'Carnival', [dr(0,np,np)-1]), ex_si('Corp', npp-nam, 'Corp', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1849, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(tests, nc-nom, tests, [n-1]), ex_si(préliminaires, adj-adj, préliminaires, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(permis, vpp-ver:pper, permis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(identifier, vinf-ver:infi, identifier, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(norovirus, nc-nom, norovirus, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(contagieux, adj-adj, contagieux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(invités, nc-nom, invités, [n-1]), ex_si(juste, adv-adv, juste, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(embarquer, vinf-ver:infi, embarquer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(croisière, nc-nom, croisière, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(3, adj-num, 3, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Rome', npp-nam, 'Rome', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Carnival', npp-nam, 'Carnival', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1850, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(norovirus, nc-nom, norovirus, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1851, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pentagone', npp-nam, 'Pentagone', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Congrès', npp-nam, 'Congrès', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(préparé, vpp-ver:pper, préparé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(présidents, nc-nom, présidents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Syrie', npp-nam, 'Syrie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rencontrer, vinf-ver:infi, rencontrer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Téhéran', npp-nam, 'Téhéran', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1852, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(rencontrera, v-ver:impf, rencontrera, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(présidents, nc-nom, présidents, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Syrie', npp-nam, 'Syrie', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Téhéran', npp-nam, 'Téhéran', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1853, Result) :-
      prob_parse([ ex_si('Hadley', npp-nam, 'Hadley', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Jordanie', npp-nam, 'Jordanie', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(choisie, vpp-ver:pper, choisie, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rencontre, nc-nom, rencontre, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('al-Maliki', npp-nam, 'al-Maliki', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(unité, nc-nom, unité, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1854, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(rencontrera, v-ver:futu, rencontrera, [dr(0,dl(0,np,s),np)-1]), ex_si('al-Maliki', npp-nam, 'al-Maliki', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Hadley', npp-nam, 'Hadley', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1855, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(nous, clo-pro:per, nous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apporté, vpp-ver:pper, apporté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si('7-Up', nc-abr, '7-Up', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bouteilles, nc-nom, bouteilles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(composé, vpp-ver:pper, composé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(riz, nc-nom, riz, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(envie, nc-nom, envie, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),dl(0,np,s_inf))-1]), ex_si(manger, vinf-ver:infi, manger, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Jim', npp-nam, 'Jim', [dr(0,np,np)-1]), ex_si('Lankes', npp-nam, 'Lankes', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(48, det-num, 48, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Phoenix', npp-nam, 'Phoenix', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1856, Result) :-
      prob_parse([ ex_si('Jim', npp-nam, 'Jim', [dr(0,np,np)-1]), ex_si('Lankes', npp-nam, 'Lankes', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bouteilles, nc-nom, bouteilles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(riz, nc-nom, riz, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1857, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Centres', nc-nam, 'Centres', [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montée, vpp-ver:pper, montée, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accosté, vpp-ver:pper, accosté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Saint-Martin', npp-nam, 'Saint-Martin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(superviser, vinf-ver:infi, superviser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nettoyage, nc-nom, nettoyage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(causes, nc-nom, causes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Carnival', npp-nam, 'Carnival', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1858, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(causes, nc-nom, causes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épidémie, nc-nom, épidémie, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(recherchées, vpp-ver:pper, recherchées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1859, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vendues, vpp-ver:pper, vendues, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(marques, nc-nom, marques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(magasins, nc-nom, magasins, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('CVS', npp-abr, 'CVS', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Safeway', npp-nam, 'Safeway', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(120, det-num, 120, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(grands, adj-adj, grands, [n-1]), ex_si(détaillants, nc-nom, détaillants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Food', npp-nam, 'Food', [n-1]), ex_si(and, et-kon, and, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si('Drug', npp-nam, 'Drug', [dr(0,n,n)-1]), ex_si('Administration', npp-nam, 'Administration', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1860, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(commercialisées, vpp-ver:pper, commercialisées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(détaillants, nc-nom, détaillants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1861, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(contaminées, vpp-ver:pper, contaminées, [dl(0,n,n)-1]), ex_si(contenaient, v-ver:impf, contenaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fragments, nc-nom, fragments, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métal, nc-nom, métal, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(allait, v-ver:impf, allait, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('micro-points', nc-nom, 'micro-points', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(portions, nc-nom, portions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fil, nc-nom, fil, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tiers, nc-nom, tiers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pouce, nc-nom, pouce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(long, nc-nom, long, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1862, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(contaminées, vpp-ver:pper, contaminées, [dl(0,n,n)-1]), ex_si(contenaient, v-ver:impf, contenaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fragments, nc-nom, fragments, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métal, nc-nom, métal, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1863, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(consommateurs, nc-nom, consommateurs, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(prennent, v-ver:pres, prennent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(contaminées, vpp-ver:pper, contaminées, [dl(0,n,n)-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(souffrir, vinf-ver:infi, souffrir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(malaise, nc-nom, malaise, [n-1]), ex_si(gastrique, adj-adj, gastrique, [dl(0,n,n)-1]), ex_si(légère, adj-adj, légère, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(possibles, adj-adj, possibles, [dr(0,n,n)-1]), ex_si(coupures, nc-nom, coupures, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bouche, nc-nom, bouche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gorge, nc-nom, gorge, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ajoutant, vpr-ver:ppre, ajoutant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blessure, nc-nom, blessure, [n-1]), ex_si(grave, adj-adj, grave, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(faible, adj-adj, faible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1864, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(contaminées, vpp-ver:pper, contaminées, [dl(0,n,n)-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(causer, vinf-ver:infi, causer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(malaises, nc-nom, malaises, [n-1]), ex_si(gastriques, adj-adj, gastriques, [dl(0,n,n)-1]), ex_si(légères, adj-adj, légères, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(coupures, nc-nom, coupures, [n-1]), ex_si(possibles, adj-adj, possibles, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bouche, nc-nom, bouche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gorge, nc-nom, gorge, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1865, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aspirine, nc-nom, aspirine, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ibuprofène, nc-nom, ibuprofène, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(analgésiques, nc-nom, analgésiques, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(ordonnance, nc-nom, ordonnance, [n-1]), ex_si(médicale, adj-adj, médicale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1866, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(aspirine, nc-nom, aspirine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(analgésiques, nc-nom, analgésiques, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(ordonnance, nc-nom, ordonnance, [n-1]), ex_si(médicale, adj-adj, médicale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1867, Result) :-
      prob_parse([ ex_si('CVS', npp-abr, 'CVS', [np-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(cesser, vinf-ver:infi, cesser, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(vendre, vinf-ver:infi, vendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(caplets, nc-nom, caplets, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acétaminophène, nc-nom, acétaminophène, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(500, det-num, 500, [dr(0,np,n)-1]), ex_si(milligrammes, nc-nom, milligrammes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(retirer, vinf-ver:infi, retirer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bouteilles, nc-nom, bouteilles, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(rayons, nc-nom, rayons, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(magasins, nc-nom, magasins, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(tout, adv-adv, tout, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si('Mike', npp-nam, 'Mike', [dl(0,n,n)-1]), ex_si('DeAngelis', npp-nam, 'DeAngelis', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1868, Result) :-
      prob_parse([ ex_si('CVS', npp-abr, 'CVS', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vendra, v-ver:pres, vendra, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(caplets, nc-nom, caplets, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acétaminophène, nc-nom, acétaminophène, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(500, det-num, 500, [dr(0,np,n)-1]), ex_si(milligrammes, nc-nom, milligrammes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1869, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(révélé, vpp-ver:pper, révélé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métal, nc-nom, métal, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(200, det-num, 200, [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(70, adj-num, 70, [dr(0,n,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passées, vpp-ver:pper, passées, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(détecteur, nc-nom, détecteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métaux, nc-nom, métaux, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1870, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(métal, nc-nom, métal, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(200, det-num, 200, [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(70, adj-num, 70, [dr(0,n,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(détecteur, nc-nom, détecteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métaux, nc-nom, métaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1871, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(volontaire, adj-adj, volontaire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(considéré, vpp-ver:pper, considéré, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(couvre, v-ver:pres, couvre, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(causer, vinf-ver:infi, causer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(temporaire, adj-adj, temporaire, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(posent, v-ver:pres, posent, [dr(0,dl(0,np,s),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(légère, adj-adj, légère, [dr(0,n,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nature, nc-nom, nature, [n-1]), ex_si(grave, adj-adj, grave, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1872, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(couvre, v-ver:pres, couvre, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(causer, vinf-ver:infi, causer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(temporaire, adj-adj, temporaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1873, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(acétaminophène, nc-nom, acétaminophène, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(médicament, nc-nom, médicament, [n-1]), ex_si(contenu, vpp-ver:pper, contenu, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(vendus, vpp-ver:pper, vendus, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si('Tylenol', npp-nam, 'Tylenol', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(disponible, adj-adj, disponible, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(versions, nc-nom, versions, [n-1]), ex_si(génériques, adj-adj, génériques, [dl(0,n,n)-1]), ex_si(généralement, adv-adv, généralement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(coûteuses, adj-adj, coûteuses, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1874, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(acétaminophène, nc-nom, acétaminophène, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Tylenol', npp-nam, 'Tylenol', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1875, Result) :-
      prob_parse([ ex_si('PST', npp-abr, 'PST', [dr(0,np,np)-1]), ex_si('Chittagong', npp-nam, 'Chittagong', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Bangladesh', npp-nam, 'Bangladesh', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('Muhammad', npp-nam, 'Muhammad', [dr(0,np,np)-1]), ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(banquier, nc-nom, banquier, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pauvres, nc-nom, pauvres, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(bangladais, adj-adj, bangladais, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(accorde, v-ver:pres, accorde, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(aider, vinf-ver:infi, aider, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(à, p-prp, à, [n-1]), ex_si(lutter, vinf-ver:infi, lutter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pauvreté, nc-nom, pauvreté, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(créant, vpr-ver:ppre, créant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1876, Result) :-
      prob_parse([ ex_si('Muhammad', npp-nam, 'Muhammad', [dr(0,np,np)-1]), ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', adj-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1877, Result) :-
      prob_parse([ ex_si('Kevin', npp-nam, 'Kevin', [dr(0,np,np)-1]), ex_si('Vincent', npp-nam, 'Vincent', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(44, det-num, 44, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Arlington', npp-nam, 'Arlington', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si('Va', v-ver:pres, 'Va', [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1878, Result) :-
      prob_parse([ ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(achète, v-ver:pres, achète, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acétaminophène, nc-nom, acétaminophène, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(magasin, nc-nom, magasin, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(voulait, v-ver:impf, voulait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(sur, p-prp, sur, [dr(0,pp_de,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1879, Result) :-
      prob_parse([ ex_si('Kevin', npp-nam, 'Kevin', [dr(0,np,np)-1]), ex_si('Vincent', npp-nam, 'Vincent', [np-1]), ex_si(achète, v-ver:pres, achète, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acétaminophène, nc-nom, acétaminophène, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(magasin, nc-nom, magasin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1880, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Nobel', npp-nam, 'Nobel', [n-1]), ex_si(braque, v-ver:pres, braque, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(projecteurs, nc-nom, projecteurs, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(capitalisme, nc-nom, capitalisme, [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(popularité, nc-nom, popularité, [n-1]), ex_si(ces, det-pro:dem, ces, [dr(0,dl(1,s,s),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(propulsé, vpp-ver:pper, propulsé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(partisans, nc-nom, partisans, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(star, nc-nom, star, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(rock, nc-nom, rock, [n-1]), ex_si('Bono', npp-nam, 'Bono', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [dr(0,np,np)-1]), ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Gates', npp-nam, 'Gates', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1881, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(partisan, nc-nom, partisan, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(capitalisme, nc-nom, capitalisme, [n-1]), ex_si(social, adj-adj, social, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1882, Result) :-
      prob_parse([ ex_si('Molly', npp-nam, 'Molly', [dr(0,np,np)-1]), ex_si('Walsh', npp-nam, 'Walsh', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(21, det-num, 21, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(étudiante, nc-nom, étudiante, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('Washington', npp-nam, 'Washington', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(courses, nc-nom, courses, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pharmacie, nc-nom, pharmacie, [n-1]), ex_si('CVS', npp-abr, 'CVS', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(prévoyait, v-ver:cond, prévoyait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(jeter, vinf-ver:infi, jeter, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(chez, p-prp, chez, [dr(0,pp,np)-1]), ex_si(elle, pro-pro:per, elle, [np-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(magasin, nc-nom, magasin, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(achetés, vpp-ver:pper, achetés, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(économies, nc-nom, économies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1883, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(génériques, adj-adj, génériques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1884, Result) :-
      prob_parse([ ex_si('Molly', npp-nam, 'Molly', [dr(0,np,np)-1]), ex_si('Walsh', npp-nam, 'Walsh', [np-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(génériques, adj-adj, génériques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1885, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('J\'ai', v-prp:det, 'J\'ai', [np-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(il, cls-pro:per, il, [dr(0,s_q,s)-1]), ex_si(est, v-ver:pres, est, [np-1]), ex_si(ce, pro-pro:dem, ce, [dr(0,dl(0,np,s),np)-1]), ex_si(qui, prorel-pro:rel, qui, [np-1]), ex_si(se, clr-pro:per, se, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(rapprochera, v-ver:futu, rapprochera, [cl_r-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si('d\'', p-prp, 'd\'', [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,pp_de,np)-1]), ex_si(rencontre, nc-nom, rencontre, [dr(0,np,n)-1]), ex_si(avec, p-prp, avec, [n-1]), ex_si('Gandhi', npp-nam, 'Gandhi', [dr(0,dl(0,n,n),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(il, cls-pro:per, il, [dr(0,dl(0,s,s),s)-1]), ex_si(est, v-ver:pres, est, [np-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(simplement, adv-adv, simplement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(insensible, adj-adj, insensible, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,pp_a,np)-1]), ex_si(obstacle, nc-nom, obstacle, [dr(0,np,n)-1]), ex_si(ou, cc-kon, ou, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,pp_a,np)-1]), ex_si(argument, nc-nom, argument, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si('Bill', npp-nam, 'Bill', [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Clapp', npp-nam, 'Clapp', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(héritier, nc-nom, héritier, [dr(0,dl(0,np,np),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(fortune, nc-nom, fortune, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Weyerhaeuser', npp-nam, 'Weyerhaeuser', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(fondateur, nc-nom, fondateur, [dr(0,dl(0,np,np),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Global', npp-nam, 'Global', [dr(0,dl(0,n,n),np)-1]), ex_si('Partnerships', npp-nam, 'Partnerships', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), ex_si(groupe, nc-nom, groupe, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(microfinance, nc-nom, microfinance, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Seattle', npp-nam, 'Seattle', [n-1]), ex_si(qui, prorel-pro:rel, qui, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [np-1]), ex_si(est, v-ver:pres, est, [cl_r-1]), ex_si(associé, vpp-ver:pper, associé, [cl_r-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si('Grameen', npp-nam, 'Grameen', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si('Amérique', npp-nam, 'Amérique', [np-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1886, Result) :-
      prob_parse([ ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Clapp', npp-nam, 'Clapp', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Global', npp-nam, 'Global', [dr(0,np,np)-1]), ex_si('Partnerships', npp-nam, 'Partnerships', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1887, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(voulu, vpp-ver:pper, voulu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(dire, vinf-ver:infi, dire, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(quels, detwh-pro:rel, quels, [dr(0,dr(0,dl(0,dr(0,pp,np),s_whq),s),n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vendues, vpp-ver:pper, vendues, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(recommandé, vpp-ver:pper, recommandé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(achetés, vpp-ver:pper, achetés, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objet, nc-nom, objet, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rappel, nc-nom, rappel, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(vérifiant, vpr-ver:ppre, vérifiant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(magasins, nc-nom, magasins, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('Web', npp-nam, 'Web', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(lots, nc-nom, lots, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1888, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(numéros, nc-nom, numéros, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lot, nc-nom, lot, [n-1]), ex_si(figurent, v-ver:pres, figurent, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étiquette, nc-nom, étiquette, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(récipient, nc-nom, récipient, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1889, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fourni, vpp-ver:pper, fourni, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vendues, vpp-ver:pper, vendues, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1890, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(essayé, vpp-ver:pper, essayé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(persuader, vinf-ver:infi, persuader, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(banquier, nc-nom, banquier, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prêter, vinf-ver:infi, prêter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(villageois, nc-nom, villageois, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(banquier, nc-nom, banquier, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(insistant, vpr-ver:ppre, insistant, [dr(0,dl(0,np,s_ppres),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remplissaient, v-ver:impf, remplissaient, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(requises, vpp-ver:pper, requises, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(crédit, nc-nom, crédit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1891, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(aider, vinf-ver:infi, aider, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(pauvres, adj-adj, pauvres, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(pauvres, nc-nom, pauvres, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(relever, vinf-ver:infi, relever, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1892, Result) :-
      prob_parse([ ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(prêter, vinf-ver:infi, prêter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(villageois, nc-nom, villageois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1893, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(emprunteurs, nc-nom, emprunteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grameen', npp-nam, 'Grameen', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(petits, adj-adj, petits, [dr(0,n,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(achetant, vpr-ver:ppre, achetant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vache, nc-nom, vache, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(lait, nc-nom, lait, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('pousse-pousse', nc-nom, 'pousse-pousse', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(matériaux, nc-nom, matériaux, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(fabriquer, vinf-ver:infi, fabriquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(tissu, nc-nom, tissu, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(poterie, nc-nom, poterie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1894, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(prêts, nc-nom, prêts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grameen', npp-nam, 'Grameen', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vache, nc-nom, vache, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1895, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2003, pro-num, 2003, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(amené, vpp-ver:pper, amené, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(révolution, nc-nom, révolution, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(microcrédit, nc-nom, microcrédit, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Bangladesh', npp-nam, 'Bangladesh', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('50.000', det-num, '50.000', [dr(0,np,n)-1]), ex_si(mendiants, nc-nom, mendiants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grameen', npp-nam, 'Grameen', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dr(0,dl(0,np,s),dl(0,n,n)),np)-1]), ex_si(respectueusement, adv-adv, respectueusement, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Membres', nc-nom, 'Membres', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(difficulté, nc-nom, difficulté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1896, Result) :-
      prob_parse([ ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('50.000', det-num, '50.000', [dr(0,np,n)-1]), ex_si('Membres', nc-nom, 'Membres', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(difficulté, nc-nom, difficulté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1897, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(communiqué, nc-nom, communiqué, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(durable, adj-adj, durable, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(atteinte, nc-nom, atteinte, [dl(0,np,s_pass)-1]), ex_si(que, adv-adv, que, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(importants, adj-adj, importants, [dr(0,n,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(trouvent, v-ver:pres, trouvent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(moyens, nc-nom, moyens, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(sortir, vinf-ver:infi, sortir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pauvreté, nc-nom, pauvreté, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1898, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(aider, vinf-ver:infi, aider, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(sortir, vinf-ver:infi, sortir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pauvreté, nc-nom, pauvreté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1899, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(active, adj-adj, active, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(adoption, nc-nom, adoption, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(abordant, vpr-ver:ppre, abordant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(principales, adj-adj, principales, [dr(0,n,n)-1]), ex_si(priorités, nc-nom, priorités, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(entrepreneurs, nc-nom, entrepreneurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(heurtées, vpp-ver:pper, heurtées, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mur, nc-nom, mur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(briques, nc-nom, briques, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Sénat', npp-nam, 'Sénat', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1900, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(adopte, v-ver:pres, adopte, [dr(0,dl(0,np,s),np)-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(répondant, vpr-ver:ppre, répondant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(priorités, nc-nom, priorités, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(entrepreneurs, nc-nom, entrepreneurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1901, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fondation, nc-nom, fondation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gates', npp-nam, 'Gates', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si('1,5', det-num, '1,5', [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fondation, nc-nom, fondation, [n-1]), ex_si('Grameen', npp-nam, 'Grameen', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(étendre, vinf-ver:infi, étendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(programmes, nc-nom, programmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(microfinance, nc-nom, microfinance, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(familles, nc-nom, familles, [n-1]), ex_si(supplémentaires, adj-adj, supplémentaires, [dl(0,n,n)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(pauvres, adj-adj, pauvres, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1902, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dr(0,s,s))),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entrepreneur, nc-nom, entrepreneur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(technologie, nc-nom, technologie, [n-1]), ex_si('Craig', npp-nam, 'Craig', [dl(0,n,n)-1]), ex_si('McCaw', npp-nam, 'McCaw', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fourni, vpp-ver:pper, fourni, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(lancer, vinf-ver:infi, lancer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Grameen', npp-nam, 'Grameen', [dr(0,n,n)-1]), ex_si('Technology', npp-nam, 'Technology', [n-1]), ex_si('Center', npp-nam, 'Center', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(microcrédit, nc-nom, microcrédit, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(financer, vinf-ver:infi, financer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(mobile, adj-adj, mobile, [dl(0,n,n)-1]), ex_si(bon, adj-adj, bon, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(populations, nc-nom, populations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ouganda', npp-nam, 'Ouganda', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Rwanda', npp-nam, 'Rwanda', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1903, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fondation, nc-nom, fondation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gates', npp-nam, 'Gates', [np-1]), ex_si(étend, v-ver:pres, étend, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(programmes, nc-nom, programmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(microfinance, nc-nom, microfinance, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(familles, nc-nom, familles, [n-1]), ex_si(supplémentaires, adj-adj, supplémentaires, [dl(0,n,n)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(pauvres, adj-adj, pauvres, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1904, Result) :-
      prob_parse([ ex_si('Comme', cs-kon, 'Comme', [dr(0,dr(0,s,s),s)-1]), ex_si(le, clo-pro:per, le, [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(souligne, v-ver:pres, souligne, [dr(0,dr(0,s,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(démocrates, nc-nom, démocrates, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(républicains, nc-nom, républicains, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(propres, adj-adj, propres, [dr(0,n,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(petites, adj-adj, petites, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Congrès', npp-nam, 'Congrès', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(1,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(contrôlent, v-ver:pres, contrôlent, [dr(0,dl(0,np,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(chambres, nc-nom, chambres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1905, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Républicains', nc-nam, 'Républicains', [n-1]), ex_si(contrôlent, v-ver:pres, contrôlent, [dr(0,dl(0,np,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(chambres, nc-nom, chambres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1906, Result) :-
      prob_parse([ ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nommé, vpp-ver:pper, nommé, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(deux, det-num, deux, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Bangladesh', npp-nam, 'Bangladesh', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(147, det-num, 147, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(remporter, vinf-ver:infi, remporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1907, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(rare, adj-adj, rare, [dr(0,n,n)-1]), ex_si(lueur, nc-nom, lueur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(espoir, nc-nom, espoir, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lutte, v-ver:pres, lutte, [dl(0,np,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(vaincre, vinf-ver:infi, vaincre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(terroristes, nc-nom, terroristes, [n-1]), ex_si(islamiques, adj-adj, islamiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(chroniquement, adv-adv, chroniquement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(inondé, vpp-ver:pper, inondé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(battu, vpp-ver:pper, battu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tempêtes, nc-nom, tempêtes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(soufflent, v-ver:pres, soufflent, [dl(0,np,s)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(baie, nc-nom, baie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Bengale', npp-nam, 'Bengale', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1908, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(anciennement, adv-adv, anciennement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(bordé, vpp-ver:pper, bordé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(baie, nc-nom, baie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Bengale', npp-nam, 'Bengale', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Birmanie', npp-nam, 'Birmanie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1909, Result) :-
      prob_parse([ ex_si('Yunus', npp-nam, 'Yunus', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(remporter, vinf-ver:infi, remporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1910, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(transporteur, adj-adj, transporteur, [dl(0,n,n)-1]), ex_si('Hercules', npp-nam, 'Hercules', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(direct, adj-adj, direct, [dl(0,n,n)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(tour, nc-nom, tour, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atterri, vpp-ver:pper, atterri, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(promenade, nc-nom, promenade, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(m, nc-abr, m, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(poignées, nc-nom, poignées, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(main, nc-nom, main, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1911, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(transporteur, adj-adj, transporteur, [dl(0,n,n)-1]), ex_si('Hercules', npp-nam, 'Hercules', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vol, nc-nom, vol, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1912, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si(visait, v-ver:impf, visait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(estiment, v-ver:pres, estiment, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(trop, adv-adv, trop, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(longtemps, adv-adv, longtemps, [dl(1,s,s)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(visite, nc-nom, visite, [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(combattent, v-ver:pres, combattent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1913, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(combattent, v-ver:pres, combattent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1914, Result) :-
      prob_parse([ ex_si('Begum', npp-nam, 'Begum', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(emprunter, vinf-ver:infi, emprunter, [dl(0,np,s_inf)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(acheter, vinf-ver:infi, acheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(bambou, nc-nom, bambou, [n-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fabriquer, vinf-ver:infi, fabriquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tabourets, nc-nom, tabourets, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(recevait, v-ver:impf, recevait, [dr(0,dl(0,np,s),np)-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si(cents, nc-nom, cents, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(prêteurs, nc-nom, prêteurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1915, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(leur, clo-pro:per, leur, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tabourets, nc-nom, tabourets, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(rembourser, vinf-ver:infi, rembourser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(dette, nc-nom, dette, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(restait, v-ver:impf, restait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(cents, nc-nom, cents, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dr(0,np,np),n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(assez, adv-adv, assez, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(nourrir, vinf-ver:infi, nourrir, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1916, Result) :-
      prob_parse([ ex_si('Begum', npp-nam, 'Begum', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(nourrir, vinf-ver:infi, nourrir, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1917, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si('néo-zélandaise', adj-adj, 'néo-zélandaise', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(qualifications, nc-nom, qualifications, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(déconseillait, v-ver:impf, déconseillait, [dr(0,dl(0,np,s),pp)-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(fortement, adv-adv, fortement, [dl(1,s,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(autre, adj-adj, autre, [dr(0,np,n)-1]), ex_si(chose, nc-nom, chose, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(complet, adj-adj, complet, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(crédit, nc-nom, crédit, [n-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accordé, vpp-ver:pper, accordé, [dl(0,np,s_pass)-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réponse, nc-nom, réponse, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),np)-1]), ex_si(clairement, adv-adv, clairement, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compréhension, nc-nom, compréhension, [n-1]), ex_si(requise, vpp-ver:pper, requise, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(1,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(contient, v-ver:pres, contient, [dr(0,dl(0,np,s),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(langage, nc-nom, langage, [n-1]), ex_si('SMS', npp-abr, 'SMS', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1918, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(complet, adj-adj, complet, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(recommandé, vpp-ver:pper, recommandé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autorité', nc-nam, 'Autorité', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(qualifications, nc-nom, qualifications, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Nouvelle-Zélande', npp-nam, 'Nouvelle-Zélande', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1919, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(critiques, nc-nom, critiques, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Certificate', npp-nam, 'Certificate', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), ex_si('Educational', npp-nam, 'Educational', [dr(0,n,n)-1]), ex_si('Achievement', npp-nam, 'Achievement', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('NCEA', npp-abr, 'NCEA', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(qualification, nc-nom, qualification, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lycéens, nc-nom, lycéens, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dégradé, vpp-ver:pper, dégradé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si(autorisant, vpr-ver:ppre, autorisant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(langage, nc-nom, langage, [n-1]), ex_si('SMS', npp-abr, 'SMS', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [n-1]), ex_si(examens, nc-nom, examens, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1920, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('NCEA', npp-abr, 'NCEA', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(qualification, nc-nom, qualification, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(élèves, nc-nom, élèves, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(secondaire, nc-nom, secondaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1921, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(viol, nc-nom, viol, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(irakienne, adj-adj, irakienne, [dl(0,n,n)-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(tuée, vpp-ver:pper, tuée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(90, det-num, 90, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1922, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(90, det-num, 90, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1923, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(soldat, nc-nom, soldat, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Barker', npp-nam, 'Barker', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(accusés, vpp-ver:pper, accusés, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(violé, vpp-ver:pper, violé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si('Irakienne', nc-nam, 'Irakienne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(incident, nc-nom, incident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2006, adj-num, 2006, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(plaidé, vpp-ver:pper, plaidé, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(viol, nc-nom, viol, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(mercredi, nc-nom, mercredi, [dr(0,dl(1,s,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Fort', npp-nam, 'Fort', [dr(0,np,np)-1]), ex_si('Campbell', npp-nam, 'Campbell', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Kentucky', npp-nam, 'Kentucky', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1924, Result) :-
      prob_parse([ ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Barker', npp-nam, 'Barker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(violé, vpp-ver:pper, violé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(irakienne, adj-adj, irakienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1925, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(infirmières, nc-nom, infirmières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(anciens, adj-adj, anciens, [dr(0,n,n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêtées, vpp-ver:pper, arrêtées, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(soupçonnées, vpp-ver:pper, soupçonnées, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(35, det-num, 35, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1926, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(infirmières, nc-nom, infirmières, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vienne', npp-nam, 'Vienne', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(soupçonnées, vpp-ver:pper, soupçonnées, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1927, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rédacteur, nc-nom, rédacteur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('BBC', npp-abr, 'BBC', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Amériques', npp-nam, 'Amériques', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Will', npp-nam, 'Will', [dr(0,np,np)-1]), ex_si('Grant', npp-nam, 'Grant', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si('Mexicains', nc-nam, 'Mexicains', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fatigués, vpp-ver:pper, fatigués, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(conflits, nc-nom, conflits, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(aspirent, v-ver:pres, aspirent, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(normale, nc-nom, normale, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1928, Result) :-
      prob_parse([ ex_si('Will', npp-nam, 'Will', [dr(0,np,np)-1]), ex_si('Grant', npp-nam, 'Grant', [np-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Mexicains', nc-nam, 'Mexicains', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1929, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(dispose, v-ver:pres, dispose, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(suffisante, adj-adj, suffisante, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(désobéissance, nc-nom, désobéissance, [n-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(analystes, nc-nom, analystes, [n-1]), ex_si(pensent, v-ver:pres, pensent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(mieux, nc-nom, mieux, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(épine, nc-nom, épine, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pied, nc-nom, pied, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Calderon', npp-nam, 'Calderon', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1930, Result) :-
      prob_parse([ ex_si('Monsieur', nc-nam, 'Monsieur', [dr(0,np,np)-1]), ex_si('Calderon', npp-nam, 'Calderon', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(capable, adj-adj, capable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(désobéissance, nc-nom, désobéissance, [n-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1931, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(sûr, adj-adj, sûr, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(réductions, nc-nom, réductions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(impôts, nc-nom, impôts, [n-1]), ex_si(expirent, v-ver:pres, expirent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2010, pro-num, 2010, [np-1]), ex_si(';', ponct-pun, ';', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('Rangel', npp-nam, 'Rangel', [np-1]), ex_si(prendrait, v-ver:cond, prendrait, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidence, nc-nom, présidence, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(démocrates, nc-nom, démocrates, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1932, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(démocrates, nc-nom, démocrates, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1933, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(démocrates, adj-adj, démocrates, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(voies, nc-nom, voies, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(moyens, nc-nom, moyens, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(fiscale, adj-adj, fiscale, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(rédigés, vpp-ver:pper, rédigés, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(avancés, vpp-ver:pper, avancés, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(solides, adj-adj, solides, [dr(0,n,n)-1]), ex_si(antécédents, nc-nom, antécédents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(petites, adj-adj, petites, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1934, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(démocrates, adj-adj, démocrates, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(solides, adj-adj, solides, [dr(0,n,n)-1]), ex_si(antécédents, nc-nom, antécédents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(petites, adj-adj, petites, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1935, Result) :-
      prob_parse([ ex_si('Maximo', npp-nam, 'Maximo', [dr(0,np,np)-1]), ex_si('Rene', npp-nam, 'Rene', [dr(0,np,np)-1]), ex_si('Mendez', npp-nam, 'Mendez', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(apparente, adj-adj, apparente, [dr(0,n,n)-1]), ex_si(contrebande, nc-nom, contrebande, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médecins, nc-nom, médecins, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débranché, vpp-ver:pper, débranché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1936, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Miami', npp-nam, 'Miami', [np-1]), ex_si(imbibé, vpp-ver:pper, imbibé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(cocaïne, nc-nom, cocaïne, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(survie, nc-nom, survie, [n-1]), ex_si(retiré, vpp-ver:pper, retiré, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1937, Result) :-
      prob_parse([ ex_si('Quarante-cinq', pro-num, 'Quarante-cinq', [dr(0,np,n)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si(cent, pro-num, cent, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(examinés, vpp-ver:pper, examinés, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bipartisans, adj-adj, bipartisans, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(85, det-num, 85, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(examinés, vpp-ver:pper, examinés, [dl(0,n,n)-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(parrains, nc-nom, parrains, [n-1]), ex_si(principaux, adj-adj, principaux, [dl(0,n,n)-1]), ex_si(républicains, adj-adj, républicains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1938, Result) :-
      prob_parse([ ex_si(8221, pro-num, 8221, [np-1]), ex_si(';', ponct-pun, ';', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(propriétaires, nc-nom, propriétaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(petites, adj-adj, petites, [dr(0,n,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(déçus, vpp-ver:pper, déçus, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bilan, nc-nom, bilan, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Républicains', nc-nam, 'Républicains', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,pp,pp),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(manque, nc-nom, manque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(productivité, nc-nom, productivité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sénat', npp-nam, 'Sénat', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1939, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Sénat', nc-nam, 'Sénat', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(productif, adj-adj, productif, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1940, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(hélicoptères, nc-nom, hélicoptères, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si('Chinooks', nc-nam, 'Chinooks', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(véhicules, nc-nom, véhicules, [n-1]), ex_si(blindés, vpp-ver:pper, blindés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(grues, nc-nom, grues, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(camion, nc-nom, camion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pompiers, nc-nom, pompiers, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(encerclé, vpp-ver:pper, encerclé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1941, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chinook', npp-nam, 'Chinook', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1942, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(interdire, vinf-ver:infi, interdire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(comateux, adj-adj, comateux, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(connaître, vinf-ver:infi, connaître, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(désirs, nc-nom, désirs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1943, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(survie, nc-nom, survie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1944, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mot, nc-nom, mot, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(files, nc-nom, files, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(attente, nc-nom, attente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cuisine, nc-nom, cuisine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, prorel-pro:rel, que, [dr(0,s_q,s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(pourrions, v-ver:pres, pourrions, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dl(0,np,s_inf)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(kit, nc-nom, kit, [n-1]), ex_si(continue, v-ver:pres, continue, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(user, vinf-ver:infi, user, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(ici, adv-adv, ici, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(caporal, nc-nom, caporal, [n-1]), ex_si('Martin', npp-nam, 'Martin', [dl(0,n,n)-1]), ex_si('Page', npp-nam, 'Page', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1945, Result) :-
      prob_parse([ ex_si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), ex_si('Page', npp-nam, 'Page', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1946, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fusillade, nc-nom, fusillade, [n-1]), ex_si(mortelle, adj-adj, mortelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Steven', npp-nam, 'Steven', [dr(0,np,np)-1]), ex_si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), ex_si('Jenkins', npp-nam, 'Jenkins', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(malade, nc-nom, malade, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sida, nc-abr, sida, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si(terminale, adj-adj, terminale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ami, nc-nom, ami, [n-1]), ex_si('Philip', npp-nam, 'Philip', [dl(0,n,n)-1]), ex_si('Lee', npp-nam, 'Lee', [dl(0,n,n)-1]), ex_si('Saylor', npp-nam, 'Saylor', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Cedars-Sinai', npp-nam, 'Cedars-Sinai', [dr(0,n,n)-1]), ex_si('Medical', npp-nam, 'Medical', [dl(0,n,n)-1]), ex_si('Center', npp-nam, 'Center', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(nouveau, adj-adj, nouveau, [n-1]), ex_si(attiré, vpp-ver:pper, attiré, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attention, nc-nom, attention, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1947, Result) :-
      prob_parse([ ex_si('Steven', npp-nam, 'Steven', [dr(0,np,np)-1]), ex_si('Jenkins', npp-nam, 'Jenkins', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ami, nc-nom, ami, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1948, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(acier, adj-nom, acier, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Broken', npp-nam, 'Broken', [dr(0,np,np)-1]), ex_si('Hill', npp-nam, 'Hill', [dr(0,np,np)-1]), ex_si('Proprietary', npp-nam, 'Proprietary', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ressources, nc-nom, ressources, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('North', npp-nam, 'North', [dr(0,np,np)-1]), ex_si('Star', npp-nam, 'Star', [dr(0,np,np)-1]), ex_si(steel, et-nam, steel, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(privé, adj-adj, privé, [dl(0,n,n)-1]), ex_si('Cargill', npp-nam, 'Cargill', [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(unissent, v-ver:pres, unissent, [dr(0,dl(0,np,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(exploiter, vinf-ver:infi, exploiter, [dr(0,np,n)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Midwest', npp-nam, 'Midwest', [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1949, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(australien, adj-adj, australien, [dl(0,n,n)-1]), ex_si('Broken', npp-nam, 'Broken', [dl(0,n,n)-1]), ex_si('Hill', npp-nam, 'Hill', [dl(0,n,n)-1]), ex_si('Proprietary', npp-nam, 'Proprietary', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('North', npp-nam, 'North', [dl(0,n,n)-1]), ex_si('Star', npp-nam, 'Star', [dl(0,n,n)-1]), ex_si('Steel', npp-nam, 'Steel', [dl(0,n,n)-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(exploiter, vinf-ver:infi, exploiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, pro-num, une, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Midwest', npp-nam, 'Midwest', [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1950, Result) :-
      prob_parse([ ex_si('Confiant', vpr-ver:ppre, 'Confiant', [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(corrigent, v-ver:pres, corrigent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(copies, nc-nom, copies, [n-1]), ex_si(comprendront, v-ver:pres, comprendront, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réponses, nc-nom, réponses, [n-1]), ex_si(écrites, vpp-ver:pper, écrites, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(langage, nc-nom, langage, [n-1]), ex_si('SMS', npp-abr, 'SMS', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Haque', npp-nam, 'Haque', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(souligné, vpp-ver:pper, souligné, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(examens, nc-nom, examens, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(abréviations, nc-nom, abréviations, [n-1]), ex_si(textuelles, adj-adj, textuelles, [dl(0,n,n)-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pénalisées, vpp-ver:pper, pénalisées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1951, Result) :-
      prob_parse([ ex_si('Haque', npp-nam, 'Haque', [np-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(inclure, vinf-ver:infi, inclure, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(examens, nc-nom, examens, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1952, Result) :-
      prob_parse([ ex_si('Iscor', npp-nam, 'Iscor', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si('sud-africain', adj-adj, 'sud-africain', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fer, nc-nom, fer, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Saldanha', npp-nam, 'Saldanha', [dr(0,np,np)-1]), ex_si('Bay', npp-nam, 'Bay', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(ouest, nc-nom, ouest, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(partenariat, nc-nom, partenariat, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(industriel, adj-adj, industriel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1953, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si('sud-africain', adj-adj, 'sud-africain', [dl(0,n,n)-1]), ex_si('Iscor', npp-nam, 'Iscor', [dl(0,n,n)-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1954, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(critiques, nc-nom, critiques, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Certificate', npp-nam, 'Certificate', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),n)-1]), ex_si('Educational', npp-nam, 'Educational', [dr(0,n,n)-1]), ex_si('Achievement', npp-nam, 'Achievement', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('NCEA', npp-abr, 'NCEA', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(qualification, nc-nom, qualification, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lycéens, nc-nom, lycéens, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dégradé, vpp-ver:pper, dégradé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si(autorisant, vpr-ver:ppre, autorisant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(langage, nc-nom, langage, [n-1]), ex_si('SMS', npp-abr, 'SMS', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [n-1]), ex_si(examens, nc-nom, examens, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1955, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('NCEA', npp-abr, 'NCEA', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(dégradé, vpp-ver:pper, dégradé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1956, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(marines, nc-nom, marines, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Tyler', npp-nam, 'Tyler', [dr(0,np,np)-1]), ex_si('Jackson', npp-nam, 'Jackson', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Jodka', npp-nam, 'Jodka', [np-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(plaidé, vpp-ver:pper, plaidé, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(voies, nc-nom, voies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(aggravées, vpp-ver:pper, aggravées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(complot, nc-nom, complot, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entrave, nc-nom, entrave, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamnés, vpp-ver:pper, condamnés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(respectivement, adv-adv, respectivement, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(21, det-num, 21, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(18, det-num, 18, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1957, Result) :-
      prob_parse([ ex_si('Tyler', npp-nam, 'Tyler', [dr(0,np,np)-1]), ex_si('Jackson', npp-nam, 'Jackson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(18, det-num, 18, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1958, Result) :-
      prob_parse([ ex_si('US', npp-abr, 'US', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avantage, nc-nom, avantage, [n-1]), ex_si(technique, adj-adj, technique, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Nucor', npp-nam, 'Nucor', [np-1]), ex_si('puisqu\'une', det-prp:det, 'puisqu\'une', [dr(0,dl(0,s,s),s)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,np,n)-1]), ex_si(méthode, nc-nom, méthode, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(fabrication, nc-nom, fabrication, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(acier, nc-nom, acier, [dr(0,np,n)-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [n-1]), ex_si(elle, cls-pro:per, elle, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(envisage, v-ver:pres, envisage, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,np),np)-1]), ex_si(coulée, nc-nom, coulée, [dr(0,np,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(bande, nc-nom, bande, [dr(0,dl(0,n,n),n)-1]), ex_si(mince, adj-adj, mince, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(pourrait, v-ver:cond, pourrait, [let-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(acier, nc-nom, acier, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,dl(0,n,n),n)-1]), ex_si(qualité, nc-nom, qualité, [dr(0,dr(0,n,s_q),n)-1]), ex_si(que, cs-kon, que, [n-1]), ex_si(la, det-det:art, la, [dr(0,s_q,np)-1]), ex_si(technique, nc-nom, technique, [dr(0,np,n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(brames, nc-nom, brames, [dr(0,dl(0,n,n),n)-1]), ex_si(minces, adj-adj, minces, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si('Nucor', npp-nam, 'Nucor', [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(1959, Result) :-
      prob_parse([ ex_si('US', npp-abr, 'US', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(investir, vinf-ver:infi, investir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(coulée, nc-nom, coulée, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(bandes, nc-nom, bandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
