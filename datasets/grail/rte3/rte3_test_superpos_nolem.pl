sent(1, Result) :-
      prob_parse([ ex_si('Claude', npp-nam, 'Claude', [dr(0,np,np)-1]), ex_si('Chabrol', npp-nam, 'Chabrol', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1930, adj-num, 1930, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(célèbre, adj-adj, célèbre, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(40, adj-num, 40, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Beau', npp-nam, 'Beau', [dr(0,n,n)-1]), ex_si('Serge', npp-nam, 'Serge', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(histoires, nc-nom, histoires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(glaçantes, adj-adj, glaçantes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Boucher', npp-nam, 'Boucher', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(2, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Beau', npp-nam, 'Beau', [dr(0,n,n)-1]), ex_si('Serge', npp-nam, 'Serge', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Chabrol', npp-nam, 'Chabrol', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(3, Result) :-
      prob_parse([ ex_si('Claude', npp-nam, 'Claude', [dr(0,np,np)-1]), ex_si('Chabrol', npp-nam, 'Chabrol', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1930, adj-num, 1930, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(célèbre, adj-adj, célèbre, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(40, adj-num, 40, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Beau', npp-nam, 'Beau', [dr(0,n,n)-1]), ex_si('Serge', npp-nam, 'Serge', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(histoires, nc-nom, histoires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(glaçantes, adj-adj, glaçantes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Boucher', npp-nam, 'Boucher', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(4, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Boucher', npp-nam, 'Boucher', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(5, Result) :-
      prob_parse([ ex_si('Claude', npp-nam, 'Claude', [dr(0,np,np)-1]), ex_si('Chabrol', npp-nam, 'Chabrol', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(divorcé, vpp-ver:pper, divorcé, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si('Agnès', npp-nam, 'Agnès', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(actrice, nc-nom, actrice, [n-1]), ex_si('Stéphane', npp-nam, 'Stéphane', [dl(0,n,n)-1]), ex_si('Audran', npp-nam, 'Audran', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(6, Result) :-
      prob_parse([ ex_si('Sa', det-det:pos, 'Sa', [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Aurore', npp-nam, 'Aurore', [dr(0,np,np)-1]), ex_si('Paquiss', npp-nam, 'Paquiss', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(7, Result) :-
      prob_parse([ ex_si('Aurore', npp-nam, 'Aurore', [dr(0,np,np)-1]), ex_si('Paquiss', npp-nam, 'Paquiss', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Chabrol', npp-nam, 'Chabrol', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(8, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(maoïste, adj-adj, maoïste, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1965, pro-num, 1965, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), ex_si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Laski', npp-nam, 'Laski', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(scission, nc-nom, scission, [n-1]), ex_si('sino-soviétique', adj-adj, 'sino-soviétique', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(9, Result) :-
      prob_parse([ ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Laski', npp-nam, 'Laski', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(membre, nc-nom, membre, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(maoïste, adj-adj, maoïste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(10, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(maoïste, adj-adj, maoïste, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1965, pro-num, 1965, [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(communiste, adj-adj, communiste, [dl(0,n,n)-1]), ex_si(autour, p-prp, autour, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Laski', npp-nam, 'Laski', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(scission, nc-nom, scission, [n-1]), ex_si('sino-soviétique', adj-adj, 'sino-soviétique', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(11, Result) :-
      prob_parse([ ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Laski', npp-nam, 'Laski', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(opposant, nc-nom, opposant, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(12, Result) :-
      prob_parse([ ex_si('Né', vpp-ver:pper, 'Né', [dl(0,np,s_ppart)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Yirrkala', npp-nam, 'Yirrkala', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Territoire', nc-nam, 'Territoire', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Yunupingu', npp-nam, 'Yunupingu', [np-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(clan, nc-nom, clan, [n-1]), ex_si('Gumatj', npp-nam, 'Gumatj', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si('Yolngu', npp-nam, 'Yolngu', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(13, Result) :-
      prob_parse([ ex_si('Yunupingu', npp-nam, 'Yunupingu', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si('Yolngu', npp-nam, 'Yolngu', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(14, Result) :-
      prob_parse([ ex_si('Sandra', npp-nam, 'Sandra', [dr(0,np,np)-1]), ex_si('Goudie', npp-nam, 'Goudie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élue, vpp-ver:pper, élue, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(remportant, vpr-ver:ppre, remportant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(justesse, nc-nom, justesse, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Coromandel', npp-nam, 'Coromandel', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(battant, vpr-ver:ppre, battant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si('Max', npp-nam, 'Max', [dl(0,n,n)-1]), ex_si('Purnell', npp-nam, 'Purnell', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s))),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(poussant, vpr-ver:ppre, poussant, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(députée, nc-nom, députée, [n-1]), ex_si(verte, adj-adj, verte, [dl(0,n,n)-1]), ex_si(sortante, adj-adj, sortante, [dl(0,n,n)-1]), ex_si('Jeanette', npp-nam, 'Jeanette', [dl(0,n,n)-1]), ex_si('Fitzsimons', npp-nam, 'Fitzsimons', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(15, Result) :-
      prob_parse([ ex_si('Sandra', npp-nam, 'Sandra', [dr(0,np,np)-1]), ex_si('Goudie', npp-nam, 'Goudie', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(battue, vpp-ver:pper, battue, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Max', npp-nam, 'Max', [dr(0,np,np)-1]), ex_si('Purnell', npp-nam, 'Purnell', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(16, Result) :-
      prob_parse([ ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Minton', npp-nam, 'Minton', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1961, pro-num, 1961, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(17, Result) :-
      prob_parse([ ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Minton', npp-nam, 'Minton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(née, vpp-ver:pper, née, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(18, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Minton', npp-nam, 'Minton', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Maggie', npp-nam, 'Maggie', [dr(0,np,np)-1]), ex_si('Dempster', npp-nam, 'Dempster', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('One', npp-nam, 'One', [dr(0,n,n)-1]), ex_si('Man', npp-nam, 'Man', [dr(0,n,n)-1]), ex_si('Show', npp-nam, 'Show', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nicholas', npp-nam, 'Nicholas', [dr(0,np,np)-1]), ex_si('Maw', npp-nam, 'Maw', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(19, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(après, adv-adv, après, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(régulier, adj-adj, régulier, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Opéra', nc-nam, 'Opéra', [n-1]), ex_si(royal, adj-adj, royal, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Covent', npp-nam, 'Covent', [dr(0,np,np)-1]), ex_si('Garden', npp-nam, 'Garden', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(20, Result) :-
      prob_parse([ ex_si('Maggie', npp-nam, 'Maggie', [dr(0,np,np)-1]), ex_si('Dempster', npp-nam, 'Dempster', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royal', npp-nam, 'Royal', [dr(0,n,n)-1]), ex_si('Opera', npp-nam, 'Opera', [dr(0,n,n)-1]), ex_si('House', npp-nam, 'House', [dr(0,n,n)-1]), ex_si('Covent', npp-nam, 'Covent', [dr(0,n,n)-1]), ex_si('Garden', npp-nam, 'Garden', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(21, Result) :-
      prob_parse([ ex_si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), ex_si('Beaubien', npp-nam, 'Beaubien', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(élire, vinf-ver:infi, élire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(communes, nc-nom, communes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(circonscription, nc-nom, circonscription, [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sarnia-Lambton', npp-nam, 'Sarnia-Lambton', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2004, pro-num, 2004, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(22, Result) :-
      prob_parse([ ex_si('Marcel', npp-nam, 'Marcel', [dr(0,np,np)-1]), ex_si('Beaubien', npp-nam, 'Beaubien', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(communes, nc-nom, communes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(23, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(version, nc-nom, version, [n-1]), ex_si(sortie, vpp-ver:pper, sortie, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Super', npp-nam, 'Super', [dr(0,n,n)-1]), ex_si('Nintendo', npp-nam, 'Nintendo', [dr(0,n,n)-1]), ex_si('Entertainment', npp-nam, 'Entertainment', [dr(0,n,n)-1]), ex_si('System', npp-nam, 'System', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jeu, nc-nom, jeu, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Final', npp-nam, 'Final', [dr(0,np,np)-1]), ex_si('Fantasy', npp-nam, 'Fantasy', [np-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Biggs', npp-nam, 'Biggs', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('Vicks', npp-nam, 'Vicks', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(24, Result) :-
      prob_parse([ ex_si('Final', npp-nam, 'Final', [dr(0,np,np)-1]), ex_si('Fantasy', npp-nam, 'Fantasy', [np-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Super', npp-nam, 'Super', [dr(0,n,n)-1]), ex_si('Nintendo', npp-nam, 'Nintendo', [dr(0,n,n)-1]), ex_si('Entertainment', npp-nam, 'Entertainment', [dr(0,n,n)-1]), ex_si('System', npp-nam, 'System', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(25, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si('Drew', npp-nam, 'Drew', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si('Kennon', npp-nam, 'Kennon', [np-1]), ex_si(revienne, vs-ver:subp, revienne, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(réclamer, vinf-ver:infi, réclamer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(26, Result) :-
      prob_parse([ ex_si('Kennon', npp-nam, 'Kennon', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(suprême, adj-adj, suprême, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(27, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1956, pro-num, 1956, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Accardo', npp-nam, 'Accardo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Genève', npp-nam, 'Genève', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si(1958, pro-num, 1958, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(lauréat, nc-nom, lauréat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si('Paganini', npp-nam, 'Paganini', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Gênes', npp-nam, 'Gênes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(28, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(célèbres, adj-adj, célèbres, [dr(0,n,n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si('Caprices', nc-nom, 'Caprices', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paganini', npp-nam, 'Paganini', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(réenregistrés, vpp-ver:pper, réenregistrés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1999, pro-num, 1999, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(violon, nc-nom, violon, [n-1]), ex_si(seul, adj-adj, seul, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, nc-num, premier, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(enregistrer, vinf-ver:infi, enregistrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(six, adj-num, six, [dr(0,n,n)-1]), ex_si('Concertos', nc-nom, 'Concertos', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(violon, nc-nom, violon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paganini', npp-nam, 'Paganini', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(29, Result) :-
      prob_parse([ ex_si('Accardo', npp-nam, 'Accardo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(composé, vpp-ver:pper, composé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si('Caprices', nc-nam, 'Caprices', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(30, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1956, pro-num, 1956, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Accardo', npp-nam, 'Accardo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Genève', npp-nam, 'Genève', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si(1958, pro-num, 1958, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(lauréat, nc-nom, lauréat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si('Paganini', npp-nam, 'Paganini', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Gênes', npp-nam, 'Gênes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(31, Result) :-
      prob_parse([ ex_si('Accardo', npp-nam, 'Accardo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si('Paganini', npp-nam, 'Paganini', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gênes', npp-nam, 'Gênes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(32, Result) :-
      prob_parse([ ex_si('Dawson', npp-nam, 'Dawson', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(professeur, nc-nom, professeur, [np-1]), ex_si(associé, vpp-ver:pper, associé, [dl(0,np,np)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Melbourne', npp-nam, 'Melbourne', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si(adjoint, adj-adj, adjoint, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si('Monash', npp-nam, 'Monash', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(33, Result) :-
      prob_parse([ ex_si('Dawson', npp-nam, 'Dawson', [np-1]), ex_si(enseigne, v-ver:pres, enseigne, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si('Monash', npp-nam, 'Monash', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(34, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Golinkin', npp-nam, 'Golinkin', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éditeur, nc-nom, éditeur, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('dix-huit', det-num, 'dix-huit', [dr(0,np,n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(150, det-num, 150, [dr(0,np,n)-1]), ex_si(responsa, nc-nom, responsa, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(articles, nc-nom, articles, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(sermons, nc-nom, sermons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(ouvrages, nc-nom, ouvrages, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(35, Result) :-
      prob_parse([ ex_si('Golinkin', npp-nam, 'Golinkin', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('dix-huit', det-num, 'dix-huit', [dr(0,np,n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(36, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Golinkin', npp-nam, 'Golinkin', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(seul, adj-adj, seul, [dl(0,np,np)-1]), ex_si(responsable, nc-nom, responsable, [dl(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(republication, nc-nom, republication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(responsa, nc-nom, responsa, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Comité', nc-nam, 'Comité', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(juives, adj-adj, juives, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(rabbinique, adj-adj, rabbinique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(mettant, vpr-ver:ppre, mettant, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(disposition, nc-nom, disposition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(volumes, nc-nom, volumes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(37, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Golinkin', npp-nam, 'Golinkin', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(responsa, nc-nom, responsa, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Comité', nc-nam, 'Comité', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(juives, adj-adj, juives, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(rabbinique, adj-adj, rabbinique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(38, Result) :-
      prob_parse([ ex_si('Ryo', npp-nam, 'Ryo', [dr(0,np,np)-1]), ex_si('Okumoto', npp-nam, 'Okumoto', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Osaka', npp-nam, 'Osaka', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(claviériste, nc-nom, claviériste, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rock, nc-nom, rock, [n-1]), ex_si(progressif, adj-adj, progressif, [dl(0,n,n)-1]), ex_si('Spock\'s', npp-nam, 'Spock\'s', [dl(0,n,n)-1]), ex_si('Beard', npp-nam, 'Beard', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(39, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rock, nc-nom, rock, [n-1]), ex_si('Spock\'s', npp-nam, 'Spock\'s', [dl(0,n,n)-1]), ex_si('Beard', npp-nam, 'Beard', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(originaire, adj-adj, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(40, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(saisons, nc-nom, saisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Reinsdorf', npp-nam, 'Reinsdorf', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('White', npp-nam, 'White', [dr(0,n,n)-1]), ex_si('Sox', npp-nam, 'Sox', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,np,np),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(championnat, nc-nom, championnat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ligue', nc-nam, 'Ligue', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si('AL', npp-nam, 'AL', [dl(0,n,n)-1]), ex_si('Central', npp-nam, 'Central', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2000, pro-num, 2000, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(41, Result) :-
      prob_parse([ ex_si('Reinsdorf', npp-nam, 'Reinsdorf', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('White', npp-nam, 'White', [dr(0,n,n)-1]), ex_si('Sox', npp-nam, 'Sox', [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(saisons, nc-nom, saisons, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(42, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(saisons, nc-nom, saisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Reinsdorf', npp-nam, 'Reinsdorf', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('White', npp-nam, 'White', [dr(0,n,n)-1]), ex_si('Sox', npp-nam, 'Sox', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,np,np),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(championnat, nc-nom, championnat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ligue', nc-nam, 'Ligue', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si('AL', npp-nam, 'AL', [dl(0,n,n)-1]), ex_si('Central', npp-nam, 'Central', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2000, pro-num, 2000, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(43, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('White', npp-nam, 'White', [dr(0,n,n)-1]), ex_si('Sox', npp-nam, 'Sox', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(championnats, nc-nom, championnats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(44, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Major', npp-nam, 'Major', [dr(0,n,n)-1]), ex_si('League', npp-nam, 'League', [dr(0,n,n)-1]), ex_si('Baseball', npp-nam, 'Baseball', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(clubs, nc-nom, clubs, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(260, det-num, 260, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(biens, nc-nom, biens, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(appartenant, vpr-ver:ppre, appartenant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(minorités, nc-nom, minorités, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(45, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Major', npp-nam, 'Major', [dr(0,n,n)-1]), ex_si('League', npp-nam, 'League', [dr(0,n,n)-1]), ex_si('Baseball', npp-nam, 'Baseball', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(clubs, nc-nom, clubs, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(appartenant, vpr-ver:ppre, appartenant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(minorités, nc-nom, minorités, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(46, Result) :-
      prob_parse([ ex_si('Anu', npp-prp:det, 'Anu', [dr(0,np,np)-1]), ex_si('Kepa', npp-nam, 'Kepa', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mariée, vpp-ver:pper, mariée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Ro', npp-nam, 'Ro', [dr(0,np,np)-1]), ex_si('Teimumu', npp-nam, 'Teimumu', [dr(0,np,np)-1]), ex_si('Kepa', npp-nam, 'Kepa', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Adi', npp-nam, 'Adi', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(cheffe, nc-nom, cheffe, [n-1]), ex_si(fidjienne, adj-adj, fidjienne, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(entière, adj-adj, entière, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(47, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si('Filipe', npp-nam, 'Filipe', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sailosi', npp-nam, 'Sailosi', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Jr', npp-nam, 'Jr', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Asenaca', npp-nam, 'Asenaca', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Tupoutu\'a', npp-nam, 'Tupoutu\'a', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(48, Result) :-
      prob_parse([ ex_si('Anu', npp-prp:det, 'Anu', [dr(0,np,np)-1]), ex_si('Kepa', npp-nam, 'Kepa', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(fidjien, adj-adj, fidjien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(49, Result) :-
      prob_parse([ ex_si('Kepa', npp-nam, 'Kepa', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(marié, vpp-ver:pper, marié, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Ro', npp-abr, 'Ro', [dr(0,np,np)-1]), ex_si('Teimumu', npp-nam, 'Teimumu', [dr(0,np,np)-1]), ex_si('Kepa', npp-nam, 'Kepa', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Adi', npp-nam, 'Adi', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(cheffe, nc-nom, cheffe, [n-1]), ex_si(fidjienne, adj-adj, fidjienne, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(entière, adj-adj, entière, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(50, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si('Filipe', npp-nam, 'Filipe', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sailosi', npp-nam, 'Sailosi', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Jr', npp-nam, 'Jr', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Asenaca', npp-nam, 'Asenaca', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Tupoutu\'a', npp-nam, 'Tupoutu\'a', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(51, Result) :-
      prob_parse([ ex_si('Kepa', npp-nam, 'Kepa', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(52, Result) :-
      prob_parse([ ex_si('Sean', npp-nam, 'Sean', [dr(0,np,np)-1]), ex_si('Brown', npp-nam, 'Brown', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1976, adj-num, 1976, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Oshawa', npp-nam, 'Oshawa', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Ontario', npp-nam, 'Ontario', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(joueur, nc-nom, joueur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(utilité, nc-nom, utilité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(fort, adj-adj, fort, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ligue', nc-nam, 'Ligue', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(hockey, nc-nom, hockey, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(53, Result) :-
      prob_parse([ ex_si('Sean', npp-nam, 'Sean', [dr(0,np,np)-1]), ex_si('Brown', npp-nam, 'Brown', [np-1]), ex_si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ligue', nc-nam, 'Ligue', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(hockey, nc-nom, hockey, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(54, Result) :-
      prob_parse([ ex_si('Né', vpp-ver:pper, 'Né', [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Kingston-upon-Thames', npp-nam, 'Kingston-upon-Thames', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Surrey', npp-nam, 'Surrey', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Brockwell', npp-nam, 'Brockwell', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(cricket, nc-nom, cricket, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(forte, adj-adj, forte, [n-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Surrey', npp-nam, 'Surrey', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('19e', adj-num, '19e', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(55, Result) :-
      prob_parse([ ex_si('Brockwell', npp-nam, 'Brockwell', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Surrey', npp-nam, 'Surrey', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(56, Result) :-
      prob_parse([ ex_si('Né', vpp-ver:pper, 'Né', [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Kingston-upon-Thames', npp-nam, 'Kingston-upon-Thames', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Surrey', npp-nam, 'Surrey', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Brockwell', npp-nam, 'Brockwell', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(cricket, nc-nom, cricket, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(forte, adj-adj, forte, [n-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Surrey', npp-nam, 'Surrey', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('19e', adj-num, '19e', [n-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(57, Result) :-
      prob_parse([ ex_si('Brockwell', npp-nam, 'Brockwell', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('19ème', adj-num, '19ème', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(58, Result) :-
      prob_parse([ ex_si('Crime', nc-nom, 'Crime', [np-1]), ex_si(in, et-prp, in, [dr(0,dl(0,np,np),np)-1]), ex_si('Choir', npp-nam, 'Choir', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rock, nc-nom, rock, [n-1]), ex_si(progressif, adj-adj, progressif, [dl(0,n,n)-1]), ex_si(instrumental, adj-adj, instrumental, [dl(0,n,n)-1]), ex_si(originaire, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(59, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(formation, nc-nom, formation, [n-1]), ex_si(fondatrice, adj-adj, fondatrice, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(automne, nc-nom, automne, [n-1]), ex_si(2000, adj-num, 2000, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composée, vpp-ver:pper, composée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Kenny', npp-nam, 'Kenny', [dr(0,np,np)-1]), ex_si('Hopper', npp-nam, 'Hopper', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('At', et-prp, 'At', [dr(0,np,np)-1]), ex_si(the, et-det:art, the, [dr(0,np,n)-1]), ex_si('Drive-In', npp-nam, 'Drive-In', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('Jeff', npp-nam, 'Jeff', [dr(0,np,np)-1]), ex_si('Hunt', npp-nam, 'Hunt', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Zach', npp-nam, 'Zach', [dr(0,np,np)-1]), ex_si('Hill', npp-nam, 'Hill', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Hella', npp-nam, 'Hella', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(60, Result) :-
      prob_parse([ ex_si('Jeff', npp-nam, 'Jeff', [dr(0,np,np)-1]), ex_si('Hunt', npp-nam, 'Hunt', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),pp)-1]), ex_si('At', et-prp, 'At', [dr(0,pp,np)-1]), ex_si(the, et-det:art, the, [dr(0,np,n)-1]), ex_si('Drive-In', npp-nam, 'Drive-In', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(61, Result) :-
      prob_parse([ ex_si('Natta', npp-nam, 'Natta', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tête, nc-nom, tête, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('PCI', npp-abr, 'PCI', [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(congrès, nc-nom, congrès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Florence', npp-nam, 'Florence', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),np)-1]), ex_si(1988, pro-num, 1988, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(contraint, vpp-ver:pper, contraint, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(démissionner, vinf-ver:infi, démissionner, [dl(0,np,s_inf)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('Achille', npp-nam, 'Achille', [dr(0,np,np)-1]), ex_si('Occhetto', npp-nam, 'Occhetto', [np-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(succédé, vpp-ver:pper, succédé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(62, Result) :-
      prob_parse([ ex_si('Achille', npp-nam, 'Achille', [dr(0,np,np)-1]), ex_si('Occhetto', npp-nam, 'Occhetto', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dirigeant, nc-nom, dirigeant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('PCI', npp-abr, 'PCI', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(63, Result) :-
      prob_parse([ ex_si('Natta', npp-nam, 'Natta', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), ex_si('Cossutta', npp-nam, 'Cossutta', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(fortement, adv-adv, fortement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(opposé, vpp-ver:pper, opposé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Occhetto', npp-nam, 'Occhetto', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(scission, nc-nom, scission, [n-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bolognina', npp-nam, 'Bolognina', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(changer, vinf-ver:infi, changer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(64, Result) :-
      prob_parse([ ex_si('Cossutta', npp-nam, 'Cossutta', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(adversaire, nc-nom, adversaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Occhetto', npp-nam, 'Occhetto', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(65, Result) :-
      prob_parse([ ex_si('KOOG', npp-abr, 'KOOG', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, nc-num, premier, [dr(0,n,n)-1]), ex_si(affilié, nc-nom, affilié, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Pax', npp-nam, 'Pax', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Utah', npp-nam, 'Utah', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(changé, vpp-ver:pper, changé, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(lettres, nc-nom, lettres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(appel, nc-nom, appel, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si('KUPX', npp-nam, 'KUPX', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1998, adj-num, 1998, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(66, Result) :-
      prob_parse([ ex_si('KUPX', npp-abr, 'KUPX', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(filiale, nc-nom, filiale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('KOOG', npp-nam, 'KOOG', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(67, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(doctorat, nc-nom, doctorat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Wetherill', npp-nam, 'Wetherill', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(membre, nc-nom, membre, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(magnétisme, nc-nom, magnétisme, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('DTM', npp-abr, 'DTM', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Carnegie', npp-nam, 'Carnegie', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('D.C', npp-abr, 'D.C', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(68, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(diagramme, nc-nom, diagramme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Concordia', npp-nam, 'Concordia', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(isotopique, adj-adj, isotopique, [dl(0,n,n)-1]), ex_si('uranium-plomb', nc-nom, 'uranium-plomb', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(69, Result) :-
      prob_parse([ ex_si('Wetherill', npp-nam, 'Wetherill', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(diagramme, nc-nom, diagramme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Concordia', npp-nam, 'Concordia', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(70, Result) :-
      prob_parse([ ex_si('Prenant', vpr-ver:ppre, 'Prenant', [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Blackdown', npp-nam, 'Blackdown', [dr(0,n,n)-1]), ex_si('Hills', npp-nam, 'Hills', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(juste, adv-adv, juste, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intérieur, nc-nom, intérieur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(frontière, nc-nom, frontière, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Somerset', npp-nam, 'Somerset', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rivière, nc-nom, rivière, [n-1]), ex_si('Otter', npp-nam, 'Otter', [dl(0,n,n)-1]), ex_si(coule, v-ver:pres, coule, [dl(0,np,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), ex_si(32, adj-num, 32, [dr(0,n,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(finalement, adv-adv, finalement, [dl(1,s,s)-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Budleigh', npp-nam, 'Budleigh', [dr(0,np,np)-1]), ex_si('Salterton', npp-nam, 'Salterton', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(71, Result) :-
      prob_parse([ ex_si('Budleigh', npp-nam, 'Budleigh', [dr(0,np,np)-1]), ex_si('Salterton', npp-nam, 'Salterton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Somerset', npp-nam, 'Somerset', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(72, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(péninsule, nc-nom, péninsule, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gaspé', npp-nam, 'Gaspé', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(simplement, adv-adv, simplement, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Gaspé', npp-nam, 'Gaspé', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Gaspésie', npp-nam, 'Gaspésie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(péninsule, nc-nom, péninsule, [n-1]), ex_si('nord-américaine', adj-adj, 'nord-américaine', [dl(0,n,n)-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rive, nc-nom, rive, [n-1]), ex_si(sud, adj-nom, sud, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(fleuve, nc-nom, fleuve, [n-1]), ex_si('Saint-Laurent', npp-nam, 'Saint-Laurent', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Québec', npp-nam, 'Québec', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(73, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(péninsule, nc-nom, péninsule, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gaspé', npp-nam, 'Gaspé', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Québec', npp-nam, 'Québec', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(74, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(cotre, nc-nom, cotre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(collecteurs, nc-nom, collecteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(taxes, nc-nom, taxes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nommé, vpp-ver:pper, nommé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), ex_si('Lane', npp-nam, 'Lane', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(nièce, nc-nom, nièce, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('James', npp-nam, 'James', [dl(0,n,n)-1]), ex_si('Buchanan', npp-nam, 'Buchanan', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(hôtesse, nc-nom, hôtesse, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Buchanan', npp-nam, 'Buchanan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(75, Result) :-
      prob_parse([ ex_si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), ex_si('Lane', npp-nam, 'Lane', [np-1]), ex_si(possédait, v-ver:impf, possédait, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Revenue', npp-nam, 'Revenue', [n-1]), ex_si('Cutter', npp-nam, 'Cutter', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(76, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(cotre, nc-nom, cotre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(collecteurs, nc-nom, collecteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(taxes, nc-nom, taxes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nommé, vpp-ver:pper, nommé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(après, p-prp, après, [dr(0,pp,np)-1]), ex_si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), ex_si('Lane', npp-nam, 'Lane', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(nièce, nc-nom, nièce, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('James', npp-nam, 'James', [dl(0,n,n)-1]), ex_si('Buchanan', npp-nam, 'Buchanan', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(hôtesse, nc-nom, hôtesse, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Buchanan', npp-nam, 'Buchanan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(77, Result) :-
      prob_parse([ ex_si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), ex_si('Lane', npp-nam, 'Lane', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(proche, nc-nom, proche, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('James', npp-nam, 'James', [dl(0,n,n)-1]), ex_si('Buchanan', npp-nam, 'Buchanan', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(78, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(cotre, nc-nom, cotre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(collecteurs, nc-nom, collecteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(taxes, nc-nom, taxes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nommé, vpp-ver:pper, nommé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), ex_si('Lane', npp-nam, 'Lane', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(nièce, nc-nom, nièce, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('James', npp-nam, 'James', [dl(0,n,n)-1]), ex_si('Buchanan', npp-nam, 'Buchanan', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(hôtesse, nc-nom, hôtesse, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Buchanan', npp-nam, 'Buchanan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(79, Result) :-
      prob_parse([ ex_si('Harriet', npp-nam, 'Harriet', [dr(0,np,np)-1]), ex_si('Lane', npp-nam, 'Lane', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(80, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),n)-1]), ex_si(nouveau, adj-adj, nouveau, [n-1]), ex_si(transférée, vpp-ver:pper, transférée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marine, nc-nom, marine, [n-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Sécession', npp-nam, 'Sécession', [n-1]), ex_si(débute, v-ver:pres, débute, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1861, pro-num, 1861, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(81, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1861, pro-num, 1861, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(82, Result) :-
      prob_parse([ ex_si('Landowska', npp-nam, 'Landowska', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(composition, nc-nom, composition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(pièces, nc-nom, pièces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(musique, nc-nom, musique, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instrument, nc-nom, instrument, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(concerto, nc-nom, concerto, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(clavecin, nc-nom, clavecin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Manuel', npp-nam, 'Manuel', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Falla', npp-nam, 'Falla', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,np)-1]), ex_si('El', npp-nam, 'El', [dr(0,n,n)-1]), ex_si(retablo, et-nom, retablo, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Maese', npp-nam, 'Maese', [dr(0,np,np)-1]), ex_si('Pedro', npp-nam, 'Pedro', [np-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si(duquel, adj-adj, duquel, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [let-1]), ex_si(salon, nc-nom, salon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Winnaretta', npp-nam, 'Winnaretta', [dr(0,np,np)-1]), ex_si('Singer', npp-nam, 'Singer', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Poulenc', npp-nam, 'Poulenc', [np-1]), ex_si(et, cc-kon, et, [np-1]), ex_si('Landowska', npp-nam, 'Landowska', [dr(0,dl(0,np,np),np)-1]), ex_si(se, clr-pro:per, se, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rencontrés, vpp-ver:pper, rencontrés, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [n-1]), ex_si(fois, nc-nom, fois, [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(83, Result) :-
      prob_parse([ ex_si('Landowska', npp-nam, 'Landowska', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(clavecin, nc-nom, clavecin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(84, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(style, nc-nom, style, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(jardin, nc-nom, jardin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(visible, adj-adj, visible, [dl(0,n,n)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Gravetye', npp-nam, 'Gravetye', [dr(0,np,np)-1]), ex_si('Manor', npp-nam, 'Manor', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('West', npp-nam, 'West', [dr(0,n,n)-1]), ex_si('Sussex', npp-nam, 'Sussex', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(manucuré, vpp-ver:pper, manucuré, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(85, Result) :-
      prob_parse([ ex_si('Gravetye', npp-nam, 'Gravetye', [dr(0,np,np)-1]), ex_si('Manor', npp-nam, 'Manor', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(86, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(style, nc-nom, style, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(jardin, nc-nom, jardin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(visible, adj-adj, visible, [dl(0,n,n)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Gravetye', npp-nam, 'Gravetye', [dr(0,np,np)-1]), ex_si('Manor', npp-nam, 'Manor', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('West', npp-nam, 'West', [dr(0,n,n)-1]), ex_si('Sussex', npp-nam, 'Sussex', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(manucuré, vpp-ver:pper, manucuré, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(87, Result) :-
      prob_parse([ ex_si('Gravetye', npp-nam, 'Gravetye', [dr(0,np,np)-1]), ex_si('Manor', npp-nam, 'Manor', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('West', npp-nam, 'West', [n-1]), ex_si('Sussex', npp-nam, 'Sussex', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(88, Result) :-
      prob_parse([ ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(natale, adj-adj, natale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1861, pro-num, 1861, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(occuper, vinf-ver:infi, occuper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(jardins, nc-nom, jardins, [n-1]), ex_si(botaniques, adj-adj, botaniques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Regents', npp-nam, 'Regents', [dr(0,np,np)-1]), ex_si('Park', npp-nam, 'Park', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(horticole, adj-adj, horticole, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Veitch', npp-nam, 'Veitch', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(89, Result) :-
      prob_parse([ ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(90, Result) :-
      prob_parse([ ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(membre, nc-nom, membre, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Société', nc-nam, 'Société', [n-1]), ex_si(linnéenne, adj-adj, linnéenne, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(29, det-num, 29, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(correspondant, nc-nom, correspondant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(jardinage, nc-nom, jardinage, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Times', npp-nam, 'Times', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(91, Result) :-
      prob_parse([ ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(membre, nc-nom, membre, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Société', nc-nam, 'Société', [n-1]), ex_si(linnéenne, adj-adj, linnéenne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(92, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(influents, adj-adj, influents, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Wild', npp-nam, 'Wild', [dr(0,n,n)-1]), ex_si('Garden', npp-nam, 'Garden', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('English', npp-nam, 'English', [dr(0,n,n)-1]), ex_si('Flower', npp-nam, 'Flower', [dr(0,n,n)-1]), ex_si('Garden', npp-nam, 'Garden', [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(amie, nc-nom, amie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(toujours, adv-adv, toujours, [dr(0,np,np)-1]), ex_si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), ex_si('Jekyll', npp-nam, 'Jekyll', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contribué, vpp-ver:pper, contribué, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(sections, nc-nom, sections, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(93, Result) :-
      prob_parse([ ex_si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), ex_si('Jekyll', npp-nam, 'Jekyll', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('co-auteur', nc-nom, 'co-auteur', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Wild', npp-nam, 'Wild', [dr(0,n,n)-1]), ex_si('Garden', npp-nam, 'Garden', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(94, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(rencontre, nc-nom, rencontre, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), ex_si('Jekyll', npp-nam, 'Jekyll', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1875, pro-num, 1875, [np-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(principes, nc-nom, principes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conception, nc-nom, conception, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entretenu, vpp-ver:pper, entretenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(amitié, nc-nom, amitié, [n-1]), ex_si(étroite, adj-adj, étroite, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(association, nc-nom, association, [n-1]), ex_si(professionnelle, adj-adj, professionnelle, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(95, Result) :-
      prob_parse([ ex_si('Robinson', npp-nam, 'Robinson', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(partenaire, nc-nom, partenaire, [n-1]), ex_si(professionnel, adj-adj, professionnel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), ex_si('Jekyll', npp-nam, 'Jekyll', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(96, Result) :-
      prob_parse([ ex_si('British', npp-nam, 'British', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [dr(0,np,np)-1]), ex_si('Ltd', npp-nam, 'Ltd', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créée, vpp-ver:pper, créée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Allied', npp-nam, 'Allied', [dr(0,np,np)-1]), ex_si('British', npp-nam, 'British', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(1935, adj-num, 1935, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Spartan', npp-nam, 'Spartan', [dr(0,np,np)-1]), ex_si('Air', npp-nam, 'Air', [dr(0,np,np)-1]), ex_si('Lines', npp-nam, 'Lines', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('United', npp-nam, 'United', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(97, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acquis, vpp-ver:pper, acquis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Hillman\'s', npp-nam, 'Hillman\'s', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(définitif, adj-adj, définitif, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(transféré, vpp-ver:pper, transféré, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(nouvel, adj-adj, nouvel, [dr(0,n,n)-1]), ex_si(aéroport, nc-nom, aéroport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gatwick', npp-nam, 'Gatwick', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(98, Result) :-
      prob_parse([ ex_si('Spartan', npp-nam, 'Spartan', [dr(0,np,np)-1]), ex_si('Air', npp-nam, 'Air', [dr(0,np,np)-1]), ex_si('Lines', npp-nam, 'Lines', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acquis, vpp-ver:pper, acquis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('United', npp-nam, 'United', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(99, Result) :-
      prob_parse([ ex_si('British', npp-nam, 'British', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [dr(0,np,np)-1]), ex_si('Ltd', npp-nam, 'Ltd', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créée, vpp-ver:pper, créée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Allied', npp-nam, 'Allied', [dr(0,np,np)-1]), ex_si('British', npp-nam, 'British', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(1935, adj-num, 1935, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Spartan', npp-nam, 'Spartan', [dr(0,np,np)-1]), ex_si('Air', npp-nam, 'Air', [dr(0,np,np)-1]), ex_si('Lines', npp-nam, 'Lines', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('United', npp-nam, 'United', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(100, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acquis, vpp-ver:pper, acquis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Hillman\'s', npp-nam, 'Hillman\'s', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(définitif, adj-adj, définitif, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(transféré, vpp-ver:pper, transféré, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(nouvel, adj-adj, nouvel, [dr(0,n,n)-1]), ex_si(aéroport, nc-nom, aéroport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gatwick', npp-nam, 'Gatwick', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(101, Result) :-
      prob_parse([ ex_si('Hillman\'s', npp-nam, 'Hillman\'s', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vendue, vpp-ver:pper, vendue, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('British', npp-nam, 'British', [dr(0,np,np)-1]), ex_si('Airways', npp-nam, 'Airways', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(102, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(château, nc-nom, château, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Crathes', npp-nam, 'Crathes', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(ancestral, adj-adj, ancestral, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Burnett', npp-nam, 'Burnett', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Leys', npp-nam, 'Leys', [np-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,np),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Trust', npp-nam, 'Trust', [n-1]), ex_si(for, et-prp, for, [dr(0,dl(0,n,n),np)-1]), ex_si('Scotland', npp-nam, 'Scotland', [np-1]), ex_si(par, p-prp, par, [np-1]), ex_si(le, det-det:art, le, [dr(0,pp_par,np)-1]), ex_si('13e', adj-num, '13e', [dr(0,np,n)-1]), ex_si(baronnet, nc-nom, baronnet, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Leys', npp-nam, 'Leys', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sir', npp-nam, 'Sir', [dr(0,np,np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Burnett', npp-nam, 'Burnett', [np-1]), ex_si(en, p-prp, en, [np-1]), ex_si(1951, pro-num, 1951, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(103, Result) :-
      prob_parse([ ex_si('Sir', nc-abr, 'Sir', [dr(0,np,np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Burnett', npp-nam, 'Burnett', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(château, nc-nom, château, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Crathes', npp-nam, 'Crathes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(104, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(château, nc-nom, château, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Crathes', npp-nam, 'Crathes', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(ancestral, adj-adj, ancestral, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Burnetts', npp-nam, 'Burnetts', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Leys', npp-nam, 'Leys', [np-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,np,np),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Trust', npp-nam, 'Trust', [n-1]), ex_si(for, et-prp, for, [dr(0,dl(0,n,n),np)-1]), ex_si('Scotland', npp-nam, 'Scotland', [np-1]), ex_si(par, p-prp, par, [np-1]), ex_si(le, det-det:art, le, [dr(0,pp_par,np)-1]), ex_si('13e', adj-num, '13e', [dr(0,np,n)-1]), ex_si(baronnet, nc-nom, baronnet, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Leys', npp-nam, 'Leys', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sir', nc-nam, 'Sir', [dr(0,np,np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Burnett', npp-nam, 'Burnett', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1951, pro-num, 1951, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(105, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(château, nc-nom, château, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Crathes', npp-nam, 'Crathes', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Trust', npp-nam, 'Trust', [n-1]), ex_si(for, et-prp, for, [dr(0,dl(0,n,n),np)-1]), ex_si('Scotland', npp-nam, 'Scotland', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(106, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Proche-Orient', npp-nam, 'Proche-Orient', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), ex_si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jérusalem', npp-nam, 'Jérusalem', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), ex_si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mont, nc-nom, mont, [n-1]), ex_si('Scopus', npp-nam, 'Scopus', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Jérusalem-Est', npp-nam, 'Jérusalem-Est', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(107, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Proche-Orient', npp-nam, 'Proche-Orient', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', npp-nam, 'Université', [n-1]), ex_si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), ex_si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jérusalem', npp-nam, 'Jérusalem', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Jérusalem', npp-nam, 'Jérusalem', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(108, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), ex_si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Jérusalem', npp-nam, 'Jérusalem', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(abord, nc-nom, abord, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('City', npp-nam, 'City', [n-1]), ex_si('Hotel', npp-nam, 'Hotel', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Jérusalem-Est', npp-nam, 'Jérusalem-Est', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(109, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si('Brigham', npp-nam, 'Brigham', [dl(0,n,n)-1]), ex_si('Young', npp-nam, 'Young', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(110, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(controverse, nc-nom, controverse, [n-1]), ex_si(majeure, adj-adj, majeure, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(éclaté, vpp-ver:pper, éclaté, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(juif, adj-adj, juif, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(conduisant, vpr-ver:ppre, conduisant, [dr(0,dl(0,np,s_ppres),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(diplomatiques, adj-adj, diplomatiques, [dl(0,n,n)-1]), ex_si(minutieuses, adj-adj, minutieuses, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Église', nc-nam, 'Église', [n-1]), ex_si('LDS', npp-abr, 'LDS', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(juifs, adj-adj, juifs, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(assurer, vinf-ver:infi, assurer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Église', npp-nam, 'Église', [n-1]), ex_si('LDS', npp-nam, 'LDS', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(utiliserait, v-ver:cond, utiliserait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prosélytisme, nc-nom, prosélytisme, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(juif, adj-adj, juif, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,n)-1])], Result).
sent(111, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Église', nc-nom, 'Église', [n-1]), ex_si('LDS', npp-abr, 'LDS', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(bannie, vpp-ver:pper, bannie, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(112, Result) :-
      prob_parse([ ex_si('Oscar', npp-nam, 'Oscar', [dr(0,np,np)-1]), ex_si('Chisini', npp-nam, 'Chisini', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(1889, adj-num, 1889, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Bergame', npp-nam, 'Bergame', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1967, adj-num, 1967, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Milan', npp-nam, 'Milan', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mathématicien, nc-nom, mathématicien, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(113, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moyenne, nc-nom, moyenne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chisini', npp-nam, 'Chisini', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1929, pro-num, 1929, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(114, Result) :-
      prob_parse([ ex_si('Oscar', npp-nam, 'Oscar', [dr(0,np,np)-1]), ex_si('Chisini', npp-nam, 'Chisini', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1967, pro-num, 1967, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(115, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1929, pro-num, 1929, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(fonde, v-ver:pres, fonde, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mathématiques, nc-nom, mathématiques, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('Istituto', npp-nam, 'Istituto', [n-1]), ex_si(di, et-prp, di, [dr(0,dl(0,n,n),np)-1]), ex_si('Matematica', npp-nam, 'Matematica', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Milan', npp-nam, 'Milan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Gian', npp-nam, 'Gian', [dr(0,np,np)-1]), ex_si('Antonio', npp-nam, 'Antonio', [np-1]), ex_si('Maggi', npp-nam, 'Maggi', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Giulio', npp-nam, 'Giulio', [np-1]), ex_si('Vivanti', npp-nam, 'Vivanti', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(116, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mathématiques, nc-nom, mathématiques, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Milan', npp-nam, 'Milan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(117, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1929, pro-num, 1929, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(fonde, v-ver:pres, fonde, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mathématiques, nc-nom, mathématiques, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('Istituto', npp-nam, 'Istituto', [n-1]), ex_si(di, et-prp, di, [dr(0,dl(0,n,n),np)-1]), ex_si('Matematica', npp-nam, 'Matematica', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Milan', npp-nam, 'Milan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Gian', npp-nam, 'Gian', [dr(0,np,np)-1]), ex_si('Antonio', npp-nam, 'Antonio', [np-1]), ex_si('Maggi', npp-nam, 'Maggi', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Giulio', npp-nam, 'Giulio', [np-1]), ex_si('Vivanti', npp-nam, 'Vivanti', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(118, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Milan', npp-nam, 'Milan', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Gian', npp-nam, 'Gian', [dr(0,np,np)-1]), ex_si('Antonio', npp-nam, 'Antonio', [dr(0,np,np)-1]), ex_si('Maggi', npp-nam, 'Maggi', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Giulio', npp-nam, 'Giulio', [dr(0,np,np)-1]), ex_si('Vivanti', npp-nam, 'Vivanti', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(119, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Japonais', nc-nam, 'Japonais', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendus, vpp-ver:pper, rendus, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(donc, adv-adv, donc, [dr(0,s,s)-1]), ex_si('Magdalena', npp-nam, 'Magdalena', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(libérées, vpp-ver:pper, libérées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tyrannie, nc-nom, tyrannie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(120, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendues, vpp-ver:pper, rendues, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(121, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Japonais', nc-nam, 'Japonais', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendus, vpp-ver:pper, rendus, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(25, adj-num, 25, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1945, adj-num, 1945, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(donc, adv-adv, donc, [dr(0,s,s)-1]), ex_si('Magdalena', npp-nam, 'Magdalena', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(libérées, vpp-ver:pper, libérées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tyrannie, nc-nom, tyrannie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(122, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vaincu, vpp-ver:pper, vaincu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(123, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(grotte, nc-nom, grotte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Kazumura', npp-nam, 'Kazumura', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(long, adj-adj, long, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(profond, adj-adj, profond, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(tubes, nc-nom, tubes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lave, nc-nom, lave, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(124, Result) :-
      prob_parse([ ex_si('Située', vpp-ver:pper, 'Située', [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pentes, nc-nom, pentes, [n-1]), ex_si('sud-est', adj-adj, 'sud-est', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mauna', npp-nam, 'Mauna', [dr(0,n,n)-1]), ex_si('Loa', npp-nam, 'Loa', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si(sud, adj-adj, sud, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('Big', npp-nam, 'Big', [dr(0,np,np)-1]), ex_si('Island', npp-nam, 'Island', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Hawai\'i', npp-nam, 'Hawai\'i', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(125, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(tube, nc-nom, tube, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lave, nc-nom, lave, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Hawaï', npp-nam, 'Hawaï', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(126, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(strass, nc-nom, strass, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(imitation, nc-nom, imitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(diamant, nc-nom, diamant, [n-1]), ex_si(fabriquée, vpp-ver:pper, fabriquée, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(cristal, nc-nom, cristal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(roche, nc-nom, roche, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(verre, nc-nom, verre, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acrylique, nc-nom, acrylique, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(127, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(diamants, nc-nom, diamants, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fabriqués, vpp-ver:pper, fabriqués, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(verre, nc-nom, verre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(128, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(costume, nc-nom, costume, [n-1]), ex_si('Nudie', npp-nam, 'Nudie', [dl(0,n,n)-1]), ex_si(serti, vpp-ver:pper, serti, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(strass, nc-nom, strass, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Nudie', npp-nam, 'Nudie', [dr(0,np,np)-1]), ex_si('Cohn', npp-nam, 'Cohn', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1940, adj-num, 1940, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(américanisation, nc-nom, américanisation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(costume, nc-nom, costume, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lumières, nc-nom, lumières, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(matador, nc-nom, matador, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(129, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(costume, nc-nom, costume, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lumières, nc-nom, lumières, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(matador, nc-nom, matador, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Nudie', npp-nam, 'Nudie', [dr(0,np,np)-1]), ex_si('Cohn', npp-nam, 'Cohn', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(130, Result) :-
      prob_parse([ ex_si('Diplômée', vpp-ver:pper, 'Diplômée', [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faculté, nc-nom, faculté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médecine, nc-nom, médecine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('St', npp-nam, 'St', [dl(0,n,n)-1]), ex_si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), ex_si('Wood', npp-nam, 'Wood', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chirurgien, nc-nom, chirurgien, [n-1]), ex_si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), ex_si('Keirath', npp-nam, 'Keirath', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(occidentale, adj-adj, occidentale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(émigrer, vinf-ver:infi, émigrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Perth', npp-nam, 'Perth', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(131, Result) :-
      prob_parse([ ex_si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), ex_si('Wood', npp-nam, 'Wood', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(diplômée, vpp-ver:pper, diplômée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faculté, nc-nom, faculté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médecine, nc-nom, médecine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('St', npp-nam, 'St', [dl(0,n,n)-1]), ex_si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(132, Result) :-
      prob_parse([ ex_si('Diplômée', vpp-ver:pper, 'Diplômée', [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faculté, nc-nom, faculté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médecine, nc-nom, médecine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('St', npp-nam, 'St', [dl(0,n,n)-1]), ex_si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), ex_si('Wood', npp-nam, 'Wood', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chirurgien, nc-nom, chirurgien, [n-1]), ex_si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), ex_si('Keirath', npp-nam, 'Keirath', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(occidentale, adj-adj, occidentale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(émigrer, vinf-ver:infi, émigrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Perth', npp-nam, 'Perth', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(133, Result) :-
      prob_parse([ ex_si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), ex_si('Wood', npp-nam, 'Wood', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), ex_si('Keirath', npp-nam, 'Keirath', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(134, Result) :-
      prob_parse([ ex_si('Diplômée', vpp-ver:pper, 'Diplômée', [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faculté, nc-nom, faculté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médecine, nc-nom, médecine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('St', npp-nam, 'St', [dl(0,n,n)-1]), ex_si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), ex_si('Wood', npp-nam, 'Wood', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chirurgien, nc-nom, chirurgien, [n-1]), ex_si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), ex_si('Keirath', npp-nam, 'Keirath', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(occidentale, adj-adj, occidentale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(émigrer, vinf-ver:infi, émigrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Perth', npp-nam, 'Perth', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(135, Result) :-
      prob_parse([ ex_si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), ex_si('Keirath', npp-nam, 'Keirath', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(136, Result) :-
      prob_parse([ ex_si('Diplômée', vpp-ver:pper, 'Diplômée', [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faculté, nc-nom, faculté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médecine, nc-nom, médecine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('St', npp-nam, 'St', [dl(0,n,n)-1]), ex_si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), ex_si('Wood', npp-nam, 'Wood', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(épouser, vinf-ver:infi, épouser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chirurgien, nc-nom, chirurgien, [n-1]), ex_si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), ex_si('Keirath', npp-nam, 'Keirath', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(occidentale, adj-adj, occidentale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(émigrer, vinf-ver:infi, émigrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Perth', npp-nam, 'Perth', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(137, Result) :-
      prob_parse([ ex_si('Fiona', npp-nam, 'Fiona', [dr(0,np,np)-1]), ex_si('Wood', npp-nam, 'Wood', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(australienne, adj-adj, australienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(138, Result) :-
      prob_parse([ ex_si('Maldon', npp-nam, 'Maldon', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Victoria', npp-nam, 'Victoria', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mount', npp-nam, 'Mount', [dr(0,np,np)-1]), ex_si('Alexander', npp-nam, 'Alexander', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(139, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(porte, v-ver:pres, porte, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(140, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Maldon', npp-nam, 'Maldon', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(141, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(toile, nc-nom, toile, [n-1]), ex_si(infinie, adj-adj, infinie, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(idée, nc-nom, idée, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(page, nc-nom, page, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si(dessinée, vpp-ver:pper, dessinée, [dl(0,n,n)-1]), ex_si(numérique, adj-adj, numérique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(théoriquement, adv-adv, théoriquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(infinie, adj-adj, infinie, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(142, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Scott', npp-nam, 'Scott', [dr(0,np,np)-1]), ex_si('McCloud', npp-nam, 'McCloud', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si('Reinventing', npp-nam, 'Reinventing', [dl(0,n,n)-1]), ex_si('Comics', npp-nam, 'Comics', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(143, Result) :-
      prob_parse([ ex_si('Reinventing', npp-nam, 'Reinventing', [dr(0,np,np)-1]), ex_si('Comics', npp-nam, 'Comics', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Scott', npp-nam, 'Scott', [dr(0,np,np)-1]), ex_si('McCloud', npp-nam, 'McCloud', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(144, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2004, adj-num, 2004, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si('InfiniteCanvas', npp-nam, 'InfiniteCanvas', [np-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('IC', npp-abr, 'IC', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(publiée, vpp-ver:pper, publiée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si('Markus', npp-nam, 'Markus', [dl(0,n,n)-1]), ex_si('Müller', npp-nam, 'Müller', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(tentant, vpr-ver:ppre, tentant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(apporter, vinf-ver:infi, apporter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(courants, adj-adj, courants, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(toiles, nc-nom, toiles, [n-1]), ex_si(infinies, adj-adj, infinies, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(145, Result) :-
      prob_parse([ ex_si('InfiniteCanvas', npp-nam, 'InfiniteCanvas', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Markus', npp-nam, 'Markus', [dr(0,np,np)-1]), ex_si('Müller', npp-nam, 'Müller', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(146, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(inhabitée, adj-adj, inhabitée, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(volcanique, adj-adj, volcanique, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si('Austral', npp-nam, 'Austral', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(505, det-num, 505, [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('nord-est', nc-nom, 'nord-est', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cap, nc-nom, cap, [n-1]), ex_si('Adare', npp-nam, 'Adare', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extrémité, nc-nom, extrémité, [n-1]), ex_si('nord-est', nc-nom, 'nord-est', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si('Victoria', npp-nam, 'Victoria', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(147, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(505, det-num, 505, [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('nord-est', nc-nom, 'nord-est', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Victoria', npp-nam, 'Victoria', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(148, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(inhabitée, adj-adj, inhabitée, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(volcanique, adj-adj, volcanique, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si('Austral', npp-nam, 'Austral', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(505, det-num, 505, [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('nord-est', nc-nom, 'nord-est', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cap, nc-nom, cap, [n-1]), ex_si('Adare', npp-nam, 'Adare', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extrémité, nc-nom, extrémité, [n-1]), ex_si('nord-est', nc-nom, 'nord-est', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si('Victoria', npp-nam, 'Victoria', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(149, Result) :-
      prob_parse([ ex_si('Aucune', det-pro:ind, 'Aucune', [dr(0,np,n)-1]), ex_si(personne, pro-pro:ind, personne, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(vit, v-ver:pres, vit, [dl(0,np,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(150, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(mesure, v-ver:pres, mesure, [dr(0,dl(0,np,s),np)-1]), ex_si(370, det-num, 370, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(long, nc-nom, long, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(180, det-num, 180, [dr(0,np,n)-1]), ex_si(m, nc-abr, m, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(large, nc-nom, large, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(altitude, nc-nom, altitude, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élevée, vpp-ver:pper, élevée, [dl(0,n,n)-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pilier, nc-nom, pilier, [n-1]), ex_si('Haggits', npp-nam, 'Haggits', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(63, det-num, 63, [dr(0,np,n)-1]), ex_si(m, nc-abr, m, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(151, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pilier, nc-nom, pilier, [n-1]), ex_si('Haggits', npp-nam, 'Haggits', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(152, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(débarquée, vpp-ver:pper, débarquée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1902, adj-num, 1902, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitaine, nc-nom, capitaine, [n-1]), ex_si('William', npp-nam, 'William', [dl(0,n,n)-1]), ex_si('Colbeck', npp-nam, 'Colbeck', [dl(0,n,n)-1]), ex_si(commandant, nc-nom, commandant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Morning', npp-nam, 'Morning', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secours, nc-nom, secours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expédition, nc-nom, expédition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(capitaine, nc-nom, capitaine, [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('F.', npp-abr, 'F.', [dl(0,n,n)-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(153, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(alors, adv-adv, alors, [dl(1,s,s)-1]), ex_si(nommée, vpp-ver:pper, nommée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(île, nc-nom, île, [dr(0,np,np)-1]), ex_si('Markham', npp-nam, 'Markham', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(154, Result) :-
      prob_parse([ ex_si('William', npp-nam, 'William', [dr(0,np,np)-1]), ex_si('Colbeck', npp-nam, 'Colbeck', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Markham', npp-nam, 'Markham', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(1902, adj-num, 1902, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(155, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dépendance, nc-nom, dépendance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Ross', npp-nam, 'Ross', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(revendiquée, vpp-ver:pper, revendiquée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Nouvelle-Zélande', npp-nam, 'Nouvelle-Zélande', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(156, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si('Scott', npp-nam, 'Scott', [dl(0,n,n)-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Nouvelle-Zélande', npp-nam, 'Nouvelle-Zélande', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(157, Result) :-
      prob_parse([ ex_si('Ullmann', npp-nam, 'Ullmann', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(enseigné, vpp-ver:pper, enseigné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chimie, nc-nom, chimie, [n-1]), ex_si(technique, adj-adj, technique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1905, pro-num, 1905, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1913, pro-num, 1913, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1922, pro-num, 1922, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1925, pro-num, 1925, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Technischen', npp-nam, 'Technischen', [dr(0,n,n)-1]), ex_si('Hochschule', npp-nam, 'Hochschule', [dr(0,n,n)-1]), ex_si('Berlin', npp-nam, 'Berlin', [dl(0,n,n)-1]), ex_si('-aujourd\'hui', ponct-adv, '-aujourd\'hui', [dr(0,dl(0,n,n),n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(technique, adj-adj, technique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(abord, nc-nom, abord, [n-1]), ex_si(comme, adv-adv, comme, [n-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(enseignant, adj-adj, enseignant, [dl(0,n,n)-1]), ex_si(ordinaire, adj-adj, ordinaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(158, Result) :-
      prob_parse([ ex_si('Ullmann', npp-nam, 'Ullmann', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Technischen', npp-nam, 'Technischen', [dr(0,n,n)-1]), ex_si('Hochschule', npp-nam, 'Hochschule', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(159, Result) :-
      prob_parse([ ex_si('Ullmann', npp-nam, 'Ullmann', [np-1]), ex_si(was, et-ver:pres, was, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(married, et-nom, married, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(to, et-prp, to, [dr(0,pp_a,np)-1]), ex_si('Irma', npp-nam, 'Irma', [dr(0,np,np)-1]), ex_si('Goldberg', npp-nam, 'Goldberg', [np-1]), ex_si(who, et-pro:rel, who, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(was, et-adv, was, [dr(0,dl(0,np,s),np)-1]), ex_si(his, et-det:art, his, [dr(0,np,n)-1]), ex_si(assistant, et-nom, assistant, [n-1]), ex_si(from, et-prp, from, [dr(0,dl(0,n,n),np)-1]), ex_si(1905, pro-num, 1905, [np-1]), ex_si(to, et-prp, to, [dr(0,dl(0,np,np),np)-1]), ex_si(1910, pro-num, 1910, [np-1]), ex_si(at, et-prp, at, [dr(0,dl(0,np,np),np)-1]), ex_si(his, et-det:art, his, [dr(0,np,n)-1]), ex_si(laboratory, et-nom, laboratory, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(160, Result) :-
      prob_parse([ ex_si('Ullmann', npp-nam, 'Ullmann', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Irma', npp-nam, 'Irma', [dr(0,np,np)-1]), ex_si('Goldberg', npp-nam, 'Goldberg', [np-1]), ex_si(got, et-prp, got, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(married, et-nom, married, [dl(0,np,s_ppart)-1]), ex_si(in, et-prp, in, [dr(0,dl(1,s,s),np)-1]), ex_si(1905, pro-num, 1905, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(161, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1950, adj-num, 1950, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(radiotélescopes, nc-nom, radiotélescopes, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(suffisante, adj-adj, suffisante, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(identifier, vinf-ver:infi, identifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sources, nc-nom, sources, [n-1]), ex_si(radio, nc-nom, radio, [dl(0,n,n)-1]), ex_si(spécifiques, adj-adj, spécifiques, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(homologues, nc-nom, homologues, [n-1]), ex_si(optiques, adj-adj, optiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(quasars, nc-nom, quasars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(162, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(quasars, nc-nom, quasars, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverts, vpp-ver:pper, découverts, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1950, adj-num, 1950, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(163, Result) :-
      prob_parse([ ex_si('Muybridge', npp-nam, 'Muybridge', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(auparavant, adv-adv, auparavant, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(invention, nc-nom, invention, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(appelait, v-ver:impf, appelait, [dr(0,dr(0,dl(0,np,s),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Zoopraxiscope', npp-nam, 'Zoopraxiscope', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(164, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Zoopraxiscope', npp-nam, 'Zoopraxiscope', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Muybridge', npp-nam, 'Muybridge', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(165, Result) :-
      prob_parse([ ex_si('Edison', npp-nam, 'Edison', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Dickson', npp-nam, 'Dickson', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Edison', npp-nam, 'Edison', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(progressé, vpp-ver:pper, progressé, [dl(0,np,s_ppart)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conception, nc-nom, conception, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(certain, adj-adj, certain, [dr(0,n,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(166, Result) :-
      prob_parse([ ex_si('Dickson', npp-nam, 'Dickson', [np-1]), ex_si(travaillait, v-ver:impf, travaillait, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Edison', npp-nam, 'Edison', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(167, Result) :-
      prob_parse([ ex_si('Peu', adv-adv, 'Peu', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(après, adv-adv, après, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(automobile, nc-nom, automobile, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(naissante, adj-adj, naissante, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si(efforts, nc-nom, efforts, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('Selden', npp-nam, 'Selden', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(réellement, adv-adv, réellement, [dl(1,s,s)-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(fonctionnel, adj-adj, fonctionnel, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(automobile, nc-nom, automobile, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(revendication, nc-nom, revendication, [n-1]), ex_si(crédible, adj-adj, crédible, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(breveté, vpp-ver:pper, breveté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(automobile, nc-nom, automobile, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(168, Result) :-
      prob_parse([ ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('Selden', npp-nam, 'Selden', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(automobile, nc-nom, automobile, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(169, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si('12e', adj-num, '12e', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tournoi, nc-nom, tournoi, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(si, adv-adv, si, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('Henri', npp-nam, 'Henri', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(jugea, v-ver:simp, jugea, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(nécessaire, adj-adj, nécessaire, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(interdire, vinf-ver:infi, interdire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(rassemblait, v-ver:impf, rassemblait, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(tant, adv-adv, tant, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(barons, nc-nom, barons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(chevaliers, nc-nom, chevaliers, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(170, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('Henri', npp-nam, 'Henri', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interdit, vpp-ver:pper, interdit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tournois, nc-nom, tournois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(171, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chroniqueur, nc-nom, chroniqueur, [n-1]), ex_si(rapporte, v-ver:pres, rapporte, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(violente, adj-adj, violente, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1066, pro-num, 1066, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(baron, nc-nom, baron, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(nommé, vpp-ver:pper, nommé, [dr(0,dl(0,n,n),np)-1]), ex_si('Geoffroi', npp-nam, 'Geoffroi', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Preulli', npp-nam, 'Preulli', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(témoignage, nc-nom, témoignage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(contemporains, nc-nom, contemporains, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tournois, nc-nom, tournois, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(172, Result) :-
      prob_parse([ ex_si('Geoffroi', npp-nam, 'Geoffroi', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Preulli', npp-nam, 'Preulli', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tournoi, nc-nom, tournoi, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(173, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mélange, nc-nom, mélange, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Buckley', npp-nam, 'Buckley', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(sirop, nc-nom, sirop, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(toux, nc-nom, toux, [n-1]), ex_si(inventé, vpp-ver:pper, inventé, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1919, pro-num, 1919, [np-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(produit, vpp-ver:pper, produit, [dl(0,n,n)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(noté, vpp-ver:pper, noté, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(goût, nc-nom, goût, [n-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(amer, adj-adj, amer, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(174, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mélange, nc-nom, mélange, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Buckley', npp-nam, 'Buckley', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(remède, nc-nom, remède, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(toux, nc-nom, toux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(175, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(nouveau, adj-adj, nouveau, [n-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Holles', npp-nam, 'Holles', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(176, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1711, pro-num, 1711, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(éteignit, v-ver:simp, éteignit, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(domaines, nc-nom, domaines, [n-1]), ex_si(passèrent, v-ver:simp, passèrent, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(neveu, nc-nom, neveu, [n-1]), ex_si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), ex_si('Pelham', npp-nam, 'Pelham', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(trois, det-num, trois, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(reçut, v-ver:simp, reçut, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(177, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1757, pro-num, 1757, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(supplémentaire, adj-adj, supplémentaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Newcastle-under-Lyne', npp-nam, 'Newcastle-under-Lyne', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(178, Result) :-
      prob_parse([ ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Holles', npp-nam, 'Holles', [np-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Newcastle-under-Lyne', npp-nam, 'Newcastle-under-Lyne', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(179, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('Alcalde', npp-nam, 'Alcalde', [n-1]), ex_si('Teniente', npp-nam, 'Teniente', [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),n)-1]), ex_si('Capitan', npp-nam, 'Capitan', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haute, adj-adj, haute, [dr(0,n,n)-1]), ex_si(autorité, nc-nom, autorité, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('Don', npp-nam, 'Don', [dr(0,np,np)-1]), ex_si('Mauricio', npp-nam, 'Mauricio', [dr(0,np,np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Mateo', npp-nam, 'Mateo', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(180, Result) :-
      prob_parse([ ex_si('Don', npp-nam, 'Don', [dr(0,np,np)-1]), ex_si('Mauricio', npp-nam, 'Mauricio', [dr(0,np,np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Mateo', npp-nam, 'Mateo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(occupé, vpp-ver:pper, occupé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Capitan', npp-nam, 'Capitan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(181, Result) :-
      prob_parse([ ex_si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), ex_si('Seasonings', npp-nam, 'Seasonings', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(thé, nc-nom, thé, [n-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Boulder', npp-nam, 'Boulder', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Colorado', npp-nam, 'Colorado', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(spécialisée, vpp-ver:pper, spécialisée, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tisanes, nc-nom, tisanes, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(vend, v-ver:pres, vend, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(thé, nc-nom, thé, [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(thé, nc-nom, thé, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mélanges, nc-nom, mélanges, [n-1]), ex_si(blancs, adj-adj, blancs, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(oolongs, adj-adj, oolongs, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(182, Result) :-
      prob_parse([ ex_si('Ses', det-det:pos, 'Ses', [dr(0,np,n)-1]), ex_si(fondateurs, nc-nom, fondateurs, [n-1]), ex_si('Mo', npp-abr, 'Mo', [dl(0,n,n)-1]), ex_si('Siegel', npp-nam, 'Siegel', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Hay', npp-nam, 'Hay', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(cueillir, vinf-ver:infi, cueillir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(herbes, nc-nom, herbes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fleurs, nc-nom, fleurs, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(montagnes, nc-nom, montagnes, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Boulder', npp-nam, 'Boulder', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(vendre, vinf-ver:infi, vendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(magasins, nc-nom, magasins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(diététiques, adj-adj, diététiques, [dl(0,n,n)-1]), ex_si(locaux, adj-adj, locaux, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(183, Result) :-
      prob_parse([ ex_si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), ex_si('Seasonings', npp-nam, 'Seasonings', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Mo', npp-nam, 'Mo', [dr(0,np,np)-1]), ex_si('Siegel', npp-nam, 'Siegel', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Hay', npp-nam, 'Hay', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(184, Result) :-
      prob_parse([ ex_si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), ex_si('Seasonings', npp-nam, 'Seasonings', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Kraft', npp-nam, 'Kraft', [dr(0,np,np)-1]), ex_si('Foods', npp-nam, 'Foods', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1984, pro-num, 1984, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(étendu, vpp-ver:pper, étendu, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commercialisation, nc-nom, commercialisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(185, Result) :-
      prob_parse([ ex_si('Kraft', npp-nam, 'Kraft', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), ex_si('Seasonings', npp-nam, 'Seasonings', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(186, Result) :-
      prob_parse([ ex_si('Mo', npp-abr, 'Mo', [dr(0,np,np)-1]), ex_si('Siegel', npp-nam, 'Siegel', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(suivante, adj-adj, suivante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Kraft', npp-nam, 'Kraft', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(allait, v-ver:impf, allait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(vendre, vinf-ver:infi, vendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), ex_si('Seasonings', npp-nam, 'Seasonings', [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Lipton', npp-nam, 'Lipton', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(187, Result) :-
      prob_parse([ ex_si('Kraft', npp-nam, 'Kraft', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), ex_si('Seasonings', npp-nam, 'Seasonings', [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Lipton', npp-nam, 'Lipton', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(188, Result) :-
      prob_parse([ ex_si('Mo', npp-abr, 'Mo', [dr(0,np,np)-1]), ex_si('Siegel', npp-nam, 'Siegel', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(retraite, nc-nom, retraite, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(suivante, adj-adj, suivante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Kraft', npp-nam, 'Kraft', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(allait, v-ver:impf, allait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(vendre, vinf-ver:infi, vendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), ex_si('Seasonings', npp-nam, 'Seasonings', [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Lipton', npp-nam, 'Lipton', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(189, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(contestée, vpp-ver:pper, contestée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Bigelow', npp-nam, 'Bigelow', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(vertu, nc-nom, vertu, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si(antitrust, adj-adj, antitrust, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(racheté, vpp-ver:pper, racheté, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kraft', npp-nam, 'Kraft', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1988, pro-num, 1988, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(190, Result) :-
      prob_parse([ ex_si('Kraft', npp-nam, 'Kraft', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vendu, vpp-ver:pper, vendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Celestial', npp-nam, 'Celestial', [dr(0,np,np)-1]), ex_si('Seasonings', npp-nam, 'Seasonings', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(191, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Felix', npp-nam, 'Felix', [dl(0,n,n)-1]), ex_si('Soto', npp-nam, 'Soto', [dr(0,np,np)-1]), ex_si('Toro', npp-nam, 'Toro', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1967, pro-num, 1967, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Guaynabo', npp-nam, 'Guaynabo', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Porto', npp-nam, 'Porto', [dr(0,np,np)-1]), ex_si('Rico', npp-nam, 'Rico', [dl(0,np,np)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(astronaute, nc-nom, astronaute, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ingénieur, nc-nom, ingénieur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(conception, nc-nom, conception, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si('3D', adj-adj, '3D', [dl(0,n,n)-1]), ex_si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(192, Result) :-
      prob_parse([ ex_si('Soto', npp-nam, 'Soto', [dr(0,np,np)-1]), ex_si('Toro', npp-nam, 'Toro', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(inventé, vpp-ver:pper, inventé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si('3D', adj-adj, '3D', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(193, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(utilisations, nc-nom, utilisations, [n-1]), ex_si(hors, p-prp, hors, [dr(0,dl(0,n,n),np)-1]), ex_si('AMM', nc-abr, 'AMM', [np-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(antiémétique, adj-adj, antiémétique, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(atteints, vpp-ver:pper, atteints, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(insomnie, nc-nom, insomnie, [n-1]), ex_si(résistante, adj-adj, résistante, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(194, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(remède, nc-nom, remède, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(insomnie, nc-nom, insomnie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(195, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(administrée, vpp-ver:pper, administrée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(concomitance, nc-nom, concomitance, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(opioïdes, nc-nom, opioïdes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opioïdes, nc-nom, opioïdes, [n-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(réduite, vpp-ver:pper, réduite, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), ex_si(amplifie, v-ver:pres, amplifie, [dr(0,dl(0,np,s),np)-1]), ex_si(massivement, adv-adv, massivement, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dl(1,s,s)-1]), ex_si(actions, nc-nom, actions, [dr(0,np,n)-1]), ex_si(thérapeutiques, adj-adj, thérapeutiques, [n-1]), ex_si(et, cc-kon, et, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,np),np)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [n-1]), ex_si(des, p+d-prp:det, des, [dl(0,n,n)-1]), ex_si(opioïdes, nc-nom, opioïdes, [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(196, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lévomépromazine, nc-nom, lévomépromazine, [n-1]), ex_si(réduit, v-ver:pres, réduit, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(opioïdes, nc-nom, opioïdes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(197, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('Windows', npp-nam, 'Windows', [dr(0,n,n)-1]), ex_si('Challenge', npp-nam, 'Challenge', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(tenu, vpp-ver:pper, tenu, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2004, pro-num, 2004, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(composé, vpp-ver:pper, composé, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(équipes, nc-nom, équipes, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(198, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2005, pro-num, 2005, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(reste, nc-nom, reste, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(199, Result) :-
      prob_parse([ ex_si(278, det-num, 278, [dr(0,np,n)-1]), ex_si(équipes, nc-nom, équipes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(200, Result) :-
      prob_parse([ ex_si(278, det-num, 278, [dr(0,np,n)-1]), ex_si(équipes, nc-nom, équipes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si('Windows', npp-nam, 'Windows', [dr(0,n,n)-1]), ex_si('Challenge', npp-nam, 'Challenge', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(201, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('United', npp-nam, 'United', [dr(0,n,n)-1]), ex_si('Center', npp-nam, 'Center', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Bulls', npp-nam, 'Bulls', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Blackhawks', nc-nam, 'Blackhawks', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chicago', npp-nam, 'Chicago', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(portes, nc-nom, portes, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(saison, nc-nom, saison, [n-1]), ex_si('1994-95', adj-num, '1994-95', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Bulls', npp-nam, 'Bulls', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Sheri', npp-nam, 'Sheri', [dr(0,n,n)-1]), ex_si('L.', npp-abr, 'L.', [dl(0,n,n)-1]), ex_si('Berto', npp-nam, 'Berto', [dl(0,n,n)-1]), ex_si('Center', npp-nam, 'Center', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entraînement, nc-nom, entraînement, [n-1]), ex_si(ultramoderne, adj-adj, ultramoderne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(202, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Blackhawks', nc-nam, 'Blackhawks', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basés, vpp-ver:pper, basés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Chicago', npp-nam, 'Chicago', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(203, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('United', npp-nam, 'United', [dr(0,n,n)-1]), ex_si('Center', npp-nam, 'Center', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Bulls', npp-nam, 'Bulls', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Blackhawks', nc-nam, 'Blackhawks', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chicago', npp-nam, 'Chicago', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(portes, nc-nom, portes, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(saison, nc-nom, saison, [n-1]), ex_si('1994-95', adj-num, '1994-95', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Bulls', npp-nam, 'Bulls', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Sheri', npp-nam, 'Sheri', [dr(0,n,n)-1]), ex_si('L.', npp-abr, 'L.', [dl(0,n,n)-1]), ex_si('Berto', npp-nam, 'Berto', [dl(0,n,n)-1]), ex_si('Center', npp-nam, 'Center', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entraînement, nc-nom, entraînement, [n-1]), ex_si(ultramoderne, adj-adj, ultramoderne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(204, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('United', npp-nam, 'United', [dr(0,n,n)-1]), ex_si('Center', npp-nam, 'Center', [n-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Bulls', npp-nam, 'Bulls', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(205, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Miracle', npp-nam, 'Miracle', [dr(0,n,n)-1]), ex_si('Field', npp-nam, 'Field', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(spécialement, adv-adv, spécialement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(conçu, vpp-ver:pper, conçu, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(besoins, nc-nom, besoins, [n-1]), ex_si(spéciaux, adj-adj, spéciaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(type, nc-nom, type, [n-1]), ex_si(construit, vpp-ver:pper, construit, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Chicago', npp-nam, 'Chicago', [np-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Chicago', npp-nam, 'Chicago', [dr(0,n,n)-1]), ex_si('White', npp-nam, 'White', [dr(0,n,n)-1]), ex_si('Sox', npp-nam, 'Sox', [dr(0,n,n)-1]), ex_si('Charities', npp-nam, 'Charities', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(206, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Chicago', npp-nam, 'Chicago', [dr(0,n,n)-1]), ex_si('White', npp-nam, 'White', [dr(0,n,n)-1]), ex_si('Sox', npp-nam, 'Sox', [dr(0,n,n)-1]), ex_si('Charities', npp-nam, 'Charities', [n-1]), ex_si(soutiennent, v-ver:pres, soutiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(besoins, nc-nom, besoins, [n-1]), ex_si(spéciaux, adj-adj, spéciaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(207, Result) :-
      prob_parse([ ex_si('Techwood', npp-nam, 'Techwood', [dr(0,np,np)-1]), ex_si('Homes', npp-nam, 'Homes', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(démoli, vpp-ver:pper, démoli, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(208, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(voisine, nc-nom, voisine, [n-1]), ex_si('Clark', npp-nam, 'Clark', [dl(0,n,n)-1]), ex_si('Howell', npp-nam, 'Howell', [dl(0,n,n)-1]), ex_si('Homes', npp-nam, 'Homes', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(maintenant, adv-adv, maintenant, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(usage, nc-nom, usage, [n-1]), ex_si(mixte, adj-adj, mixte, [dl(0,n,n)-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,n,n),np)-1]), ex_si('Centennial', npp-nam, 'Centennial', [dr(0,np,np)-1]), ex_si('Place', npp-nam, 'Place', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(209, Result) :-
      prob_parse([ ex_si('Techwood', npp-nam, 'Techwood', [dr(0,np,np)-1]), ex_si('Homes', npp-nam, 'Homes', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Clark', npp-nam, 'Clark', [dr(0,np,np)-1]), ex_si('Howell', npp-nam, 'Howell', [dr(0,np,np)-1]), ex_si('Homes', npp-nam, 'Homes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(210, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(délivré, vpp-ver:pper, délivré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(patients, nc-nom, patients, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(appareille, v-ver:pres, appareille, [dl(0,np,s)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1946, adj-num, 1946, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(atomiques, adj-adj, atomiques, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atoll, nc-nom, atoll, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bikini', npp-nam, 'Bikini', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(après, p-prp, après, [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(fourni, vpp-ver:pper, fourni, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(médicaux, adj-adj, médicaux, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(explosions, nc-nom, explosions, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('Crossroads', npp-nam, 'Crossroads', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(revient, v-ver:pres, revient, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Seattle', npp-nam, 'Seattle', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1946, adj-num, 1946, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(211, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(essais, nc-nom, essais, [n-1]), ex_si(atomiques, adj-adj, atomiques, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atoll, nc-nom, atoll, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bikini', npp-nam, 'Bikini', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(212, Result) :-
      prob_parse([ ex_si('Lauraine', npp-nam, 'Lauraine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décroché, vpp-ver:pper, décroché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(jouant, vpr-ver:ppre, jouant, [dr(0,dl(0,np,s_ppres),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tournée, nc-nom, tournée, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(comédie, nc-nom, comédie, [n-1]), ex_si(musicale, adj-adj, musicale, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Dreamgirls', npp-nam, 'Dreamgirls', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(213, Result) :-
      prob_parse([ ex_si('Loraine', npp-nam, 'Loraine', [np-1]), ex_si(remplaçait, v-ver:impf, remplaçait, [dr(0,dl(0,np,s),np)-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(soeur, nc-nom, soeur, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Dreamgirls', npp-nam, 'Dreamgirls', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(jouaient, v-ver:impf, jouaient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Mimi', npp-nam, 'Mimi', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(214, Result) :-
      prob_parse([ ex_si('Loraine', npp-nam, 'Loraine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(participé, vpp-ver:pper, participé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(comédie, nc-nom, comédie, [n-1]), ex_si(musicale, adj-adj, musicale, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Dreamgirls', npp-nam, 'Dreamgirls', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(215, Result) :-
      prob_parse([ ex_si('Du', p+d-prp:det, 'Du', [dr(0,dr(0,s,s),n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si('Illinois', npp-nam, 'Illinois', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pont, nc-nom, pont, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(panneaux, nc-nom, panneaux, [n-1]), ex_si(indiquant, vpr-ver:ppre, indiquant, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('HISTORIC', npp-nam, 'HISTORIC', [dr(0,np,np)-1]), ex_si('ROUTE', npp-nam, 'ROUTE', [dr(0,np,np)-1]), ex_si(66, adj-num, 66, [dr(0,dl(0,np,np),n)-1]), ex_si('SPUR', npp-abr, 'SPUR', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(conduisent, v-ver:pres, conduisent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(voyageurs, nc-nom, voyageurs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si('Illinois', npp-nam, 'Illinois', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pont, nc-nom, pont, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(panneau, nc-nom, panneau, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('HISTORIC', npp-nam, 'HISTORIC', [dr(0,np,np)-1]), ex_si('ROUTE', npp-nam, 'ROUTE', [np-1]), ex_si(66, adj-num, 66, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(marque, v-ver:pres, marque, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si('Missouri', npp-nam, 'Missouri', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pont, nc-nom, pont, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(216, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Illinois', npp-nam, 'Illinois', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(limitrophe, adj-adj, limitrophe, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Missouri', npp-nam, 'Missouri', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(217, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(générales, adj-adj, générales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Howard', npp-nam, 'Howard', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détrôner, vinf-ver:infi, détrôner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conservateurs, nc-nom, conservateurs, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(33, det-num, 33, [dr(0,np,n)-1]), ex_si(sièges, nc-nom, sièges, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(jouant, vpr-ver:ppre, jouant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réduction, nc-nom, réduction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(167, pro-num, 167, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(66, pro-num, 66, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(218, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(travaillistes, nc-nom, travaillistes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(219, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(générales, adj-adj, générales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Howard', npp-nam, 'Howard', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détrôner, vinf-ver:infi, détrôner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conservateurs, nc-nom, conservateurs, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(33, det-num, 33, [dr(0,np,n)-1]), ex_si(sièges, nc-nom, sièges, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(jouant, vpr-ver:ppre, jouant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réduction, nc-nom, réduction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(167, pro-num, 167, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(66, pro-num, 66, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(220, Result) :-
      prob_parse([ ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Howard', npp-nam, 'Howard', [np-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(221, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(acheteurs, nc-nom, acheteurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(confédérés, adj-adj, confédérés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(capitaines, nc-nom, capitaines, [n-1]), ex_si('Caleb', npp-nam, 'Caleb', [dl(0,n,n)-1]), ex_si('Huse', npp-nam, 'Huse', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), ex_si('James', npp-nam, 'James', [dl(0,n,n)-1]), ex_si('Bulloch', npp-nam, 'Bulloch', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(passèrent, v-ver:simp, passèrent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fusils, nc-nom, fusils, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(revolvers, nc-nom, revolvers, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armurerie, nc-nom, armurerie, [n-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(222, Result) :-
      prob_parse([ ex_si('Huse', npp-nam, 'Huse', [np-1]), ex_si(travaillait, v-ver:impf, travaillait, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(collaboration, nc-nom, collaboration, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Bolloch', npp-nam, 'Bolloch', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(223, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1999, pro-num, 1999, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Cauty', npp-nam, 'Cauty', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(remixes, nc-nom, remixes, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alias, nc-nom, alias, [n-1]), ex_si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), ex_si('Scourge', npp-nam, 'Scourge', [n-1]), ex_si('Of', et-prp, 'Of', [dr(0,dl(0,n,n),np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Earth', npp-nam, 'Earth', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(artistes, nc-nom, artistes, [n-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Placebo', npp-nam, 'Placebo', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Marilyn', npp-nam, 'Marilyn', [np-1]), ex_si('Manson', npp-nam, 'Manson', [dr(0,dl(0,np,np),np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si('Hawkwind', npp-nam, 'Hawkwind', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ian', npp-nam, 'Ian', [dr(0,np,np)-1]), ex_si('Brown', npp-nam, 'Brown', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Orb', npp-nam, 'Orb', [n-1]), ex_si(etc, adv-abr, etc, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(224, Result) :-
      prob_parse([ ex_si('Placebo', npp-nam, 'Placebo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(collaboré, vpp-ver:pper, collaboré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('Marilyn', npp-nam, 'Marilyn', [dr(0,np,np)-1]), ex_si('Manson', npp-nam, 'Manson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(225, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(abord, nc-nom, abord, [n-1]), ex_si(réussi, vpp-ver:pper, réussi, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(négociant, vpr-ver:ppre, négociant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(redevance, nc-nom, redevance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(3, pro-num, 3, [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si(4, pro-num, 4, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(1, det-num, 1, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si(vendues, vpp-ver:pper, vendues, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Association', nc-nam, 'Association', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(constructeurs, nc-nom, constructeurs, [n-1]), ex_si(automobiles, nc-nom, automobiles, [dl(0,n,n)-1]), ex_si(agréés, vpp-ver:pper, agréés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ALAM', npp-abr, 'ALAM', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(226, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ALAM', npp-abr, 'ALAM', [n-1]), ex_si(fabriquait, v-ver:impf, fabriquait, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(voitures, nc-nom, voitures, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(227, Result) :-
      prob_parse([ ex_si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), ex_si('Ford', npp-nam, 'Ford', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ford', npp-nam, 'Ford', [dr(0,n,n)-1]), ex_si('Motor', npp-nam, 'Motor', [dr(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(fondée, vpp-ver:pper, fondée, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Détroit', npp-nam, 'Détroit', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Michigan', npp-nam, 'Michigan', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1903, pro-num, 1903, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(constructeurs, nc-nom, constructeurs, [n-1]), ex_si(automobiles, nc-nom, automobiles, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(résolu, vpp-ver:pper, résolu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(contester, vinf-ver:infi, contester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(violation, nc-nom, violation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(brevet, nc-nom, brevet, [n-1]), ex_si(intenté, vpp-ver:pper, intenté, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Selden', npp-nam, 'Selden', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('EVC', npp-abr, 'EVC', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(228, Result) :-
      prob_parse([ ex_si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), ex_si('Ford', npp-nam, 'Ford', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ford', npp-nam, 'Ford', [dr(0,n,n)-1]), ex_si('Motor', npp-nam, 'Motor', [dr(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(229, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), ex_si('Ford', npp-nam, 'Ford', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Ford', npp-nam, 'Ford', [dr(0,n,n)-1]), ex_si('Motor', npp-nam, 'Motor', [dr(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(fondée, vpp-ver:pper, fondée, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Détroit', npp-nam, 'Détroit', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Michigan', npp-nam, 'Michigan', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1903, pro-num, 1903, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(constructeurs, nc-nom, constructeurs, [n-1]), ex_si(automobiles, nc-nom, automobiles, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(résolu, vpp-ver:pper, résolu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(contester, vinf-ver:infi, contester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(violation, nc-nom, violation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(brevet, nc-nom, brevet, [n-1]), ex_si(intenté, vpp-ver:pper, intenté, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Selden', npp-nam, 'Selden', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('EVC', npp-abr, 'EVC', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(230, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Ford', npp-nam, 'Ford', [dr(0,n,n)-1]), ex_si('Motor', npp-nam, 'Motor', [dr(0,n,n)-1]), ex_si('Company', npp-nam, 'Company', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(intenté, vpp-ver:pper, intenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('Selden', npp-nam, 'Selden', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('EVC', npp-abr, 'EVC', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(231, Result) :-
      prob_parse([ ex_si('Maler', npp-nam, 'Maler', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(expéditions, nc-nom, expéditions, [n-1]), ex_si(physiquement, adv-adv, physiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(exigeantes, adj-adj, exigeantes, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(jungle, nc-nom, jungle, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1905, pro-num, 1905, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(retiré, vpp-ver:pper, retiré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mérida', npp-nam, 'Mérida', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Yucatán', npp-nam, 'Yucatán', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(232, Result) :-
      prob_parse([ ex_si('Maler', npp-nam, 'Maler', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(retiré, vpp-ver:pper, retiré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1905, pro-num, 1905, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(233, Result) :-
      prob_parse([ ex_si('Maler', npp-nam, 'Maler', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(expéditions, nc-nom, expéditions, [n-1]), ex_si(physiquement, adv-adv, physiquement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(exigeantes, adj-adj, exigeantes, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(jungle, nc-nom, jungle, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1905, pro-num, 1905, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(retiré, vpp-ver:pper, retiré, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Mérida', npp-nam, 'Mérida', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Yucatán', npp-nam, 'Yucatán', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(234, Result) :-
      prob_parse([ ex_si('Maler', npp-nam, 'Maler', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Yucatán', npp-nam, 'Yucatán', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(235, Result) :-
      prob_parse([ ex_si('Primrose', npp-nam, 'Primrose', [dr(0,np,np)-1]), ex_si('Hill', npp-nam, 'Hill', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(colline, nc-nom, colline, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(situés, vpp-ver:pper, situés, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si(nord, nc-nom, nord, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Regent\'s', npp-nam, 'Regent\'s', [dr(0,np,np)-1]), ex_si('Park', npp-nam, 'Park', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(236, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(colline, nc-nom, colline, [n-1]), ex_si(offre, v-ver:pres, offre, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(belle, adj-adj, belle, [dr(0,n,n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(237, Result) :-
      prob_parse([ ex_si('Comme', adv-adv, 'Comme', [dr(0,dr(0,s,s),np)-1]), ex_si('Regent\'s', npp-nam, 'Regent\'s', [dr(0,np,np)-1]), ex_si('Park', npp-nam, 'Park', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(faisait, v-ver:impf, faisait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(autrefois, adv-adv, autrefois, [dl(1,s,s)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(appropriée, vpp-ver:pper, appropriée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Henry', npp-nam, 'Henry', [dr(0,np,np)-1]), ex_si('VIII', adj-num, 'VIII', [dl(0,np,np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(propriété, nc-nom, propriété, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Couronne', npp-nam, 'Couronne', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1841, pro-num, 1841, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(238, Result) :-
      prob_parse([ ex_si('Primrose', npp-nam, 'Primrose', [dr(0,np,np)-1]), ex_si('Hill', npp-nam, 'Hill', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(239, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(investigations, nc-nom, investigations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Leloir', npp-nam, 'Leloir', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(abouti, vpp-ver:pper, abouti, [dl(0,np,s_ppart)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(laboratoire, nc-nom, laboratoire, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(simultanément, adv-adv, simultanément, [dl(1,s,s)-1]), ex_si(professeur, nc-nom, professeur, [np-1]), ex_si(invité, vpp-ver:pper, invité, [dl(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Faculté', nc-nam, 'Faculté', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sciences, nc-nom, sciences, [n-1]), ex_si(naturelles, adj-adj, naturelles, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(exactes, adj-adj, exactes, [dl(0,n,n)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(interrompu, vpp-ver:pper, interrompu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(périodes, nc-nom, périodes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(poursuite, nc-nom, poursuite, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Cambridge', npp-nam, 'Cambridge', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Laboratoire', npp-nam, 'Laboratoire', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enzymes, nc-nom, enzymes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(240, Result) :-
      prob_parse([ ex_si('Leloir', npp-nam, 'Leloir', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(professeur, nc-nom, professeur, [np-1]), ex_si(invité, vpp-ver:pper, invité, [dl(0,np,np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Cambridge', npp-nam, 'Cambridge', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(241, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(1948, adj-num, 1948, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Leloir', npp-nam, 'Leloir', [np-1]), ex_si(identifie, v-ver:pres, identifie, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sucres, nc-nom, sucres, [n-1]), ex_si(carnucléotides, adj-adj, carnucléotides, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(composés, nc-nom, composés, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(jouent, v-ver:pres, jouent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(fondamental, adj-adj, fondamental, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(métabolisme, nc-nom, métabolisme, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hydrates, nc-nom, hydrates, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(apporte, v-ver:pres, apporte, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(reconnaissance, nc-nom, reconnaissance, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Institut', npp-nam, 'Institut', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(242, Result) :-
      prob_parse([ ex_si('Leloir', npp-nam, 'Leloir', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(découvert, vpp-ver:pper, découvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(métabolisme, nc-nom, métabolisme, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hydrates, nc-nom, hydrates, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(243, Result) :-
      prob_parse([ ex_si('Leloir', npp-nam, 'Leloir', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premio', nc-nam, 'Premio', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Sociedad', npp-nam, 'Sociedad', [dr(0,n,n)-1]), ex_si('Científica', npp-nam, 'Científica', [dr(0,n,n)-1]), ex_si('Argentina', npp-nam, 'Argentina', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(rares, adj-adj, rares, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tel, adj-adj, tel, [dr(0,n,n)-1]), ex_si(prix, nc-nom, prix, [dr(0,dl(1,s,s),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(où, prorel-pro:rel, où, [np-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(étranger, adj-adj, étranger, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(244, Result) :-
      prob_parse([ ex_si('Leloir', npp-nam, 'Leloir', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premio', nc-nam, 'Premio', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Sociedad', npp-nam, 'Sociedad', [dr(0,n,n)-1]), ex_si('Científica', npp-nam, 'Científica', [dr(0,n,n)-1]), ex_si('Argentina', npp-nam, 'Argentina', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(245, Result) :-
      prob_parse([ ex_si('Leloir', npp-nam, 'Leloir', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premio', nc-nam, 'Premio', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Sociedad', npp-nam, 'Sociedad', [dr(0,n,n)-1]), ex_si('Científica', npp-nam, 'Científica', [dr(0,n,n)-1]), ex_si('Argentina', npp-nam, 'Argentina', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(rares, adj-adj, rares, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tel, adj-adj, tel, [dr(0,n,n)-1]), ex_si(prix, nc-nom, prix, [dr(0,dl(1,s,s),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(où, prorel-pro:rel, où, [np-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(étranger, adj-adj, étranger, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(246, Result) :-
      prob_parse([ ex_si('Leloir', npp-nam, 'Leloir', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(247, Result) :-
      prob_parse([ ex_si('Belknap', npp-nam, 'Belknap', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(épouses, nc-nom, épouses, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Cora', npp-nam, 'Cora', [dr(0,np,np)-1]), ex_si('LeRoy', npp-nam, 'LeRoy', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), ex_si('Tomlinson', npp-nam, 'Tomlinson', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Bower', npp-nam, 'Bower', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(soeur, nc-nom, soeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(seconde, adj-num, seconde, [dr(0,n,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(248, Result) :-
      prob_parse([ ex_si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), ex_si('Tomlinson', npp-nam, 'Tomlinson', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(soeur, nc-nom, soeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Bower', npp-nam, 'Bower', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(249, Result) :-
      prob_parse([ ex_si('Belknap', npp-nam, 'Belknap', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(épouses, nc-nom, épouses, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Cora', npp-nam, 'Cora', [dr(0,np,np)-1]), ex_si('LeRoy', npp-nam, 'LeRoy', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), ex_si('Tomlinson', npp-nam, 'Tomlinson', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Bower', npp-nam, 'Bower', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(soeur, nc-nom, soeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(seconde, adj-num, seconde, [dr(0,n,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(250, Result) :-
      prob_parse([ ex_si('Belknap', npp-nam, 'Belknap', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(marié, vpp-ver:pper, marié, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Carrie', npp-nam, 'Carrie', [dr(0,np,np)-1]), ex_si('Tomlinson', npp-nam, 'Tomlinson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(251, Result) :-
      prob_parse([ ex_si('Belknap', npp-nam, 'Belknap', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(accusation, nc-nom, accusation, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(unanime, adj-adj, unanime, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(prétendument, adv-adv, prétendument, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(échange, nc-nom, échange, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nominations, nc-nom, nominations, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(postes, nc-nom, postes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociants, nc-nom, négociants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(252, Result) :-
      prob_parse([ ex_si('Belknap', npp-nam, 'Belknap', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(échange, nc-nom, échange, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nominations, nc-nom, nominations, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(postes, nc-nom, postes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociants, nc-nom, négociants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(253, Result) :-
      prob_parse([ ex_si('Belknap', npp-nam, 'Belknap', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(accusation, nc-nom, accusation, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(unanime, adj-adj, unanime, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(prétendument, adv-adv, prétendument, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(échange, nc-nom, échange, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nominations, nc-nom, nominations, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(postes, nc-nom, postes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociants, nc-nom, négociants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(254, Result) :-
      prob_parse([ ex_si('Belknap', npp-nam, 'Belknap', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(échange, nc-nom, échange, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nominations, nc-nom, nominations, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(postes, nc-nom, postes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociants, nc-nom, négociants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(255, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(naturelle, adj-adj, naturelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), ex_si('Rocks', npp-nam, 'Rocks', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(acquis, vpp-ver:pper, acquis, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('LA', npp-nam, 'LA', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1970, adj-num, 1970, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(256, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(naturelle, adj-adj, naturelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), ex_si('Rocks', npp-nam, 'Rocks', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(propriété, nc-nom, propriété, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('LA', npp-nam, 'LA', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(257, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(rochers, nc-nom, rochers, [n-1]), ex_si('Vasquez', npp-nam, 'Vasquez', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situés, vpp-ver:pper, situés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(environs, nc-nom, environs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Agua', npp-nam, 'Agua', [dr(0,np,np)-1]), ex_si('Dulce', npp-nam, 'Dulce', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vallée, nc-nom, vallée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Antelope', npp-nam, 'Antelope', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vallée, nc-nom, vallée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Santa', npp-nam, 'Santa', [dr(0,np,np)-1]), ex_si('Clarita', npp-nam, 'Clarita', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(juste, adv-adv, juste, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(facilement, adv-adv, facilement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(visibles, vpp-ver:pper, visibles, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(automobilistes, nc-nom, automobilistes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(empruntent, v-ver:pres, empruntent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autoroute, nc-nom, autoroute, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Antelope', npp-nam, 'Antelope', [dr(0,np,np)-1]), ex_si('Valley', npp-nam, 'Valley', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(258, Result) :-
      prob_parse([ ex_si('Agua', npp-nam, 'Agua', [dr(0,np,np)-1]), ex_si('Dulce', npp-nam, 'Dulce', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(juste, adv-adv, juste, [dr(0,pp,pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(259, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), ex_si('Rocks', npp-nam, 'Rocks', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(roches, nc-nom, roches, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grès, nc-nom, grès, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(soulevées, vpp-ver:pper, soulevées, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(angle, nc-nom, angle, [n-1]), ex_si(pittoresque, adj-adj, pittoresque, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(caractéristiques, nc-nom, caractéristiques, [n-1]), ex_si(rouges, adj-adj, rouges, [dl(0,n,n)-1]), ex_si(déchiquetées, vpp-ver:pper, déchiquetées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(260, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(formations, nc-nom, formations, [n-1]), ex_si(rocheuses, adj-adj, rocheuses, [dl(0,n,n)-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faille, nc-nom, faille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Andreas', npp-nam, 'Andreas', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(261, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(roches, nc-nom, roches, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), ex_si('Rocks', npp-nam, 'Rocks', [np-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faille, nc-nom, faille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Andreas', npp-nam, 'Andreas', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(262, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Vasquez', npp-nam, 'Vasquez', [dr(0,np,np)-1]), ex_si('Rocks', npp-nam, 'Rocks', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(roches, nc-nom, roches, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grès, nc-nom, grès, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(soulevées, vpp-ver:pper, soulevées, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(angle, nc-nom, angle, [n-1]), ex_si(pittoresque, adj-adj, pittoresque, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(caractéristiques, nc-nom, caractéristiques, [n-1]), ex_si(rouges, adj-adj, rouges, [dl(0,n,n)-1]), ex_si(déchiquetées, vpp-ver:pper, déchiquetées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(263, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(formations, nc-nom, formations, [n-1]), ex_si(rocheuses, adj-adj, rocheuses, [dl(0,n,n)-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(partie, nc-nom, partie, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faille, nc-nom, faille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Andreas', npp-nam, 'Andreas', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(264, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(faille, nc-nom, faille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Andreas', npp-nam, 'Andreas', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(formée, vpp-ver:pper, formée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(préhistorique, adj-adj, préhistorique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(265, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ranchers, nc-nom, ranchers, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pedro', npp-nam, 'Pedro', [dr(0,np,np)-1]), ex_si('Quintanar', npp-nam, 'Quintanar', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),dl(0,np,s_ppres))-1]), ex_si(apprenant, vpr-ver:ppre, apprenant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('Bátiz', npp-nam, 'Bátiz', [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(saisi, vpp-ver:pper, saisi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(trésor, nc-nom, trésor, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déclarée, vpp-ver:pper, déclarée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(rébellion, nc-nom, rébellion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(266, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('Bátiz', npp-nam, 'Bátiz', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ranchers, nc-nom, ranchers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(267, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ranchers, nc-nom, ranchers, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pedro', npp-nam, 'Pedro', [dr(0,np,np)-1]), ex_si('Quintanar', npp-nam, 'Quintanar', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),dl(0,np,s_ppres))-1]), ex_si(apprenant, vpr-ver:ppre, apprenant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('Bátiz', npp-nam, 'Bátiz', [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(saisi, vpp-ver:pper, saisi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(trésor, nc-nom, trésor, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déclarée, vpp-ver:pper, déclarée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(rébellion, nc-nom, rébellion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(268, Result) :-
      prob_parse([ ex_si('Pedro', npp-nam, 'Pedro', [dr(0,np,np)-1]), ex_si('Quintanar', npp-nam, 'Quintanar', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ranchers, nc-nom, ranchers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(269, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(soulèvement, nc-nom, soulèvement, [n-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(maire, nc-nom, maire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pénjamo', npp-nam, 'Pénjamo', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Guanajuato', npp-nam, 'Guanajuato', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Luis', npp-nam, 'Luis', [dr(0,np,np)-1]), ex_si('Navarro', npp-nam, 'Navarro', [dr(0,np,np)-1]), ex_si('Origel', npp-nam, 'Origel', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(28, adj-num, 28, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(270, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(vaincu, vpp-ver:pper, vaincu, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(fédérales, adj-adj, fédérales, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(ouvertes, vpp-ver:pper, ouvertes, [dl(0,n,n)-1]), ex_si(autour, p-prp, autour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(retira, v-ver:simp, retira, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(montagnes, nc-nom, montagnes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(continuèrent, v-ver:simp, continuèrent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guérilla, nc-nom, guérilla, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(271, Result) :-
      prob_parse([ ex_si('Luis', npp-nam, 'Luis', [dr(0,np,np)-1]), ex_si('Navarro', npp-nam, 'Navarro', [dr(0,np,np)-1]), ex_si('Origel', npp-nam, 'Origel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(guérillero, nc-nom, guérillero, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(272, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(principal, adj-adj, principal, [dr(0,n,n)-1]), ex_si(foyer, nc-nom, foyer, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rébellion, nc-nom, rébellion, [n-1]), ex_si(dirigée, vpp-ver:pper, dirigée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('René', npp-nam, 'René', [dr(0,np,np)-1]), ex_si('Capistran', npp-nam, 'Capistran', [dr(0,np,np)-1]), ex_si('Garza', npp-nam, 'Garza', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(27, det-num, 27, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Association', nc-nam, 'Association', [n-1]), ex_si(mexicaine, adj-adj, mexicaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(jeunesse, nc-nom, jeunesse, [n-1]), ex_si(catholique, adj-adj, catholique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(273, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Association', nc-nam, 'Association', [n-1]), ex_si(mexicaine, adj-adj, mexicaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(jeunesse, nc-nom, jeunesse, [n-1]), ex_si(catholique, adj-adj, catholique, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(dirigée, vpp-ver:pper, dirigée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('René', npp-nam, 'René', [dr(0,np,np)-1]), ex_si('Capistran', npp-nam, 'Capistran', [dr(0,np,np)-1]), ex_si('Garza', npp-nam, 'Garza', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(274, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Wilkins', npp-nam, 'Wilkins', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rapidement, adv-adv, rapidement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(installés, vpp-ver:pper, installés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ère, nc-nom, ère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Milan', npp-nam, 'Milan', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('Wilkins', npp-nam, 'Wilkins', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(club, nc-nom, club, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('Saint-Germain', npp-nam, 'Saint-Germain', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(275, Result) :-
      prob_parse([ ex_si('Wilkins', npp-nam, 'Wilkins', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivé, vpp-ver:pper, arrivé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1987, pro-num, 1987, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(276, Result) :-
      prob_parse([ ex_si('Wilkins', npp-nam, 'Wilkins', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(choisi, vpp-ver:pper, choisi, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(qualifiée, vpp-ver:pper, qualifiée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coupe', nc-nam, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(1986, adj-num, 1986, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dl(0,np,s_ppart)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(défaite, nc-nom, défaite, [n-1]), ex_si(inaugurale, adj-adj, inaugurale, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Portugal', npp-nam, 'Portugal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(277, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(battu, vpp-ver:pper, battu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Portugal', npp-nam, 'Portugal', [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coupe', nc-nam, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(1986, adj-num, 1986, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(278, Result) :-
      prob_parse([ ex_si('André', npp-nam, 'André', [dr(0,np,np)-1]), ex_si('Henri', npp-nam, 'Henri', [dr(0,np,np)-1]), ex_si('Constant', npp-nam, 'Constant', [np-1]), ex_si(van, et-prp, van, [dr(0,dl(0,np,np),np)-1]), ex_si('Hasselt', npp-nam, 'Hasselt', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Maastricht', npp-nam, 'Maastricht', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Limbourg', npp-nam, 'Limbourg', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(279, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(natale, adj-adj, natale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Liège', npp-nam, 'Liège', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(280, Result) :-
      prob_parse([ ex_si('André', npp-nam, 'André', [dr(0,np,np)-1]), ex_si('Henri', npp-nam, 'Henri', [dr(0,np,np)-1]), ex_si('Constant', npp-nam, 'Constant', [np-1]), ex_si(van, et-prp, van, [dr(0,dl(0,np,np),np)-1]), ex_si('Hasselt', npp-nam, 'Hasselt', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Maastricht', npp-nam, 'Maastricht', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(281, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1833, pro-num, 1833, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Van', npp-nam, 'Van', [dr(0,np,np)-1]), ex_si('Hasselt', npp-nam, 'Hasselt', [np-1]), ex_si(quitte, v-ver:pres, quitte, [dr(0,dl(0,np,s),np)-1]), ex_si('Maastricht', npp-nam, 'Maastricht', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(alors, adv-adv, alors, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(bloquée, vpp-ver:pper, bloquée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(belges, adj-adj, belges, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rend, v-ver:pres, rend, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(naturalisé, vpp-ver:pper, naturalisé, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(belge, adj-adj, belge, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(attaché, vpp-ver:pper, attaché, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bibliothèque', npp-nam, 'Bibliothèque', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bourgogne', npp-nam, 'Bourgogne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(282, Result) :-
      prob_parse([ ex_si('Van', npp-nam, 'Van', [dr(0,np,np)-1]), ex_si('Hasselt', npp-nam, 'Hasselt', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(belge, adj-adj, belge, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(283, Result) :-
      prob_parse([ ex_si('Bountiful', npp-nam, 'Bountiful', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('Honolulu', npp-nam, 'Honolulu', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(revenu, vpp-ver:pper, revenu, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reparti, vpp-ver:pper, reparti, [dl(0,np,s_ppart)-1]), ex_si(une, det-det:art, une, [dr(0,dl(1,s,s),n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pacifique', npp-nam, 'Pacifique', [n-1]), ex_si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(284, Result) :-
      prob_parse([ ex_si('Bountiful', npp-nam, 'Bountiful', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Honolulu', npp-nam, 'Honolulu', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(285, Result) :-
      prob_parse([ ex_si('Tripontium', npp-nam, 'Tripontium', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(initialement, adv-adv, initialement, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(frontière, nc-nom, frontière, [dl(0,n,n)-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(établi, vpp-ver:pper, établi, [dl(0,n,n)-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(1,dl(0,n,n),dl(0,n,n)))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(romaine, adj-adj, romaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(ap, nc-nom, ap, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(286, Result) :-
      prob_parse([ ex_si('J.-C', npp-nam, 'J.-C', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(287, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Romains', nc-nam, 'Romains', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivés, vpp-ver:pper, arrivés, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(ap, nc-abr, ap, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(288, Result) :-
      prob_parse([ ex_si('J.-C..', npp-abr, 'J.-C..', [np-1])], Result).
sent(289, Result) :-
      prob_parse([ ex_si('Metin', npp-nam, 'Metin', [dr(0,np,np)-1]), ex_si('Kaplan', npp-nam, 'Kaplan', [np-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(rival, nc-nom, rival, [n-1]), ex_si('Ibrahim', npp-nam, 'Ibrahim', [dl(0,n,n)-1]), ex_si('Sofu', npp-nam, 'Sofu', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(290, Result) :-
      prob_parse([ ex_si('Ibrahim', npp-nam, 'Ibrahim', [dr(0,np,np)-1]), ex_si('Sofu', npp-nam, 'Sofu', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Metin', npp-nam, 'Metin', [dr(0,np,np)-1]), ex_si('Kaplan', npp-nam, 'Kaplan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(291, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2004, adj-num, 2004, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Kaplan', npp-nam, 'Kaplan', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réfugié, nc-nom, réfugié, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(risquait, v-ver:impf, risquait, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extradition, nc-nom, extradition, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(avant, p-prp, avant, [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Kaplan', npp-nam, 'Kaplan', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(disparu, vpp-ver:pper, disparu, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Cologne', npp-nam, 'Cologne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(292, Result) :-
      prob_parse([ ex_si('Kaplan', npp-nam, 'Kaplan', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(extradé, vpp-ver:pper, extradé, [dl(0,np,s_pass)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(293, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(familles, nc-nom, familles, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Britanniques', nc-nam, 'Britanniques', [n-1]), ex_si(disparus, vpp-ver:pper, disparus, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attentats, nc-nom, attentats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Charm', npp-nam, 'Charm', [dr(0,np,np)-1]), ex_si('el-Cheikh', npp-nam, 'el-Cheikh', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(envoler, vinf-ver:infi, envoler, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(balnéaire, adj-adj, balnéaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si('Rouge', npp-nam, 'Rouge', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Foreign', npp-nam, 'Foreign', [dr(0,n,n)-1]), ex_si('Office', npp-nam, 'Office', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(294, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('Britanniques', nc-nam, 'Britanniques', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(portés, vpp-ver:pper, portés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(disparus, vpp-ver:pper, disparus, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Charm', npp-nam, 'Charm', [dr(0,np,np)-1]), ex_si('el-Cheikh', npp-nam, 'el-Cheikh', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(295, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ambassadeur, nc-nom, ambassadeur, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Égypte', npp-nam, 'Égypte', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Derek', npp-nam, 'Derek', [dr(0,np,np)-1]), ex_si('Plumbly', npp-nam, 'Plumbly', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Reuters', npp-nam, 'Reuters', [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dressé, vpp-ver:pper, dressé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(10, nc-num, 10, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(basant, vpr-ver:ppre, basant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(listes, nc-nom, listes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(touristiques, adj-adj, touristiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(familles, nc-nom, familles, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(proches, nc-nom, proches, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(contact, nc-nom, contact, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attentats, nc-nom, attentats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(296, Result) :-
      prob_parse([ ex_si('Derek', npp-nam, 'Derek', [dr(0,np,np)-1]), ex_si('Plumbly', npp-nam, 'Plumbly', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diplomate, nc-nom, diplomate, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Egypte', npp-nam, 'Egypte', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(297, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(égyptien, adj-adj, égyptien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écarté, vpp-ver:pper, écarté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(spéculations, nc-nom, spéculations, [n-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Pakistanais', nc-nom, 'Pakistanais', [n-1]), ex_si(disparus, vpp-ver:pper, disparus, [dl(0,n,n)-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(attentats, nc-nom, attentats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(298, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Pakistanais', nc-nam, 'Pakistanais', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attentats, nc-nom, attentats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(299, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(perpétré, vpp-ver:pper, perpétré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attentats, nc-nom, attentats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Taba', npp-nam, 'Taba', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Charm', npp-nam, 'Charm', [dr(0,np,np)-1]), ex_si('el-Cheikh', npp-nam, 'el-Cheikh', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(obéissant, vpr-ver:ppre, obéissant, [dr(0,dl(0,np,s_ppres),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jihad, nc-nom, jihad, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(sainte, adj-adj, sainte, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('al-Qaïda', npp-nam, 'al-Qaïda', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cheikh, nc-nom, cheikh, [n-1]), ex_si('Oussama', npp-nam, 'Oussama', [dl(0,n,n)-1]), ex_si(ben, npp-nam, ben, [dr(0,np,np)-1]), ex_si('Laden', npp-nam, 'Laden', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cheikh, nc-nom, cheikh, [n-1]), ex_si('Ayman', npp-nam, 'Ayman', [dl(0,n,n)-1]), ex_si('al-Zawahri', npp-nam, 'al-Zawahri', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(venger, vinf-ver:infi, venger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,np,n)-1]), ex_si(frères, nc-nom, frères, [n-1]), ex_si(opprimés, vpp-ver:pper, opprimés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dl(0,n,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [n-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(300, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cheikh, nc-nom, cheikh, [n-1]), ex_si('Oussama', npp-nam, 'Oussama', [dl(0,n,n)-1]), ex_si(ben, npp-kon, ben, [dl(0,n,n)-1]), ex_si('Laden', npp-nam, 'Laden', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cheikh, nc-nom, cheikh, [n-1]), ex_si('Ayman', npp-nam, 'Ayman', [dl(0,n,n)-1]), ex_si('al-Zawahri', npp-nam, 'al-Zawahri', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('al-Qaïda', npp-nam, 'al-Qaïda', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(301, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(égyptienne, adj-adj, égyptienne, [dl(0,n,n)-1]), ex_si(enquête, v-ver:pres, enquête, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si('Mohamed', npp-nam, 'Mohamed', [dr(0,np,np)-1]), ex_si('Fulayfel', npp-nam, 'Fulayfel', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(frère, nc-nom, frère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(kamikazes, nc-nom, kamikazes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Taba', npp-nam, 'Taba', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(piégée, vpp-ver:pper, piégée, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôtel, nc-nom, hôtel, [n-1]), ex_si('Ghazala', npp-nam, 'Ghazala', [dl(0,n,n)-1]), ex_si('Gardens', npp-nam, 'Gardens', [dl(0,n,n)-1]), ex_si(samedi, nc-nom, samedi, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(302, Result) :-
      prob_parse([ ex_si('Mohamed', npp-nam, 'Mohamed', [dr(0,np,np)-1]), ex_si('Fulayfel', npp-nam, 'Fulayfel', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perpétré, vpp-ver:pper, perpétré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(attentat, nc-nom, attentat, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Taba', npp-nam, 'Taba', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(303, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), ex_si('2.500', adj-num, '2.500', [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôtel, nc-nom, hôtel, [n-1]), ex_si('Hilton', npp-nam, 'Hilton', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Taba', npp-nam, 'Taba', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(maltraité, vpp-ver:pper, maltraité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(nombre, nc-nom, nombre, [np-1]), ex_si('d\'', p-prp, 'd\'', [np-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(elles, pro-pro:per, elles, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(304, Result) :-
      prob_parse([ ex_si('Quelque', det-pro:ind, 'Quelque', [dr(0,np,n)-1]), ex_si('2.500', adj-num, '2.500', [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêtées, vpp-ver:pper, arrêtées, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôtel, nc-nom, hôtel, [n-1]), ex_si('Hilton', npp-nam, 'Hilton', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Taba', npp-nam, 'Taba', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(305, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si(rival, adj-adj, rival, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(génériques, adj-adj, génériques, [dl(0,n,n)-1]), ex_si('Mylan', npp-nam, 'Mylan', [dr(0,dl(0,n,n),np)-1]), ex_si('Laboratories', npp-nam, 'Laboratories', [dr(0,np,np)-1]), ex_si('Inc', et-abr, 'Inc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(306, Result) :-
      prob_parse([ ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(revenu, nc-nom, revenu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1,3', det-num, '1,3', [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exercice, nc-nom, exercice, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(307, Result) :-
      prob_parse([ ex_si('Mylan', npp-nam, 'Mylan', [dr(0,np,np)-1]), ex_si('Laboratories', npp-nam, 'Laboratories', [dr(0,np,np)-1]), ex_si('Inc', et-nam, 'Inc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(308, Result) :-
      prob_parse([ ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gagné, vpp-ver:pper, gagné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('1,3', det-num, '1,3', [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exercice, nc-nom, exercice, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(309, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conclusion, nc-nom, conclusion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Teva', npp-nam, 'Teva', [np-1]), ex_si(réalisera, v-ver:futu, réalisera, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chiffre, nc-nom, chiffre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(7, det-num, 7, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(310, Result) :-
      prob_parse([ ex_si('Teva', npp-nam, 'Teva', [np-1]), ex_si(gagne, v-ver:pres, gagne, [dr(0,dl(0,np,s),np)-1]), ex_si(7, det-num, 7, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(311, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Omar', npp-nam, 'Omar', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(évacué, vpp-ver:pper, évacué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(démineurs, nc-nom, démineurs, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Small', npp-nam, 'Small', [dr(0,np,np)-1]), ex_si('Heath', npp-nam, 'Heath', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(perquisition, nc-nom, perquisition, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Birmingham', npp-nam, 'Birmingham', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), ex_si(120, adj-num, 120, [dr(0,n,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('nord-ouest', nc-nom, 'nord-ouest', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(312, Result) :-
      prob_parse([ ex_si('Omar', npp-nam, 'Omar', [np-1]), ex_si(résidait, v-ver:impf, résidait, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Small', npp-nam, 'Small', [dr(0,np,np)-1]), ex_si('Heath', npp-nam, 'Heath', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(313, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(dizaines, nc-num, dizaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(policiers, nc-nom, policiers, [n-1]), ex_si(antiterroristes, adj-adj, antiterroristes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déferlé, vpp-ver:pper, déferlé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('Omar', npp-nam, 'Omar', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(citoyen, nc-nom, citoyen, [n-1]), ex_si(somalien, adj-adj, somalien, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résidence, nc-nom, résidence, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(soupçonné, vpp-ver:pper, soupçonné, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métro, nc-nom, métro, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Warren', npp-nam, 'Warren', [dr(0,np,np)-1]), ex_si('Street', npp-nam, 'Street', [np-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(314, Result) :-
      prob_parse([ ex_si('Omar', npp-nam, 'Omar', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(315, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(suspect, nc-nom, suspect, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(essayé, vpp-ver:pper, essayé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(exploser, vinf-ver:infi, exploser, [dl(0,np,s_inf)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métro, nc-nom, métro, [n-1]), ex_si('Shepherd\'s', npp-nam, 'Shepherd\'s', [dl(0,n,n)-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(316, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(attentat, nc-nom, attentat, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métro, nc-nom, métro, [n-1]), ex_si('Shepherd\'s', npp-nam, 'Shepherd\'s', [dl(0,n,n)-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(317, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(relâché, vpp-ver:pper, relâché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(photo, nc-nom, photo, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(suspect, nc-nom, suspect, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(exploser, vinf-ver:infi, exploser, [dl(0,np,s_inf)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(métro, nc-nom, métro, [n-1]), ex_si('Shepherd\'s', npp-nam, 'Shepherd\'s', [dl(0,n,n)-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(318, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(relâché, vpp-ver:pper, relâché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(suspect, nc-nom, suspect, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(exploser, vinf-ver:infi, exploser, [dl(0,np,s_inf)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(bombe, nc-nom, bombe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(319, Result) :-
      prob_parse([ ex_si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Ronald', npp-nam, 'Ronald', [dl(0,n,n)-1]), ex_si('Reagan', npp-nam, 'Reagan', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fiscalité, nc-nom, fiscalité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(relance, nc-nom, relance, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1981, pro-num, 1981, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(progressivement, adv-adv, progressivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(impôts, nc-nom, impôts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('25%.', pro-num, '25%.', [dr(0,np,n)-1])], Result).
sent(320, Result) :-
      prob_parse([ ex_si('Reagan', npp-nam, 'Reagan', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(impôts, nc-nom, impôts, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('25%.', pro-num, '25%.', [dr(0,np,n)-1])], Result).
sent(321, Result) :-
      prob_parse([ ex_si('Debbie', npp-nam, 'Debbie', [dr(0,np,np)-1]), ex_si('Inker', npp-nam, 'Inker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('CPA', npp-abr, 'CPA', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(vit, v-ver:pres, vit, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(322, Result) :-
      prob_parse([ ex_si('Debbie', npp-nam, 'Debbie', [dr(0,np,np)-1]), ex_si('Inker', npp-nam, 'Inker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(citoyen, nc-nom, citoyen, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(323, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(intérêt, nc-nom, intérêt, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(israélienne, adj-adj, israélienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(israéliens, adj-adj, israéliens, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(négocie, v-ver:pres, négocie, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(sociale, adj-adj, sociale, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(324, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conclu, vpp-ver:pper, conclu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(israélien, adj-adj, israélien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(325, Result) :-
      prob_parse([ ex_si('Pinkerton', npp-nam, 'Pinkerton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(actif, adj-adj, actif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si('Saint-Bernard', npp-nam, 'Saint-Bernard', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(variété, nc-nom, variété, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ministères, nc-nom, ministères, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(religieuse, adj-adj, religieuse, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(musique, nc-nom, musique, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prisons, nc-nom, prisons, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(326, Result) :-
      prob_parse([ ex_si('Pinkerton', npp-nam, 'Pinkerton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si('St', npp-nom, 'St', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(327, Result) :-
      prob_parse([ ex_si('Bernard', npp-nam, 'Bernard', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(328, Result) :-
      prob_parse([ ex_si('Beverly', npp-nam, 'Beverly', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(divers, adj-adj, divers, [dr(0,np,n)-1]), ex_si(stages, nc-nom, stages, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(assistante, nc-nom, assistante, [n-1]), ex_si(administrative, adj-adj, administrative, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Wabash', npp-nam, 'Wabash', [dr(0,n,n)-1]), ex_si('County', npp-nam, 'County', [dr(0,n,n)-1]), ex_si('Economic', npp-nam, 'Economic', [dr(0,n,n)-1]), ex_si('Development', npp-nam, 'Development', [dr(0,n,n)-1]), ex_si('Corporation', npp-nam, 'Corporation', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('WEDCOR', npp-abr, 'WEDCOR', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(329, Result) :-
      prob_parse([ ex_si('Beverly', npp-nam, 'Beverly', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('WEDCOR', npp-nam, 'WEDCOR', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(330, Result) :-
      prob_parse([ ex_si('Rejoignant', vpr-ver:ppre, 'Rejoignant', [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si('Pinkerton', npp-nam, 'Pinkerton', [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Lindsey', npp-nam, 'Lindsey', [dr(0,np,np)-1]), ex_si('Beverly', npp-nam, 'Beverly', [np-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(assistante, nc-nom, assistante, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(331, Result) :-
      prob_parse([ ex_si('Pinkerton', npp-nam, 'Pinkerton', [np-1]), ex_si(travaille, v-ver:pres, travaille, [dl(0,np,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Beverly', npp-nam, 'Beverly', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(332, Result) :-
      prob_parse([ ex_si('Dean', npp-nam, 'Dean', [dr(0,np,np)-1]), ex_si('Lynn', npp-nam, 'Lynn', [dr(0,np,np)-1]), ex_si('Hart', npp-nam, 'Hart', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Storey', npp-nam, 'Storey', [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résidence, nc-nom, résidence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Reno', npp-nam, 'Reno', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bloc, nc-nom, bloc, [n-1]), ex_si(4200, adj-num, 4200, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Truckee', npp-nam, 'Truckee', [dr(0,np,np)-1]), ex_si('River', npp-nam, 'River', [dr(0,np,np)-1]), ex_si('Trail', npp-nam, 'Trail', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(333, Result) :-
      prob_parse([ ex_si('Dean', npp-nam, 'Dean', [dr(0,np,np)-1]), ex_si('Lynn', npp-nam, 'Lynn', [dr(0,np,np)-1]), ex_si('Hart', npp-nam, 'Hart', [np-1]), ex_si(vit, v-ver:pres, vit, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Truckee', npp-nam, 'Truckee', [dr(0,np,np)-1]), ex_si('River', npp-nam, 'River', [dr(0,np,np)-1]), ex_si('Trail', npp-nam, 'Trail', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(334, Result) :-
      prob_parse([ ex_si('Dean', npp-nam, 'Dean', [dr(0,np,np)-1]), ex_si('Lynn', npp-nam, 'Lynn', [dr(0,np,np)-1]), ex_si('Hart', npp-nam, 'Hart', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Storey', npp-nam, 'Storey', [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résidence, nc-nom, résidence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Reno', npp-nam, 'Reno', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bloc, nc-nom, bloc, [n-1]), ex_si(4200, adj-num, 4200, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Truckee', npp-nam, 'Truckee', [dr(0,np,np)-1]), ex_si('River', npp-nam, 'River', [dr(0,np,np)-1]), ex_si('Trail', npp-nam, 'Trail', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(335, Result) :-
      prob_parse([ ex_si('Dean', npp-nam, 'Dean', [dr(0,np,np)-1]), ex_si('Lynn', npp-nam, 'Lynn', [dr(0,np,np)-1]), ex_si('Hart', npp-nam, 'Hart', [np-1]), ex_si(réside, v-ver:pres, réside, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Storey', npp-nam, 'Storey', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(336, Result) :-
      prob_parse([ ex_si('Eiken', npp-nam, 'Eiken', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(équipe, nc-nom, équipe, [np-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('ABC', npp-nam, 'ABC', [dr(0,np,np)-1]), ex_si('Marketing', npp-nam, 'Marketing', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Inc', et-abr, 'Inc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(337, Result) :-
      prob_parse([ ex_si('-', ponct-pun, '-', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(appartenant, vpr-ver:ppre, appartenant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Alan', npp-nam, 'Alan', [dr(0,np,np)-1]), ex_si('Baird', npp-nam, 'Baird', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(habitant, nc-nom, habitant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jefferson', npp-nam, 'Jefferson', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(338, Result) :-
      prob_parse([ ex_si('Baird', npp-nam, 'Baird', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('ABC', npp-abr, 'ABC', [dr(0,np,np)-1]), ex_si('Marketing', npp-nam, 'Marketing', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Inc', et-abr, 'Inc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(339, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Baird', npp-nam, 'Baird', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Eiken', npp-nam, 'Eiken', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sélectionné, vpp-ver:pper, sélectionné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('LANGCO', npp-nam, 'LANGCO', [dr(0,np,np)-1]), ex_si('Tools', npp-nam, 'Tools', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Plastic', npp-nam, 'Plastic', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Inc', et-nam, 'Inc', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Oran', npp-nam, 'Oran', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Missouri', npp-nam, 'Missouri', [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(340, Result) :-
      prob_parse([ ex_si('Baird', npp-nam, 'Baird', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Eiken', npp-nam, 'Eiken', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('LANGCO', npp-nam, 'LANGCO', [dr(0,np,np)-1]), ex_si('Tools', npp-nam, 'Tools', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Plastic', npp-nam, 'Plastic', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(341, Result) :-
      prob_parse([ ex_si('McDonald\'s', npp-nam, 'McDonald\'s', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(associait, v-ver:impf, associait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('DreamWorks', npp-nam, 'DreamWorks', [dr(0,np,np)-1]), ex_si('Animation', npp-nam, 'Animation', [dr(0,np,np)-1]), ex_si('SKG', npp-nam, 'SKG', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(promotions, nc-nom, promotions, [n-1]), ex_si(basées, vpp-ver:pper, basées, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnages, nc-nom, personnages, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(studio, nc-nom, studio, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si('Shrek', npp-nam, 'Shrek', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(342, Result) :-
      prob_parse([ ex_si('Shrek', npp-nam, 'Shrek', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('McDonald\'s', npp-nam, 'McDonald\'s', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(343, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('C\'est', v-ver:pres, 'C\'est', [np-1]), ex_si(irresponsable, adj-adj, irresponsable, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si('Susan', npp-nam, 'Susan', [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Linn', npp-nam, 'Linn', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(psychologue, nc-nom, psychologue, [dr(0,dl(0,np,np),n)-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si('Judge', npp-nam, 'Judge', [dr(0,dl(0,n,n),n)-1]), ex_si('Baker', npp-nam, 'Baker', [dr(0,n,n)-1]), ex_si('Children\'s', npp-nam, 'Children\'s', [dr(0,n,n)-1]), ex_si('Center', npp-nam, 'Center', [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Boston', npp-nam, 'Boston', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('Consuming', npp-nam, 'Consuming', [dr(0,np,np)-1]), ex_si('Kids', npp-nam, 'Kids', [dr(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [np-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(344, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Consuming', npp-nam, 'Consuming', [dr(0,np,np)-1]), ex_si('Kids', npp-nam, 'Kids', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Susan', npp-nam, 'Susan', [dr(0,np,np)-1]), ex_si('Linn', npp-nam, 'Linn', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(345, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('C\'est', v-ver:pres, 'C\'est', [np-1]), ex_si(irresponsable, adj-adj, irresponsable, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [let-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si('Susan', npp-nam, 'Susan', [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Linn', npp-nam, 'Linn', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(psychologue, nc-nom, psychologue, [dr(0,dl(0,np,np),n)-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si('Judge', npp-nam, 'Judge', [dr(0,dl(0,n,n),n)-1]), ex_si('Baker', npp-nam, 'Baker', [dr(0,n,n)-1]), ex_si('Children\'s', npp-nam, 'Children\'s', [dr(0,n,n)-1]), ex_si('Center', npp-nam, 'Center', [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Boston', npp-nam, 'Boston', [dr(0,dl(0,n,n),np)-1]), ex_si(et, cc-kon, et, [np-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('Consuming', npp-nam, 'Consuming', [dr(0,np,np)-1]), ex_si('Kids', npp-nam, 'Kids', [dr(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [np-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(346, Result) :-
      prob_parse([ ex_si('Susan', npp-nam, 'Susan', [dr(0,np,np)-1]), ex_si('Linn', npp-nam, 'Linn', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tête, nc-nom, tête, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Judge', npp-nam, 'Judge', [dr(0,n,n)-1]), ex_si('Baker', npp-nam, 'Baker', [dr(0,n,n)-1]), ex_si('Children\'s', npp-nam, 'Children\'s', [dr(0,n,n)-1]), ex_si('Center', npp-nam, 'Center', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(347, Result) :-
      prob_parse([ ex_si('Monsieur', nc-abr, 'Monsieur', [dr(0,np,np)-1]), ex_si('Katzenberg', npp-nam, 'Katzenberg', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Disney', npp-nam, 'Disney', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(impliqué, vpp-ver:pper, impliqué, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(médiatisé, vpp-ver:pper, médiatisé, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(récupérer, vinf-ver:infi, récupérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(estimait, v-ver:impf, estimait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(348, Result) :-
      prob_parse([ ex_si('Katzenberg', npp-nam, 'Katzenberg', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(intenté, vpp-ver:pper, intenté, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si('Disney', npp-nam, 'Disney', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(349, Result) :-
      prob_parse([ ex_si('Monsieur', nc-nom, 'Monsieur', [dr(0,np,np)-1]), ex_si('Gotti', npp-nam, 'Gotti', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(purge, v-ver:pres, purge, [dr(0,dl(0,np,s),np)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(neuf, det-num, neuf, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(extorsion, nc-nom, extorsion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(supplémentaires, adj-adj, supplémentaires, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si('Richard', npp-nam, 'Richard', [dl(0,n,n)-1]), ex_si('D.', npp-abr, 'D.', [dl(0,n,n)-1]), ex_si('Casey', npp-nam, 'Casey', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(district, nc-nom, district, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(350, Result) :-
      prob_parse([ ex_si('Gotti', npp-nam, 'Gotti', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(extorsion, nc-nom, extorsion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(351, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(sentence, nc-nom, sentence, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hier, adv-adv, hier, [n-1]), ex_si(concernait, v-ver:impf, concernait, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(condamnation, nc-nom, condamnation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), ex_si('Gotti', npp-nam, 'Gotti', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(extorsion, nc-nom, extorsion, [n-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(finalement, adv-adv, finalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Salvatore', npp-nam, 'Salvatore', [dr(0,np,np)-1]), ex_si('Gravano', npp-nam, 'Gravano', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(352, Result) :-
      prob_parse([ ex_si('Salvatore', npp-nam, 'Salvatore', [dr(0,np,np)-1]), ex_si('Gravano', npp-nam, 'Gravano', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), ex_si('Gotti', npp-nam, 'Gotti', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(353, Result) :-
      prob_parse([ ex_si('Monsieur', nc-nom, 'Monsieur', [dr(0,np,np)-1]), ex_si('Gotti', npp-nam, 'Gotti', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(purge, v-ver:pres, purge, [dr(0,dl(0,np,s),np)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(neuf, det-num, neuf, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(extorsion, nc-nom, extorsion, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(supplémentaires, adj-adj, supplémentaires, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si('Richard', npp-nam, 'Richard', [dl(0,n,n)-1]), ex_si('D.', npp-abr, 'D.', [dl(0,n,n)-1]), ex_si('Casey', npp-nam, 'Casey', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(district, nc-nom, district, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(354, Result) :-
      prob_parse([ ex_si('Casey', npp-nam, 'Casey', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(juge, nc-nom, juge, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(district, nc-nom, district, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(355, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(convoqués, vpp-ver:pper, convoqués, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(solidarité, nc-nom, solidarité, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(latine, adj-adj, latine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(agressé, vpp-ver:pper, agressé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(verbalement, adv-adv, verbalement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(salvadorien, adj-adj, salvadorien, [dl(0,n,n)-1]), ex_si('Alfredo', npp-nam, 'Alfredo', [dl(0,n,n)-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(356, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Alfredo', npp-nam, 'Alfredo', [dl(0,n,n)-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(357, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Vinicio', npp-nam, 'Vinicio', [dl(0,n,n)-1]), ex_si('Cerezo', npp-nam, 'Cerezo', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tacitement, adv-adv, tacitement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Alfredo', npp-nam, 'Alfredo', [dl(0,n,n)-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), ex_si(responsable, nc-nom, responsable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(prévaut, v-ver:impf, prévaut, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(suite, nc-nom, suite, [dr(0,pp_a,np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(offensive, nc-nom, offensive, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Front', nc-nam, 'Front', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('Farabundo', npp-nam, 'Farabundo', [dl(0,n,n)-1]), ex_si('Marti', npp-nam, 'Marti', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dl(0,n,n)-1]), ex_si('FMLN', npp-abr, 'FMLN', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(lancée, vpp-ver:pper, lancée, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(samedi, nc-nom, samedi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(358, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('FMLN', npp-abr, 'FMLN', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lancé, vpp-ver:pper, lancé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(offensive, nc-nom, offensive, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(359, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Vinicio', npp-nam, 'Vinicio', [dl(0,n,n)-1]), ex_si('Cerezo', npp-nam, 'Cerezo', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tacitement, adv-adv, tacitement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Alfredo', npp-nam, 'Alfredo', [dl(0,n,n)-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [dl(0,n,n)-1]), ex_si(responsable, nc-nom, responsable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(prévaut, v-ver:impf, prévaut, [dl(0,np,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Salvador', npp-nam, 'Salvador', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(offensive, nc-nom, offensive, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Front', npp-nam, 'Front', [n-1]), ex_si('Farabundo', npp-nam, 'Farabundo', [dl(0,n,n)-1]), ex_si('Marti', npp-nam, 'Marti', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('FMLN', npp-abr, 'FMLN', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(lancée, vpp-ver:pper, lancée, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(samedi, nc-nom, samedi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(360, Result) :-
      prob_parse([ ex_si('Alfredo', npp-nam, 'Alfredo', [dr(0,np,np)-1]), ex_si('Cristiani', npp-nam, 'Cristiani', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Salvador', npp-nam, 'Salvador', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(361, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Minnesota', npp-nam, 'Minnesota', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Tim', npp-nam, 'Tim', [dr(0,np,np)-1]), ex_si('Pawlenty', npp-nam, 'Pawlenty', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(signé, vpp-ver:pper, signé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(oblige, v-ver:pres, oblige, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(quantité, nc-nom, quantité, [n-1]), ex_si(importante, adj-adj, importante, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(besoins, nc-nom, besoins, [n-1]), ex_si(énergétiques, adj-adj, énergétiques, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(sources, nc-nom, sources, [n-1]), ex_si(renouvelables, vpp-ver:pper, renouvelables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(362, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(quantité, nc-nom, quantité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(produite, vpp-ver:pper, produite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(éoliennes, nc-nom, éoliennes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(élève, v-ver:pres, élève, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(895, det-num, 895, [dr(0,np,n)-1]), ex_si(mégawatts, nc-nom, mégawatts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(363, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(quantité, nc-nom, quantité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(produite, vpp-ver:pper, produite, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Minnesota', npp-nam, 'Minnesota', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(élève, v-ver:pres, élève, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(895, det-num, 895, [dr(0,np,n)-1]), ex_si(mégawatts, nc-nom, mégawatts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(364, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Giorgio', npp-nam, 'Giorgio', [dr(0,np,np)-1]), ex_si('Napolitano', npp-nam, 'Napolitano', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Romano', npp-nam, 'Romano', [dr(0,np,np)-1]), ex_si('Prodi', npp-nam, 'Prodi', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('Prodi', npp-nam, 'Prodi', [np-1]), ex_si(devra, v-ver:futu, devra, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(confiance, nc-nom, confiance, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(365, Result) :-
      prob_parse([ ex_si('Romano', npp-nam, 'Romano', [dr(0,np,np)-1]), ex_si('Prodi', npp-nam, 'Prodi', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(italien, adj-adj, italien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(366, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(19, adj-num, 19, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2007, adj-num, 2007, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('XM', npp-abr, 'XM', [dr(0,np,np)-1]), ex_si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), ex_si('Radio', npp-nam, 'Radio', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sirius', npp-nam, 'Sirius', [dr(0,np,np)-1]), ex_si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), ex_si('Radio', npp-nam, 'Radio', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(changer, vinf-ver:infi, changer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(radio, nc-nom, radio, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(satellite, nc-nom, satellite, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('XM', npp-abr, 'XM', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sirius', npp-nam, 'Sirius', [np-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(fusionner, vinf-ver:infi, fusionner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(créant, vpr-ver:ppre, créant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(fournisseur, nc-nom, fournisseur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(radio, nc-nom, radio, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(satellite, nc-nom, satellite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(367, Result) :-
      prob_parse([ ex_si('XM', npp-abr, 'XM', [dr(0,np,np)-1]), ex_si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), ex_si('Radio', npp-nam, 'Radio', [np-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(fusionner, vinf-ver:infi, fusionner, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('Sirius', npp-nam, 'Sirius', [dr(0,np,np)-1]), ex_si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), ex_si('Radio', npp-nam, 'Radio', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(368, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(19, adj-num, 19, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(2007, adj-num, 2007, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('XM', npp-abr, 'XM', [dr(0,np,np)-1]), ex_si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), ex_si('Radio', npp-nam, 'Radio', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sirius', npp-nam, 'Sirius', [dr(0,np,np)-1]), ex_si('Satellite', npp-nam, 'Satellite', [dr(0,np,np)-1]), ex_si('Radio', npp-nam, 'Radio', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(changer, vinf-ver:infi, changer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(radio, nc-nom, radio, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(satellite, nc-nom, satellite, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('XM', npp-abr, 'XM', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sirius', npp-nam, 'Sirius', [np-1]), ex_si(vont, v-ver:pres, vont, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(fusionner, vinf-ver:infi, fusionner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(créant, vpr-ver:ppre, créant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(fournisseur, nc-nom, fournisseur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(radio, nc-nom, radio, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(satellite, nc-nom, satellite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(369, Result) :-
      prob_parse([ ex_si('XM', npp-abr, 'XM', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sirius', npp-nam, 'Sirius', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(radio, nc-nom, radio, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(satellite, nc-nom, satellite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(370, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PDG', nc-abr, 'PDG', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sirius', npp-nam, 'Sirius', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Mel', npp-nam, 'Mel', [dr(0,np,np)-1]), ex_si('Karmazin', npp-nam, 'Karmazin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(conservera, v-ver:futu, conservera, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('PDG', nc-abr, 'PDG', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(371, Result) :-
      prob_parse([ ex_si('Mel', npp-nam, 'Mel', [dr(0,np,np)-1]), ex_si('Karmazin', npp-nam, 'Karmazin', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dirigeant, nc-nom, dirigeant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sirius', npp-nam, 'Sirius', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(372, Result) :-
      prob_parse([ ex_si('Fulham', npp-nam, 'Fulham', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pression, nc-nom, pression, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(égaliser, vinf-ver:infi, égaliser, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si('Manchester', npp-nam, 'Manchester', [dr(0,np,np)-1]), ex_si('United', npp-nam, 'United', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(imposé, vpp-ver:pper, imposé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(poursuivant, vpr-ver:ppre, poursuivant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(victoires, nc-nom, victoires, [n-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(saison, nc-nom, saison, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Premiere', npp-nam, 'Premiere', [dr(0,n,n)-1]), ex_si('League', npp-nam, 'League', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(373, Result) :-
      prob_parse([ ex_si('Manchester', npp-nam, 'Manchester', [dr(0,np,np)-1]), ex_si('United', npp-nam, 'United', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(battu, vpp-ver:pper, battu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Fulham', npp-nam, 'Fulham', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(374, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(nomination, nc-nom, nomination, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Trailer', npp-nam, 'Trailer', [dr(0,np,np)-1]), ex_si('Park', npp-nam, 'Park', [dr(0,np,np)-1]), ex_si('Boys', npp-nam, 'Boys', [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Movie', npp-nam, 'Movie', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(rares, adj-adj, rares, [dr(0,n,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('box-office', nc-nom, 'box-office', [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(375, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Trailer', npp-nam, 'Trailer', [dr(0,dl(0,np,s_inf),np)-1]), ex_si('Park', npp-nam, 'Park', [dr(0,np,np)-1]), ex_si('Boys', npp-nam, 'Boys', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,n,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(376, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pèlerinage, nc-nom, pèlerinage, [n-1]), ex_si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(fleuve, nc-nom, fleuve, [n-1]), ex_si('Gange', npp-nam, 'Gange', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(vénéré, vpp-ver:pper, vénéré, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hindous, nc-nom, hindous, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(déesse, nc-nom, déesse, [n-1]), ex_si('Ganga', npp-nam, 'Ganga', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(rassemblement, nc-nom, rassemblement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(participants, nc-nom, participants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(éclipsant, vpr-ver:ppre, éclipsant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(pèlerinages, nc-nom, pèlerinages, [n-1]), ex_si(religieux, adj-adj, religieux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(377, Result) :-
      prob_parse([ ex_si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(participent, v-ver:pres, participent, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(pèlerinage, nc-nom, pèlerinage, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(fleuve, nc-nom, fleuve, [n-1]), ex_si('Gange', npp-nam, 'Gange', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(378, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(saints, adj-adj, saints, [dl(0,n,n)-1]), ex_si(hindous, adj-adj, hindous, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(appelés, vpp-ver:pper, appelés, [dr(0,dl(0,n,n),np)-1]), ex_si(sadhus, et-nom, sadhus, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(menacé, vpp-ver:pper, menacé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(boycotter, vinf-ver:infi, boycotter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(festivals, nc-nom, festivals, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(pèlerinage, nc-nom, pèlerinage, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Gange', npp-nam, 'Gange', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(rituels, nc-nom, rituels, [n-1]), ex_si(consistent, v-ver:pres, consistent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(laver, vinf-ver:infi, laver, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(péchés, nc-nom, péchés, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(baignant, vpr-ver:ppre, baignant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(379, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(saints, adj-adj, saints, [dl(0,n,n)-1]), ex_si(hindous, adj-adj, hindous, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(boycotté, vpp-ver:pper, boycotté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(festivals, nc-nom, festivals, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(pèlerinage, nc-nom, pèlerinage, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Gange', npp-nam, 'Gange', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(380, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(prince, nc-nom, prince, [n-1]), ex_si('Laurent', npp-nam, 'Laurent', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(cadet, nc-nom, cadet, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('Albert', npp-nam, 'Albert', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(interrogé, vpp-ver:pper, interrogé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(hier, adv-adv, hier, [dr(0,dl(1,s,s),n)-1]), ex_si(soir, nc-nom, soir, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(assiste, v-ver:pres, assiste, [dr(0,dl(0,np,s),pp)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(séance, nc-nom, séance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hasselt', npp-nam, 'Hasselt', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fraude, nc-nom, fraude, [n-1]), ex_si(maritime, adj-adj, maritime, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(passionne, v-ver:pres, passionne, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(belges, adj-adj, belges, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(381, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('Albert', npp-nam, 'Albert', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(prince, nc-nom, prince, [n-1]), ex_si('Laurent', npp-nam, 'Laurent', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(382, Result) :-
      prob_parse([ ex_si('Adam', npp-nam, 'Adam', [dr(0,np,np)-1]), ex_si('DePrisco', npp-nam, 'DePrisco', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(19, det-num, 19, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(originaire, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Woodbridge', npp-nam, 'Woodbridge', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Ontario', npp-nam, 'Ontario', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(mort, adj-adj, mort, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Acapulco', npp-nam, 'Acapulco', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(383, Result) :-
      prob_parse([ ex_si('Adam', npp-nam, 'Adam', [dr(0,np,np)-1]), ex_si('DePrisco', npp-nam, 'DePrisco', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tué, vpp-ver:pper, tué, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(384, Result) :-
      prob_parse([ ex_si('DePrisco', npp-nam, 'DePrisco', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si('Canadien', nc-nam, 'Canadien', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,np,s_ppart)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('Nancy', npp-nam, 'Nancy', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Domenic', npp-nam, 'Domenic', [dr(0,np,np)-1]), ex_si('Ianiero', npp-nam, 'Ianiero', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(originaire, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Woodbridge', npp-nam, 'Woodbridge', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(poignardé, vpp-ver:pper, poignardé, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(hôtel, nc-nom, hôtel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(luxe, nc-nom, luxe, [n-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Cancun', npp-nam, 'Cancun', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(également, adv-adv, également, [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(destination, nc-nom, destination, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vacances, nc-nom, vacances, [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(385, Result) :-
      prob_parse([ ex_si('Nancy', npp-nam, 'Nancy', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Domenic', npp-nam, 'Domenic', [dr(0,np,np)-1]), ex_si('Ianiero', npp-nam, 'Ianiero', [np-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(citoyenneté, nc-nom, citoyenneté, [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(386, Result) :-
      prob_parse([ ex_si('DePrisco', npp-nam, 'DePrisco', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si('Canadien', nc-nam, 'Canadien', [n-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si('Nancy', npp-nam, 'Nancy', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Domenic', npp-nam, 'Domenic', [dr(0,np,np)-1]), ex_si('Ianiero', npp-nam, 'Ianiero', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(originaire, adj-adj, originaire, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Woodbridge', npp-nam, 'Woodbridge', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(poignardé, vpp-ver:pper, poignardé, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(hôtel, nc-nom, hôtel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(luxe, nc-nom, luxe, [n-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Cancun', npp-nam, 'Cancun', [np-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(également, adv-adv, également, [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(destination, nc-nom, destination, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vacances, nc-nom, vacances, [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(387, Result) :-
      prob_parse([ ex_si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), ex_si('Ianiero', npp-nam, 'Ianiero', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuée, vpp-ver:pper, tuée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(388, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(considérée, vpp-ver:pper, considérée, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(surprenante, adj-adj, surprenante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Banque', nc-nam, 'Banque', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(relevé, vpp-ver:pper, relevé, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intérêt, nc-nom, intérêt, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(1,s,s)),np)-1]), ex_si('5,25', det-num, '5,25', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(389, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intérêt, nc-nom, intérêt, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passés, vpp-ver:pper, passés, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si('5,25', det-num, '5,25', [dr(0,np,n)-1]), ex_si('%.', nc-abr, '%.', [n-1])], Result).
sent(390, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(vendredi, nc-nom, vendredi, [dr(0,n,n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Saskatchewan', npp-nam, 'Saskatchewan', [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(succombé, vpp-ver:pper, succombé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(391, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Saskatchewan', npp-nam, 'Saskatchewan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(392, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparu, vpp-ver:pper, apparu, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('iPhone', npp-nam, 'iPhone', [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(présenté, vpp-ver:pper, présenté, [dl(0,np,s_pass)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('Apple', npp-nam, 'Apple', [np-1]), ex_si('Inc', npp-nam, 'Inc', [dl(0,np,np)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(communication, nc-nom, communication, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Jose', npp-nam, 'Jose', [np-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('Cisco', npp-nam, 'Cisco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(393, Result) :-
      prob_parse([ ex_si('Apple', npp-nam, 'Apple', [np-1]), ex_si('Inc', npp-nam, 'Inc', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(394, Result) :-
      prob_parse([ ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Jose', npp-nam, 'Jose', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(395, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparu, vpp-ver:pper, apparu, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('iPhone', npp-nam, 'iPhone', [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(présenté, vpp-ver:pper, présenté, [dl(0,np,s_pass)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('Apple', npp-nam, 'Apple', [np-1]), ex_si('Inc', npp-nam, 'Inc', [dl(0,np,np)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réseaux, nc-nom, réseaux, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(communication, nc-nom, communication, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(basé, vpp-ver:pper, basé, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Jose', npp-nam, 'Jose', [np-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('Cisco', npp-nam, 'Cisco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(396, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('iPhone', nc-abr, 'iPhone', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Cisco', npp-nam, 'Cisco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(397, Result) :-
      prob_parse([ ex_si('Cisco', npp-nam, 'Cisco', [np-1]), ex_si(déclare, v-ver:pres, déclare, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marque, nc-nom, marque, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2000, pro-num, 2000, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dépassé, vpp-ver:pper, dépassé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Infogear', npp-nam, 'Infogear', [dr(0,np,np)-1]), ex_si('Technology', npp-nam, 'Technology', [dr(0,np,np)-1]), ex_si('Corp', npp-nam, 'Corp', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(398, Result) :-
      prob_parse([ ex_si('Cisco', npp-nam, 'Cisco', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rachetée, vpp-ver:pper, rachetée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Infogear', npp-nam, 'Infogear', [dr(0,np,np)-1]), ex_si('Technology', npp-nam, 'Technology', [dr(0,np,np)-1]), ex_si('Corp', et-abr, 'Corp', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(399, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(perdre, vinf-ver:infi, perdre, [dl(0,np,s_inf)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(courant, nc-nom, courant, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('125.000', det-num, '125.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Saint-Louis', npp-nam, 'Saint-Louis', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Missouri', npp-nam, 'Missouri', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(disent, v-ver:pres, disent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(perdent, v-ver:pres, perdent, [dr(0,dl(0,np,s),np)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(publics, adj-adj, publics, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Springfield', npp-nam, 'Springfield', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Ern', npp-nam, 'Ern', [dr(0,np,np)-1]), ex_si('DeCamp', npp-nam, 'DeCamp', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(400, Result) :-
      prob_parse([ ex_si('125.000', det-num, '125.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(401, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(séisme, nc-nom, séisme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(magnitude, nc-nom, magnitude, [n-1]), ex_si('8,3', adj-num, '8,3', [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si('Pacifique', npp-nam, 'Pacifique', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émis, vpp-ver:pper, émis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(alerte, nc-nom, alerte, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si('nord-est', nc-nom, 'nord-est', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hokkaido', npp-nam, 'Hokkaido', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(alerte, nc-nom, alerte, [n-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(importante, adj-adj, importante, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Honshu', npp-nam, 'Honshu', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(402, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si('nord-est', nc-nom, 'nord-est', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Hokkaido', npp-nam, 'Hokkaido', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(403, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tueur, nc-nom, tueur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mumbai', npp-nam, 'Mumbai', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(nuit, nc-nom, nuit, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dr(0,dl(0,np,s_ppres),np),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(dernier, nc-nom, dernier, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(jeunes, adj-adj, jeunes, [dr(0,n,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(assassinés, vpp-ver:pper, assassinés, [dl(0,n,n)-1]), ex_si(récemment, adv-adv, récemment, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(404, Result) :-
      prob_parse([ ex_si('Cinq', det-num, 'Cinq', [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tueur, nc-nom, tueur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Mumbai', npp-nam, 'Mumbai', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(405, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bombay', npp-nam, 'Bombay', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(90, det-num, 90, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(chargée, vpp-ver:pper, chargée, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tueur, nc-nom, tueur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(fonctionnaire, nc-nom, fonctionnaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(comparé, vpp-ver:pper, comparé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Raman', npp-nam, 'Raman', [dr(0,np,np)-1]), ex_si('Raghav', npp-nam, 'Raghav', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(matraqué, vpp-ver:pper, matraqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(9, det-num, 9, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(trottoirs, nc-nom, trottoirs, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(sommeil, nc-nom, sommeil, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1960, adj-num, 1960, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(406, Result) :-
      prob_parse([ ex_si('Raman', npp-nam, 'Raman', [dr(0,np,np)-1]), ex_si('Raghav', npp-nam, 'Raghav', [np-1]), ex_si(travaille, v-ver:pres, travaille, [dl(0,np,s)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(fonctionnaire, nc-nom, fonctionnaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(407, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bombay', npp-nam, 'Bombay', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(90, det-num, 90, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(chargée, vpp-ver:pper, chargée, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(attraper, vinf-ver:infi, attraper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tueur, nc-nom, tueur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(comparé, vpp-ver:pper, comparé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Raman', npp-nam, 'Raman', [dr(0,np,np)-1]), ex_si('Raghav', npp-nam, 'Raghav', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(matraqué, vpp-ver:pper, matraqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(9, det-num, 9, [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(trottoirs, nc-nom, trottoirs, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(sommeil, nc-nom, sommeil, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1960, adj-num, 1960, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(408, Result) :-
      prob_parse([ ex_si(9, det-num, 9, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassinées, vpp-ver:pper, assassinées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Raman', npp-nam, 'Raman', [dr(0,np,np)-1]), ex_si('Raghav', npp-nam, 'Raghav', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(409, Result) :-
      prob_parse([ ex_si('Arnold', npp-nam, 'Arnold', [dr(0,np,np)-1]), ex_si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('Terminator', npp-nam, 'Terminator', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(valu, vpp-ver:pper, valu, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(surnom, nc-nom, surnom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Governator', npp-nam, 'Governator', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(invité, vpp-ver:pper, invité, [dr(0,pp_par,np)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(410, Result) :-
      prob_parse([ ex_si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(attentes, nc-nom, attentes, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(élevées, vpp-ver:pper, élevées, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(réduction, nc-nom, réduction, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), ex_si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(411, Result) :-
      prob_parse([ ex_si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), ex_si('Harper', npp-nam, 'Harper', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(412, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PM', nc-abr, 'PM', [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Governator', npp-nam, 'Governator', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rencontrés, vpp-ver:pper, rencontrés, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendus, vpp-ver:pper, rendus, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(investiture, nc-nom, investiture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('Calderón', npp-nam, 'Calderón', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(413, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('PM', nc-abr, 'PM', [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(investiture, nc-nom, investiture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Mexique', npp-nam, 'Mexique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(414, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(abattu, vpp-ver:pper, abattu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, pro-num, un, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(anciens, adj-adj, anciens, [dr(0,n,n)-1]), ex_si(satellites, nc-nom, satellites, [n-1]), ex_si(météorologiques, adj-adj, météorologiques, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(missile, nc-nom, missile, [n-1]), ex_si(balistique, adj-adj, balistique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(inquiètent, v-ver:pres, inquiètent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(415, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(416, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Apple', npp-nam, 'Apple', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(78, det-num, 78, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(trimestre, nc-nom, trimestre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(30, adj-num, 30, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2006, adj-num, 2006, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(417, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Apple', npp-nam, 'Apple', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(78, det-num, 78, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(trimestre, nc-nom, trimestre, [n-1]), ex_si(2006, adj-num, 2006, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(418, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(disparu, vpp-ver:pper, disparu, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jungles, nc-nom, jungles, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cambodge', npp-nam, 'Cambodge', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(8, det-num, 8, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvée, vpp-ver:pper, retrouvée, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enfant, nc-nom, enfant, [n-1]), ex_si(sauvage, adj-adj, sauvage, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(19, det-num, 19, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(419, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(identifiée, vpp-ver:pper, identifiée, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,n,n),np)-1]), ex_si('Rochom', npp-nam, 'Rochom', [dr(0,np,np)-1]), ex_si('P\'ngieng', npp-nam, 'P\'ngieng', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(disparu, vpp-ver:pper, disparu, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1988, pro-num, 1988, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(gardait, v-ver:impf, gardait, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(buffles, nc-nom, buffles, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(reculée, vpp-ver:pper, reculée, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(jungles, nc-nom, jungles, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('nord-est', nc-nom, 'nord-est', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cambodge', npp-nam, 'Cambodge', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(420, Result) :-
      prob_parse([ ex_si('Rochom', npp-nam, 'Rochom', [dr(0,np,np)-1]), ex_si('P\'ngieng', npp-nam, 'P\'ngieng', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(disparu, vpp-ver:pper, disparu, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jungles, nc-nom, jungles, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cambodge', npp-nam, 'Cambodge', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(421, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(philippine, adj-adj, philippine, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CHR', npp-abr, 'CHR', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(divers, adj-adj, divers, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(exagéré, adj-adj, exagéré, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitole, nc-nom, capitole, [n-1]), ex_si(provincial, adj-adj, provincial, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Iloilo', npp-nam, 'Iloilo', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mercredi, nc-nom, mercredi, [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(422, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si('Niel', npp-nam, 'Niel', [dl(0,n,n)-1]), ex_si('Tupas', npp-nam, 'Tupas', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sr', nc-abr, 'Sr', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(423, Result) :-
      prob_parse([ ex_si(et, cc-kon, et, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(capitole, nc-nom, capitole, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(policiers, nc-nom, policiers, [n-1]), ex_si(armés, vpp-ver:pper, armés, [dr(0,dl(0,n,n),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(fusils, nc-nom, fusils, [n-1]), ex_si('M-16', npp-nam, 'M-16', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitole, nc-nom, capitole, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(brisé, vpp-ver:pper, brisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(portes, nc-nom, portes, [n-1]), ex_si(vitrées, adj-adj, vitrées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(détruit, v-ver:pres, détruit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(portes, nc-nom, portes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(fer, nc-nom, fer, [n-1]), ex_si(cadenassées, vpp-ver:pper, cadenassées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(424, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(fusils, nc-nom, fusils, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pointés, vpp-ver:pper, pointés, [dl(0,np,s_pass)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(425, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si(philippins, adj-adj, philippins, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(426, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(philippine, adj-adj, philippine, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CHR', npp-abr, 'CHR', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(divers, adj-adj, divers, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(exagéré, adj-adj, exagéré, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitole, nc-nom, capitole, [n-1]), ex_si(provincial, adj-adj, provincial, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Iloilo', npp-nam, 'Iloilo', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mercredi, nc-nom, mercredi, [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(427, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(arrêter, vinf-ver:infi, arrêter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si('Niel', npp-nam, 'Niel', [dl(0,n,n)-1]), ex_si('Tupas', npp-nam, 'Tupas', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sr', nc-abr, 'Sr', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(428, Result) :-
      prob_parse([ ex_si(et, cc-kon, et, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(capitole, nc-nom, capitole, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(policiers, nc-nom, policiers, [n-1]), ex_si(armés, vpp-ver:pper, armés, [dr(0,dl(0,n,n),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(fusils, nc-nom, fusils, [n-1]), ex_si('M-16', npp-nam, 'M-16', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitole, nc-nom, capitole, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(brisé, vpp-ver:pper, brisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(portes, nc-nom, portes, [n-1]), ex_si(vitrées, adj-adj, vitrées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(détruit, v-ver:pres, détruit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(portes, nc-nom, portes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(fer, nc-nom, fer, [n-1]), ex_si(cadenassées, vpp-ver:pper, cadenassées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(429, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(fusils, nc-nom, fusils, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pointés, vpp-ver:pper, pointés, [dl(0,np,s_pass)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(civils, nc-nom, civils, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(430, Result) :-
      prob_parse([ ex_si('Niel', npp-nam, 'Niel', [dr(0,np,np)-1]), ex_si('Tupas', npp-nam, 'Tupas', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(431, Result) :-
      prob_parse([ ex_si('Baena', npp-nam, 'Baena', [dr(0,np,np)-1]), ex_si('Soares', npp-nam, 'Soares', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(évacué, vpp-ver:pper, évacué, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôtel, nc-nom, hôtel, [n-1]), ex_si('Sheraton', npp-nam, 'Sheraton', [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('état-major', nc-nom, 'état-major', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(rencontré, vpp-ver:pper, rencontré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(hautes, adj-adj, hautes, [dr(0,n,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(salvadoriennes, adj-adj, salvadoriennes, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sources, nc-nom, sources, [n-1]), ex_si(diplomatiques, adj-adj, diplomatiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(432, Result) :-
      prob_parse([ ex_si('Baena', npp-nam, 'Baena', [dr(0,np,np)-1]), ex_si('Soares', npp-nam, 'Soares', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(armées, adj-adj, armées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(433, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('FMLN', npp-abr, 'FMLN', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lancé, vpp-ver:pper, lancé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(agression, nc-nom, agression, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(utilisant, vpr-ver:ppre, utilisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(principalement, adv-adv, principalement, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(concentration, nc-nom, concentration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combattants, nc-nom, combattants, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(métropolitaine, adj-adj, métropolitaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Salvador', npp-nam, 'Salvador', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(434, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('FMLN', npp-abr, 'FMLN', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Salvador', npp-nam, 'Salvador', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(435, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sait, v-ver:pres, sait, [dr(0,dl(0,np,s),s_whq)-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instant, nc-nom, instant, [n-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(proches, nc-nom, proches, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réclamé, vpp-ver:pper, réclamé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(crash, nc-nom, crash, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(436, Result) :-
      prob_parse([ ex_si('Quatre', det-num, 'Quatre', [dr(0,np,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(morts, vpp-ver:pper, morts, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accident, nc-nom, accident, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(437, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(match, nc-nom, match, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Universiade', nc-nam, 'Universiade', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(2007, adj-num, 2007, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(hockey, nc-nom, hockey, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(battu, vpp-ver:pper, battu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('5-0', adj-num, '5-0', [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(match, nc-nom, match, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dl(0,np,s_ppart)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Kazakhstan', npp-nam, 'Kazakhstan', [n-1]), ex_si('3-1', pro-num, '3-1', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(438, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(battu, vpp-ver:pper, battu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(439, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(match, nc-nom, match, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Universiade', nc-nam, 'Universiade', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(2007, adj-num, 2007, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(hockey, nc-nom, hockey, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(battu, vpp-ver:pper, battu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('5-0', adj-num, '5-0', [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(match, nc-nom, match, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dl(0,np,s_ppart)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Kazakhstan', npp-nam, 'Kazakhstan', [n-1]), ex_si('3-1', pro-num, '3-1', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(440, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(battu, vpp-ver:pper, battu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Kazakhstan', npp-nam, 'Kazakhstan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(441, Result) :-
      prob_parse([ ex_si('Aux', p+d-prp:det, 'Aux', [dr(0,dr(0,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(agression, nc-nom, agression, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(couteau, nc-nom, couteau, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), ex_si(régionale, adj-adj, régionale, [dl(0,n,n)-1]), ex_si('Lincoln-Sudbury', npp-nam, 'Lincoln-Sudbury', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Sudbury', npp-nam, 'Sudbury', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(élèves, nc-nom, élèves, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(442, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(agression, nc-nom, agression, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(couteau, nc-nom, couteau, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produite, vpp-ver:pper, produite, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si('7h20', npp-num, '7h20', [dr(0,np,np)-1]), ex_si('HNE', npp-abr, 'HNE', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(443, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(bagarre, nc-nom, bagarre, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(éclaté, vpp-ver:pper, éclaté, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(toilettes, nc-nom, toilettes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(garçons, nc-nom, garçons, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victime, nc-nom, victime, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Alenson', npp-nam, 'Alenson', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(suspect, nc-nom, suspect, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Odgren', npp-nam, 'Odgren', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bagarre, nc-nom, bagarre, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(répandue, vpp-ver:pper, répandue, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(couloir, nc-nom, couloir, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coup, nc-nom, coup, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(couteau, nc-nom, couteau, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(444, Result) :-
      prob_parse([ ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Odgren', npp-nam, 'Odgren', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(suspecté, vpp-ver:pper, suspecté, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(poignardé, vpp-ver:pper, poignardé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Alenson', npp-nam, 'Alenson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(445, Result) :-
      prob_parse([ ex_si('Aux', p+d-prp:det, 'Aux', [dr(0,dr(0,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(agression, nc-nom, agression, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(couteau, nc-nom, couteau, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), ex_si(régionale, adj-adj, régionale, [dl(0,n,n)-1]), ex_si('Lincoln-Sudbury', npp-nam, 'Lincoln-Sudbury', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Sudbury', npp-nam, 'Sudbury', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(élèves, nc-nom, élèves, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(446, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(agression, nc-nom, agression, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(couteau, nc-nom, couteau, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produite, vpp-ver:pper, produite, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si('7h20', npp-num, '7h20', [dr(0,np,np)-1]), ex_si('HNE', npp-abr, 'HNE', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(447, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(bagarre, nc-nom, bagarre, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(éclaté, vpp-ver:pper, éclaté, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(toilettes, nc-nom, toilettes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(garçons, nc-nom, garçons, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(victime, nc-nom, victime, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Alenson', npp-nam, 'Alenson', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(suspect, nc-nom, suspect, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Odgren', npp-nam, 'Odgren', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bagarre, nc-nom, bagarre, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(répandue, vpp-ver:pper, répandue, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(couloir, nc-nom, couloir, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coup, nc-nom, coup, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(couteau, nc-nom, couteau, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(448, Result) :-
      prob_parse([ ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Odgren', npp-nam, 'Odgren', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(secondaire, adj-adj, secondaire, [dl(0,n,n)-1]), ex_si(régionale, adj-adj, régionale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lincoln-Sudbury', npp-nam, 'Lincoln-Sudbury', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(449, Result) :-
      prob_parse([ ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(repère, nc-nom, repère, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(450, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grues, nc-nom, grues, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(dominent, v-ver:pres, dominent, [dr(0,dl(0,np,s),np)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(horizon, nc-nom, horizon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(récente, adj-adj, récente, [dr(0,n,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dresse, v-ver:pres, dresse, [dr(0,dl(0,cl_r,s),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chancellerie, nc-nom, chancellerie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(vivra, v-ver:simp, vivra, [dr(0,s,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('Gerhard', npp-nam, 'Gerhard', [dl(0,n,n)-1]), ex_si('Schroeder', npp-nam, 'Schroeder', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cabinet, nc-nom, cabinet, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si(tiendra, v-ver:futu, tiendra, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(réunions, nc-nom, réunions, [n-1]), ex_si(régulières, adj-adj, régulières, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(451, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(érigés, vpp-ver:pper, érigés, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(452, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bâtiment, nc-nom, bâtiment, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Reichstag', npp-nam, 'Reichstag', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(construit, vpp-ver:pper, construit, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(abriter, vinf-ver:infi, abriter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Reichstag', npp-nam, 'Reichstag', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(originel, adj-adj, originel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Empire', npp-nam, 'Empire', [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(453, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(inauguré, vpp-ver:pper, inauguré, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1894, pro-num, 1894, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(abrité, vpp-ver:pper, abrité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Reichstag', npp-nam, 'Reichstag', [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(1933, pro-num, 1933, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(454, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(construits, vpp-ver:pper, construits, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(455, Result) :-
      prob_parse([ ex_si('Seule', adv-adv, 'Seule', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(poignée, nc-nom, poignée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ambassades, nc-nom, ambassades, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(principalement, adv-adv, principalement, [dr(0,np,np)-1]), ex_si(celles, pro-pro:dem, celles, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(accrédités, vpp-ver:pper, accrédités, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('RDA', npp-abr, 'RDA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(existants, vpp-ver:ppre, existants, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(456, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(ambassades, nc-nom, ambassades, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dû, vpp-ver:pper, dû, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(adapter, vinf-ver:infi, adapter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(nouvel, adj-adj, nouvel, [dr(0,n,n)-1]), ex_si(usage, nc-nom, usage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(457, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(construits, vpp-ver:pper, construits, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(458, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(avérée, vpp-ver:pper, avérée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(précise, adj-adj, précise, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prototype, nc-nom, prototype, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(électrofaible, adj-adj, électrofaible, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(rassemble, v-ver:pres, rassemble, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(électromagnétiques, adj-adj, électromagnétiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(faibles, adj-adj, faibles, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(valu, vpp-ver:pper, valu, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Nobel', nc-nam, 'Nobel', [n-1]), ex_si(1979, adj-num, 1979, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Sheldon', npp-nam, 'Sheldon', [dr(0,np,np)-1]), ex_si('L.', npp-abr, 'L.', [dr(0,np,np)-1]), ex_si('Glashow', npp-nam, 'Glashow', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Abdus', npp-nam, 'Abdus', [dr(0,np,np)-1]), ex_si('Salam', npp-nam, 'Salam', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Steven', npp-nam, 'Steven', [dr(0,np,np)-1]), ex_si('Weinberg', npp-nam, 'Weinberg', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(459, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(électrofaible, adj-adj, électrofaible, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(confirmée, vpp-ver:pper, confirmée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(460, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accélération, nc-nom, accélération, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(changé, vpp-ver:pper, changé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(envisageons, v-ver:pres, envisageons, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(vide, nc-nom, vide, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(461, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(expliquer, vinf-ver:infi, expliquer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(nulle, adj-adj, nulle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(essayons, v-ver:pres, essayons, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(comprendre, vinf-ver:infi, comprendre, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(anormalement, adv-adv, anormalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(petite, adj-adj, petite, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(462, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(observations, nc-nom, observations, [n-1]), ex_si(cosmologiques, adj-adj, cosmologiques, [dl(0,n,n)-1]), ex_si(récentes, adj-adj, récentes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plat, adj-adj, plat, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(exactement, adv-adv, exactement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plat, adj-adj, plat, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(prédictions, nc-nom, prédictions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(inflationniste, adj-adj, inflationniste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(463, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(électrofaible, adj-adj, électrofaible, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(confirmée, vpp-ver:pper, confirmée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(464, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(arrivé, vpp-ver:pper, arrivé, [dl(0,np,s_ppart)-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crème, nc-nom, crème, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(voyous, nc-nom, voyous, [n-1]), ex_si(anglais, adj-adj, anglais, [dl(0,n,n)-1]), ex_si(fumait, v-ver:impf, fumait, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(herbe, nc-nom, herbe, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(légalement, adv-adv, légalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(disponible, adj-adj, disponible, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(465, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(drogues, nc-nom, drogues, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Hollande', npp-nam, 'Hollande', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(achètent, v-ver:pres, achètent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(466, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(politiques, nc-nom, politiques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(drogue, nc-nom, drogue, [n-1]), ex_si(vantées, vpp-ver:pper, vantées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), ex_si(légalisation, nc-nom, légalisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cannabis, nc-nom, cannabis, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(désormais, adv-adv, désormais, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(célèbres, adj-adj, célèbres, [dr(0,n,n)-1]), ex_si(coffee, et-adj, coffee, [n-1]), ex_si(shops, nc-nom, shops, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(adoption, nc-nom, adoption, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(attitude, nc-nom, attitude, [n-1]), ex_si(généralement, adv-adv, généralement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(indulgente, adj-adj, indulgente, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(égard, nc-nom, égard, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(drogue, nc-nom, drogue, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(stupéfiants, nc-nom, stupéfiants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(occidentale, adj-adj, occidentale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(467, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(drogue, nc-nom, drogue, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Hollande', npp-nam, 'Hollande', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(achète, v-ver:pres, achète, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(468, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(fortes, adj-adj, fortes, [dr(0,n,n)-1]), ex_si(pluies, nc-nom, pluies, [n-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),np),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(orientale, adj-adj, orientale, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(inondation, nc-nom, inondation, [n-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vues, vpp-ver:pper, vues, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(siècles, nc-nom, siècles, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tuant, vpr-ver:ppre, tuant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(100, det-num, 100, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(forçant, vpr-ver:ppre, forçant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évacuation, nc-nom, évacuation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(autres, adj-adj, autres, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(dévastant, vpr-ver:ppre, dévastant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('centres-villes', nc-nom, 'centres-villes', [n-1]), ex_si(historiques, adj-adj, historiques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(469, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(communautés, nc-nom, communautés, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(470, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(ravagent, v-ver:pres, ravagent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(471, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(secouristes, nc-nom, secouristes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(achevé, vpp-ver:pper, achevé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évacuation, nc-nom, évacuation, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(pont, nc-nom, pont, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quartier, nc-nom, quartier, [n-1]), ex_si(riverain, adj-adj, riverain, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(moitié, nc-nom, moitié, [n-1]), ex_si(submergé, vpp-ver:pper, submergé, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(suisse, adj-adj, suisse, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(méridionale, adj-adj, méridionale, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(frappée, vpp-ver:pper, frappée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(42, det-num, 42, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(472, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(ravagent, v-ver:pres, ravagent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(473, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(célébrations, nc-nom, célébrations, [n-1]), ex_si(gigantesques, adj-adj, gigantesques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(marquer, vinf-ver:infi, marquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(adhésion, nc-nom, adhésion, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(17, det-num, 17, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chute, nc-nom, chute, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(communisme, nc-nom, communisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(474, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(élargit, v-ver:pres, élargit, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(composition, nc-nom, composition, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(475, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(élargissement, nc-nom, élargissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(2004, adj-num, 2004, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(adhésion, nc-nom, adhésion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(10, pro-num, 10, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(476, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2007, adj-num, 2007, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(477, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(élargit, v-ver:pres, élargit, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(composition, nc-nom, composition, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(478, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(poids, nc-nom, poids, [n-1]), ex_si(lourd, adj-adj, lourd, [dl(0,n,n)-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ce, cls-pro:dem, ce, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(monolithe, nc-nom, monolithe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(479, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(travaille, v-ver:pres, travaille, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bien, nc-nom, bien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(propres, adj-adj, propres, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(prend, v-ver:pres, prend, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(compte, nc-nom, compte, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bien, nc-nom, bien, [n-1]), ex_si(global, adj-adj, global, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(480, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(élargit, v-ver:pres, élargit, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(481, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1850, pro-num, 1850, [np-1]), ex_si(encore, adv-adv, encore, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cependant, adv-adv, cependant, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(possible, adj-adj, possible, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(objecteurs, nc-nom, objecteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conscience, nc-nom, conscience, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(exemption, nc-nom, exemption, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(engageant, vpr-ver:ppre, engageant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(remplaçant, nc-nom, remplaçant, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si(religieux, adj-adj, religieux, [dl(0,n,n)-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(opposés, vpp-ver:pper, opposés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(volontaire, adj-adj, volontaire, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(482, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(objecteurs, nc-nom, objecteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conscience, nc-nom, conscience, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(voient, v-ver:pres, voient, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), ex_si(confier, vinf-ver:infi, confier, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tâches, nc-nom, tâches, [n-1]), ex_si(particulières, adj-adj, particulières, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(483, Result) :-
      prob_parse([ ex_si('Près', adv-adv, 'Près', [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(achevé, vpp-ver:pper, achevé, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(conscrits, nc-nom, conscrits, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(terminé, vpp-ver:pper, terminé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(484, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(objecteurs, nc-nom, objecteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conscience, nc-nom, conscience, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(voient, v-ver:pres, voient, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,pp_a))))-1]), ex_si(confier, vinf-ver:infi, confier, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tâches, nc-nom, tâches, [n-1]), ex_si(particulières, adj-adj, particulières, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(485, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(athlètes, nc-nom, athlètes, [n-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(célèbres, adj-adj, célèbres, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Darryl', npp-nam, 'Darryl', [dr(0,np,np)-1]), ex_si('Strawberry', npp-nam, 'Strawberry', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Dwight', npp-nam, 'Dwight', [dr(0,np,np)-1]), ex_si('Gooden', npp-nam, 'Gooden', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(baseball, nc-nom, baseball, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Gilberto', npp-nam, 'Gilberto', [dr(0,np,np)-1]), ex_si('Simoni', npp-nam, 'Simoni', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(cyclisme, nc-nom, cyclisme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Diego', npp-nam, 'Diego', [dr(0,np,np)-1]), ex_si('Maradona', npp-nam, 'Maradona', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(associé, vpp-ver:pper, associé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(indélébile, adj-adj, indélébile, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [n-1]), ex_si(cocaïne, nc-nom, cocaïne, [n-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,np),np)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(esprit, nc-nom, esprit, [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(innombrables, adj-adj, innombrables, [dr(0,dl(0,n,n),n)-1]), ex_si(fans, nc-nom, fans, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(486, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(drogue, nc-nom, drogue, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(répandue, vpp-ver:pper, répandue, [dl(0,np,s_pass)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(joueurs, nc-nom, joueurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(487, Result) :-
      prob_parse([ ex_si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), ex_si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1993, adj-num, 1993, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(transporté, vpp-ver:pper, transporté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(hélicoptère, nc-nom, hélicoptère, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si('Nevers', npp-nam, 'Nevers', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Nièvre', npp-nam, 'Nièvre', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvé, vpp-ver:pper, retrouvé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(une, det-det:art, une, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coma, nc-nom, coma, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(balles, nc-nom, balles, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tête, nc-nom, tête, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(488, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(balle, nc-nom, balle, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(attribuée, vpp-ver:pper, attribuée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(réflexe, nc-nom, réflexe, [n-1]), ex_si(nerveux, adj-adj, nerveux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(489, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(enquêteurs, nc-nom, enquêteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conclu, vpp-ver:pper, conclu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(suicide, nc-nom, suicide, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(confirmant, vpr-ver:ppre, confirmant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(déposition, nc-nom, déposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(garde, nc-nom, garde, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(affirmé, vpp-ver:pper, affirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(saisi, vpp-ver:pper, saisi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(garde, nc-nom, garde, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(plausible, adj-adj, plausible, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(version, nc-nom, version, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(faits, nc-nom, faits, [n-1]), ex_si(parue, vpp-ver:pper, parue, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(relatant, vpr-ver:ppre, relatant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rentré, vpp-ver:pper, rentré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(seul, adj-adj, seul, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(boîte, nc-nom, boîte, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(gants, nc-nom, gants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(490, Result) :-
      prob_parse([ ex_si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), ex_si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(suicide, v-ver:pres, suicide, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(491, Result) :-
      prob_parse([ ex_si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), ex_si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dr(0,s,s))),np)-1]), ex_si(encore, adv-adv, encore, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('Premier', det-num, 'Premier', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparemment, adv-adv, apparemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(laissé, vpp-ver:pper, laissé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(message, nc-nom, message, [n-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(tué, vpp-ver:pper, tué, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(empruntée, vpp-ver:pper, empruntée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(492, Result) :-
      prob_parse([ ex_si('Pierre', npp-nam, 'Pierre', [dr(0,np,np)-1]), ex_si('Bérégovoy', npp-nam, 'Bérégovoy', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(suicide, v-ver:pres, suicide, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(493, Result) :-
      prob_parse([ ex_si('Premièrement', adv-adv, 'Premièrement', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(récoltons, v-ver:pres, récoltons, [dr(0,dl(0,np,s),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(méthane, nc-nom, méthane, [n-1]), ex_si(biogaz, nc-nom, biogaz, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(non, adv-adv, non, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(seulement, adv-adv, seulement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(effluents, nc-nom, effluents, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(élevage, nc-nom, élevage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(usées, adj-adj, usées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,np,np),np)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,np,np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(résidus, nc-nom, résidus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(culture, nc-nom, culture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(alimentaires, adj-adj, alimentaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(matière, nc-nom, matière, [n-1]), ex_si(première, adj-num, première, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(digesteur, nc-nom, digesteur, [n-1]), ex_si(anaérobie, adj-adj, anaérobie, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(494, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(méthane, nc-nom, méthane, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(récolté, vpp-ver:pper, récolté, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(servir, vinf-ver:infi, servir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(combustible, nc-nom, combustible, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(495, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entraîné, vpp-ver:pper, entraîné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(radiodiffusion, nc-nom, radiodiffusion, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(communistes, adj-adj, communistes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(communistes, adj-adj, communistes, [dl(0,n,n)-1]), ex_si(tentant, vpr-ver:ppre, tentant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(influencer, vinf-ver:infi, influencer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(intérieure, adj-adj, intérieure, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(chacun, pro-pro:ind, chacun, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(496, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si('américano-soviétique', adj-adj, 'américano-soviétique', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(frontalier, adj-adj, frontalier, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(émetteurs, nc-nom, émetteurs, [n-1]), ex_si(destinés, vpp-ver:pper, destinés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(nations, nc-nom, nations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(techniques, nc-nom, techniques, [n-1]), ex_si(telles, adj-adj, telles, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lecture, nc-nom, lecture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bandes, nc-nom, bandes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(envers, nc-nom, envers, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(enregistreurs, nc-nom, enregistreurs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(bobines, nc-nom, bobines, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(497, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(radio, nc-nom, radio, [n-1]), ex_si(augmente, v-ver:pres, augmente, [dl(0,np,s)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(498, Result) :-
      prob_parse([ ex_si('Suite', nc-nom, 'Suite', [dr(0,dr(0,s,s),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(radio, nc-nom, radio, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1955, pro-num, 1955, [np-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Field', npp-nam, 'Field', [n-1]), ex_si('Manual', npp-nam, 'Manual', [dl(0,n,n)-1]), ex_si(intitulé, vpp-ver:pper, intitulé, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Psychological', npp-nam, 'Psychological', [dr(0,n,n)-1]), ex_si('Warfare', npp-nam, 'Warfare', [dr(0,n,n)-1]), ex_si('Operations', npp-nam, 'Operations', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('FM', npp-abr, 'FM', [n-1]), ex_si('33-5', adj-num, '33-5', [dl(0,np,np)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(discute, v-ver:pres, discute, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(importance, nc-nom, importance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(émissions, nc-nom, émissions, [n-1]), ex_si(radio, nc-nom, radio, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(soutenir, vinf-ver:infi, soutenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(opérations, nc-nom, opérations, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(américaines, adj-adj, américaines, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(499, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(radio, nc-nom, radio, [n-1]), ex_si(augmente, v-ver:pres, augmente, [dl(0,np,s)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(500, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(texte, nc-nom, texte, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dûment, adv-adv, dûment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Constitution', nc-nom, 'Constitution', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entré, vpp-ver:pper, entré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(vigueur, nc-nom, vigueur, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1997, adj-num, 1997, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(501, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(modifié, vpp-ver:pper, modifié, [dl(0,np,s_pass)-1]), ex_si(douze, det-num, douze, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(adoption, nc-nom, adoption, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(502, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si('Constitution', nc-nom, 'Constitution', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(503, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(sommes, v-ver:pres, sommes, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(fiers, adj-adj, fiers, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(constitution, nc-nom, constitution, [n-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(égalité, nc-nom, égalité, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(';', ponct-pun, ';', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(communautés, nc-nom, communautés, [n-1]), ex_si('Khoi', npp-nam, 'Khoi', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Nama', npp-nam, 'Nama', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('San', npp-nam, 'San', [dl(0,n,n)-1]), ex_si(recevront, v-ver:pres, recevront, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attention, nc-nom, attention, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(méritent, v-ver:pres, méritent, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(504, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si('Constitution', nc-nom, 'Constitution', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(505, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(amendements, nc-nom, amendements, [n-1]), ex_si(proposés, vpp-ver:pper, proposés, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(acceptés, vpp-ver:pper, acceptés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assemblée, nc-nom, assemblée, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(statuts, nc-nom, statuts, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(règlements, nc-nom, règlements, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(amendements, nc-nom, amendements, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(ratifiés, vpp-ver:pper, ratifiés, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prochaine, adj-adj, prochaine, [dr(0,n,n)-1]), ex_si('AGA', npp-abr, 'AGA', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Société', nc-nam, 'Société', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(506, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si('Constitution', nc-nom, 'Constitution', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(507, Result) :-
      prob_parse([ ex_si(53, det-num, 53, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Temple', nc-nam, 'Temple', [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(morts, adj-adj, morts, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(endroits, nc-nom, endroits, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Suisse', npp-nam, 'Suisse', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Genève', npp-nam, 'Genève', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(508, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Temple', nc-nam, 'Temple', [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(morts, adj-adj, morts, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(509, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ordre', npp-nam, 'Ordre', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Temple', npp-nam, 'Temple', [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(69, det-num, 69, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(suicides, nc-nom, suicides, [n-1]), ex_si(collectifs, adj-adj, collectifs, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Suisse', npp-nam, 'Suisse', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parquet, nc-nom, parquet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(510, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Temple', nc-nam, 'Temple', [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(morts, adj-adj, morts, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(511, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Ordre', npp-nam, 'Ordre', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Temple', npp-nam, 'Temple', [n-1]), ex_si('Solaire', npp-nam, 'Solaire', [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(culte, nc-nom, culte, [n-1]), ex_si(apocalyptique, adj-adj, apocalyptique, [dl(0,n,n)-1]), ex_si(fortement, adv-adv, fortement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(impliqué, vpp-ver:pper, impliqué, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(blanchiment, nc-nom, blanchiment, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(trafic, nc-nom, trafic, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(512, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Temple', nc-nam, 'Temple', [n-1]), ex_si('Solaire', npp-nam, 'Solaire', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(morts, adj-adj, morts, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(513, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(synthèse, nc-nom, synthèse, [n-1]), ex_si(aborde, v-ver:pres, aborde, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(principales, adj-adj, principales, [dr(0,n,n)-1]), ex_si(méthodes, nc-nom, méthodes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contraception, nc-nom, contraception, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(naissances, nc-nom, naissances, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dr(0,dl(0,n,n),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(avantages, nc-nom, avantages, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(inconvénients, nc-nom, inconvénients, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(514, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(aborde, v-ver:pres, aborde, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(naissances, nc-nom, naissances, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(515, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Caire', npp-nam, 'Caire', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(certain, adj-adj, certain, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(musulmans, adj-adj, musulmans, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(joints, vpp-ver:pper, joints, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Vatican', npp-nam, 'Vatican', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(opposer, vinf-ver:infi, opposer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(contraceptifs, nc-nom, contraceptifs, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avortement, nc-nom, avortement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(516, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(occasion, nc-nom, occasion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Rabita', npp-nam, 'Rabita', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(convoqué, vpp-ver:pper, convoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si(présidée, vpp-ver:pper, présidée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [n-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(légalisation, nc-nom, légalisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avortement, nc-nom, avortement, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(concéder, vinf-ver:infi, concéder, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(sexuels, adj-adj, sexuels, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(adolescents, nc-nom, adolescents, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(célibataires, nc-nom, célibataires, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(relèvement, nc-nom, relèvement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mariage, nc-nom, mariage, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(517, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', npp-abr, 'ONU', [n-1]), ex_si(discute, v-ver:pres, discute, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(naissances, nc-nom, naissances, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(518, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(voyages, nc-nom, voyages, [n-1]), ex_si(internationaux, adj-adj, internationaux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(plein, adj-adj, plein, [dr(0,n,n)-1]), ex_si(essor, nc-nom, essor, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(perdent, v-ver:pres, perdent, [dr(0,dl(0,np,s),np)-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(parts, nc-nom, parts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(secteur, nc-nom, secteur, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dr(0,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si('non-Américains', nc-nom, 'non-Américains', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(simplement, adv-adv, simplement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(trop, adv-adv, trop, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(compliqué, adj-adj, compliqué, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2001, adj-num, 2001, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(519, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tourisme, nc-nom, tourisme, [n-1]), ex_si(chute, v-ver:pres, chute, [dl(0,np,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(520, Result) :-
      prob_parse([ ex_si('Vous', cls-pro:per, 'Vous', [np-1]), ex_si(pouvez, v-ver:pres, pouvez, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(nous, clo-pro:per, nous, [cl_r-1]), ex_si(contacter, vinf-ver:infi, contacter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(façons, nc-nom, façons, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(écrivez, vimp-ver:impe, écrivez, [dr(0,s,np)-1]), ex_si('-nous', cls-pro:per, '-nous', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(téléphonez, vimp-ver:impe, téléphonez, [dr(0,s,np)-1]), ex_si('-nous', clr-pro:per, '-nous', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(envoyez, vimp-ver:impe, envoyez, [dr(0,dr(0,s,pp),cl_r)-1]), ex_si('-nous', clo-pro:per, '-nous', [np-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(courriel, nc-nom, courriel, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(remplissez, vimp-ver:impe, remplissez, [dr(0,s,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(formulaire, nc-nom, formulaire, [n-1]), ex_si('ci-dessous', adv-adv, 'ci-dessous', [dl(1,s,s)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(soumettez, vimp-ver:impe, soumettez, [np-1]), ex_si('-le', cls-pro:per, '-le', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(521, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si(serons, v-ver:futu, serons, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(heureux, adj-adj, heureux, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(pouvons, v-ver:pres, pouvons, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(522, Result) :-
      prob_parse([ ex_si('Bureau', nc-nom, 'Bureau', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tourisme, nc-nom, tourisme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(visiteurs, nc-nom, visiteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cedar', npp-nam, 'Cedar', [dr(0,np,np)-1]), ex_si('Falls', npp-nam, 'Falls', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(523, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tourisme, nc-nom, tourisme, [n-1]), ex_si(chute, v-ver:pres, chute, [dl(0,np,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(524, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(exiger, vinf-ver:infi, exiger, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(voyageant, vpr-ver:ppre, voyageant, [dr(0,dl(0,n,n),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(munies, vpp-ver:pper, munies, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(passeport, nc-nom, passeport, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(pièce, nc-nom, pièce, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(identité, nc-nom, identité, [n-1]), ex_si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), ex_si(nuit, nc-nom, nuit, [dr(0,dl(0,np,s),pp)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(tourisme, nc-nom, tourisme, [n-1]), ex_si(transfrontalier, adj-adj, transfrontalier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(vigueur, nc-nom, vigueur, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tourisme, nc-nom, tourisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(525, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tourisme, nc-nom, tourisme, [n-1]), ex_si(chute, v-ver:pres, chute, [dl(0,np,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(526, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(position, nc-nom, position, [n-1]), ex_si(exige, v-ver:pres, exige, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(modes, nc-nom, modes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(deviennent, v-ver:pres, deviennent, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(efficaces, adj-adj, efficaces, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(capables, adj-adj, capables, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(exigences, nc-nom, exigences, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(clients, nc-nom, clients, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(527, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(devient, v-ver:pres, devient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(compétitive, adj-adj, compétitive, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(528, Result) :-
      prob_parse([ ex_si('Girard', npp-nam, 'Girard', [np-1]), ex_si(ajoutera, v-ver:pres, ajoutera, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(honneurs, nc-nom, honneurs, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réalisations, nc-nom, réalisations, [n-1]), ex_si(ce, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(intronisé, vpp-ver:pper, intronisé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auguste, nc-nom, auguste, [dr(0,n,n)-1]), ex_si('Académie', npp-nam, 'Académie', [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(40, det-num, 40, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cardinal, nc-nom, cardinal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Richelieu', npp-nam, 'Richelieu', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1635, pro-num, 1635, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(529, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Académie', nc-nam, 'Académie', [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Richelieu', npp-nam, 'Richelieu', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(530, Result) :-
      prob_parse([ ex_si('Richelieu', npp-nam, 'Richelieu', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(mécène, nc-nom, mécène, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(arts, nc-nom, arts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(531, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reconstruit, vpp-ver:pper, reconstruit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Sorbonne', npp-nam, 'Sorbonne', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(écrivains, nc-nom, écrivains, [n-1]), ex_si(prometteurs, adj-adj, prometteurs, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Académie', nc-nam, 'Académie', [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(532, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Académie', nc-nam, 'Académie', [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Richelieu', npp-nam, 'Richelieu', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(533, Result) :-
      prob_parse([ ex_si('Fin', nc-nom, 'Fin', [dr(0,dr(0,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(recouverte, vpp-ver:pper, recouverte, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(fumée, nc-nom, fumée, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(violents, adj-adj, violents, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Blue', npp-nam, 'Blue', [dr(0,n,n)-1]), ex_si('Mountains', npp-nam, 'Mountains', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(534, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(allumé, vpp-ver:pper, allumé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(foudre, nc-nom, foudre, [n-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Burra', npp-nam, 'Burra', [dr(0,np,np)-1]), ex_si('Korain', npp-nam, 'Korain', [dr(0,np,np)-1]), ex_si('Head', npp-nam, 'Head', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Blue', npp-nam, 'Blue', [dr(0,n,n)-1]), ex_si('Mountains', npp-nam, 'Mountains', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(13, adj-num, 13, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(535, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(végétation, nc-nom, végétation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démarré, vpp-ver:pper, démarré, [dl(0,np,s_ppart)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(536, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(fonctionnaires, nc-nom, fonctionnaires, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pyromanes, nc-nom, pyromanes, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(probablement, adv-adv, probablement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(responsables, adj-adj, responsables, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(allumage, nc-nom, allumage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(rage, nc-nom, rage, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('week-end', nc-nom, 'week-end', [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(détruisant, vpr-ver:ppre, détruisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(donnant, vpr-ver:ppre, donnant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(précoce, adj-adj, précoce, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(menaçant, vpr-ver:ppre, menaçant, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(saison, nc-nom, saison, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Australie', npp-nam, 'Australie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(537, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(végétation, nc-nom, végétation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démarré, vpp-ver:pper, démarré, [dl(0,np,s_ppart)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(538, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(départs, nc-nom, départs, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mêmes, adj-adj, mêmes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(539, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(littéralement, adv-adv, littéralement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(embarcations, nc-nom, embarcations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(spectateurs, nc-nom, spectateurs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vents, nc-nom, vents, [n-1]), ex_si(capricieux, adj-adj, capricieux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tourbillons, nc-nom, tourbillons, [n-1]), ex_si(locaux, adj-adj, locaux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(agitée, vpp-ver:pper, agitée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(540, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(végétation, nc-nom, végétation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démarré, vpp-ver:pper, démarré, [dl(0,np,s_ppart)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(541, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(cessé, vpp-ver:pper, cessé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(diminuer, vinf-ver:infi, diminuer, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(542, Result) :-
      prob_parse([ ex_si('Néanmoins', adv-adv, 'Néanmoins', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(journée, nc-nom, journée, [n-1]), ex_si(moyenne, adj-adj, moyenne, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2001, pro-num, 2001, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(répondu, vpp-ver:pper, répondu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(4750, det-num, 4750, [dr(0,np,n)-1]), ex_si(incendies, nc-nom, incendies, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédées, vpp-ver:pper, décédées, [dl(0,np,s_ppart)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(56, det-num, 56, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(blessés, vpp-ver:pper, blessés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(543, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pompiers, nc-nom, pompiers, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(nombreuses, adj-adj, nombreuses, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(544, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(alliés, nc-nom, alliés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(victorieux, vpp-ver:pper, victorieux, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(champ, nc-nom, champ, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bataille, nc-nom, bataille, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(présent, nc-nom, présent, [n-1]), ex_si(essuyé, vpp-ver:pper, essuyé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(défaite, nc-nom, défaite, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(efforts, nc-nom, efforts, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(découvrir, vinf-ver:infi, découvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(malades, adj-adj, malades, [dr(0,np,pp_de)-1]), ex_si(tant, adv-adv, tant, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(vétérans, nc-nom, vétérans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(545, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(indiquent, v-ver:pres, indiquent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vétérans, nc-nom, vétérans, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),dr(0,dl(0,n,n),dl(0,n,n)))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(susceptibles, adj-adj, susceptibles, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mourir, vinf-ver:infi, mourir, [dl(0,np,s_inf)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(hospitalisés, vpp-ver:pper, hospitalisés, [dl(0,np,s_pass)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(combattu, vpp-ver:pper, combattu, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(546, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(plaignent, v-ver:pres, plaignent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(547, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(affirmations, nc-nom, affirmations, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(vétérans, nc-nom, vétérans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectivement, adv-adv, effectivement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(souffert, vpp-ver:pper, souffert, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1991, pro-num, 1991, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(548, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(plaignent, v-ver:pres, plaignent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(549, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(comparera, v-ver:futu, comparera, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(avant, p-prp, avant, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,n,n),np),dr(0,dl(0,n,n),np)),dr(0,dl(0,n,n),np))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déploiement, nc-nom, déploiement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(déployé, vpp-ver:pper, déployé, [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(550, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(plaignent, v-ver:pres, plaignent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(551, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(communication, nc-nom, communication, [n-1]), ex_si(définissant, vpr-ver:ppre, définissant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(stratégique, adj-adj, stratégique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prochaine, adj-adj, prochaine, [dr(0,n,n)-1]), ex_si(décennie, nc-nom, décennie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(552, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(adopte, v-ver:pres, adopte, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si(unique, adj-adj, unique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(553, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composée, vpp-ver:pper, composée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Belgique', npp-nam, 'Belgique', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Luxembourg', npp-nam, 'Luxembourg', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(554, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Danemark', npp-nam, 'Danemark', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(adhéré, vpp-ver:pper, adhéré, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1973, pro-num, 1973, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,np,s))))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),dl(0,np,s)))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,np,s))))))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grèce', npp-nam, 'Grèce', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),np)-1]), ex_si(1981, pro-num, 1981, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,p(0,np,pp),p(0,np,dia(0,box(0,pp)))),p(0,np,pp))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Portugal', npp-nam, 'Portugal', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autriche', npp-nam, 'Autriche', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Finlande', npp-nam, 'Finlande', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Suède', npp-nam, 'Suède', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(555, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(expansion, nc-nom, expansion, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2004, pro-num, 2004, [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(adhésion, nc-nom, adhésion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(556, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(élargit, v-ver:pres, élargit, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(557, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secteur, nc-nom, secteur, [n-1]), ex_si(clé, nc-nom, clé, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(offshore, adj-adj, offshore, [dl(0,n,n)-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(expansion, nc-nom, expansion, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(principale, adj-adj, principale, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prochaines, adj-adj, prochaines, [dr(0,n,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(développements, nc-nom, développements, [n-1]), ex_si(continus, adj-adj, continus, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(champs, nc-nom, champs, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploration, nc-nom, exploration, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(558, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étend, v-ver:pres, étend, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(559, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accidents, nc-nom, accidents, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si(constante, adj-adj, constante, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sept, adj-num, sept, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sauf, p-prp, sauf, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(560, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(accidents, nc-nom, accidents, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(561, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accidents, nc-nom, accidents, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aviation, nc-nom, aviation, [n-1]), ex_si(commerciale, adj-adj, commerciale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(baissé, vpp-ver:pper, baissé, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(assez, adv-adv, assez, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(spectaculaire, adj-adj, spectaculaire, [dl(0,n,n)-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(1950, pro-num, 1950, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(introduction, nc-nom, introduction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(562, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(accidents, nc-nom, accidents, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(diminuent, v-ver:pres, diminuent, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(563, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(études, nc-nom, études, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(significative, adj-adj, significative, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(associé, vpp-ver:pper, associé, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(oestrogènes, nc-nom, oestrogènes, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(564, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(semble, v-ver:pres, semble, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(associé, vpp-ver:pper, associé, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(prolongée, vpp-ver:pper, prolongée, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(risques, nc-nom, risques, [n-1]), ex_si(accrus, adj-adj, accrus, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(565, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(grossesse, nc-nom, grossesse, [n-1]), ex_si('post-ménopausique', adj-adj, 'post-ménopausique', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(soumise, vpp-ver:pper, soumise, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(risques, nc-nom, risques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(566, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grossesse, nc-nom, grossesse, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(ménopausées, vpp-ver:pper, ménopausées, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(éthique, adj-adj, éthique, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), ex_si(médicale, adj-adj, médicale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(rapportées, vpp-ver:pper, rapportées, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grossesse, nc-nom, grossesse, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(ménopausées, adj-adj, ménopausées, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(insuffisantes, adj-adj, insuffisantes, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(profil, nc-nom, profil, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(fiable, adj-adj, fiable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(567, Result) :-
      prob_parse([ ex_si('Chez', p-prp, 'Chez', [dr(0,dr(0,s,s),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vieillissement, nc-nom, vieillissement, [n-1]), ex_si(cardiovasculaire, adj-adj, cardiovasculaire, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(accélère, v-ver:pres, accélère, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(568, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(conséquent, nc-nom, conséquent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dr(0,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(contraire, nc-nom, contraire, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(ménopausées, adj-adj, ménopausées, [dl(0,n,n)-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(considérées, vpp-ver:pper, considérées, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(accru, vpp-ver:pper, accru, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(complications, nc-nom, complications, [n-1]), ex_si(vasculaires, adj-adj, vasculaires, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grossesse, nc-nom, grossesse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(569, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(grossesse, nc-nom, grossesse, [n-1]), ex_si('post-ménopausique', adj-adj, 'post-ménopausique', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(soumise, vpp-ver:pper, soumise, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(risques, nc-nom, risques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(570, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OMC', npp-abr, 'OMC', [n-1]), ex_si(administre, v-ver:pres, administre, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(traite, v-ver:pres, traite, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(différends, nc-nom, différends, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(surveille, v-ver:pres, surveille, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(politiques, nc-nom, politiques, [n-1]), ex_si(commerciales, adj-adj, commerciales, [dl(0,n,n)-1]), ex_si(nationales, adj-adj, nationales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(fournit, v-ver:pres, fournit, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(assistance, nc-nom, assistance, [n-1]), ex_si(technique, adj-adj, technique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(formation, nc-nom, formation, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(coopère, v-ver:pres, coopère, [dr(0,dl(0,np,s),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(571, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(assure, v-ver:pres, assure, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(médiation, nc-nom, médiation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(différends, nc-nom, différends, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(572, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(différends, nc-nom, différends, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMC', npp-abr, 'OMC', [n-1]), ex_si(portent, v-ver:pres, portent, [dr(0,dl(0,np,s),pp)-1]), ex_si(essentiellement, adv-adv, essentiellement, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(promesses, nc-nom, promesses, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(tenues, vpp-ver:pper, tenues, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(573, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OMC', npp-abr, 'OMC', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(convenu, vpp-ver:pper, convenu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dr(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(estiment, v-ver:pres, estiment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(collègues, nc-nom, collègues, [n-1]), ex_si(membres, nc-nom, membres, [dl(0,n,n)-1]), ex_si(violent, adj-adj, violent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(règles, nc-nom, règles, [n-1]), ex_si(commerciales, adj-adj, commerciales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(utiliseront, v-ver:pres, utiliseront, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(multilatéral, adj-adj, multilatéral, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(différends, nc-nom, différends, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(agir, vinf-ver:infi, agir, [dl(0,np,s_inf)-1]), ex_si(unilatéralement, adv-adv, unilatéralement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(574, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médiateur, nc-nom, médiateur, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(différends, nc-nom, différends, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(575, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(bien, adv-adv, bien, [dr(0,np,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(égards, nc-nom, égards, [n-1]), ex_si(similaire, adj-adj, similaire, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atome, nc-nom, atome, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(576, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, nc-num, deux, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(potentiel, nc-nom, potentiel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(productivité, nc-nom, productivité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(destruction, nc-nom, destruction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(577, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Organisation', nc-nam, 'Organisation', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(sert, v-ver:pres, sert, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(médiateur, nc-nom, médiateur, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(différends, nc-nom, différends, [n-1]), ex_si(commerciaux, adj-adj, commerciaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(578, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si('Mains', nc-nom, 'Mains', [n-1]), ex_si(propres, adj-adj, propres, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(corruption, nc-nom, corruption, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grave, adj-adj, grave, [dr(0,n,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étendant, vpr-ver:ppre, étendant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp_a)-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(niveaux, nc-nom, niveaux, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(élevés, vpp-ver:pper, élevés, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(579, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(magistrature, nc-nom, magistrature, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(corruption, nc-nom, corruption, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(illégalité, nc-nom, illégalité, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(précédent, nc-nom, précédent, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(démocraties, nc-nom, démocraties, [n-1]), ex_si(occidentales, adj-adj, occidentales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(impliquant, vpr-ver:ppre, impliquant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(larges, adj-adj, larges, [dr(0,n,n)-1]), ex_si(secteurs, nc-nom, secteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(milieux, nc-nom, milieux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(580, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(corruption, nc-nom, corruption, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(581, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(faible, adj-adj, faible, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(puissants, adj-adj, puissants, [dr(0,n,n)-1]), ex_si(législateurs, nc-nom, législateurs, [n-1]), ex_si(individuels, adj-adj, individuels, [dl(0,n,n)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(emporte, v-ver:pres, emporte, [dr(0,dl(0,np,s),np)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(impératifs, nc-nom, impératifs, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(582, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(corruption, nc-nom, corruption, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présente, adj-adj, présente, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(583, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étudiant, nc-nom, étudiant, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(formation, nc-nom, formation, [n-1]), ex_si(fondamentale, adj-adj, fondamentale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(logique, nc-nom, logique, [n-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(doter, vinf-ver:infi, doter, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(connaissances, nc-nom, connaissances, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(logique, nc-nom, logique, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(habituer, vinf-ver:infi, habituer, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pensée, nc-nom, pensée, [n-1]), ex_si(logique, adj-adj, logique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(584, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(comprend, v-ver:pres, comprend, [dr(0,dl(0,np,s),np)-1]), ex_si(':', ponct-pun, ':', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(usages, nc-nom, usages, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(langage, nc-nom, langage, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(déduction, nc-nom, déduction, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(induction, nc-nom, induction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(585, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(déduction, nc-nom, déduction, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(induction, nc-nom, induction, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(enseigner, vinf-ver:infi, enseigner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(586, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Vikings', nc-nam, 'Vikings', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voyagé, vpp-ver:pper, voyagé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Écosse', npp-nam, 'Écosse', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(commerçants, nc-nom, commerçants, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(colons, nc-nom, colons, [n-1]), ex_si(pacifiques, adj-adj, pacifiques, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(cultiver, vinf-ver:infi, cultiver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(587, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Vikings', nc-nam, 'Vikings', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débarqué, vpp-ver:pper, débarqué, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ecosse', npp-nam, 'Ecosse', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(588, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si(suggèrent, v-ver:pres, suggèrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Vikings', nc-nam, 'Vikings', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envahi, vpp-ver:pper, envahi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Écosse', npp-nam, 'Écosse', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Hébrides', nc-nam, 'Hébrides', [n-1]), ex_si(extérieures, adj-adj, extérieures, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Shetland', npp-nam, 'Shetland', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Caithness', npp-nam, 'Caithness', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sutherland', npp-nam, 'Sutherland', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(installés, vpp-ver:pper, installés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(589, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Vikings', nc-nam, 'Vikings', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débarqué, vpp-ver:pper, débarqué, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Ecosse', npp-nam, 'Ecosse', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(590, Result) :-
      prob_parse([ ex_si('Juste', adv-adv, 'Juste', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(garder, vinf-ver:infi, garder, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(chaud, nc-nom, chaud, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(manger, vinf-ver:infi, manger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(dixième, nc-num, dixième, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(poids, nc-nom, poids, [n-1]), ex_si(corporel, adj-adj, corporel, [dl(0,n,n)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(591, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(mangent, v-ver:pres, mangent, [dr(0,dr(0,s,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lamantins, nc-nom, lamantins, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(592, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(lamantins, nc-nom, lamantins, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(végétariens, adj-adj, végétariens, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(593, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(mangent, v-ver:pres, mangent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(herbe, nc-nom, herbe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(végétaux, adj-adj, végétaux, [n-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(algues, nc-nom, algues, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(trouvent, v-ver:pres, trouvent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(profondes, adj-adj, profondes, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(vivent, v-ver:pres, vivent, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(594, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(mangent, v-ver:pres, mangent, [dr(0,dr(0,s,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lamantins, nc-nom, lamantins, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(595, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(consomment, v-ver:pres, consomment, [dr(0,dl(0,np,s),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(énormes, adj-adj, énormes, [dr(0,n,n)-1]), ex_si(quantités, nc-nom, quantités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(nourriture, nc-nom, nourriture, [n-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(1,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(adulte, nc-nom, adulte, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(manger, vinf-ver:infi, manger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(végétation, nc-nom, végétation, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(principalement, adv-adv, principalement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(profondes, adj-adj, profondes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(rivage, nc-nom, rivage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(596, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(lamantins, nc-nom, lamantins, [n-1]), ex_si(mangent, v-ver:pres, mangent, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(occasionnellement, adv-adv, occasionnellement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(poissons, nc-nom, poissons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(escargots, nc-nom, escargots, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(importante, adj-adj, importante, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(calcium, nc-nom, calcium, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(phosphore, nc-nom, phosphore, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(protéines, nc-nom, protéines, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(597, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(mangent, v-ver:pres, mangent, [dr(0,dr(0,s,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lamantins, nc-nom, lamantins, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(disponibles, adj-adj, disponibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(598, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(célèbre, v-ver:pres, célèbre, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('15e', adj-num, '15e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(spectaculaires, adj-adj, spectaculaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(599, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), ex_si(célèbre, v-ver:pres, célèbre, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(600, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(célébrer, vinf-ver:infi, célébrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(agences, nc-nom, agences, [n-1]), ex_si(spatiales, adj-adj, spatiales, [dl(0,n,n)-1]), ex_si(impliquées, vpp-ver:pper, impliquées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ESA', npp-abr, 'ESA', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(publient, v-ver:pres, publient, [dr(0,dl(0,np,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(image, nc-nom, image, [n-1]), ex_si('Messier', npp-nam, 'Messier', [dl(0,n,n)-1]), ex_si(82, adj-num, 82, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(601, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), ex_si(célèbre, v-ver:pres, célèbre, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(602, Result) :-
      prob_parse([ ex_si('Située', vpp-ver:pper, 'Située', [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('années-lumière', nc-nom, 'années-lumière', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),np),np)-1]), ex_si('M82', npp-nam, 'M82', [np-1]), ex_si(apparaît, v-ver:pres, apparaît, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(haut, adj-adj, haut, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ciel, nc-nom, ciel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(printemps, nc-nom, printemps, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(constellation, nc-nom, constellation, [n-1]), ex_si('Ursa', npp-nam, 'Ursa', [dl(0,n,n)-1]), ex_si('Major', npp-nam, 'Major', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande', adj-adj, 'Grande', [dr(0,n,n)-1]), ex_si('Ourse', npp-nam, 'Ourse', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(603, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(galaxie, nc-nom, galaxie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cigare, nc-nom, cigare, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(elliptique, adj-adj, elliptique, [dl(0,n,n)-1]), ex_si(allongée, vpp-ver:pper, allongée, [dl(0,n,n)-1]), ex_si(produite, vpp-ver:pper, produite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inclinaison, nc-nom, inclinaison, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(disque, nc-nom, disque, [n-1]), ex_si(étoilé, adj-adj, étoilé, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(visée, nc-nom, visée, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(604, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si('Hubble', npp-nam, 'Hubble', [dl(0,n,n)-1]), ex_si(célèbre, v-ver:pres, célèbre, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(605, Result) :-
      prob_parse([ ex_si('Mercredi', nc-nom, 'Mercredi', [dr(0,dr(0,s,s),n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Corporation', nc-nam, 'Corporation', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('EPE', npp-abr, 'EPE', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(énergétique, adj-adj, énergétique, [dl(0,n,n)-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(2030, adj-num, 2030, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(directeur, adj-adj, directeur, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(énergétique, adj-adj, énergétique, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(24, adj-num, 24, [dr(0,n,n)-1]), ex_si(prochaines, adj-adj, prochaines, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(606, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(hydroélectriques, adj-adj, hydroélectriques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prévus, vpp-ver:pper, prévus, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(607, Result) :-
      prob_parse([ ex_si('Manitoba', npp-nam, 'Manitoba', [dr(0,np,np)-1]), ex_si('Hydro', npp-nam, 'Hydro', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(plans, nc-nom, plans, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(centrales, nc-nom, centrales, [n-1]), ex_si(hydroélectriques, adj-adj, hydroélectriques, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('GS', npp-abr, 'GS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Manitoba', npp-nam, 'Manitoba', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('GS', npp-abr, 'GS', [n-1]), ex_si('Wuskwatim', npp-nam, 'Wuskwatim', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rivière, nc-nom, rivière, [n-1]), ex_si('Burntwood', npp-nam, 'Burntwood', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('GS', npp-abr, 'GS', [n-1]), ex_si('Gull', npp-nam, 'Gull', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si('Keeyask', npp-nam, 'Keeyask', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rivière, nc-nom, rivière, [n-1]), ex_si('Nelson', npp-nam, 'Nelson', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(608, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(hydroélectriques, adj-adj, hydroélectriques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prévus, vpp-ver:pper, prévus, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(609, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(2001, adj-num, 2001, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Autorité', nc-nam, 'Autorité', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(marin, adj-adj, marin, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande', adj-adj, 'Grande', [dr(0,n,n)-1]), ex_si('Barrière', npp-nam, 'Barrière', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corail', npp-nam, 'Corail', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(2001, adj-num, 2001, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bassin, nc-nom, bassin, [n-1]), ex_si(versant, vpr-ver:ppre, versant, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande', adj-adj, 'Grande', [dr(0,n,n)-1]), ex_si('Barrière', npp-nam, 'Barrière', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corail', npp-nam, 'Corail', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(610, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(végétation, nc-nom, végétation, [n-1]), ex_si(marine, adj-adj, marine, [dl(0,n,n)-1]), ex_si(améliore, v-ver:pres, améliore, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(611, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chercheurs, nc-nom, chercheurs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CSIRO', npp-abr, 'CSIRO', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(établi, vpp-ver:pper, établi, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(culture, nc-nom, culture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(plantes, nc-nom, plantes, [n-1]), ex_si(marines, adj-adj, marines, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(huîtres, nc-nom, huîtres, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(organismes, nc-nom, organismes, [n-1]), ex_si(filtrants, adj-adj, filtrants, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rejet, nc-nom, rejet, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(fermes, nc-nom, fermes, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(améliorer, vinf-ver:infi, améliorer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(considérablement, adv-adv, considérablement, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(612, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(végétation, nc-nom, végétation, [n-1]), ex_si(marine, adj-adj, marine, [dl(0,n,n)-1]), ex_si(améliore, v-ver:pres, améliore, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(613, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(consortium, nc-nom, consortium, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(communication, nc-nom, communication, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(fibre, nc-nom, fibre, [n-1]), ex_si(optique, adj-adj, optique, [dl(0,n,n)-1]), ex_si('sous-marine', adj-adj, 'sous-marine', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(permettra, v-ver:futu, permettra, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(compléter, vinf-ver:infi, compléter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(boucle, nc-nom, boucle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fibre, nc-nom, fibre, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(nécessaire, adj-adj, nécessaire, [dl(0,n,n)-1]), ex_si(autour, p-prp, autour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(continent, nc-nom, continent, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(614, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(câble, nc-nom, câble, [n-1]), ex_si(fournira, v-ver:futu, fournira, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(connexion, nc-nom, connexion, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(large, adj-adj, large, [dr(0,n,n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si(nécessaire, adj-adj, nécessaire, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(offrir, vinf-ver:infi, offrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mêmes, adj-adj, mêmes, [dr(0,n,n)-1]), ex_si(avancées, nc-nom, avancées, [n-1]), ex_si(abordables, adj-adj, abordables, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(télécommunications, nc-nom, télécommunications, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_de))))-1]), ex_si(bénéficient, v-ver:pres, bénéficient, [dr(0,dr(0,s,pp),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(615, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(câble, nc-nom, câble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fibre, nc-nom, fibre, [n-1]), ex_si(optique, adj-adj, optique, [dl(0,n,n)-1]), ex_si('sous-marin', adj-adj, 'sous-marin', [dl(0,n,n)-1]), ex_si(améliore, v-ver:pres, améliore, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(communications, nc-nom, communications, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(616, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(principal, adj-adj, principal, [dr(0,n,n)-1]), ex_si(composant, nc-nom, composant, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si('39.000', det-num, '39.000', [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(câble, nc-nom, câble, [n-1]), ex_si('sous-marin', adj-adj, 'sous-marin', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(fibre, nc-nom, fibre, [n-1]), ex_si(optique, adj-adj, optique, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(reliera, v-ver:futu, reliera, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(eux, pro-pro:per, eux, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(reste, nc-nom, reste, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(617, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(câble, nc-nom, câble, [n-1]), ex_si('sous-marin', adj-adj, 'sous-marin', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(fibre, nc-nom, fibre, [n-1]), ex_si(optique, adj-adj, optique, [dl(0,n,n)-1]), ex_si(améliore, v-ver:pres, améliore, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(communications, nc-nom, communications, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(618, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(unité, nc-nom, unité, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(organisé, vpp-ver:pper, organisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(exposition, nc-nom, exposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(faux, nc-nom, faux, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('V', nc-abr, 'V', [n-1]), ex_si('&', cc-sym, '&', [dr(0,dl(0,n,n),n)-1]), ex_si('A', nc-nom, 'A', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(souligner, vinf-ver:infi, souligner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prévalence, nc-nom, prévalence, [n-1]), ex_si(croissante, vpr-ver:ppre, croissante, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sophistication, nc-nom, sophistication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(criminalité, nc-nom, criminalité, [n-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(619, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(criminalité, nc-nom, criminalité, [n-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(620, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(face, nc-nom, face, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(phénomène, nc-nom, phénomène, [n-1]), ex_si(croissant, adj-adj, croissant, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(criminalité, nc-nom, criminalité, [n-1]), ex_si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(stratégies, nc-nom, stratégies, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(uniquement, adv-adv, uniquement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(accroître, vinf-ver:infi, accroître, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(efficacité, nc-nom, efficacité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(poursuites, nc-nom, poursuites, [n-1]), ex_si(échoueront, v-ver:futu, échoueront, [dl(0,np,s)-1]), ex_si(inévitablement, adv-adv, inévitablement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(621, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(criminalité, nc-nom, criminalité, [n-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(augmente, v-ver:pres, augmente, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(622, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1970, adj-num, 1970, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(criminalité, nc-nom, criminalité, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(églises, nc-nom, églises, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(religieux, adj-adj, religieux, [dl(0,n,n)-1]), ex_si(devenant, vpr-ver:ppre, devenant, [dr(0,dl(0,np,s_ppres),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(auprès, p-prp, auprès, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(collectionneurs, nc-nom, collectionneurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(623, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(criminalité, nc-nom, criminalité, [n-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(augmente, v-ver:pres, augmente, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(624, Result) :-
      prob_parse([ ex_si('Mon', det-det:pos, 'Mon', [dr(0,np,n)-1]), ex_si(pote, nc-nom, pote, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bûcheron, nc-nom, bûcheron, [n-1]), ex_si('Codger', npp-nam, 'Codger', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('m\'', clo-pro:per, 'm\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ours, nc-nom, ours, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Laclede', npp-nam, 'Laclede', [np-1]), ex_si(il, cls-pro:per, il, [cl_y-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(625, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(incident, nc-nom, incident, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ours, nc-nom, ours, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attrapé, vpp-ver:pper, attrapé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bambin, nc-nom, bambin, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(enfui, vpp-ver:pper, enfui, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bébé, nc-nom, bébé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(626, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ours, nc-nom, ours, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si(attaque, v-ver:pres, attaque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(627, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ours, nc-nom, ours, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(628, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(tuer, vinf-ver:infi, tuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tuent, v-ver:pres, tuent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(629, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ours, nc-nom, ours, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si(attaque, v-ver:pres, attaque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(630, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(passagers, nc-nom, passagers, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(aéroports, nc-nom, aéroports, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(soumis, vpp-ver:pper, soumis, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(contrôles, nc-nom, contrôles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(renforcés, vpp-ver:pper, renforcés, [dl(0,n,n)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(cherchant, vpr-ver:ppre, cherchant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(empêcher, vinf-ver:infi, empêcher, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(terroristes, nc-nom, terroristes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(répéter, vinf-ver:infi, répéter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attaques, nc-nom, attaques, [n-1]), ex_si(dévastatrices, adj-adj, dévastatrices, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interrompu, vpp-ver:pper, interrompu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(trafic, nc-nom, trafic, [n-1]), ex_si(aérien, adj-adj, aérien, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Atlantique', npp-nam, 'Atlantique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(631, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(aéroports, nc-nom, aéroports, [n-1]), ex_si(renforcent, v-ver:pres, renforcent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(632, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rayons, nc-nom, rayons, [n-1]), ex_si('X', nc-nom, 'X', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(faible, adj-adj, faible, [dr(0,n,n)-1]), ex_si(dose, nc-nom, dose, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capacité, nc-nom, capacité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(voir, vinf-ver:infi, voir, [dl(0,np,s_inf)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vêtements, nc-nom, vêtements, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(agents, nc-nom, agents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(arme, nc-nom, arme, [n-1]), ex_si(dissimulée, vpp-ver:pper, dissimulée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(633, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(aéroports, nc-nom, aéroports, [n-1]), ex_si(renforcent, v-ver:pres, renforcent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(634, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(navire, nc-nom, navire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(croisière, nc-nom, croisière, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(expédition, nc-nom, expédition, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(visitez, v-ver:futu, visitez, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Shetland', npp-nam, 'Shetland', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(composé, vpp-ver:pper, composé, [dr(0,pp_de,np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vingtaine, nc-num, vingtaine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('King', npp-nam, 'King', [dl(0,n,n)-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), ex_si('Half', npp-nam, 'Half', [dr(0,np,np)-1]), ex_si('Moon', npp-nam, 'Moon', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Livingston', npp-nam, 'Livingston', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(proximité, nc-nom, proximité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(péninsule, nc-nom, péninsule, [n-1]), ex_si(antarctique, adj-adj, antarctique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(vous, clo-pro:per, vous, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(continentale, adj-adj, continentale, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(proprement, adv-adv, proprement, [dl(0,n,n)-1]), ex_si(dite, vpp-ver:pper, dite, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(635, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(exploration, nc-nom, exploration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Antarctique', npp-nam, 'Antarctique', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(636, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('AMS', npp-abr, 'AMS', [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appliquent, v-ver:pres, appliquent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(cependant, adv-adv, cependant, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(effrontées, vpp-ver:pper, effrontées, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(attirer, vinf-ver:infi, attirer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeunes, nc-nom, jeunes, [n-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dépendance, nc-nom, dépendance, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(souvent, adv-adv, souvent, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(libres, adj-adj, libres, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(engager, vinf-ver:infi, engager, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tactiques, nc-nom, tactiques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marketing, nc-nom, marketing, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(éhontées, vpp-ver:pper, éhontées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(telles, adj-adj, telles, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cadeaux, nc-nom, cadeaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [dr(0,n,pp_a)-1]), ex_si(mettant, vpr-ver:ppre, mettant, [dr(0,dr(0,dl(0,n,n),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(légèrement, adv-adv, légèrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(vêtues, vpp-ver:pper, vêtues, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dl(0,n,n)-1]), ex_si(allument, v-ver:pres, allument, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(séduisante, adj-adj, séduisante, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bouche, nc-nom, bouche, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(adolescents, nc-nom, adolescents, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(637, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si(augmentent, v-ver:pres, augmentent, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(638, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(1990, pro-num, 1990, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cigarettes, nc-nom, cigarettes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(que, adv-adv, que, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('4,7', det-num, '4,7', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(internationales, adj-adj, internationales, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(71, det-num, 71, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(639, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si(augmentent, v-ver:pres, augmentent, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(640, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(districts, nc-nom, districts, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(fixer, vinf-ver:infi, fixer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(élevées, vpp-ver:pper, élevées, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(alignées, vpp-ver:pper, alignées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(exigences, nc-nom, exigences, [n-1]), ex_si(éducatives, adj-adj, éducatives, [dl(0,n,n)-1]), ex_si(élémentaires, adj-adj, élémentaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(postsecondaires, adj-adj, postsecondaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(641, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(établissent, v-ver:pres, établissent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(éducatives, adj-adj, éducatives, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(642, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fixation, nc-nom, fixation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(objectifs, nc-nom, objectifs, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élaboration, nc-nom, élaboration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(nationales, adj-adj, nationales, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(stratégies, nc-nom, stratégies, [n-1]), ex_si(récentes, adj-adj, récentes, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(643, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernements, nc-nom, gouvernements, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(nationales, adj-adj, nationales, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1989, pro-num, 1989, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('National', npp-nam, 'National', [dr(0,n,n)-1]), ex_si('Governors', npp-nam, 'Governors', [dr(0,n,n)-1]), ex_si('Association', npp-nam, 'Association', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(objectifs, nc-nom, objectifs, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(644, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ajouté, vpp-ver:pper, ajouté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(formant, vpr-ver:ppre, formant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(objectifs, nc-nom, objectifs, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(645, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(établissent, v-ver:pres, établissent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(éducatives, adj-adj, éducatives, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(646, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(sauvages, adj-adj, sauvages, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(menacées, vpp-ver:pper, menacées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(extinction, nc-nom, extinction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(647, Result) :-
      prob_parse([ ex_si('Personne', pro-pro:ind, 'Personne', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tigre, nc-nom, tigre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Bengale', npp-nam, 'Bengale', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(puma, nc-nom, puma, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(jaguar, nc-nom, jaguar, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rhinocéros, nc-nom, rhinocéros, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Indonésie', npp-nam, 'Indonésie', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(habitat, nc-nom, habitat, [n-1]), ex_si(naturel, adj-adj, naturel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si(sauvage, adj-adj, sauvage, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(648, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(sauvages, adj-adj, sauvages, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(menacées, vpp-ver:pper, menacées, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(extinction, nc-nom, extinction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(649, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Espèce', nc-nom, 'Espèce', [n-1]), ex_si(menacée, vpp-ver:pper, menacée, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(connexe, adj-adj, connexe, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(désignant, vpr-ver:ppre, désignant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si(susceptible, adj-adj, susceptible, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(devenir, vinf-ver:infi, devenir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(disparition, nc-nom, disparition, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si(prévisible, adj-adj, prévisible, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(650, Result) :-
      prob_parse([ ex_si('Toutes', adv-adv, 'Toutes', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(sauvages, adj-adj, sauvages, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(voie, nc-nom, voie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(disparition, nc-nom, disparition, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(651, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(logiciel, nc-nom, logiciel, [n-1]), ex_si(informatique, nc-nom, informatique, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ELFIN', npp-abr, 'ELFIN', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(conçu, vpp-ver:pper, conçu, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(surveiller, vinf-ver:infi, surveiller, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(modèles, nc-nom, modèles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(besoins, nc-nom, besoins, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(satisfaits, vpp-ver:pper, satisfaits, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(développé, vpp-ver:pper, développé, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(attente, nc-nom, attente, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(652, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(terminaux, nc-nom, terminaux, [n-1]), ex_si(informatiques, adj-adj, informatiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(653, Result) :-
      prob_parse([ ex_si('A', p-prp, 'A', [dr(0,dr(0,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(pas, nc-nom, pas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(là, adv-adv, là, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(adolescent, nc-nom, adolescent, [n-1]), ex_si(consulte, v-ver:pres, consulte, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(terminal, nc-nom, terminal, [n-1]), ex_si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(prochain, adj-adj, prochain, [dr(0,n,n)-1]), ex_si(devoir, nc-nom, devoir, [n-1]), ex_si(scolaire, adj-adj, scolaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(terminal, nc-nom, terminal, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(cherche, v-ver:pres, cherche, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(diabète, nc-nom, diabète, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(654, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(terminaux, nc-nom, terminaux, [n-1]), ex_si(informatiques, adj-adj, informatiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(655, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rendez, nc-nom, rendez, [n-1]), ex_si('-vous', nc-pro:per, '-vous', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(organisés, vpp-ver:pper, organisés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(terminaux, nc-nom, terminaux, [n-1]), ex_si(informatiques, adj-adj, informatiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(afficher, vinf-ver:infi, afficher, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dossier, nc-nom, dossier, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(rendez, nc-nom, rendez, [n-1]), ex_si('-vous', adj-adj, '-vous', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(656, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(terminaux, nc-nom, terminaux, [n-1]), ex_si(informatiques, adj-adj, informatiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(657, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(pénale, adj-adj, pénale, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(enseignant, nc-nom, enseignant, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(village, nc-nom, village, [n-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(logiciels, nc-nom, logiciels, [n-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [dl(0,n,n)-1]), ex_si(piratés, vpp-ver:pper, piratés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(658, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(rejette, v-ver:pres, rejette, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(piratage, nc-nom, piratage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(659, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(logiciels, nc-nom, logiciels, [n-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [dl(0,n,n)-1]), ex_si(piratés, vpp-ver:pper, piratés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dl(0,n,n)-1]), ex_si('Poutine', npp-nam, 'Poutine', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ex-dirigeant', nc-nom, 'ex-dirigeant', [dr(0,n,n)-1]), ex_si(soviétique, adj-adj, soviétique, [n-1]), ex_si('Mikhaïl', npp-nam, 'Mikhaïl', [dl(0,n,n)-1]), ex_si('Gorbatchev', npp-nam, 'Gorbatchev', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dl(0,n,n)-1]), ex_si(critiqué, vpp-ver:pper, critiqué, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(procès, nc-nom, procès, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(660, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(rejette, v-ver:pres, rejette, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(piratage, nc-nom, piratage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(661, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(piratage, nc-nom, piratage, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(qualifiant, vpr-ver:ppre, qualifiant, [dr(0,dr(0,dl(0,np,s_ppres),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(triviale, adj-adj, triviale, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(662, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(versions, nc-nom, versions, [n-1]), ex_si(bidon, adj-adj, bidon, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Windows', npp-nam, 'Windows', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [dr(0,np,np)-1]), ex_si('Office', npp-nam, 'Office', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(663, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(rejette, v-ver:pres, rejette, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(piratage, nc-nom, piratage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(664, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(psychiatriques, adj-adj, psychiatriques, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(guérissent, v-ver:pres, guérissent, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(permettent, v-ver:pres, permettent, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sentir, vinf-ver:infi, sentir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(mieux, adv-adv, mieux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(665, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(guérissent, v-ver:pres, guérissent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(mentales, adj-adj, mentales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(666, Result) :-
      prob_parse([ ex_si('Donc', adv-kon, 'Donc', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(psychiatriques, adj-adj, psychiatriques, [dl(0,n,n)-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),np),dl(0,np,s_inf))-1]), ex_si(cesser, vinf-ver:infi, cesser, [dl(0,np,s_inf)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(comportements, nc-nom, comportements, [n-1]), ex_si(déplaisants, adj-adj, déplaisants, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(handicaper, vinf-ver:infi, handicaper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(mentalement, adv-adv, mentalement, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(suffisamment, adv-adv, suffisamment, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sentir, vinf-ver:infi, sentir, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(colère, nc-nom, colère, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(malheureuse, adj-adj, malheureuse, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(déprimée, vpp-ver:pper, déprimée, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(667, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(guérissent, v-ver:pres, guérissent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(mentales, adj-adj, mentales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(668, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(engagés, vpp-ver:pper, engagés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(vastes, adj-adj, vastes, [dr(0,n,n)-1]), ex_si(efforts, nc-nom, efforts, [n-1]), ex_si(internationaux, adj-adj, internationaux, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tant, adv-adv, tant, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(activités, nc-nom, activités, [n-1]), ex_si(multilatérales, adj-adj, multilatérales, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,n,n))-1]), ex_si(bilatérales, adj-adj, bilatérales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(669, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(engagés, vpp-ver:pper, engagés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transfert, nc-nom, transfert, [n-1]), ex_si(illégal, adj-adj, illégal, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(670, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(législation, nc-nom, législation, [n-1]), ex_si(reconnaît, v-ver:pres, reconnaît, [dr(0,dl(0,np,s),np)-1]), ex_si(explicitement, adv-adv, explicitement, [dl(1,s,s)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(option, nc-nom, option, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(légitime, adj-adj, légitime, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(place, nc-nom, place, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pied, nc-nom, pied, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(égalité, nc-nom, égalité, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(scolaire, adj-adj, scolaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(671, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(autorise, v-ver:pres, autorise, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(672, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(législation, nc-nom, législation, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(reconnaît, v-ver:pres, reconnaît, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(673, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(autorise, v-ver:pres, autorise, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(674, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(auteurs, nc-nom, auteurs, [n-1]), ex_si(soutiennent, v-ver:pres, soutiennent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(éducateurs, nc-nom, éducateurs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(option, nc-nom, option, [n-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(agence, nc-nom, agence, [n-1]), ex_si(culturelle, adj-adj, culturelle, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(scolarisation, nc-nom, scolarisation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(675, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(676, Result) :-
      prob_parse([ ex_si('Vous', cls-pro:per, 'Vous', [np-1]), ex_si(pensez, v-ver:pres, pensez, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(côtés, nc-nom, côtés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(aimeraient, v-ver:pres, aimeraient, [dr(0,dl(0,np,s),s_q)-1]), ex_si(bien, adv-adv, bien, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aboutisse, vs-ver:subp, aboutisse, [dl(0,np,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('?', ponct-pun, '?', [dl(0,s,txt)-1])], Result).
sent(677, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pourparlers, nc-nom, pourparlers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(réussissent, v-ver:pres, réussissent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(678, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(républicaine, adj-adj, républicaine, [dl(0,n,n)-1]), ex_si(irlandaise, adj-adj, irlandaise, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(soumis, vpp-ver:pper, soumis, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(message, nc-nom, message, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(attendu, vpp-ver:pper, attendu, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(négociateurs, nc-nom, négociateurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suscité, vpp-ver:pper, suscité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mince, adj-adj, mince, [dr(0,n,n)-1]), ex_si(espoir, nc-nom, espoir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(minute, nc-nom, minute, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sauvetage, nc-nom, sauvetage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(sénateur, nc-nom, sénateur, [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('J.', npp-abr, 'J.', [dl(0,n,n)-1]), ex_si('Mitchell', npp-nam, 'Mitchell', [dl(0,n,n)-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(réussir, vinf-ver:infi, réussir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(avancer, vinf-ver:infi, avancer, [dl(0,np,s_inf)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impasse, nc-nom, impasse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(679, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(réussissent, v-ver:pres, réussissent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(680, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fallu, vpp-ver:pper, fallu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(encore, adv-adv, encore, [dr(0,np,np)-1]), ex_si(22, det-num, 22, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(chemin, nc-nom, chemin, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(table, nc-nom, table, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('cessez-le-feu', nc-nom, 'cessez-le-feu', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1994, adj-num, 1994, [dl(0,n,n)-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(annoncée, vpp-ver:pper, annoncée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('IRA', npp-abr, 'IRA', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(681, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(marqué, vpp-ver:pper, marqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(abouti, vpp-ver:pper, abouti, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1998, adj-num, 1998, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(couvrant, vpr-ver:ppre, couvrant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(questions, nc-nom, questions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(civils, adj-adj, civils, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(682, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pourparlers, nc-nom, pourparlers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(réussissent, v-ver:pres, réussissent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(683, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(aura, v-ver:futu, aura, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(ouragan, nc-nom, ouragan, [n-1]), ex_si('Andrew', npp-nam, 'Andrew', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-t-il', cls-pro:per, '-t-il', [np-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si(référence, nc-nom, référence, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(catégorie, nc-nom, catégorie, [n-1]), ex_si(5, adj-num, 5, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(causant, vpr-ver:ppre, causant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si('26,5', det-num, '26,5', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dégâts, nc-nom, dégâts, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(tuant, vpr-ver:ppre, tuant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(26, det-num, 26, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('Bahamas', npp-nam, 'Bahamas', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(684, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tempêtes, nc-nom, tempêtes, [n-1]), ex_si(tropicales, adj-adj, tropicales, [dl(0,n,n)-1]), ex_si(causent, v-ver:pres, causent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(graves, adj-adj, graves, [dr(0,n,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(685, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tempêtes, nc-nom, tempêtes, [n-1]), ex_si(tropicales, adj-adj, tropicales, [dl(0,n,n)-1]), ex_si(mineures, adj-adj, mineures, [dl(0,n,n)-1]), ex_si(passant, vpr-ver:ppre, passant, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(distance, nc-nom, distance, [n-1]), ex_si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dl(0,n,n)-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dégâts, nc-nom, dégâts, [n-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(686, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tempêtes, nc-nom, tempêtes, [n-1]), ex_si(tropicales, adj-adj, tropicales, [dl(0,n,n)-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dégâts, nc-nom, dégâts, [n-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(687, Result) :-
      prob_parse([ ex_si('Bilis', npp-nam, 'Bilis', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(désignée, vpp-ver:pper, désignée, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), ex_si(tempête, nc-nom, tempête, [np-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,np,np)-1]), ex_si(sévère, adj-adj, sévère, [dl(0,np,np)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('JMA', npp-abr, 'JMA', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dl(1,s,s)-1]), ex_si(renforcée, vpp-ver:pper, renforcée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(suivants, vpr-ver:ppre, suivants, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(marginal, adj-adj, marginal, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(altitude, nc-nom, altitude, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(entraînement, nc-nom, entraînement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(sec, adj-adj, sec, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(688, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tempêtes, nc-nom, tempêtes, [n-1]), ex_si(tropicales, adj-adj, tropicales, [dl(0,n,n)-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dégâts, nc-nom, dégâts, [n-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(689, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(cyclone, nc-nom, cyclone, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(phénomène, nc-nom, phénomène, [n-1]), ex_si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(survenant, vpr-ver:ppre, survenant, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(baie, nc-nom, baie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(690, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tempêtes, nc-nom, tempêtes, [n-1]), ex_si(tropicales, adj-adj, tropicales, [dl(0,n,n)-1]), ex_si(provoquent, v-ver:pres, provoquent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dégâts, nc-nom, dégâts, [n-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(691, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(galvanisé, vpp-ver:pper, galvanisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(décret, nc-nom, décret, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Harry', npp-nam, 'Harry', [dl(0,n,n)-1]), ex_si('S.', npp-abr, 'S.', [dl(0,n,n)-1]), ex_si('Truman', npp-nam, 'Truman', [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tard, adv-adv, tard, [dl(1,s,s)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('-là', adv-adv, '-là', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(acres, nc-nom, acres, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('8.000', det-num, '8.000', [dr(0,np,n)-1]), ex_si('km²', nc-nom, 'km²', [n-1]), ex_si(')', ponct-pun, ')', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [let-1]), ex_si(tant, adv-adv, tant, [dr(0,dl(1,s,s),n)-1]), ex_si(que, cs-kon, que, [dr(0,n,s_q)-1]), ex_si(parc, nc-nom, parc, [dr(0,s_q,n)-1]), ex_si(national, adj-adj, national, [n-1]), ex_si(des, p+d-prp:det, des, [dl(0,n,n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [dr(0,dl(0,n,n),n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(692, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(protégé, vpp-ver:pper, protégé, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Everglades', nc-nam, 'Everglades', [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(davantage, adv-adv, davantage, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(environnementaux, adj-adj, environnementaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(693, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(règlement, nc-nom, règlement, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Floride', npp-nam, 'Floride', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si('William', npp-nam, 'William', [dl(0,n,n)-1]), ex_si('Hoeveler', npp-nam, 'Hoeveler', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(niveaux, nc-nom, niveaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(phosphore, nc-nom, phosphore, [n-1]), ex_si(nuisibles, adj-adj, nuisibles, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Loxahatchee', npp-nam, 'Loxahatchee', [dr(0,n,n)-1]), ex_si('National', npp-nam, 'National', [dl(0,n,n)-1]), ex_si('Wildlife', npp-nam, 'Wildlife', [dl(0,n,n)-1]), ex_si('Refuge', npp-nam, 'Refuge', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(31, adj-num, 31, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(2006, adj-num, 2006, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(694, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(protégé, vpp-ver:pper, protégé, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Everglades', nc-nam, 'Everglades', [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(davantage, adv-adv, davantage, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(environnementaux, adj-adj, environnementaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(695, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(outre, adv-adv, outre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(constitution, nc-nom, constitution, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(futurs, adj-adj, futurs, [dr(0,n,n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(proposés, vpp-ver:pper, proposés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(approuvés, vpp-ver:pper, approuvés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(aura, v-ver:futu, aura, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(mot, nc-nom, mot, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(696, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(procédure, nc-nom, procédure, [n-1]), ex_si(diffère, v-ver:pres, diffère, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(procédure, nc-nom, procédure, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(acquerra, v-ver:futu, acquerra, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rejeter, vinf-ver:infi, rejeter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(spécifiquement, adv-adv, spécifiquement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(désigné, vpp-ver:pper, désigné, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(simplement, adv-adv, simplement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rejeter, vinf-ver:infi, rejeter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ensemble, nc-nom, ensemble, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(697, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidence, nc-nom, présidence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CE', npp-abr, 'CE', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(désignés, vpp-ver:pper, désignés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(698, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(constituants, nc-nom, constituants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(matière, nc-nom, matière, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(1,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(fermions, nc-nom, fermions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(leptons, nc-nom, leptons, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(699, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(antiparticules, nc-nom, antiparticules, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(appelées, vpp-ver:pper, appelées, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(antiquarks, nc-nom, antiquarks, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(700, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(seules, adj-adj, seules, [dr(0,n,n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(fondamentales, adj-adj, fondamentales, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(interagissent, v-ver:pres, interagissent, [dl(0,np,s)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(biais, nc-nom, biais, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(quatre, adj-num, quatre, [dr(0,n,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(fondamentales, adj-adj, fondamentales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(701, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(supérieurs, adj-adj, supérieurs, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(trouvée, vpp-ver:pper, trouvée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(702, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1965, pro-num, 1965, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Moo-Young', npp-nam, 'Moo-Young', [dr(0,np,np)-1]), ex_si('Han', npp-nam, 'Han', [np-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), ex_si('Yoichiro', npp-nam, 'Yoichiro', [dr(0,np,np)-1]), ex_si('Nambu', npp-nam, 'Nambu', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Oscar', npp-nam, 'Oscar', [dr(0,np,np)-1]), ex_si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), ex_si('Greenberg', npp-nam, 'Greenberg', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indépendamment, adv-adv, indépendamment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(résolu, vpp-ver:pper, résolu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(proposant, vpr-ver:ppre, proposant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(possèdent, v-ver:pres, possèdent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(degré, nc-nom, degré, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(liberté, nc-nom, liberté, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(jauge, nc-nom, jauge, [dl(0,n,n)-1]), ex_si('SU', npp-abr, 'SU', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si(3, pro-num, 3, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(supplémentaire, adj-adj, supplémentaire, [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,np)-1]), ex_si(tard, adv-adv, tard, [np-1]), ex_si(charge, nc-nom, charge, [dr(0,dl(0,np,np),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(couleur, nc-nom, couleur, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(703, Result) :-
      prob_parse([ ex_si('Han', npp-nam, 'Han', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Nambu', npp-nam, 'Nambu', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(noté, vpp-ver:pper, noté, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(interagiraient, v-ver:impf, interagiraient, [dl(0,np,s)-1]), ex_si(via, p-prp, via, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(octet, nc-nom, octet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bosons, nc-nom, bosons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(jauge, nc-nom, jauge, [n-1]), ex_si(vectoriels, adj-adj, vectoriels, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gluons, nc-nom, gluons, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(704, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(supérieurs, adj-adj, supérieurs, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(trouvée, vpp-ver:pper, trouvée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(705, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(autorisent, v-ver:pres, autorisent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(double, adj-adj, double, [dr(0,n,n)-1]), ex_si(nationalité, nc-nom, nationalité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(par, p-prp, par, [dr(0,dr(0,s,s),n)-1]), ex_si(conséquent, adv-adv, conséquent, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(courses, nc-nom, courses, [n-1]), ex_si(courues, vpp-ver:pper, courues, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Lagat', npp-nam, 'Lagat', [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(7, adj-num, 7, [dr(0,n,n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(ratifiées, vpp-ver:pper, ratifiées, [dl(0,np,s_pass)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(records, nc-nom, records, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(puisque, cs-kon, puisque, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(règles, nc-nom, règles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('USATF', npp-abr, 'USATF', [n-1]), ex_si(stipulent, v-ver:pres, stipulent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(seulement, adv-adv, seulement, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(athlète, nc-nom, athlète, [n-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(citoyen, nc-nom, citoyen, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(participant, vpr-ver:ppre, participant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(compétition, nc-nom, compétition, [n-1]), ex_si(sanctionnée, vpp-ver:pper, sanctionnée, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(établir, vinf-ver:infi, établir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(706, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(records, nc-nom, records, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(athlétisme, nc-nom, athlétisme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(ratifiés, vpp-ver:pper, ratifiés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(707, Result) :-
      prob_parse([ ex_si('Alors', adv-kon, 'Alors', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(lancer, nc-nom, lancer, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marteau, nc-nom, marteau, [n-1]), ex_si(masculin, adj-adj, masculin, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('IAAF', npp-abr, 'IAAF', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ratifier, vinf-ver:infi, ratifier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marques, nc-nom, marques, [n-1]), ex_si(féminines, adj-adj, féminines, [dl(0,n,n)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(708, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(lancer, nc-nom, lancer, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(marteau, nc-nom, marteau, [n-1]), ex_si(féminin, adj-adj, féminin, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(inclus, vpp-ver:pper, inclus, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2000, pro-num, 2000, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('Sydney', npp-nam, 'Sydney', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(inclus, vpp-ver:pper, inclus, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Championnats', nc-nam, 'Championnats', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(un, det-det:art, un, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(709, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(records, nc-nom, records, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(athlétisme, nc-nom, athlétisme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(ratifiés, vpp-ver:pper, ratifiés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(710, Result) :-
      prob_parse([ ex_si('Lillehammer', npp-nam, 'Lillehammer', [dr(0,np,np)-1]), ex_si('Ishockeylubb', npp-nam, 'Ishockeylubb', [np-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(matchs, nc-nom, matchs, [n-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(mais, cc-kon, mais, [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(importants, adj-adj, importants, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(tournois, nc-nom, tournois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(hockey, nc-nom, hockey, [n-1]), ex_si(disputés, vpp-ver:pper, disputés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),pp)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arène, nc-nom, arène, [dr(0,np,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(rendus, vpp-ver:pper, rendus, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(célèbres, adj-adj, célèbres, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), ex_si('Forsberg', npp-nam, 'Forsberg', [dr(0,np,np)-1]), ex_si(lors, adv-adv, lors, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(la, det-det:art, la, [dr(0,pp_de,np)-1]), ex_si(séance, nc-nom, séance, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(tirs, nc-nom, tirs, [dr(0,dl(0,n,n),n)-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si(but, nc-nom, but, [dr(0,dl(0,n,n),n)-1]), ex_si(décisive, adj-adj, décisive, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(match, nc-nom, match, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,np,np),np)-1]), ex_si('Championnats', nc-nam, 'Championnats', [dr(0,np,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(monde, nc-nom, monde, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(hockey, nc-nom, hockey, [dr(0,dl(0,n,n),n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(1999, pro-num, 1999, [np-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(711, Result) :-
      prob_parse([ ex_si('Lillehammer', npp-nam, 'Lillehammer', [np-1]), ex_si(accueille, v-ver:pres, accueille, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(finales, nc-nom, finales, [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(hockey, nc-nom, hockey, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(712, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(officiellement, adv-adv, officiellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connus, vpp-ver:pper, connus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('XVIIe', adj-num, 'XVIIe', [dr(0,n,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(célébrés, vpp-ver:pper, célébrés, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Lillehammer', npp-nam, 'Lillehammer', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Norvège', npp-nam, 'Norvège', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(713, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si(candidates, adj-adj, candidates, [dl(0,n,n)-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),np)-1]), ex_si('Anchorage', npp-nam, 'Anchorage', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('Alaska', npp-nam, 'Alaska', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Östersund', npp-nam, 'Östersund', [np-1]), ex_si('/', ponct-pun, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('Åre', npp-nam, 'Åre', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('Suède', npp-nam, 'Suède', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sofia', npp-nam, 'Sofia', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('Bulgarie', npp-nam, 'Bulgarie', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(714, Result) :-
      prob_parse([ ex_si('Lillehammer', npp-nam, 'Lillehammer', [np-1]), ex_si(accueille, v-ver:pres, accueille, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(finales, nc-nom, finales, [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(hockey, nc-nom, hockey, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(glace, nc-nom, glace, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(715, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(convient, v-ver:pres, convient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(souligner, vinf-ver:infi, souligner, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(compétences, nc-nom, compétences, [n-1]), ex_si(linguistiques, adj-adj, linguistiques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(inégalement, adv-adv, inégalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réparties, vpp-ver:pper, réparties, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,pp,pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(géographique, adj-adj, géographique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si('socio-démographiques', adj-adj, 'socio-démographiques', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(716, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(officielles, adj-adj, officielles, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(717, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(précédent, nc-nom, précédent, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Foreword', npp-nam, 'Foreword', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(intro, nc-nom, intro, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(album, nc-nom, album, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(termine, v-ver:pres, termine, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bruit, nc-nom, bruit, [n-1]), ex_si(fracassant, vpr-ver:ppre, fracassant, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(beaucoup, pro-pro:ind, beaucoup, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bris, nc-nom, bris, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(verre, nc-nom, verre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agit, v-ver:pres, agit, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(graveur, nc-nom, graveur, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('CD', nc-abr, 'CD', [n-1]), ex_si(externe, adj-adj, externe, [dl(0,n,n)-1]), ex_si(posé, vpp-ver:pper, posé, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(table, nc-nom, table, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(bois, nc-nom, bois, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(fracassé, vpp-ver:pper, fracassé, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(batte, nc-nom, batte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(baseball, nc-nom, baseball, [dr(0,dl(0,n,n),n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(aluminium, nc-nom, aluminium, [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(718, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(graveur, nc-nom, graveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CD', nc-abr, 'CD', [n-1]), ex_si(frappe, v-ver:pres, frappe, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(719, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(gamme, nc-nom, gamme, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Macintosh', npp-nam, 'Macintosh', [np-1]), ex_si(varie, v-ver:pres, varie, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si('Mac', npp-nam, 'Mac', [dl(0,n,n)-1]), ex_si(mini, nc-nam, mini, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gamme, nc-nom, gamme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Apple', npp-nam, 'Apple', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(serveur, nc-nom, serveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milieu, nc-nom, milieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gamme, nc-nom, gamme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Xserve', npp-abr, 'Xserve', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(720, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(systèmes, nc-nom, systèmes, [n-1]), ex_si('Macintosh', npp-nam, 'Macintosh', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(principalement, adv-adv, principalement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(destinés, vpp-ver:pper, destinés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(professionnels, nc-nom, professionnels, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(721, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(graveur, nc-nom, graveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('CD', nc-abr, 'CD', [n-1]), ex_si(arrive, v-ver:pres, arrive, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(722, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Yitzhak', npp-nam, 'Yitzhak', [dr(0,np,np)-1]), ex_si('Rabin', npp-nam, 'Rabin', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('21h30', npp-nam, '21h30', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(issue, nc-nom, issue, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rassemblement, nc-nom, rassemblement, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Oslo', npp-nam, 'Oslo', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Rois', nc-nam, 'Rois', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [dr(0,dl(0,n,n),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Tel-Aviv', npp-nam, 'Tel-Aviv', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(723, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rabin', npp-nam, 'Rabin', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(724, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(4, adj-num, 4, [dr(0,n,n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Rabin', npp-nam, 'Rabin', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Yigal', npp-nam, 'Yigal', [dr(0,np,np)-1]), ex_si('Amir', npp-nam, 'Amir', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(radical, nc-nom, radical, [n-1]), ex_si(juif, adj-adj, juif, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droite, nc-nom, droite, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(vigoureusement, adv-adv, vigoureusement, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(opposé, vpp-ver:pper, opposé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(signature, nc-nom, signature, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(accords, nc-nom, accords, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Oslo', npp-nam, 'Oslo', [np-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si('Rabin', npp-nam, 'Rabin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rassemblement, nc-nom, rassemblement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(promotion, nc-nom, promotion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Oslo', npp-nam, 'Oslo', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Rois', nc-nom, 'Rois', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tel', npp-nam, 'Tel', [dr(0,np,np)-1]), ex_si('Aviv', npp-nam, 'Aviv', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rebaptisée, vpp-ver:pper, rebaptisée, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(place, nc-nom, place, [dr(0,np,np)-1]), ex_si('Yitzhak', npp-nam, 'Yitzhak', [dr(0,np,np)-1]), ex_si('Rabin', npp-nam, 'Rabin', [np-1]), ex_si(après, p-prp, après, [np-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(725, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rabin', npp-nam, 'Rabin', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(726, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(versions, nc-nom, versions, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(intensive, adj-adj, intensive, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Mongolie', npp-nam, 'Mongolie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Finlande', npp-nam, 'Finlande', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(1941, adj-num, 1941, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(727, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(diverses, adj-adj, diverses, [dr(0,np,n)-1]), ex_si(fonctions, nc-nom, fonctions, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(variantes, nc-nom, variantes, [n-1]), ex_si(civiles, adj-adj, civiles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entraînement, nc-nom, entraînement, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(rôles, nc-nom, rôles, [n-1]), ex_si(secondaires, adj-adj, secondaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(728, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Mongolie', npp-nam, 'Mongolie', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(améliorent, v-ver:pres, améliorent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(729, Result) :-
      prob_parse([ ex_si('Auparavant', adv-adv, 'Auparavant', [dr(0,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(paria, nc-nom, paria, [n-1]), ex_si(auquel, p+pro-pro:rel, auquel, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_a))))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(refusaient, v-ver:impf, refusaient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reconnaissance, nc-nom, reconnaissance, [n-1]), ex_si(diplomatique, adj-adj, diplomatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(officielles, adj-adj, officielles, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(nations, nc-nom, nations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1980, adj-num, 1980, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(730, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Mongolie', npp-nam, 'Mongolie', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(améliorent, v-ver:pres, améliorent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(731, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(mon, det-det:pos, mon, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(cité, vpp-ver:pper, cité, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acte, nc-nom, acte, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accusation, nc-nom, accusation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(comparu, vpp-ver:pper, comparu, [dl(0,np,s_ppart)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(témoin, nc-nom, témoin, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('m\'', clo-pro:per, 'm\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(défendu, vpp-ver:pper, défendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(732, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(crée, v-ver:pres, crée, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Balkans', npp-nam, 'Balkans', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(733, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(opportunité, nc-nom, opportunité, [n-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(stabilité, nc-nom, stabilité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(734, Result) :-
      prob_parse([ ex_si('Sinon', adv-adv, 'Sinon', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Balkans', nc-nam, 'Balkans', [n-1]), ex_si(deviendront, v-ver:pres, deviendront, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(trou, nc-nom, trou, [n-1]), ex_si(noir, adj-adj, noir, [dl(0,n,n)-1]), ex_si(permanent, adj-adj, permanent, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(735, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(crée, v-ver:pres, crée, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Balkans', npp-nam, 'Balkans', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(736, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('52e', adj-num, '52e', [dr(0,n,n)-1]), ex_si('Golden', npp-nam, 'Golden', [dr(0,n,n)-1]), ex_si('Globe', npp-nam, 'Globe', [dr(0,n,n)-1]), ex_si('Awards', npp-nam, 'Awards', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(récompensent, v-ver:pres, récompensent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(meilleur, nc-nom, meilleur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(1994, adj-num, 1994, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôtel, nc-nom, hôtel, [n-1]), ex_si('Beverly', npp-nam, 'Beverly', [dl(0,n,n)-1]), ex_si('Hilton', npp-nam, 'Hilton', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Beverly', npp-nam, 'Beverly', [dr(0,np,np)-1]), ex_si('Hills', npp-nam, 'Hills', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(737, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Golden', npp-nam, 'Golden', [dr(0,n,n)-1]), ex_si('Globes', npp-nam, 'Globes', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décernés, vpp-ver:pper, décernés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(738, Result) :-
      prob_parse([ ex_si('Millennium', npp-nam, 'Millennium', [dr(0,np,np)-1]), ex_si('Approaches', npp-nam, 'Approaches', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Perestroika', npp-nam, 'Perestroika', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Tony', npp-nam, 'Tony', [dr(0,n,n)-1]), ex_si('Award', npp-nam, 'Award', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,n,n)-1]), ex_si(pièce, nc-nom, pièce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(théâtre, nc-nom, théâtre, [n-1]), ex_si(coup, nc-nom, coup, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(coup, nc-nom, coup, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(respectivement, adv-adv, respectivement, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(739, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(pièces, nc-nom, pièces, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(coup, nc-nom, coup, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,dl(1,s,s)),n)-1]), ex_si(coup, nc-nom, coup, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Drama', npp-nam, 'Drama', [dr(0,n,n)-1]), ex_si('Desk', npp-nam, 'Desk', [dr(0,n,n)-1]), ex_si('Award', npp-nam, 'Award', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,n,n)-1]), ex_si(pièce, nc-nom, pièce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(théâtre, nc-nom, théâtre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(740, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Golden', npp-nam, 'Golden', [dr(0,n,n)-1]), ex_si('Globes', npp-nam, 'Globes', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décernés, vpp-ver:pper, décernés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(741, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(opposants, nc-nom, opposants, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prohibition, nc-nom, prohibition, [n-1]), ex_si(soutiennent, v-ver:pres, soutiennent, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inefficace, adj-adj, inefficace, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(coûteuse, adj-adj, coûteuse, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(socialement, adv-adv, socialement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(dommageable, adj-adj, dommageable, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(drogues, nc-nom, drogues, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(interdit, v-ver:pres, interdit, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(742, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(affirment, v-ver:pres, affirment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prohibition, nc-nom, prohibition, [n-1]), ex_si(crée, v-ver:pres, crée, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(criminalise, v-ver:pres, criminalise, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(innocentes, adj-adj, innocentes, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(violence, nc-nom, violence, [n-1]), ex_si(associée, vpp-ver:pper, associée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acquisition, nc-nom, acquisition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(drogues, nc-nom, drogues, [n-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(source, nc-nom, source, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réglementées, vpp-ver:pper, réglementées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(743, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(opposants, nc-nom, opposants, [n-1]), ex_si(soutiennent, v-ver:pres, soutiennent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prohibition, nc-nom, prohibition, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inconstitutionnelle, adj-adj, inconstitutionnelle, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(viole, v-ver:pres, viole, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(naturelle, adj-adj, naturelle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(744, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(peines, nc-nom, peines, [n-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(drogue, nc-nom, drogue, [n-1]), ex_si(varient, v-ver:pres, varient, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(745, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alcool, nc-nom, alcool, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(extrêmement, adv-adv, extrêmement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(dangereux, adj-adj, dangereux, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(drogues, nc-nom, drogues, [n-1]), ex_si(illégales, adj-adj, illégales, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(subjectivement, adv-adv, subjectivement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(agréables, adj-adj, agréables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(746, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(critiques, nc-nom, critiques, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(attribuable, vpp-ver:pper, attribuable, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(profit, nc-nom, profit, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(campagnes, nc-nom, campagnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marketing, nc-nom, marketing, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sociétés, nc-nom, sociétés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(alcool, nc-nom, alcool, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(747, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(peines, nc-nom, peines, [n-1]), ex_si(liées, vpp-ver:pper, liées, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(drogue, nc-nom, drogue, [n-1]), ex_si(varient, v-ver:pres, varient, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(748, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(répertoriée, vpp-ver:pper, répertoriée, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('Web', npp-nam, 'Web', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('CDC', npp-abr, 'CDC', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Center', npp-nam, 'Center', [n-1]), ex_si(for, et-prp, for, [dr(0,dl(0,n,n),n)-1]), ex_si('Disease', npp-nam, 'Disease', [dr(0,np,np)-1]), ex_si('Control', et-nam, 'Control', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(indique, v-ver:pres, indique, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(éliminer, vinf-ver:infi, éliminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lieux, nc-nom, lieux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lieux, nc-nom, lieux, [n-1]), ex_si(publics, adj-adj, publics, [dl(0,n,n)-1]), ex_si(fermés, vpp-ver:pper, fermés, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(considérablement, adv-adv, considérablement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(niveaux, nc-nom, niveaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('RSP', npp-abr, 'RSP', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(respirables, adj-adj, respirables, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(suspension, nc-nom, suspension, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lieux, nc-nom, lieux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accueil, nc-nom, accueil, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouest, nc-nom, ouest, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(749, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(fumer, nc-ver:infi, fumer, [dl(0,np,s_inf)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appliquent, v-ver:pres, appliquent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(restaurants, nc-nom, restaurants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(750, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Queensland', npp-nam, 'Queensland', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(interdit, vpp-ver:pper, interdit, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fumer, vinf-ver:infi, fumer, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pubs, nc-nom, pubs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(clubs, nc-nom, clubs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(restaurants, nc-nom, restaurants, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(lieux, nc-nom, lieux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,pp,pp),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(commerciales, adj-adj, commerciales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(restauration, nc-nom, restauration, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(plein, adj-adj, plein, [dr(0,n,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lieux, nc-nom, lieux, [n-1]), ex_si(publics, adj-adj, publics, [dl(0,n,n)-1]), ex_si(extérieurs, adj-adj, extérieurs, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(par, p-prp, par, [dr(0,dr(0,np,np),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(plages, nc-nom, plages, [n-1]), ex_si(surveillées, vpp-ver:pper, surveillées, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(aires, nc-nom, aires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(jeux, nc-nom, jeux, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(stades, nc-nom, stades, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(entrées, nc-nom, entrées, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(bâtiments, nc-nom, bâtiments, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(résidentiels, adj-adj, résidentiels, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(751, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(restrictions, nc-nom, restrictions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(fumer, nc-ver:infi, fumer, [dl(0,np,s_inf)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appliquent, v-ver:pres, appliquent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(restaurants, nc-nom, restaurants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(752, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commenté, vpp-ver:pper, commenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ralentissement, nc-nom, ralentissement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(turques, adj-adj, turques, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(combiné, vpp-ver:pper, combiné, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(problème, nc-nom, problème, [n-1]), ex_si(chypriote, adj-adj, chypriote, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commissaire, nc-nom, commissaire, [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élargissement, nc-nom, élargissement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(garde, nc-nom, garde, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(naufrage, nc-nom, naufrage, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(imminent, adj-adj, imminent, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(753, Result) :-
      prob_parse([ ex_si('Malgré', p-prp, 'Malgré', [dr(0,dr(0,s,s),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(revers, nc-nom, revers, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(clos, vpp-ver:pper, clos, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(chapitre, nc-nom, chapitre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(2006, adj-num, 2006, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(754, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(négocie, v-ver:pres, négocie, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(adhésion, nc-nom, adhésion, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(755, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(adhésion, nc-nom, adhésion, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(priorité, nc-nom, priorité, [n-1]), ex_si(absolue, adj-adj, absolue, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(de, p-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(trains, nc-nom, trains, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(parfois, adv-adv, parfois, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(controversés, vpp-ver:pper, controversés, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(harmoniser, vinf-ver:infi, harmoniser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(progressivement, adv-adv, progressivement, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(normes, nc-nom, normes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(756, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(officiellement, adv-adv, officiellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(entamé, vpp-ver:pper, entamé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(adhésion, nc-nom, adhésion, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(celles, pro-pro:dem, celles, [np-1]), ex_si('-ci', adv-adv, '-ci', [dl(0,np,np)-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basées, vpp-ver:pper, basées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acquis, nc-nom, acquis, [n-1]), ex_si(communautaire, adj-adj, communautaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(757, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Turquie', npp-nam, 'Turquie', [n-1]), ex_si(négocie, v-ver:pres, négocie, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(adhésion, nc-nom, adhésion, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(758, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(gluten, nc-nom, gluten, [n-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(strictement, adv-adv, strictement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(suivi, vpp-ver:pper, suivi, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(atteintes, vpp-ver:pper, atteintes, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(coeliaque, adj-adj, coeliaque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dermatite, nc-nom, dermatite, [n-1]), ex_si(herpétiforme, adj-adj, herpétiforme, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(759, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(régimes, nc-nom, régimes, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(gluten, nc-nom, gluten, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(coeliaques, nc-nom, coeliaques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(760, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gluten, nc-nom, gluten, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(blé, nc-nom, blé, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(seigle, nc-nom, seigle, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(orge, nc-nom, orge, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), ex_si(contaminer, vinf-ver:infi, contaminer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avoine, nc-nom, avoine, [n-1]), ex_si(cultivée, vpp-ver:pper, cultivée, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(proximité, nc-nom, proximité, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(traitée, vpp-ver:pper, traitée, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), ex_si(équipement, nc-nom, équipement, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(céréales, nc-nom, céréales, [n-1]), ex_si(contenant, vpr-ver:ppre, contenant, [dr(0,dl(0,n,n),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(gluten, nc-nom, gluten, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(caséine, nc-nom, caséine, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(laitiers, adj-adj, laitiers, [dl(0,n,n)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(blé, nc-nom, blé, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(laitiers, adj-adj, laitiers, [dl(0,n,n)-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si(fréquemment, adv-adv, fréquemment, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si(alimentaire, adj-adj, alimentaire, [dl(0,n,n)-1]), ex_si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(761, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(régimes, nc-nom, régimes, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(gluten, nc-nom, gluten, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(destinés, vpp-ver:pper, destinés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(coeliaques, nc-nom, coeliaques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(762, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(possède, v-ver:pres, possède, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('Austin', npp-nam, 'Austin', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('Nichols', npp-nam, 'Nichols', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(whiskies, nc-nom, whiskies, [n-1]), ex_si('Wild', npp-nam, 'Wild', [dl(0,n,n)-1]), ex_si('Turkey', npp-nam, 'Turkey', [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(boissons, nc-nom, boissons, [n-1]), ex_si(alcoolisées, vpp-ver:pper, alcoolisées, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('Seagram', npp-nam, 'Seagram', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(participations, nc-nom, participations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(763, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2005, pro-num, 2005, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acquis, vpp-ver:pper, acquis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(concurrent, nc-nom, concurrent, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Allied', npp-nam, 'Allied', [dl(0,n,n)-1]), ex_si('Domecq', npp-nam, 'Domecq', [dl(0,n,n)-1]), ex_si(plc, npp-nam, plc, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(764, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(scotch, nc-nom, scotch, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(765, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(marée, nc-nom, marée, [n-1]), ex_si(noire, adj-adj, noire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jiyeh', npp-nam, 'Jiyeh', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(environnementale, adj-adj, environnementale, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(causée, vpp-ver:pper, causée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rejet, nc-nom, rejet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fioul, nc-nom, fioul, [n-1]), ex_si(lourd, adj-adj, lourd, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Méditerranée', npp-nam, 'Méditerranée', [n-1]), ex_si(orientale, adj-adj, orientale, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réservoirs, nc-nom, réservoirs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(stockage, nc-nom, stockage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(thermique, adj-adj, thermique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jiyeh', npp-nam, 'Jiyeh', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(km, nc-abr, km, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(19, det-num, 19, [dr(0,np,n)-1]), ex_si(mi, nc-nom, mi, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sud, nc-nom, sud, [dr(0,dl(0,n,n),np)-1]), ex_si(de, p-prp, de, [np-1]), ex_si('Beyrouth', npp-nam, 'Beyrouth', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(bombardés, vpp-ver:pper, bombardés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(air, nc-nom, air, [n-1]), ex_si(israélienne, adj-adj, israélienne, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2006, adj-num, 2006, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si('israélo-libanais', adj-adj, 'israélo-libanais', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(766, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(affecte, v-ver:pres, affecte, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(767, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(éléments, nc-nom, éléments, [n-1]), ex_si(marginaux, adj-adj, marginaux, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(républicanisme, nc-nom, républicanisme, [n-1]), ex_si(irlandais, adj-adj, irlandais, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pu, vpp-ver:pper, pu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(origine, nc-nom, origine, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(émeutes, nc-nom, émeutes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produites, vpp-ver:pper, produites, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Dublin', npp-nam, 'Dublin', [np-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si(dernier, adj-adj, dernier, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pense, v-ver:pres, pense, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gros, nc-nom, gros, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(émeutiers, nc-nom, émeutiers, [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(motivations, nc-nom, motivations, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(soi, pro-pro:per, soi, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(hormis, p-prp, hormis, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(identification, nc-nom, identification, [n-1]), ex_si(occasionnelle, adj-adj, occasionnelle, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(républicanisme, nc-nom, républicanisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(768, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(prenaient, v-ver:impf, prenaient, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(gravement, adv-adv, gravement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(laissés, vpp-ver:pper, laissés, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(tomber, vinf-ver:infi, tomber, [dl(0,np,s_inf)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(irlandais, adj-adj, irlandais, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(769, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(émeutes, nc-nom, émeutes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Dublin', npp-nam, 'Dublin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(770, Result) :-
      prob_parse([ ex_si('Charlotte', npp-nam, 'Charlotte', [np-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Lottie', npp-nam, 'Lottie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Dod', npp-nam, 'Dod', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(24, det-num, 24, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(1871, adj-num, 1871, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,n),n)-1]), ex_si(27, adj-num, 27, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1960, adj-num, 1960, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(athlète, nc-nom, athlète, [n-1]), ex_si(anglaise, adj-adj, anglaise, [dl(0,n,n)-1]), ex_si(surtout, adv-adv, surtout, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connue, vpp-ver:pper, connue, [dr(0,dl(0,n,n),pp)-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,n)-1]), ex_si(joueuse, nc-nom, joueuse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tennis, nc-nom, tennis, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(771, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cinq, det-num, cinq, [dr(0,dr(0,np,np),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(championnat, nc-nom, championnat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(quinze, det-num, quinze, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(1887, adj-num, 1887, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(772, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(gagnantes, adj-adj, gagnantes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(773, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(certain, adj-adj, certain, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('plates-formes', nc-nom, 'plates-formes', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(interface, nc-nom, interface, [n-1]), ex_si(utilisateur, nc-nom, utilisateur, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(smartphones, nc-nom, smartphones, [n-1]), ex_si(basées, vpp-ver:pper, basées, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('Symbian', npp-nam, 'Symbian', [dr(0,np,np)-1]), ex_si('OS', npp-abr, 'OS', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(inclus, vpp-ver:pper, inclus, [dr(0,dl(0,cl_y,dl(0,np,np)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('plates-formes', nc-nom, 'plates-formes', [n-1]), ex_si(ouvertes, vpp-ver:pper, ouvertes, [dl(0,n,n)-1]), ex_si('UIQ', npp-abr, 'UIQ', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Series', nc-nam, 'Series', [n-1]), ex_si(60, adj-num, 60, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Series', npp-nam, 'Series', [n-1]), ex_si(80, adj-num, 80, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), ex_si('Series', npp-nam, 'Series', [dl(0,n,n)-1]), ex_si(90, pro-num, 90, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nokia', npp-nam, 'Nokia', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('plates-formes', nc-nom, 'plates-formes', [n-1]), ex_si(fermées, vpp-ver:pper, fermées, [dl(0,n,n)-1]), ex_si(telles, adj-adj, telles, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si(développée, vpp-ver:pper, développée, [dr(0,dl(0,np,np),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(combinés, nc-nom, combinés, [n-1]), ex_si('FOMA', npp-nam, 'FOMA', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('NTT', npp-nam, 'NTT', [dr(0,np,np)-1]), ex_si('DoCoMo', npp-nam, 'DoCoMo', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(774, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(adaptabilité, nc-nom, adaptabilité, [n-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Symbian', npp-nam, 'Symbian', [dr(0,np,np)-1]), ex_si('OS', npp-abr, 'OS', [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(smartphones, nc-nom, smartphones, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(facteurs, nc-nom, facteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(variés, vpp-ver:pper, variés, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(par, p-prp, par, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coquille, nc-nom, coquille, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(barre, nc-nom, barre, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(monobloc, nc-nom, monobloc, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(candybar, nc-nom, candybar, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),pp_par)-1]), ex_si(pilotés, vpp-ver:pper, pilotés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(clavier, nc-nom, clavier, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(stylet, nc-nom, stylet, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(775, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(portables, adj-adj, portables, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(volant, nc-nom, volant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(776, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(portables, adj-adj, portables, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(risquent, v-ver:pres, risquent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(interférer, vinf-ver:infi, interférer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(équipements, nc-nom, équipements, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(hôpitaux, nc-nom, hôpitaux, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(avions, nc-nom, avions, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(zones, nc-nom, zones, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Université', nc-nam, 'Université', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(sensibles, adj-adj, sensibles, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(portables, adj-adj, portables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(777, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(portables, adj-adj, portables, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(volant, nc-nom, volant, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(778, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(liberté, nc-nom, liberté, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(expression, nc-nom, expression, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(exprimer, vinf-ver:infi, exprimer, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(censure, nc-nom, censure, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(779, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(considérée, vpp-ver:pper, considérée, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si(intégral, adj-adj, intégral, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(démocraties, nc-nom, démocraties, [n-1]), ex_si(libérales, adj-adj, libérales, [dl(0,n,n)-1]), ex_si(modernes, adj-adj, modernes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(780, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(liberté, nc-nom, liberté, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(expression, nc-nom, expression, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(limitée, vpp-ver:pper, limitée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Internet', npp-nam, 'Internet', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(781, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Internet', npp-nam, 'Internet', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connue, vpp-ver:pper, connue, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('CIPA', npp-abr, 'CIPA', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Congrès', npp-nam, 'Congrès', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(proposés, vpp-ver:pper, proposés, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(tenter, vinf-ver:infi, tenter, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(limiter, vinf-ver:infi, limiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exposition, nc-nom, exposition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pornographie, nc-nom, pornographie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(matériels, nc-nom, matériels, [n-1]), ex_si(controversés, vpp-ver:pper, controversés, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(782, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(liberté, nc-nom, liberté, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(expression, nc-nom, expression, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(limitée, vpp-ver:pper, limitée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Internet', npp-nam, 'Internet', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(783, Result) :-
      prob_parse([ ex_si('Mêlant', adv-ver:ppre, 'Mêlant', [dr(0,dr(0,dl(0,np,s_ppres),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(culture, nc-nom, culture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Olympisme', npp-nam, 'Olympisme', [n-1]), ex_si(cherche, v-ver:pres, cherche, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mode, nc-nom, mode, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(joie, nc-nom, joie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effort, nc-nom, effort, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(éducative, adj-adj, éducative, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bon, adj-adj, bon, [dr(0,n,n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(respect, nc-nom, respect, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(principes, nc-nom, principes, [n-1]), ex_si(éthiques, adj-adj, éthiques, [dl(0,n,n)-1]), ex_si(fondamentaux, adj-adj, fondamentaux, [dl(0,n,n)-1]), ex_si(universels, adj-adj, universels, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(784, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(favorisent, v-ver:pres, favorisent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(785, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(participants, nc-nom, participants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(souligné, vpp-ver:pper, souligné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nécessité, nc-nom, nécessité, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(appeler, vinf-ver:infi, appeler, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(sportifs, adj-adj, sportifs, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(promouvoir, vinf-ver:infi, promouvoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(culture, nc-nom, culture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(respect, nc-nom, respect, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(trêve, nc-nom, trêve, [n-1]), ex_si(olympique, adj-adj, olympique, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), ex_si(conviction, nc-nom, conviction, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(détermination, nc-nom, détermination, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(évidence, nc-nom, évidence, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(importance, nc-nom, importance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sport, nc-nom, sport, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(composante, nc-nom, composante, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(unité, nc-nom, unité, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(rapprochement, nc-nom, rapprochement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(peuples, nc-nom, peuples, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(786, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(promeuvent, v-ver:pres, promeuvent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(787, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enfant, nc-nom, enfant, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si(engagé, vpp-ver:pper, engagé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reconnaissance, nc-nom, reconnaissance, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(expansion, nc-nom, expansion, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('/', nc-sym, '/', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(régression, nc-nom, régression, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enfant, nc-nom, enfant, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(788, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enfant, nc-nom, enfant, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(789, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(référence, nc-nom, référence, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(concept, nc-nom, concept, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(êtres, nc-nom, êtres, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(universels, adj-adj, universels, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(indépendamment, adv-adv, indépendamment, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(juridiction, nc-nom, juridiction, [n-1]), ex_si(légale, adj-adj, légale, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(facteurs, nc-nom, facteurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(localisation, nc-nom, localisation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ethnicité, nc-nom, ethnicité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nationalité, nc-nom, nationalité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sexe, nc-nom, sexe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(790, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enfant, nc-nom, enfant, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(historique, adj-adj, historique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(791, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Phare', nc-nam, 'Phare', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandrie', npp-nam, 'Alexandrie', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(sept, adj-num, sept, [dr(0,n,n)-1]), ex_si(merveilles, nc-nom, merveilles, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(antique, adj-adj, antique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(cessé, vpp-ver:pper, cessé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fonctionner, vinf-ver:infi, fonctionner, [dl(0,np,s_inf)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(0,np,s),dl(0,np,s)),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(détruit, vpp-ver:pper, détruit, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tremblement, nc-nom, tremblement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1375, pro-num, 1375, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(792, Result) :-
      prob_parse([ ex_si('Certains', pro-pro:ind, 'Certains', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(vestiges, nc-nom, vestiges, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sol, nc-nom, sol, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alexandrie', npp-nam, 'Alexandrie', [np-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(plongeurs, nc-nom, plongeurs, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(793, Result) :-
      prob_parse([ ex_si('D\'', det-prp, 'D\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(vestiges, nc-nom, vestiges, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(révélés, vpp-ver:pper, révélés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(imagerie, nc-nom, imagerie, [n-1]), ex_si(satellitaire, adj-adj, satellitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(794, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vestiges, nc-nom, vestiges, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(certaines, pro-pro:ind, certaines, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(sept, adj-num, sept, [dr(0,n,n)-1]), ex_si(merveilles, nc-nom, merveilles, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(antique, adj-adj, antique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(795, Result) :-
      prob_parse([ ex_si('AI', npp-abr, 'AI', [dr(0,np,np)-1]), ex_si('USA', npp-nam, 'USA', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(oppose, v-ver:pres, oppose, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(fermement, adv-adv, fermement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(796, Result) :-
      prob_parse([ ex_si('Amnesty', npp-nam, 'Amnesty', [np-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(abolition, nc-nom, abolition, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(en, p-prp, en, [dr(0,dr(0,np,np),n)-1]), ex_si(particulier, nc-nom, particulier, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dr(0,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dr(0,s,s),n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si('Vietnam', npp-nam, 'Vietnam', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(constituent, v-ver:pres, constituent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écrasante, adj-adj, écrasante, [dr(0,n,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(exécutions, nc-nom, exécutions, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(797, Result) :-
      prob_parse([ ex_si('AI', npp-abr, 'AI', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(798, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ozone, nc-nom, ozone, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('O3', npp-nam, 'O3', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(molécule, nc-nom, molécule, [n-1]), ex_si(triatomique, adj-adj, triatomique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(constituée, vpp-ver:pper, constituée, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(atomes, nc-nom, atomes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(oxygène, nc-nom, oxygène, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(799, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(allotrope, nc-nom, allotrope, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(oxygène, nc-nom, oxygène, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(stable, adj-adj, stable, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espèce, nc-nom, espèce, [n-1]), ex_si(diatomique, adj-adj, diatomique, [dl(0,n,n)-1]), ex_si('O2', npp-nam, 'O2', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(800, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présent, adj-adj, présent, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(faibles, adj-adj, faibles, [dr(0,n,n)-1]), ex_si(concentrations, nc-nom, concentrations, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(801, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(applications, nc-nom, applications, [n-1]), ex_si(industrielles, adj-adj, industrielles, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ozonothérapie, nc-nom, ozonothérapie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(802, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(causés, vpp-ver:pper, causés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(couche, nc-nom, couche, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ozone, nc-nom, ozone, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(803, Result) :-
      prob_parse([ ex_si('Puisque', cs-kon, 'Puisque', [dr(0,dr(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(couche, nc-nom, couche, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ozone, nc-nom, ozone, [n-1]), ex_si(empêche, v-ver:pres, empêche, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(longueurs, nc-nom, longueurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(onde, nc-nom, onde, [n-1]), ex_si('UVB', npp-nam, 'UVB', [dl(0,n,n)-1]), ex_si(nocives, adj-adj, nocives, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si('270-315', det-num, '270-315', [dr(0,np,n)-1]), ex_si(nm, nc-nom, nm, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lumière, nc-nom, lumière, [n-1]), ex_si(ultraviolette, adj-adj, ultraviolette, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(traverser, vinf-ver:infi, traverser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(atmosphère, nc-nom, atmosphère, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(diminutions, nc-nom, diminutions, [n-1]), ex_si(observées, vpp-ver:pper, observées, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(prévues, vpp-ver:pper, prévues, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ozone, nc-nom, ozone, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suscité, vpp-ver:pper, suscité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(inquiétude, nc-nom, inquiétude, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(adoption, nc-nom, adoption, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(protocole, nc-nom, protocole, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Montréal', npp-nam, 'Montréal', [dr(0,dl(0,n,n),np)-1]), ex_si(interdisant, vpr-ver:ppre, interdisant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si('CFC', npp-abr, 'CFC', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(halons, nc-nom, halons, [n-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(que, cs-kon, que, [dr(0,pp_de,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(chimiques, adj-adj, chimiques, [dl(0,n,n)-1]), ex_si(appauvrissant, vpr-ver:ppre, appauvrissant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(couche, nc-nom, couche, [n-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(ozone, nc-nom, ozone, [dr(0,dl(0,n,n),n)-1]), ex_si(connexes, adj-adj, connexes, [n-1]), ex_si(tels, adj-adj, tels, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,s_q,np)-1]), ex_si(tétrachlorure, nc-nom, tétrachlorure, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(carbone, nc-nom, carbone, [n-1]), ex_si(et, cc-kon, et, [n-1]), ex_si(le, det-det:art, le, [n-1]), ex_si(trichloroéthane, nc-nom, trichloroéthane, [n-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si(également, adv-adv, également, [let-1]), ex_si(connu, vpp-ver:pper, connu, [let-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(nom, nc-nom, nom, [dr(0,dl(0,n,n),pp)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),pp)-1]), ex_si(méthylchloroforme, nc-nom, méthylchloroforme, [dr(0,np,n)-1]), ex_si(')', ponct-pun, ')', [n-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(804, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(causés, vpp-ver:pper, causés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(couche, nc-nom, couche, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ozone, nc-nom, ozone, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(805, Result) :-
      prob_parse([ ex_si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), ex_si(120, det-num, 120, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Cornouailles', npp-nam, 'Cornouailles', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(80, det-num, 80, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(contaminés, vpp-ver:pper, contaminés, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si('15.000', det-num, '15.000', [dr(0,np,n)-1]), ex_si(oiseaux, nc-nom, oiseaux, [n-1]), ex_si(marins, adj-adj, marins, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tués, vpp-ver:pper, tués, [dl(0,np,s_pass)-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(énorme, adj-adj, énorme, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(organismes, nc-nom, organismes, [n-1]), ex_si(marins, adj-adj, marins, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nappe, nc-nom, nappe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(270, det-num, 270, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(disperse, vs-ver:subp, disperse, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(806, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(accidents, nc-nom, accidents, [n-1]), ex_si(pétroliers, adj-adj, pétroliers, [dl(0,n,n)-1]), ex_si(tuent, v-ver:pres, tuent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(oiseaux, nc-nom, oiseaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(807, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(tue, v-ver:pres, tue, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(oiseaux, nc-nom, oiseaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(façons, nc-nom, façons, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(808, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(briser, vinf-ver:infi, briser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(imperméabilité, nc-nom, imperméabilité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(oiseaux, nc-nom, oiseaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(809, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(écoule, v-ver:pres, écoule, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dos, nc-nom, dos, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(oiseau, nc-nom, oiseau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(oiseau, nc-nom, oiseau, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(protégé, vpp-ver:pper, protégé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(couche, nc-nom, couche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(plumes, nc-nom, plumes, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(chevauchent, v-ver:pres, chevauchent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tuiles, nc-nom, tuiles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(toit, nc-nom, toit, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(810, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(accidents, nc-nom, accidents, [n-1]), ex_si(pétroliers, adj-adj, pétroliers, [dl(0,n,n)-1]), ex_si(tuent, v-ver:pres, tuent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(oiseaux, nc-nom, oiseaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(811, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(restaurants, nc-nom, restaurants, [n-1]), ex_si(traditionnels, adj-adj, traditionnels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ramen, nc-nom, ramen, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sushis, nc-nom, sushis, [n-1]), ex_si(dominent, v-ver:pres, dominent, [dr(0,dl(0,np,s),np)-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(culture, nc-nom, culture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(restauration, nc-nom, restauration, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(points, nc-nom, points, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('Pizza', npp-nam, 'Pizza', [dr(0,np,np)-1]), ex_si('Hut', npp-nam, 'Hut', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('McDonald\'s', npp-nam, 'McDonald\'s', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Kentucky', npp-nam, 'Kentucky', [dr(0,np,np)-1]), ex_si('Fried', npp-nam, 'Fried', [dr(0,np,np)-1]), ex_si('Chicken', npp-nam, 'Chicken', [np-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chaînes, nc-nom, chaînes, [n-1]), ex_si(japonaises, adj-adj, japonaises, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(style, nc-nom, style, [n-1]), ex_si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('Mos', npp-nam, 'Mos', [dr(0,np,np)-1]), ex_si('Burger', npp-nam, 'Burger', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(812, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(restauration, nc-nom, restauration, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(813, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('Hawaï', npp-nam, 'Hawaï', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hamburgers, nc-nom, hamburgers, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(garnis, vpp-ver:pper, garnis, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(sauce, nc-nom, sauce, [n-1]), ex_si(teriyaki, nc-nom, teriyaki, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(issue, vpp-ver:pper, issue, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(culture, nc-nom, culture, [n-1]), ex_si('nippo-américaine', adj-adj, 'nippo-américaine', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(ananas, nc-nom, ananas, [n-1]), ex_si(cultivé, vpp-ver:pper, cultivé, [dl(0,n,n)-1]), ex_si(localement, adv-adv, localement, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(814, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(restauration, nc-nom, restauration, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(815, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(curry, nc-nom, curry, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(introduit, vpp-ver:pper, introduit, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ère, nc-nom, ère, [n-1]), ex_si('Meiji', npp-nam, 'Meiji', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si(1869, pro-num, 1869, [np-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(1913, pro-num, 1913, [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Compagnie', nc-nam, 'Compagnie', [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Indes', nc-nam, 'Indes', [n-1]), ex_si(orientales, adj-adj, orientales, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(816, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(raison, nc-nom, raison, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(curry, nc-nom, curry, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(catégorisé, vpp-ver:pper, catégorisé, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plat, nc-nom, plat, [n-1]), ex_si(occidental, adj-adj, occidental, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(plat, nc-nom, plat, [n-1]), ex_si(asiatique, adj-adj, asiatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(817, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(importe, v-ver:pres, importe, [dr(0,dl(0,np,s),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(riz, nc-nom, riz, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(818, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(coloniale, adj-adj, coloniale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Sierra', npp-nam, 'Sierra', [n-1]), ex_si('Leone', npp-nam, 'Leone', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(placide, adj-adj, placide, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(819, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(peuples, nc-nom, peuples, [n-1]), ex_si(autochtones, adj-adj, autochtones, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(monté, vpp-ver:pper, monté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(révoltes, nc-nom, révoltes, [n-1]), ex_si(infructueuses, adj-adj, infructueuses, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(domination, nc-nom, domination, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(domination, nc-nom, domination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Krios', npp-nam, 'Krios', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(820, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(majeure, adj-adj, majeure, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('XXe', adj-num, 'XXe', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(colonie, nc-nom, colonie, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(pacifique, adj-adj, pacifique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(obtenue, vpp-ver:pper, obtenue, [dl(0,np,s_pass)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(violence, nc-nom, violence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(821, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(rébellion, nc-nom, rébellion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Sierra', npp-nam, 'Sierra', [n-1]), ex_si('Leone', adj-nam, 'Leone', [dl(0,n,n)-1]), ex_si(affecte, v-ver:pres, affecte, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(diamants, nc-nom, diamants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(822, Result) :-
      prob_parse([ ex_si('Taylor', npp-nam, 'Taylor', [np-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(négocier, vinf-ver:infi, négocier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Burkina', npp-nam, 'Burkina', [n-1]), ex_si('Faso', npp-nam, 'Faso', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('RUF', npp-abr, 'RUF', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fourniture, nc-nom, fourniture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mercenaires, nc-nom, mercenaires, [n-1]), ex_si(burkinabés, adj-adj, burkinabés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(paiement, nc-nom, paiement, [n-1]), ex_si(devant, vpr-ver:ppre, devant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(diamants, nc-nom, diamants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sierra', npp-nam, 'Sierra', [np-1]), ex_si('Leone', npp-nam, 'Leone', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(823, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(rébellion, nc-nom, rébellion, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Sierra', npp-nam, 'Sierra', [n-1]), ex_si('Leone', npp-nam, 'Leone', [dl(0,n,n)-1]), ex_si(affecte, v-ver:pres, affecte, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(diamants, nc-nom, diamants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(824, Result) :-
      prob_parse([ ex_si('Women\'s', npp-nam, 'Women\'s', [dr(0,np,np)-1]), ex_si('Hub', npp-nam, 'Hub', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(organisation, nc-nom, organisation, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(gouvernementale, adj-adj, gouvernementale, [dl(0,n,n)-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,n,n),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Philippines', npp-nam, 'Philippines', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(aide, v-ver:pres, aide, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(luttant, vpr-ver:ppre, luttant, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autodétermination, nc-nom, autodétermination, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(utiliser, vinf-ver:infi, utiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('TIC', npp-abr, 'TIC', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communication, nc-nom, communication, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(825, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tient, v-ver:pres, tient, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Pékin', npp-nam, 'Pékin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(826, Result) :-
      prob_parse([ ex_si('Women\'s', npp-nam, 'Women\'s', [dr(0,np,np)-1]), ex_si('Net', npp-nam, 'Net', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(collaboré, vpp-ver:pper, collaboré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('FEMNET', npp-nam, 'FEMNET', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(créer, vinf-ver:infi, créer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(plateforme, nc-nom, plateforme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(permettant, vpr-ver:ppre, permettant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(régionaux, adj-adj, régionaux, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pékin', npp-nam, 'Pékin', [np-1]), ex_si(dédiée, vpp-ver:pper, dédiée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(827, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tient, v-ver:pres, tient, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Pékin', npp-nam, 'Pékin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(828, Result) :-
      prob_parse([ ex_si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reconstruction, nc-nom, reconstruction, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(commence, v-ver:pres, commence, [dl(0,np,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Reichstag', npp-nam, 'Reichstag', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(recouvert, vpp-ver:pper, recouvert, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(artiste, nc-nom, artiste, [n-1]), ex_si(bulgare, adj-adj, bulgare, [dl(0,n,n)-1]), ex_si('Christo', npp-nam, 'Christo', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('Jeanne-Claude', npp-nam, 'Jeanne-Claude', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(attirant, vpr-ver:ppre, attirant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(visiteurs, nc-nom, visiteurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(829, Result) :-
      prob_parse([ ex_si('Christo', npp-nam, 'Christo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(recouvert, vpp-ver:pper, recouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Reichstag', npp-nam, 'Reichstag', [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(830, Result) :-
      prob_parse([ ex_si('Christo', npp-nam, 'Christo', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Jeanne-Claude', npp-nam, 'Jeanne-Claude', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(artistes, nc-nom, artistes, [n-1]), ex_si(pratiquant, vpr-ver:ppre, pratiquant, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(environnemental, adj-adj, environnemental, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(installation, nc-nom, installation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(831, Result) :-
      prob_parse([ ex_si('Leurs', det-det:pos, 'Leurs', [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si(comprennent, v-ver:pres, comprennent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recouverture, nc-nom, recouverture, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Reichstag', npp-nam, 'Reichstag', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pont, nc-nom, pont, [n-1]), ex_si('Neuf', npp-nam, 'Neuf', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Running', npp-nam, 'Running', [dr(0,n,n)-1]), ex_si('Fence', npp-nam, 'Fence', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(long, nc-nom, long, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(comtés, nc-nom, comtés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Marin', npp-nam, 'Marin', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sonoma', npp-nam, 'Sonoma', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('The', det-det:art, 'The', [dr(0,np,n)-1]), ex_si('Gates', npp-nam, 'Gates', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('Central', npp-nam, 'Central', [dr(0,np,np)-1]), ex_si('Park', npp-nam, 'Park', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(832, Result) :-
      prob_parse([ ex_si('Christo', npp-nam, 'Christo', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(recouvert, vpp-ver:pper, recouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Reichstag', npp-nam, 'Reichstag', [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(833, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Arabella', npp-nam, 'Arabella', [dr(0,np,np)-1]), ex_si('Cosima-Asereba', npp-nam, 'Cosima-Asereba', [np-1]), ex_si('Kiesbauer', npp-nam, 'Kiesbauer', [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cible, nc-nom, cible, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(piégée, vpp-ver:pper, piégée, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(studios, nc-nom, studios, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pro7', npp-nam, 'Pro7', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(assistant, nc-nom, assistant, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(blessé, vpp-ver:pper, blessé, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(834, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(piégée, vpp-ver:pper, piégée, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(envoyée, vpp-ver:pper, envoyée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kiesbauer', npp-nam, 'Kiesbauer', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(835, Result) :-
      prob_parse([ ex_si('Kiesbauer', npp-nam, 'Kiesbauer', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cible, nc-nom, cible, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(piégée, vpp-ver:pper, piégée, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(836, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(blessé, vpp-ver:pper, blessé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(837, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(piégée, vpp-ver:pper, piégée, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(envoyée, vpp-ver:pper, envoyée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Kiesbauer', npp-nam, 'Kiesbauer', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(838, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(mobile, adj-adj, mobile, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M-Commerce', npp-nam, 'M-Commerce', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('mCommerce', npp-nam, 'mCommerce', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('U-Commerce', npp-nam, 'U-Commerce', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nature, nc-nom, nature, [n-1]), ex_si(omniprésente, vpp-ver:pper, omniprésente, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(appareil, nc-nom, appareil, [n-1]), ex_si(mobile, adj-adj, mobile, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(par, p-prp, par, [dr(0,dr(0,np,np),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(téléphone, nc-nom, téléphone, [n-1]), ex_si(mobile, adj-adj, mobile, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(téléphone, nc-nom, téléphone, [n-1]), ex_si(cellulaire, adj-adj, cellulaire, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('PDA', nc-abr, 'PDA', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(smartphone, nc-nom, smartphone, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(déplacements, nc-nom, déplacements, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(839, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(mobiles, adj-adj, mobiles, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(utilité, nc-nom, utilité, [n-1]), ex_si(limitée, vpp-ver:pper, limitée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(840, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avancée, nc-nom, avancée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(miniaturisation, nc-nom, miniaturisation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(mobiles, adj-adj, mobiles, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(portatifs, adj-adj, portatifs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(841, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si(vocale, adj-adj, vocale, [dl(0,n,n)-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(téléphone, nc-nom, téléphone, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(téléphone, nc-nom, téléphone, [n-1]), ex_si(mobile, adj-adj, mobile, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(charge, nc-nom, charge, [n-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(supplémentaires, adj-adj, supplémentaires, [dl(0,n,n)-1]), ex_si(tels, adj-adj, tels, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('SMS', nc-abr, 'SMS', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(messagerie, nc-nom, messagerie, [n-1]), ex_si(texte, nc-nom, texte, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(courrier, nc-nom, courrier, [n-1]), ex_si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commutation, nc-nom, commutation, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(paquets, nc-nom, paquets, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Internet', npp-nam, 'Internet', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('MMS', nc-abr, 'MMS', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(envoi, nc-nom, envoi, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réception, nc-nom, réception, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(842, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(téléphones, nc-nom, téléphones, [n-1]), ex_si(mobiles, adj-adj, mobiles, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(utilité, nc-nom, utilité, [n-1]), ex_si(limitée, vpp-ver:pper, limitée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(843, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(ministres, nc-nom, ministres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pêche, nc-nom, pêche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(convenu, vpp-ver:pper, convenu, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, det-prp, de, [dr(0,pp_de,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(réductions, nc-nom, réductions, [n-1]), ex_si(drastiques, adj-adj, drastiques, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(quotas, nc-nom, quotas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pêche, nc-nom, pêche, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(26, det-num, 26, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Bruxelles', npp-nam, 'Bruxelles', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(844, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(réduit, v-ver:pres, réduit, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(quotas, nc-nom, quotas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pêche, nc-nom, pêche, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(845, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(écossaise, adj-adj, écossaise, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pêche, nc-nom, pêche, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tourmente, nc-nom, tourmente, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparu, vpp-ver:pper, apparu, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pêcheurs, nc-nom, pêcheurs, [n-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(capturer, vinf-ver:infi, capturer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(autant, adv-adv, autant, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(églefins, nc-nom, églefins, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(pensaient, v-ver:impf, pensaient, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(vertu, nc-nom, vertu, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(quotas, nc-nom, quotas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(846, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(réduit, v-ver:pres, réduit, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(quotas, nc-nom, quotas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pêche, nc-nom, pêche, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(847, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mot, nc-nom, mot, [n-1]), ex_si(étudiant, adj-adj, étudiant, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(généralement, adv-adv, généralement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réservé, vpp-ver:pper, réservé, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(universitaire, adj-adj, universitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(848, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(collège, nc-nom, collège, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,s),dr(0,s,s)),dr(0,s,s))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,s,s),n)-1]), ex_si(lycée, nc-nom, lycée, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(étudiants, nc-nom, étudiants, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(donc, adv-adv, donc, [dl(1,s,s)-1]), ex_si(appelés, vpp-ver:pper, appelés, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(élèves, nc-nom, élèves, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(traduction, nc-nom, traduction, [n-1]), ex_si(anglaise, adj-adj, anglaise, [dl(0,n,n)-1]), ex_si(pupils, adj-adj, pupils, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(849, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si(existent, v-ver:pres, existent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(850, Result) :-
      prob_parse([ ex_si('Pour', p-prp, 'Pour', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(langues, nc-nom, langues, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(orthographe, nc-nom, orthographe, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dit, v-ver:pres, dit, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si('grand-chose', nc-nom, 'grand-chose', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sons, nc-nom, sons, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(par, p-prp, par, [dr(0,dr(0,np,np),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(lettres, nc-nom, lettres, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(muettes, adj-adj, muettes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(par, p-prp, par, [dr(0,dr(0,np,np),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(transcription, nc-nom, transcription, [n-1]), ex_si(phonétique, adj-adj, phonétique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(cruciale, adj-adj, cruciale, [dr(0,dl(0,n,n),pp)-1]), ex_si(non, adv-adv, non, [dr(0,pp,pp)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,pp,pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(apprenants, nc-nom, apprenants, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,pp,pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(linguistes, nc-nom, linguistes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(851, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si(existent, v-ver:pres, existent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(852, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(féministes, nc-nom, féministes, [n-1]), ex_si(considèrent, v-ver:pres, considèrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(beauté, nc-nom, beauté, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(dégradants, adj-adj, dégradants, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tant, adv-adv, tant, [dr(0,dr(0,dl(1,s,s),s_q),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(spectateur, nc-nom, spectateur, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(candidate, nc-nom, candidate, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(853, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(comparaison, nc-nom, comparaison, [n-1]), ex_si(courante, adj-adj, courante, [dl(0,n,n)-1]), ex_si(faite, vpp-ver:pper, faite, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(féministes, nc-nom, féministes, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(beauté, nc-nom, beauté, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(bestiaux, nc-nom, bestiaux, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(applique, v-ver:pres, applique, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objectivation, nc-nom, objectivation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(854, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(beauté, nc-nom, beauté, [n-1]), ex_si(internationaux, adj-adj, internationaux, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mettent, v-ver:pres, mettent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(855, Result) :-
      prob_parse([ ex_si('Lady', npp-nom, 'Lady', [np-1]), ex_si(of, et-prp, of, [dr(0,dl(0,np,np),np)-1]), ex_si('Universe', npp-nam, 'Universe', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(beauté, nc-nom, beauté, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gagnante, nc-nom, gagnante, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(856, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(concours, nc-nom, concours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(beauté, nc-nom, beauté, [n-1]), ex_si(internationaux, adj-adj, internationaux, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mettent, v-ver:pres, mettent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(857, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Tour', nc-nam, 'Tour', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pise', npp-nam, 'Pise', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisée, vpp-ver:pper, réalisée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(étapes, nc-nom, étapes, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(200, det-num, 200, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(858, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(étage, nc-nom, étage, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(campanile, nc-nom, campanile, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(marbre, nc-nom, marbre, [n-1]), ex_si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(9, adj-num, 9, [dr(0,n,n)-1]), ex_si(août, nc-nom, août, [n-1]), ex_si(1173, adj-num, 1173, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prospérité, nc-nom, prospérité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(859, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(étage, nc-nom, étage, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(entouré, vpp-ver:pper, entouré, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(piliers, nc-nom, piliers, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(chapiteaux, nc-nom, chapiteaux, [n-1]), ex_si(classiques, adj-adj, classiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(adossés, vpp-ver:pper, adossés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(arcs, nc-nom, arcs, [n-1]), ex_si(aveugles, adj-adj, aveugles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(860, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(rest, v-ver:pres, rest, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(intacte, adj-adj, intacte, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(siècles, nc-nom, siècles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(intempéries, nc-nom, intempéries, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(861, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Tour', nc-nam, 'Tour', [n-1]), ex_si('Penchée', npp-nam, 'Penchée', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Pise', npp-nam, 'Pise', [np-1]), ex_si(survit, v-ver:pres, survit, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(862, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Food', npp-nam, 'Food', [n-1]), ex_si(and, et-kon, and, [dr(0,dl(0,n,n),n)-1]), ex_si('Drug', npp-nam, 'Drug', [dr(0,n,n)-1]), ex_si('Administration', npp-nam, 'Administration', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Fort', npp-nam, 'Fort', [dr(0,np,np)-1]), ex_si('Dodge', npp-nam, 'Dodge', [dr(0,np,np)-1]), ex_si('Animal', npp-nam, 'Animal', [dr(0,np,np)-1]), ex_si('Health', npp-nam, 'Health', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(volontairement, adv-adv, volontairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(cessé, vpp-ver:pper, cessé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('ProHeart', npp-nam, 'ProHeart', [np-1]), ex_si(6, adj-num, 6, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rappelé, vpp-ver:pper, rappelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('ProHeart', npp-nam, 'ProHeart', [n-1]), ex_si(6, adj-num, 6, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(distribués, vpp-ver:pper, distribués, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(vétérinaires, nc-nom, vétérinaires, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,pp_a,np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(préoccupations, nc-nom, préoccupations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('FDA', npp-abr, 'FDA', [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [dr(0,dl(0,n,n),n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(médicament, nc-nom, médicament, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(résolues, vpp-ver:pper, résolues, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(863, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si('Dodge', npp-nam, 'Dodge', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rappelés, vpp-ver:pper, rappelés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(864, Result) :-
      prob_parse([ ex_si('Chrysler', npp-nam, 'Chrysler', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(rappellerait, v-ver:cond, rappellerait, [dr(0,dl(0,np,s),np)-1]), ex_si('145.099', pro-num, '145.099', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(camionnettes, nc-nom, camionnettes, [dr(0,n,n)-1]), ex_si('Dodge', npp-nam, 'Dodge', [dl(0,n,n)-1]), ex_si('Ram', npp-nam, 'Ram', [dl(0,n,n)-1]), ex_si(1500, adj-num, 1500, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(réparer, vinf-ver:infi, réparer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sac, nc-nom, sac, [n-1]), ex_si(gonflable, adj-adj, gonflable, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ceinture, nc-nom, ceinture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(passager, nc-nom, passager, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(865, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si('Dodge', npp-nam, 'Dodge', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rappelés, vpp-ver:pper, rappelés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(866, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(dévoilé, vpp-ver:pper, dévoilé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(initiative, nc-nom, initiative, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(défectueux, adj-adj, défectueux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(rappels, nc-nom, rappels, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(867, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si('Dodge', npp-nam, 'Dodge', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rappelés, vpp-ver:pper, rappelés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(868, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(cardiaques, adj-adj, cardiaques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accidents, nc-nom, accidents, [n-1]), ex_si(vasculaires, adj-adj, vasculaires, [dl(0,n,n)-1]), ex_si(cérébraux, adj-adj, cérébraux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(cardiovasculaires, adj-adj, cardiovasculaires, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(vaisseaux, nc-nom, vaisseaux, [n-1]), ex_si(sanguins, adj-adj, sanguins, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(provoquées, vpp-ver:pper, provoquées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(869, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(cardiaques, adj-adj, cardiaques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accidents, nc-nom, accidents, [n-1]), ex_si(vasculaires, adj-adj, vasculaires, [dl(0,n,n)-1]), ex_si(cérébraux, adj-adj, cérébraux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(causes, nc-nom, causes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(870, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(871, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(presque, adv-adv, presque, [dr(0,np,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(organes, nc-nom, organes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(complet, adj-adj, complet, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Département', nc-nam, 'Département', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('HHS', npp-abr, 'HHS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(872, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(873, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(fumeurs, nc-nom, fumeurs, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(infections, nc-nom, infections, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(voies, nc-nom, voies, [n-1]), ex_si(respiratoires, adj-adj, respiratoires, [dl(0,n,n)-1]), ex_si(supérieures, adj-adj, supérieures, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(inférieures, adj-adj, inférieures, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('non-fumeurs', nc-nom, 'non-fumeurs', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(874, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(produit, v-ver:pres, produit, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(parce, adv-kon, parce, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(endommage, v-ver:pres, endommage, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(votre, det-det:pos, votre, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(infections, nc-nom, infections, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(875, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(876, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(récents, adj-adj, récents, [dr(0,n,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conclu, vpp-ver:pper, conclu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cancers, nc-nom, cancers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vessie, nc-nom, vessie, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(oesophage, nc-nom, oesophage, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bouche, nc-nom, bouche, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gorge, nc-nom, gorge, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si(cardiovasculaires, adj-adj, cardiovasculaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reproduction, nc-nom, reproduction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(877, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(tabagisme, nc-nom, tabagisme, [n-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(maladies, nc-nom, maladies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(878, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lacunes, nc-nom, lacunes, [n-1]), ex_si(considérables, adj-adj, considérables, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(notre, det-det:pos, notre, [dr(0,np,n)-1]), ex_si(connaissance, nc-nom, connaissance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(modernes, adj-adj, modernes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(savons, v-ver:pres, savons, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(carbonifère, adj-adj, carbonifère, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(formes, nc-nom, formes, [n-1]), ex_si(différentes, adj-adj, différentes, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(amphibiens, nc-nom, amphibiens, [n-1]), ex_si(parcouraient, v-ver:impf, parcouraient, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marais, nc-nom, marais, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(879, Result) :-
      prob_parse([ ex_si('A', p-prp, 'A', [dr(0,dr(0,dr(0,s,s),np),n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(caeciliens, nc-nom, caeciliens, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(amphibiens, nc-nom, amphibiens, [n-1]), ex_si(modernes, adj-adj, modernes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(perdu, vpp-ver:pper, perdu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(écailles, nc-nom, écailles, [n-1]), ex_si(semblables, adj-adj, semblables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(celles, pro-pro:dem, celles, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(poissons, nc-nom, poissons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(peau, nc-nom, peau, [n-1]), ex_si(douce, adj-adj, douce, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(880, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(grenouilles, nc-nom, grenouilles, [n-1]), ex_si(vivent, v-ver:pres, vivent, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marécages, nc-nom, marécages, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(881, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(autant, adv-adv, autant, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crapauds, nc-nom, crapauds, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grenouilles, nc-nom, grenouilles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(surprenant, adj-adj, surprenant, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(habitent, v-ver:pres, habitent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(variété, nc-nom, variété, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(habitats, nc-nom, habitats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(882, Result) :-
      prob_parse([ ex_si('Certains', pro-pro:ind, 'Certains', [np-1]), ex_si(vivent, v-ver:pres, vivent, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(désertiques, adj-adj, désertiques, [dl(0,n,n)-1]), ex_si(arides, adj-adj, arides, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(montagneuses, adj-adj, montagneuses, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(encore, adv-adv, encore, [dr(0,pp,pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(marécages, nc-nom, marécages, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(883, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(grenouilles, nc-nom, grenouilles, [n-1]), ex_si(vivent, v-ver:pres, vivent, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(marécages, nc-nom, marécages, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(884, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bénéficié, vpp-ver:pper, bénéficié, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(immunité, nc-nom, immunité, [n-1]), ex_si(miraculeusement, adv-adv, miraculeusement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(longue, adj-adj, longue, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(redoutable, adj-adj, redoutable, [dr(0,n,n)-1]), ex_si(peste, nc-nom, peste, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(balayait, v-ver:impf, balayait, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(885, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(peste, nc-nom, peste, [n-1]), ex_si(noire, adj-adj, noire, [dl(0,n,n)-1]), ex_si(balayait, v-ver:impf, balayait, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(886, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(peste, nc-nom, peste, [n-1]), ex_si(noire, adj-adj, noire, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(duré, vpp-ver:pper, duré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tiers, nc-nom, tiers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(0,np,np),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(887, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(peste, nc-nom, peste, [n-1]), ex_si(noire, adj-adj, noire, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(balayé, vpp-ver:pper, balayé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(888, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(originaire, adj-adj, originaire, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(889, Result) :-
      prob_parse([ ex_si('De', p-prp, 'De', [dr(0,dr(0,s,s),n)-1]), ex_si(même, adj-adj, même, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(pandémies, nc-nom, pandémies, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peste, nc-nom, peste, [n-1]), ex_si(bubonique, adj-adj, bubonique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(890, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(peste, nc-nom, peste, [n-1]), ex_si(noire, adj-adj, noire, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(balayé, vpp-ver:pper, balayé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(891, Result) :-
      prob_parse([ ex_si('Par', p-prp, 'Par', [dr(0,dr(0,s,s),n)-1]), ex_si(conséquent, nc-nom, conséquent, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(influence, nc-nom, influence, [n-1]), ex_si(turque, adj-adj, turque, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(culture, nc-nom, culture, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(marocains, adj-adj, marocains, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étendent, v-ver:pres, étendent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(tradition, nc-nom, tradition, [n-1]), ex_si(ininterrompue, adj-adj, ininterrompue, [dl(0,n,n)-1]), ex_si(remontant, vpr-ver:ppre, remontant, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(islamique, adj-adj, islamique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(892, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(influence, v-ver:pres, influence, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(893, Result) :-
      prob_parse([ ex_si('Norris', npp-nam, 'Norris', [np-1]), ex_si(poursuit, v-ver:pres, poursuit, [dr(0,dl(0,np,s),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(important, adj-adj, important, [dr(0,n,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), ex_si(originalité, nc-nom, originalité, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(clarté, nc-nom, clarté, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(explorant, vpr-ver:ppre, explorant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(relation, nc-nom, relation, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(894, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(influence, v-ver:pres, influence, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(moderne, adj-adj, moderne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(895, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(poésie, nc-nom, poésie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(bon, adj-adj, bon, [dr(0,np,n)-1]), ex_si(ménage, nc-nom, ménage, [n-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('L\'Iliade', npp-nam, 'L\'Iliade', [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si(ne, adv-adv, ne, [let-1]), ex_si('s\'', clr-pro:per, 's\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(adresse, v-ver:pres, adresse, [cl_r-1]), ex_si(à, p-prp, à, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(la, det-det:art, la, [dr(0,pp_a,np)-1]), ex_si(classe, nc-nom, classe, [dr(0,np,n)-1]), ex_si(dirigeante, adj-adj, dirigeante, [n-1]), ex_si(des, p+d-prp:det, des, [dl(0,n,n)-1]), ex_si('Grecs', nc-nam, 'Grecs', [dr(0,dl(0,n,n),n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(identifiant, vpr-ver:ppre, identifiant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(les, det-det:art, les, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si(dirigeants, nc-nom, dirigeants, [dr(0,np,n)-1]), ex_si(contemporains, adj-adj, contemporains, [n-1]), ex_si(aux, p+d-prp:det, aux, [dl(0,n,n)-1]), ex_si(héros, nc-nom, héros, [dr(0,pp_a,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),np)-1]), ex_si(guerre, nc-nom, guerre, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Troie', npp-nam, 'Troie', [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(896, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(poésie, nc-nom, poésie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(influencent, v-ver:pres, influencent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(mutuellement, adv-adv, mutuellement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(897, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(définitivement, adv-adv, définitivement, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ruissellement, nc-nom, ruissellement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(898, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(relativement, adv-adv, relativement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(faible, adj-adj, faible, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(instruites, adj-adj, instruites, [dl(0,n,n)-1]), ex_si(lisent, v-ver:pres, lisent, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(poésie, nc-nom, poésie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(poésie, nc-nom, poésie, [n-1]), ex_si(écrite, vpp-ver:pper, écrite, [dl(0,n,n)-1]), ex_si(affecte, v-ver:pres, affecte, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écriture, nc-nom, écriture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chansons, nc-nom, chansons, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écriture, nc-nom, écriture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chansons, nc-nom, chansons, [n-1]), ex_si(affecte, v-ver:pres, affecte, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(masses, nc-nom, masses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(899, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(poésie, nc-nom, poésie, [n-1]), ex_si(devient, v-ver:pres, devient, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(expression, nc-nom, expression, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(filtre, v-ver:pres, filtre, [dl(0,np,s)-1]), ex_si(lentement, adv-adv, lentement, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(900, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(poésie, nc-nom, poésie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(influencent, v-ver:pres, influencent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(mutuellement, adv-adv, mutuellement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(901, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(révélé, vpp-ver:pper, révélé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(méthode, nc-nom, méthode, [n-1]), ex_si(préférée, adj-adj, préférée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(censure, nc-nom, censure, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si(cinq, det-num, cinq, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(0,n,n),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(902, Result) :-
      prob_parse([ ex_si('Anna', npp-nam, 'Anna', [dr(0,np,np)-1]), ex_si('Politkovskaya', npp-nam, 'Politkovskaya', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassinée, vpp-ver:pper, assassinée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(903, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(soirées, nc-nom, soirées, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(organisées, vpp-ver:pper, organisées, [dl(0,np,s_pass)-1]), ex_si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(904, Result) :-
      prob_parse([ ex_si('Cela', pro-pro:dem, 'Cela', [np-1]), ex_si(permet, v-ver:pres, permet, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sourdes, adj-adj, sourdes, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(accéder, vinf-ver:infi, accéder, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(informations, nc-nom, informations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(choses, nc-nom, choses, [n-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(interprète, nc-nom, interprète, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(signes, nc-nom, signes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(905, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sourdes, adj-adj, sourdes, [dl(0,n,n)-1]), ex_si(rencontrent, v-ver:pres, rencontrent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(problèmes, nc-nom, problèmes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(sociale, adj-adj, sociale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(906, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(fossiles, nc-nom, fossiles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tricératops, nc-nom, tricératops, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(loin, adv-adv, loin, [np-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(restes, nc-nom, restes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dinosaures, nc-nom, dinosaures, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(courants, adj-adj, courants, [dl(0,n,n)-1]), ex_si(trouvés, vpp-ver:pper, trouvés, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(roches, nc-nom, roches, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Crétacé', npp-nam, 'Crétacé', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(récent, adj-adj, récent, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouest, nc-nom, ouest, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(907, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(restes, nc-nom, restes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dinosaures, nc-nom, dinosaures, [n-1]), ex_si(trouvés, vpp-ver:pper, trouvés, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(908, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(néerlandais, adj-adj, néerlandais, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décrits, vpp-ver:pper, décrits, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lâches, nc-nom, lâches, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(incapacité, nc-nom, incapacité, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(protéger, vinf-ver:infi, protéger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réfugiés, nc-nom, réfugiés, [n-1]), ex_si(bosniaques, adj-adj, bosniaques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(partagé, vpp-ver:pper, partagé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(tasses, nc-nom, tasses, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(café, nc-nom, café, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(serbes, adj-adj, serbes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(909, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(commandant, nc-nom, commandant, [n-1]), ex_si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), ex_si('Karremans', npp-nam, 'Karremans', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tête, nc-nom, tête, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(néerlandaises, adj-adj, néerlandaises, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Srebrenica', npp-nam, 'Srebrenica', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(filmé, vpp-ver:pper, filmé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(train, nc-nom, train, [dr(0,n,dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(porter, vinf-ver:infi, porter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(toast, nc-nom, toast, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(suspect, nc-nom, suspect, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si(serbe, adj-adj, serbe, [dl(0,n,n)-1]), ex_si('Ratko', npp-nam, 'Ratko', [dl(0,n,n)-1]), ex_si('Mladic', npp-nam, 'Mladic', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(910, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(néerlandaises, adj-adj, néerlandaises, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Srebrenica', npp-nam, 'Srebrenica', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(disparu, vpp-ver:pper, disparu, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(911, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(combats, nc-nom, combats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guérilla, nc-nom, guérilla, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(théâtres, nc-nom, théâtres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pacifique', npp-nam, 'Pacifique', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(912, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(guérilla, nc-nom, guérilla, [n-1]), ex_si(augmente, v-ver:pres, augmente, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Timor', npp-nam, 'Timor', [n-1]), ex_si(oriental, adj-adj, oriental, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(913, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2003, pro-num, 2003, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(laitiers, adj-adj, laitiers, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(valeur, nc-nom, valeur, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(ventes, nc-nom, ventes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('10,4', det-num, '10,4', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(croissante, vpr-ver:ppre, croissante, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(euro, nc-nom, euro, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(dollar, nc-nom, dollar, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(914, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(consommation, nc-nom, consommation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lait, nc-nom, lait, [n-1]), ex_si(augmente, v-ver:pres, augmente, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(915, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Willy', npp-nam, 'Willy', [dr(0,np,np)-1]), ex_si('Claes', npp-nam, 'Claes', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(envisageait, v-ver:impf, envisageait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(démissionner, vinf-ver:infi, démissionner, [dl(0,np,s_inf)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si(parlementaire, adj-adj, parlementaire, [dl(0,n,n)-1]), ex_si(belge, adj-adj, belge, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(ce, det-pro:dem, ce, [dr(0,dl(1,s,s),n)-1]), ex_si(matin, nc-nom, matin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(recommander, vinf-ver:infi, recommander, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haute, adj-adj, haute, [dr(0,n,n)-1]), ex_si(juridiction, nc-nom, juridiction, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(inculper, vinf-ver:infi, inculper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(scandale, nc-nom, scandale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(corruption, nc-nom, corruption, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armement, nc-nom, armement, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(élargit, v-ver:pres, élargit, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(916, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si('Willy', npp-nam, 'Willy', [dl(0,n,n)-1]), ex_si('Claes', npp-nam, 'Claes', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démissionné, vpp-ver:pper, démissionné, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(917, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(1994, adj-num, 1994, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('News', npp-nam, 'News', [np-1]), ex_si(of, et-prp, of, [dr(0,dl(0,np,np),np)-1]), ex_si('Norway', npp-nam, 'Norway', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(critique, nc-nom, critique, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(roman, nc-nom, roman, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(venait, v-ver:impf, venait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(sortir, vinf-ver:infi, sortir, [dl(0,np,s_inf)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(1,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(philosophie, nc-nom, philosophie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lycée, nc-nom, lycée, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si('Jostein', npp-nam, 'Jostein', [dl(0,n,n)-1]), ex_si('Gaarder', npp-nam, 'Gaarder', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(918, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('best-seller', nc-nom, 'best-seller', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(919, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(milliardaires, nc-nom, milliardaires, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(latine, adj-adj, latine, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fortune, nc-nom, fortune, [n-1]), ex_si(combinée, vpp-ver:pper, combinée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(115, det-num, 115, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(920, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliardaires, nc-nom, milliardaires, [n-1]), ex_si(augmente, v-ver:pres, augmente, [dl(0,np,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(921, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Eskimos', nc-nam, 'Eskimos', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(peuples, nc-nom, peuples, [n-1]), ex_si(chasseurs, adj-nom, chasseurs, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(phoques, nc-nom, phoques, [n-1]), ex_si(dispersés, vpp-ver:pper, dispersés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arctique', npp-nam, 'Arctique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(envisagent, v-ver:pres, envisagent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(demander, vinf-ver:infi, demander, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(interaméricaine, adj-adj, interaméricaine, [dl(0,n,n)-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(statuer, vinf-ver:infi, statuer, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(contribuant, vpr-ver:ppre, contribuant, [dr(0,dl(0,np,s_ppres),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(substantielle, adj-adj, substantielle, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(réchauffement, nc-nom, réchauffement, [n-1]), ex_si(climatique, adj-adj, climatique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(menacent, v-ver:pres, menacent, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(existence, nc-nom, existence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(922, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(phoques, nc-nom, phoques, [n-1]), ex_si(met, v-ver:pres, met, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(923, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(liste, nc-nom, liste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('USA', npp-nam, 'USA', [np-1]), ex_si(today, npp-nam, today, [dl(0,np,np)-1]), ex_si(des, det-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('best-sellers', nc-nom, 'best-sellers', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Nora', npp-nam, 'Nora', [dr(0,np,np)-1]), ex_si('Roberts', npp-nam, 'Roberts', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(autrice, nc-nom, autrice, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(lue, vpp-ver:pper, lue, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('J.K', npp-nam, 'J.K', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(924, Result) :-
      prob_parse([ ex_si('Rowling', npp-nam, 'Rowling', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(925, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('best-seller', nc-nom, 'best-seller', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(926, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donc, adv-adv, donc, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(voyagé, vpp-ver:pper, voyagé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évêque, nc-nom, évêque, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(endroits, nc-nom, endroits, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Rome', npp-nam, 'Rome', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(commençant, vpr-ver:ppre, commençant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tradition, nc-nom, tradition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(voyages, nc-nom, voyages, [n-1]), ex_si(papaux, adj-adj, papaux, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(culmineront, v-ver:futu, culmineront, [dr(0,dl(0,np,s),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(loin, adv-adv, loin, [np-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(voyageur, nc-nom, voyageur, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(toute, adv-adv, toute, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(927, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(voyages, nc-nom, voyages, [n-1]), ex_si(pontificaux, adj-adj, pontificaux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(affectés, vpp-ver:pper, affectés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(préoccupations, nc-nom, préoccupations, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(928, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(militants, nc-nom, militants, [n-1]), ex_si(antinucléaires, adj-adj, antinucléaires, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retardé, vpp-ver:pper, retardé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(train, nc-nom, train, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(reliant, vpr-ver:ppre, reliant, [dr(0,dr(0,dl(0,n,n),pp_a),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(nord, nc-nom, nord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(retraitement, nc-nom, retraitement, [n-1]), ex_si('Areva', npp-nam, 'Areva', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(929, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déchets, nc-nom, déchets, [n-1]), ex_si(nucléaires, adj-adj, nucléaires, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(930, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(visualisé, vpp-ver:pper, visualisé, [dl(0,np,s_pass)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(suit, v-ver:pres, suit, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si('Imaginez', vimp-ver:impe, 'Imaginez', [dr(0,s,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(encerclée, vpp-ver:pper, encerclée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sphère, nc-nom, sphère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(verre, nc-nom, verre, [n-1]), ex_si(géante, adj-adj, géante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(931, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chaleur, nc-nom, chaleur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(soleil, nc-nom, soleil, [n-1]), ex_si(pénètre, v-ver:pres, pénètre, [dl(0,np,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,dl(1,s,s),np),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(verre, nc-nom, verre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(932, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaleur, nc-nom, chaleur, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(absorbée, vpp-ver:pper, absorbée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(rayonnée, vpp-ver:pper, rayonnée, [dl(0,np,s_pass)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(933, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(chaleur, nc-nom, chaleur, [n-1]), ex_si(rayonnée, vpp-ver:pper, rayonnée, [dl(0,n,n)-1]), ex_si(atteint, v-ver:pres, atteint, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sphère, nc-nom, sphère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(verre, nc-nom, verre, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(empêchée, vpp-ver:pper, empêchée, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(disperser, vinf-ver:infi, disperser, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(davantage, adv-adv, davantage, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(934, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(effet, nc-nom, effet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(serre, nc-nom, serre, [n-1]), ex_si(modifie, v-ver:pres, modifie, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(climat, nc-nom, climat, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(935, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),dl(0,np,s_ppres))-1]), ex_si(attendant, vpr-ver:ppre, attendant, [dl(0,np,s_ppres)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(continué, vpp-ver:pper, continué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(refuser, vinf-ver:infi, refuser, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(parrainer, vinf-ver:infi, parrainer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(résolution, nc-nom, résolution, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Commission', npp-nam, 'Commission', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ONU', nc-abr, 'ONU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(936, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('UE', npp-abr, 'UE', [n-1]), ex_si(refuse, v-ver:pres, refuse, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(937, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), ex_si('Leeson', npp-nam, 'Leeson', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(banque, nc-nom, banque, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('peut-être', adv-adv, 'peut-être', [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(quintessence, nc-nom, quintessence, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(récit, nc-nom, récit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gestion, nc-nom, gestion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(risque, nc-nom, risque, [n-1]), ex_si(financier, adj-adj, financier, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mal, adv-adv, mal, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(tourné, vpp-ver:pper, tourné, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(938, Result) :-
      prob_parse([ ex_si('Nick', npp-nam, 'Nick', [dr(0,np,np)-1]), ex_si('Leeson', npp-nam, 'Leeson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(arrêté, vpp-ver:pper, arrêté, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Barings', npp-nam, 'Barings', [dr(0,n,n)-1]), ex_si('Bank', npp-nam, 'Bank', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(939, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(obligation, nc-nom, obligation, [n-1]), ex_si(honorée, vpp-ver:pper, honorée, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rejoindre, vinf-ver:infi, rejoindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(milice, nc-nom, milice, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(940, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêts, adj-adj, prêts, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(risquer, vinf-ver:infi, risquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emprisonnement, nc-nom, emprisonnement, [n-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(effectuer, vinf-ver:infi, effectuer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(941, Result) :-
      prob_parse([ ex_si('Ce', cls-pro:dem, 'Ce', [np-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(iranien, adj-adj, iranien, [dl(0,n,n)-1]), ex_si('Mahmoud', npp-nam, 'Mahmoud', [dl(0,n,n)-1]), ex_si('Ahmadinejad', npp-nam, 'Ahmadinejad', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [n-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(entretenu, vpp-ver:pper, entretenu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(dirigeant, nc-nom, dirigeant, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('Abdallah', npp-nam, 'Abdallah', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(942, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(inquiétude, nc-nom, inquiétude, [n-1]), ex_si(face, nc-nom, face, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(tensions, nc-nom, tensions, [n-1]), ex_si(sectaires, adj-adj, sectaires, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(craignant, vpr-ver:ppre, craignant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(propagent, v-ver:pres, propagent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(943, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Mahmoud', npp-nam, 'Mahmoud', [dr(0,np,np)-1]), ex_si('Ahmadinejad', npp-nam, 'Ahmadinejad', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(944, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(iranien, adj-adj, iranien, [dl(0,n,n)-1]), ex_si('Mahmoud', npp-nam, 'Mahmoud', [dl(0,n,n)-1]), ex_si('Ahmadinejad', npp-nam, 'Ahmadinejad', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rencontré, vpp-ver:pper, rencontré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('Abdallah', npp-nam, 'Abdallah', [dl(0,n,n)-1]), ex_si(ici, adv-adv, ici, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(saoudienne, adj-adj, saoudienne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(aborder, vinf-ver:infi, aborder, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(crises, nc-nom, crises, [n-1]), ex_si(sectaires, adj-adj, sectaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(croissantes, vpr-ver:ppre, croissantes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(945, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Mahmoud', npp-nam, 'Mahmoud', [dr(0,np,np)-1]), ex_si('Ahmadinejad', npp-nam, 'Ahmadinejad', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(946, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('Abdallah', npp-nam, 'Abdallah', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Ahmadinejad', npp-nam, 'Ahmadinejad', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(attachés, vpp-ver:pper, attachés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(trouver, vinf-ver:infi, trouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(moyens, nc-nom, moyens, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impasse, nc-nom, impasse, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Hezbollah', npp-nam, 'Hezbollah', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Fouad', npp-nam, 'Fouad', [dr(0,np,np)-1]), ex_si('Siniora', npp-nam, 'Siniora', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(947, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Mahmoud', npp-nam, 'Mahmoud', [dr(0,np,np)-1]), ex_si('Ahmadinejad', npp-nam, 'Ahmadinejad', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(948, Result) :-
      prob_parse([ ex_si('Calgary', npp-nam, 'Calgary', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si('Alberta', npp-nam, 'Alberta', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lethbridge', npp-nam, 'Lethbridge', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alberta', npp-nam, 'Alberta', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenues, vpp-ver:pper, devenues, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(huitième, adj-num, huitième, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(neuvième, adj-num, neuvième, [dr(0,n,n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(interdire, vinf-ver:infi, interdire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fumer, vinf-ver:infi, fumer, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bars, nc-nom, bars, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(restaurants, nc-nom, restaurants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(949, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alberta', npp-nam, 'Alberta', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(950, Result) :-
      prob_parse([ ex_si('Connue', vpp-ver:pper, 'Connue', [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),n)-1]), ex_si(longtemps, adv-adv, longtemps, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(porte, nc-nom, porte, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entrée, nc-nom, entrée, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Rocheuses', nc-nam, 'Rocheuses', [n-1]), ex_si(canadiennes, adj-adj, canadiennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(siège, nc-nom, siège, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(festivals, nc-nom, festivals, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Alberta', npp-nam, 'Alberta', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(occupe, v-ver:pres, occupe, [dr(0,dl(0,np,s),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(destinations, nc-nom, destinations, [n-1]), ex_si(canadiennes, adj-adj, canadiennes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(culturelle, adj-adj, culturelle, [dl(0,n,n)-1]), ex_si(2007, adj-num, 2007, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(cause, nc-nom, cause, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(951, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alberta', npp-nam, 'Alberta', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(952, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(crois, v-ver:pres, crois, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,s,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ouvrir, vinf-ver:infi, ouvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(consultation, nc-nom, consultation, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(procéder, vinf-ver:infi, procéder, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sénat', npp-nam, 'Sénat', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(allons, v-ver:pres, allons, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(travailler, vinf-ver:infi, travailler, [dl(0,np,s_inf)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Stelmach', npp-nam, 'Stelmach', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alberta', npp-nam, 'Alberta', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(953, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(capitale, nc-nom, capitale, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Alberta', npp-nam, 'Alberta', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Edmonton', npp-nam, 'Edmonton', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(954, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(démocrate, nc-nom, démocrate, [n-1]), ex_si(californienne, adj-adj, californienne, [dl(0,n,n)-1]), ex_si('Nancy', npp-nam, 'Nancy', [dl(0,n,n)-1]), ex_si('Pelosi', npp-nam, 'Pelosi', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(66, det-num, 66, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(nommée, vpp-ver:pper, nommée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si('60e', det-num, '60e', [dr(0,np,n)-1]), ex_si(présidente, nc-nom, présidente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(233, det-num, 233, [dr(0,np,n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), ex_si(202, pro-num, 202, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(955, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(présidente, nc-nom, présidente, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(956, Result) :-
      prob_parse([ ex_si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), ex_si('Pelosi', npp-nam, 'Pelosi', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidente, nc-nom, présidente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(957, Result) :-
      prob_parse([ ex_si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), ex_si('Pelosi', npp-nam, 'Pelosi', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(choisie, vpp-ver:pper, choisie, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(démocrates, nc-nom, démocrates, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(présidente, nc-nom, présidente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(958, Result) :-
      prob_parse([ ex_si('Choisie', vpp-ver:pper, 'Choisie', [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(unanimité, nc-nom, unanimité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Pelosi', npp-nam, 'Pelosi', [np-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(présidente, nc-nom, présidente, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(959, Result) :-
      prob_parse([ ex_si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), ex_si('Pelosi', npp-nam, 'Pelosi', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidente, nc-nom, présidente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(960, Result) :-
      prob_parse([ ex_si('Waxman', npp-nam, 'Waxman', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(comprenait, v-ver:impf, comprenait, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(personnel, nc-nom, personnel, [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(informer, vinf-ver:infi, informer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(situation, nc-nom, situation, [n-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(signer, vinf-ver:infi, signer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(961, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(écrite, vpp-ver:pper, écrite, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(minorité, nc-nom, minorité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), ex_si('Pelosi', npp-nam, 'Pelosi', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(député, nc-nom, député, [n-1]), ex_si('Waxman', npp-nam, 'Waxman', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', nc-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réagir, vinf-ver:infi, réagir, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(962, Result) :-
      prob_parse([ ex_si('Nancy', npp-nam, 'Nancy', [dr(0,np,np)-1]), ex_si('Pelosi', npp-nam, 'Pelosi', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidente, nc-nom, présidente, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chambre', nc-nam, 'Chambre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(963, Result) :-
      prob_parse([ ex_si('Sir', nc-nam, 'Sir', [dr(0,np,np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Mills', npp-nam, 'Mills', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(oscarisé, nc-nom, oscarisé, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('BAFTA', npp-nam, 'BAFTA', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(légende, nc-nom, légende, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Disney', npp-nam, 'Disney', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(âge, nc-nom, âge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(97, det-num, 97, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Denham', npp-nam, 'Denham', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Buckinghamshire', npp-nam, 'Buckinghamshire', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(courte, adj-adj, courte, [dr(0,n,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(964, Result) :-
      prob_parse([ ex_si('Jamie', npp-nam, 'Jamie', [dr(0,np,np)-1]), ex_si('Foxx', npp-nam, 'Foxx', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('BAFTA', npp-nam, 'BAFTA', [dr(0,n,n)-1]), ex_si('Awards', npp-nam, 'Awards', [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(965, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(hollywoodien, adj-adj, hollywoodien, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(gros, adj-adj, gros, [dr(0,n,n)-1]), ex_si(budget, nc-nom, budget, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Aviator', npp-nam, 'Aviator', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(petit, adj-adj, petit, [dr(0,n,n)-1]), ex_si(budget, nc-nom, budget, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), ex_si('Drake', npp-nam, 'Drake', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Orange', npp-nam, 'Orange', [dr(0,n,n)-1]), ex_si('BAFTA', npp-nam, 'BAFTA', [dr(0,n,n)-1]), ex_si('Film', npp-nam, 'Film', [dr(0,n,n)-1]), ex_si('Awards', npp-nam, 'Awards', [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(966, Result) :-
      prob_parse([ ex_si('Quatre', det-num, 'Quatre', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décernés, vpp-ver:pper, décernés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('The', et-nam, 'The', [dr(0,np,n)-1]), ex_si('Aviator', npp-nam, 'Aviator', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(second, adj-num, second, [dr(0,n,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(féminin, adj-adj, féminin, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si('Cate', npp-nam, 'Cate', [dr(0,np,np)-1]), ex_si('Blanchett', npp-nam, 'Blanchett', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(967, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Vera', npp-nam, 'Vera', [dr(0,np,np)-1]), ex_si('Drake', npp-nam, 'Drake', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,n,n)-1]), ex_si(actrice, nc-nom, actrice, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(design, nc-nom, design, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(costumes, nc-nom, costumes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(968, Result) :-
      prob_parse([ ex_si('Jamie', npp-nam, 'Jamie', [dr(0,np,np)-1]), ex_si('Foxx', npp-nam, 'Foxx', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Ray', npp-nam, 'Ray', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),np)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),np))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),np)))))-1]), ex_si('Clive', npp-nam, 'Clive', [dr(0,np,np)-1]), ex_si('Owen', npp-nam, 'Owen', [np-1]), ex_si(celui, pro-pro:dem, celui, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(second, adj-num, second, [dr(0,n,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Closer', npp-nam, 'Closer', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(969, Result) :-
      prob_parse([ ex_si('Jamie', npp-nam, 'Jamie', [dr(0,np,np)-1]), ex_si('Foxx', npp-nam, 'Foxx', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(meilleur, adj-adj, meilleur, [dr(0,n,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('BAFTA', nc-nam, 'BAFTA', [dr(0,n,n)-1]), ex_si('Awards', npp-nam, 'Awards', [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(970, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si('Cassini', npp-nam, 'Cassini', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(22, adj-num, 22, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2006, adj-num, 2006, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rivières, nc-nom, rivières, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lacs, nc-nom, lacs, [n-1]), ex_si(présents, adj-adj, présents, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(971, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si('Cassini', npp-nam, 'Cassini', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(972, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lancé, vpp-ver:pper, lancé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Cassini-Huygens', npp-nam, 'Cassini-Huygens', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si(interplanétaire, adj-adj, interplanétaire, [dl(0,n,n)-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(construite, vpp-ver:pper, construite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(15, adj-num, 15, [dr(0,n,n)-1]), ex_si(octobre, nc-nom, octobre, [n-1]), ex_si(1997, adj-num, 1997, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(973, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivée, vpp-ver:pper, arrivée, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(orbite, nc-nom, orbite, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(2004, adj-num, 2004, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(974, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(quatrième, adj-num, quatrième, [dr(0,n,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(visiter, vinf-ver:infi, visiter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(orbite, nc-nom, orbite, [n-1]), ex_si(autour, p-prp, autour, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(975, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si('Cassini', npp-nam, 'Cassini', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(976, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(images, nc-nom, images, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si('Huygens', npp-nam, 'Huygens', [dl(0,n,n)-1]), ex_si(montrent, v-ver:pres, montrent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(méthane, nc-nom, méthane, [n-1]), ex_si(liquide, adj-adj, liquide, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(écoule, v-ver:pres, écoule, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rivières, nc-nom, rivières, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(canaux, nc-nom, canaux, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(lacs, nc-nom, lacs, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sources, nc-nom, sources, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(liquides, adj-adj, liquides, [dl(0,n,n)-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(découverts, vpp-ver:pper, découverts, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(977, Result) :-
      prob_parse([ ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(inspecte, v-ver:pres, inspecte, [dr(0,dr(0,s,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si('Cassini-Huygens', npp-nam, 'Cassini-Huygens', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(978, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si('Cassini', npp-nam, 'Cassini', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(979, Result) :-
      prob_parse([ ex_si('Brooks', npp-nam, 'Brooks', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NNSA', npp-abr, 'NNSA', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('Administration', nc-nam, 'Administration', [n-1]), ex_si('Nationale', adj-adj, 'Nationale', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Sécurité', npp-nam, 'Sécurité', [n-1]), ex_si('Nucléaire', npp-nam, 'Nucléaire', [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(disant, vpr-ver:ppre, disant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(allait, v-ver:impf, allait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(démissionner, vinf-ver:infi, démissionner, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),n)-1]), ex_si(peu, adv-adv, peu, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(980, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('NNSA', npp-abr, 'NNSA', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Administration', nc-nam, 'Administration', [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(981, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Administration', nc-nom, 'Administration', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôleurs, nc-nom, contrôleurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(aéroports, nc-nom, aéroports, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(982, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), ex_si(réductions, nc-nom, réductions, [n-1]), ex_si(interviennent, v-ver:pres, interviennent, [dl(0,np,s)-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(budget, nc-nom, budget, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('TSA', npp-abr, 'TSA', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(globale, adj-adj, globale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(trafic, nc-nom, trafic, [n-1]), ex_si(aéroportuaire, adj-adj, aéroportuaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(983, Result) :-
      prob_parse([ ex_si('NNSA', npp-abr, 'NNSA', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(984, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(déclaration, nc-nom, déclaration, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(faite, vpp-ver:pper, faite, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('vice-ministre', nc-nom, 'vice-ministre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(chargé, vpp-ver:pper, chargé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(juridiques, adj-adj, juridiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Égypte', npp-nam, 'Égypte', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Abdel', npp-nam, 'Abdel', [dr(0,np,np)-1]), ex_si('Aziz', npp-nam, 'Aziz', [dr(0,np,np)-1]), ex_si('Seif', npp-nam, 'Seif', [dr(0,np,np)-1]), ex_si('el-Nasr', npp-nam, 'el-Nasr', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(985, Result) :-
      prob_parse([ ex_si('Abdel', npp-nam, 'Abdel', [dr(0,np,np)-1]), ex_si('Aziz', npp-nam, 'Aziz', [dr(0,np,np)-1]), ex_si('Seif', npp-nam, 'Seif', [dr(0,np,np)-1]), ex_si('el-Nasr', npp-nam, 'el-Nasr', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('vice-ministre', nc-nom, 'vice-ministre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(chargé, vpp-ver:pper, chargé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(juridiques, adj-adj, juridiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Égypte', npp-nam, 'Égypte', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(986, Result) :-
      prob_parse([ ex_si('Abdel', npp-nam, 'Abdel', [dr(0,np,np)-1]), ex_si('Aziz', npp-nam, 'Aziz', [dr(0,np,np)-1]), ex_si('Seif', npp-nam, 'Seif', [dr(0,np,np)-1]), ex_si('el-Nasr', npp-nam, 'el-Nasr', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(bientôt, adv-adv, bientôt, [dr(0,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Égypte', npp-nam, 'Égypte', [n-1]), ex_si(prendra, v-ver:futu, prendra, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(nécessaires, adj-adj, nécessaires, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(présenter, vinf-ver:infi, présenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(idée, nc-nom, idée, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(scène, nc-nom, scène, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(987, Result) :-
      prob_parse([ ex_si('Abdel', npp-nam, 'Abdel', [dr(0,np,np)-1]), ex_si('Aziz', npp-nam, 'Aziz', [dr(0,np,np)-1]), ex_si('Seif', npp-nam, 'Seif', [dr(0,np,np)-1]), ex_si('el-Nasr', npp-nam, 'el-Nasr', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('vice-ministre', nc-nom, 'vice-ministre', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(chargé, vpp-ver:pper, chargé, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(juridiques, adj-adj, juridiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Égypte', npp-nam, 'Égypte', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(988, Result) :-
      prob_parse([ ex_si('Klassen', npp-nam, 'Klassen', [np-1]), ex_si(participera, v-ver:futu, participera, [dr(0,dl(0,np,s),pp)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(courses, nc-nom, courses, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2010, pro-num, 2010, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Vancouver', npp-nam, 'Vancouver', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Colombie-Britannique', npp-nam, 'Colombie-Britannique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Whistler', npp-nam, 'Whistler', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(voisine, adj-adj, voisine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(destination, nc-nom, destination, [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ski, nc-nom, ski, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(neige, nc-nom, neige, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(989, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2010, pro-num, 2010, [np-1]), ex_si(auront, v-ver:futu, auront, [dr(0,dl(0,np,s),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Vancouver', npp-nam, 'Vancouver', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(990, Result) :-
      prob_parse([ ex_si('BC', npp-nam, 'BC', [dr(0,np,np)-1]), ex_si('Place', npp-nam, 'Place', [dr(0,np,np)-1]), ex_si('Stadium', npp-nam, 'Stadium', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1983, adj-num, 1983, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prévu, vpp-ver:pper, prévu, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(clé, nc-nom, clé, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2010, pro-num, 2010, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(991, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2010, pro-num, 2010, [np-1]), ex_si(auront, v-ver:futu, auront, [dr(0,dl(0,np,s),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Vancouver', npp-nam, 'Vancouver', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(992, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), ex_si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), ex_si(remaniera, v-ver:futu, remaniera, [dr(0,dl(0,np,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(cabinet, nc-nom, cabinet, [n-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(11, det-num, 11, [dr(0,np,n)-1]), ex_si(h, nc-abr, h, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Est', npp-nam, 'Est', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(993, Result) :-
      prob_parse([ ex_si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), ex_si('Harper', npp-nam, 'Harper', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(994, Result) :-
      prob_parse([ ex_si('Environ', adv-adv, 'Environ', [dr(0,np,np)-1]), ex_si('25.000', det-num, '25.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), ex_si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(présentes, adj-adj, présentes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(995, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(fête, nc-nom, fête, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si('12h00', npp-nam, '12h00', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(midi, nc-nom, midi, [n-1]), ex_si('ET', cc-kon, 'ET', [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(996, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(cérémonie, nc-nom, cérémonie, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déroulée, vpp-ver:pper, déroulée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(997, Result) :-
      prob_parse([ ex_si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), ex_si('Harper', npp-nam, 'Harper', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(998, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), ex_si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(expliqué, vpp-ver:pper, expliqué, [dr(0,dl(0,np,s_ppart),s_whq)-1]), ex_si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(bat, v-ver:pres, bat, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('Harper', npp-nam, 'Harper', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approbation, nc-nom, approbation, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(prolongation, nc-nom, prolongation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(999, Result) :-
      prob_parse([ ex_si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), ex_si('Harper', npp-nam, 'Harper', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1000, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télécommunications, nc-nom, télécommunications, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Brasil', npp-nam, 'Brasil', [dr(0,np,np)-1]), ex_si('Telecom', npp-nam, 'Telecom', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bloqué, vpp-ver:pper, bloqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(utilisateurs, nc-nom, utilisateurs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('YouTube', npp-nam, 'YouTube', [np-1]), ex_si(suite, nc-nom, suite, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(fermer, vinf-ver:infi, fermer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(populaire, adj-adj, populaire, [dr(0,n,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(partage, nc-nom, partage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1001, Result) :-
      prob_parse([ ex_si('YouTube', npp-nam, 'YouTube', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(web, nc-nom, web, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1002, Result) :-
      prob_parse([ ex_si('Depuis', p-prp, 'Depuis', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1960, adj-num, 1960, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(archevêque, nc-nom, archevêque, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(espionné, vpp-ver:pper, espionné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Église', nc-nam, 'Église', [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1003, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si('Gazeta', npp-nam, 'Gazeta', [dl(0,n,n)-1]), ex_si('Polska', npp-nam, 'Polska', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(publié, vpp-ver:pper, publié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(allégations, nc-nom, allégations, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(agissements, nc-nom, agissements, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Wielgus', npp-nam, 'Wielgus', [np-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démenties, vpp-ver:pper, démenties, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1004, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(archevêque, nc-nom, archevêque, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Varsovie', npp-nam, 'Varsovie', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Stanislaw', npp-nam, 'Stanislaw', [dr(0,np,np)-1]), ex_si('Wielgus', npp-nam, 'Wielgus', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1005, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(nominations, nc-nom, nominations, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(principales, adj-adj, principales, [dr(0,n,n)-1]), ex_si(distinctions, nc-nom, distinctions, [n-1]), ex_si(cinématographiques, adj-adj, cinématographiques, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(annoncées, vpp-ver:pper, annoncées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Académie', nc-nam, 'Académie', [n-1]), ex_si(canadienne, adj-adj, canadienne, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1006, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(distinctions, nc-nom, distinctions, [n-1]), ex_si(cinématographiques, adj-adj, cinématographiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1007, Result) :-
      prob_parse([ ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Rocket', nc-nam, 'Rocket', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Maurice', npp-nam, 'Maurice', [dr(0,n,n)-1]), ex_si('Richard', npp-nam, 'Richard', [dr(0,n,n)-1]), ex_si('Story', npp-nam, 'Story', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(canadien, adj-adj, canadien, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(honoré, vpp-ver:pper, honoré, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('27e', adj-num, '27e', [dr(0,n,n)-1]), ex_si(remise, nc-nom, remise, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Toronto', npp-nam, 'Toronto', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1008, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Génie', npp-nam, 'Génie', [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(distinctions, nc-nom, distinctions, [n-1]), ex_si(cinématographiques, adj-adj, cinématographiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1009, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si('Ganga-Dham', npp-nam, 'Ganga-Dham', [dl(0,n,n)-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(indiens, adj-adj, indiens, [dl(0,n,n)-1]), ex_si('Ganga', npp-nam, 'Ganga', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Gange', npp-nam, 'Gange', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Dham', npp-nam, 'Dham', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(demeure, nc-nom, demeure, [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1010, Result) :-
      prob_parse([ ex_si('Ganga', npp-nam, 'Ganga', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déesse, nc-nom, déesse, [n-1]), ex_si(hindoue, adj-adj, hindoue, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1011, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pèlerinage, nc-nom, pèlerinage, [n-1]), ex_si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(fleuve, nc-nom, fleuve, [n-1]), ex_si('Gange', npp-nam, 'Gange', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(vénéré, vpp-ver:pper, vénéré, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hindous, nc-nom, hindous, [n-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(déesse, nc-nom, déesse, [n-1]), ex_si('Ganga', npp-nam, 'Ganga', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(rassemblement, nc-nom, rassemblement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,np,np),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(participants, nc-nom, participants, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(éclipsant, vpr-ver:ppre, éclipsant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(pèlerinages, nc-nom, pèlerinages, [n-1]), ex_si(religieux, adj-adj, religieux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1012, Result) :-
      prob_parse([ ex_si('Ganga', npp-nam, 'Ganga', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(déesse, nc-nom, déesse, [n-1]), ex_si(hindoue, adj-adj, hindoue, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1013, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(studios, nc-nom, studios, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('Line', npp-nam, 'Line', [dr(0,np,np)-1]), ex_si('Cinema', npp-nam, 'Cinema', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si('Peter', npp-nam, 'Peter', [dl(0,n,n)-1]), ex_si('Jackson', npp-nam, 'Jackson', [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(travailler, vinf-ver:infi, travailler, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si('New', npp-nam, 'New', [dl(0,n,n)-1]), ex_si('Line', npp-nam, 'Line', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1014, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(annonce, nc-nom, annonce, [n-1]), ex_si(signifie, v-ver:pres, signifie, [dr(0,dl(0,np,s),s_q)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Jackson', npp-nam, 'Jackson', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(filmer, vinf-ver:infi, filmer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(préquelle, nc-nom, préquelle, [n-1]), ex_si(intitulée, vpp-ver:pper, intitulée, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Hobbit', npp-nam, 'Hobbit', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,np,np),np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Seigneur', npp-nam, 'Seigneur', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Anneaux', nc-nam, 'Anneaux', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réalisés, vpp-ver:pper, réalisés, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1015, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Seigneur', nc-nam, 'Seigneur', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Anneaux', nc-nam, 'Anneaux', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), ex_si('Jackson', npp-nam, 'Jackson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1016, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(accordée, vpp-ver:pper, accordée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Sci', npp-nam, 'Sci', [n-1]), ex_si('Fi', npp-nam, 'Fi', [dl(0,n,n)-1]), ex_si('Wire', npp-nam, 'Wire', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), ex_si('Shaye', npp-nam, 'Shaye', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(coprésident, nc-nom, coprésident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('Line', npp-nam, 'Line', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),n)-1]), ex_si(producteur, nc-nom, producteur, [n-1]), ex_si(exécutif, adj-adj, exécutif, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Seigneur', nc-nam, 'Seigneur', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Anneaux', nc-nam, 'Anneaux', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('Line', npp-nam, 'Line', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(souhaite, v-ver:pres, souhaite, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Hobbit', npp-nam, 'Hobbit', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Jackson', npp-nam, 'Jackson', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1017, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Seigneur', nc-nam, 'Seigneur', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Anneaux', nc-nam, 'Anneaux', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Peter', npp-nam, 'Peter', [dr(0,np,np)-1]), ex_si('Jackson', npp-nam, 'Jackson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1018, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(cargo, nc-nom, cargo, [n-1]), ex_si(chypriote, adj-adj, chypriote, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Server', npp-nam, 'Server', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(naufrage, nc-nom, naufrage, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(territoire, nc-nom, territoire, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(norvégienne, adj-adj, norvégienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bergen', npp-nam, 'Bergen', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(18, det-num, 18, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(locale, adj-adj, locale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(12, adj-num, 12, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1019, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(naufrage, nc-nom, naufrage, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mer, nc-nom, mer, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1020, Result) :-
      prob_parse([ ex_si('2channel', npp-nam, '2channel', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(forum, nc-nom, forum, [n-1]), ex_si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fournisseur, nc-nom, fournisseur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accès, nc-nom, accès, [n-1]), ex_si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fermé, vpp-ver:pper, fermé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(diffamation, nc-nom, diffamation, [n-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1021, Result) :-
      prob_parse([ ex_si('2channel', npp-nam, '2channel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(forum, nc-nom, forum, [n-1]), ex_si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1022, Result) :-
      prob_parse([ ex_si('2channel', npp-nam, '2channel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(hébergé, vpp-ver:pper, hébergé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(domaine, nc-nom, domaine, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1023, Result) :-
      prob_parse([ ex_si('2channel', npp-nam, '2channel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(forum, nc-nom, forum, [n-1]), ex_si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1024, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si('Arnold', npp-nam, 'Arnold', [dl(0,n,n)-1]), ex_si('Schwarzenegger', npp-nam, 'Schwarzenegger', [dl(0,n,n)-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(opposera, v-ver:futu, opposera, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(veto, nc-nom, veto, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(respect, nc-nom, respect, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(volonté, nc-nom, volonté, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(peuple, nc-nom, peuple, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approbation, nc-nom, approbation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(22, adj-num, 22, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(opposait, v-ver:impf, opposait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reconnaissance, nc-nom, reconnaissance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(mariages, nc-nom, mariages, [n-1]), ex_si(homosexuels, adj-adj, homosexuels, [dl(0,n,n)-1]), ex_si(hors, p-prp, hors, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1025, Result) :-
      prob_parse([ ex_si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1026, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('Arnold', npp-nam, 'Arnold', [dl(0,n,n)-1]), ex_si('Schwarzenegger', npp-nam, 'Schwarzenegger', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(clémence, nc-nom, clémence, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(fondateur, nc-nom, fondateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gang, nc-nom, gang, [n-1]), ex_si('Stanley', npp-nam, 'Stanley', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Tookie', npp-nam, 'Tookie', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Williams', npp-nam, 'Williams', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(condamné, nc-nom, condamné, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(californien, adj-adj, californien, [dl(0,n,n)-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(meurtres, nc-nom, meurtres, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1027, Result) :-
      prob_parse([ ex_si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1028, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(refusant, vpr-ver:ppre, refusant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(clémence, nc-nom, clémence, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(californien, adj-adj, californien, [dl(0,n,n)-1]), ex_si('Arnold', npp-nam, 'Arnold', [dl(0,n,n)-1]), ex_si('Schwarzenegger', npp-nam, 'Schwarzenegger', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Sans', p-prp, 'Sans', [dr(0,dr(0,s,s),n)-1]), ex_si(excuses, nc-nom, excuses, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(expiation, nc-nom, expiation, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(meurtres, nc-nom, meurtres, [n-1]), ex_si(insensés, adj-adj, insensés, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(brutaux, adj-adj, brutaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(rédemption, nc-nom, rédemption, [n-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1029, Result) :-
      prob_parse([ ex_si('Schwarzenegger', npp-nam, 'Schwarzenegger', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1030, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Forces', nc-nam, 'Forces', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(israéliennes, adj-adj, israéliennes, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('lieutenant-général', nc-nom, 'lieutenant-général', [n-1]), ex_si('Dan', npp-nam, 'Dan', [dl(0,n,n)-1]), ex_si('Halutz', npp-nam, 'Halutz', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démissionné, vpp-ver:pper, démissionné, [dl(0,np,s_ppart)-1]), ex_si(mardi, nc-nom, mardi, [dr(0,dl(1,s,s),n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2007, adj-num, 2007, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(examen, nc-nom, examen, [n-1]), ex_si(interne, adj-adj, interne, [dl(0,n,n)-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(critiqué, vpp-ver:pper, critiqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(leadership, nc-nom, leadership, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1031, Result) :-
      prob_parse([ ex_si('Dan', npp-nam, 'Dan', [dr(0,np,np)-1]), ex_si('Halutz', npp-nam, 'Halutz', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(israéliennes, adj-adj, israéliennes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1032, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(publiant, vpr-ver:ppre, publiant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vidéo, nc-nom, vidéo, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(internet, nc-nom, internet, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(allait, v-ver:impf, allait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(former, vinf-ver:infi, former, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(exploratoire, adj-adj, exploratoire, [dl(0,n,n)-1]), ex_si(présidentiel, adj-adj, présidentiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1033, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(suis, v-ver:pres, suis, [dr(0,dl(0,np,s),np)-1]), ex_si(partante, adj-adj, partante, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1034, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), ex_si(je, cls-pro:per, je, [np-1]), ex_si(suis, v-ver:pres, suis, [dr(0,dl(0,np,s),pp)-1]), ex_si(dedans, adv-adv, dedans, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sénatrice, nc-nom, sénatrice, [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si('Internet', npp-nam, 'Internet', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(confirmant, vpr-ver:ppre, confirmant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(ainsi, adv-adv, ainsi, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hypothèse, nc-nom, hypothèse, [n-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(répandue, vpp-ver:pper, répandue, [dl(0,n,n)-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(présentera, v-ver:futu, présentera, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidence, nc-nom, présidence, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1035, Result) :-
      prob_parse([ ex_si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sénatrice, nc-nom, sénatrice, [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('NY', npp-nam, 'NY', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1036, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(sénatrice, nc-nom, sénatrice, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('Hillary', npp-nam, 'Hillary', [dl(0,n,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenu, vpp-ver:pper, tenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interviewé, vpp-ver:pper, interviewé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(potentiels, adj-adj, potentiels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(candidature, nc-nom, candidature, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', nc-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1037, Result) :-
      prob_parse([ ex_si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sénatrice, nc-nom, sénatrice, [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('NY', npp-nam, 'NY', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1038, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(démocrate, nc-nom, démocrate, [n-1]), ex_si('new-yorkais', adj-adj, 'new-yorkais', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(nommé, vpp-ver:pper, nommé, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(membre, nc-nom, membre, [n-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1039, Result) :-
      prob_parse([ ex_si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sénatrice, nc-nom, sénatrice, [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('ΝΥ', nc-abr, 'ΝΥ', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1040, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Cameron', npp-nam, 'Cameron', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(leader, nc-nom, leader, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(exposé, vpp-ver:pper, exposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(vision, nc-nom, vision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(multiculturelle, adj-adj, multiculturelle, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Observer', npp-nam, 'Observer', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(28, adj-num, 28, [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(2007, adj-num, 2007, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1041, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Cameron', npp-nam, 'Cameron', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1042, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(conservatrice, adj-adj, conservatrice, [dl(0,n,n)-1]), ex_si('David', npp-nam, 'David', [dl(0,n,n)-1]), ex_si('Cameron', npp-nam, 'Cameron', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réagi, vpp-ver:pper, réagi, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(démissions, nc-nom, démissions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(déclarant, vpr-ver:ppre, déclarant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(divisé, vpp-ver:pper, divisé, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1043, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Cameron', npp-nam, 'Cameron', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1044, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Cameron', npp-nam, 'Cameron', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élu, vpp-ver:pper, élu, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(battant, vpr-ver:ppre, battant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(rival, nc-nom, rival, [n-1]), ex_si('David', npp-nam, 'David', [dl(0,n,n)-1]), ex_si('Davis', npp-nam, 'Davis', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(une, pro-num, une, [np-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(correspondance, nc-nom, correspondance, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1045, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Cameron', npp-nam, 'Cameron', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1046, Result) :-
      prob_parse([ ex_si('YouTube', npp-nam, 'YouTube', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(partagerait, v-ver:cond, partagerait, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(revenus, nc-nom, revenus, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(rapportés, vpp-ver:pper, rapportés, [dl(0,n,n)-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(clips, nc-nom, clips, [n-1]), ex_si(vidéo, nc-nom, vidéo, [dl(0,n,n)-1]), ex_si(placés, vpp-ver:pper, placés, [dr(0,dl(0,n,n),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(propriétaires, nc-nom, propriétaires, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1047, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(heure, nc-nom, heure, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('YouTube', npp-nam, 'YouTube', [np-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(partage, nc-nom, partage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1048, Result) :-
      prob_parse([ ex_si('YouTube', npp-nam, 'YouTube', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vidéos, nc-nom, vidéos, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1049, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(prises, vpp-ver:pper, prises, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(photographe, nc-nom, photographe, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(célébrités, nc-nom, célébrités, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Annie', npp-nam, 'Annie', [dr(0,np,np)-1]), ex_si('Leibovitz', npp-nam, 'Leibovitz', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Beckham', npp-nam, 'Beckham', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(club, nc-nom, club, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si('Real', npp-nam, 'Real', [dl(0,n,n)-1]), ex_si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1050, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Beckham', npp-nam, 'Beckham', [np-1]), ex_si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Real', npp-nam, 'Real', [dr(0,n,n)-1]), ex_si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1051, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(milieu, nc-nom, milieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Real', npp-nam, 'Real', [n-1]), ex_si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(capitaine, nc-nom, capitaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si('David', npp-nam, 'David', [dl(0,n,n)-1]), ex_si('Beckham', npp-nam, 'Beckham', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si('ex-Spice', npp-nam, 'ex-Spice', [dr(0,n,n)-1]), ex_si('Girl', npp-nam, 'Girl', [dr(0,n,n)-1]), ex_si('Victoria', npp-nam, 'Victoria', [n-1]), ex_si(ont, v-ver:pres, ont, [dl(0,n,n)-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(naissance, nc-nom, naissance, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(à, p-prp, à, [np-1]), ex_si(un, det-det:art, un, [dr(0,pp_a,np)-1]), ex_si(petit, adj-adj, petit, [dr(0,np,n)-1]), ex_si(garçon, nc-nom, garçon, [dr(0,n,n)-1]), ex_si(appelé, vpp-ver:pper, appelé, [n-1]), ex_si('Cruz', npp-nam, 'Cruz', [dr(0,dl(0,n,n),np)-1]), ex_si('Beckham', npp-nam, 'Beckham', [dr(0,np,np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(1052, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Beckham', npp-nam, 'Beckham', [np-1]), ex_si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Real', npp-nam, 'Real', [dr(0,n,n)-1]), ex_si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1053, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Beckham', npp-nam, 'Beckham', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(souhaitait, v-ver:impf, souhaitait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(capitaine, nc-nom, capitaine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(équipe, nc-nom, équipe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(football, nc-nom, football, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1054, Result) :-
      prob_parse([ ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('Beckham', npp-nam, 'Beckham', [np-1]), ex_si(joue, v-ver:pres, joue, [dr(0,dl(0,np,s),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Real', npp-nam, 'Real', [dr(0,n,n)-1]), ex_si('Madrid', npp-nam, 'Madrid', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1055, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(célèbre, adj-adj, célèbre, [dr(0,n,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(grec, adj-adj, grec, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(cinéma, nc-nom, cinéma, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(théâtre, nc-nom, théâtre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), ex_si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('Ericos', npp-nam, 'Ericos', [dl(0,n,n)-1]), ex_si('Dynan', npp-nam, 'Dynan', [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Athènes', npp-nam, 'Athènes', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cancer, nc-nom, cancer, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1056, Result) :-
      prob_parse([ ex_si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), ex_si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(grec, adj-adj, grec, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1057, Result) :-
      prob_parse([ ex_si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), ex_si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(films, nc-nom, films, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Grèce', npp-nam, 'Grèce', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étranger, nc-nom, étranger, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1058, Result) :-
      prob_parse([ ex_si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), ex_si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(grec, adj-adj, grec, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1059, Result) :-
      prob_parse([ ex_si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(marié, vpp-ver:pper, marié, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(magnat, nc-nom, magnat, [n-1]), ex_si(grec, adj-adj, grec, [dl(0,n,n)-1]), ex_si('Yiannis', npp-nam, 'Yiannis', [dl(0,n,n)-1]), ex_si('Latsis', npp-nam, 'Latsis', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Marianna', npp-nam, 'Marianna', [dr(0,np,np)-1]), ex_si('Latsis', npp-nam, 'Latsis', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(3, det-num, 3, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1060, Result) :-
      prob_parse([ ex_si('Nikos', npp-nam, 'Nikos', [dr(0,np,np)-1]), ex_si('Kourkoulos', npp-nam, 'Kourkoulos', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(grec, adj-adj, grec, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1061, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sidérurgiste, nc-nom, sidérurgiste, [n-1]), ex_si(indien, adj-adj, indien, [dl(0,n,n)-1]), ex_si('Tata', npp-nam, 'Tata', [dl(0,n,n)-1]), ex_si('Steel', npp-nam, 'Steel', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si('Tata', npp-nam, 'Tata', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(rachète, v-ver:pres, rachète, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(géant, nc-nom, géant, [n-1]), ex_si('anglo-néerlandais', adj-adj, 'anglo-néerlandais', [dl(0,n,n)-1]), ex_si('Corus', npp-nam, 'Corus', [dl(0,n,n)-1]), ex_si('Group', npp-nam, 'Group', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('6,7', det-num, '6,7', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si(sterling, et-nom, sterling, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cinquième, adj-num, cinquième, [dr(0,n,n)-1]), ex_si(sidérurgiste, nc-nom, sidérurgiste, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1062, Result) :-
      prob_parse([ ex_si('Tata', npp-nam, 'Tata', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Corus', npp-nam, 'Corus', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1063, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(indienne, adj-adj, indienne, [dl(0,n,n)-1]), ex_si('Tata', npp-nam, 'Tata', [dl(0,n,n)-1]), ex_si('Steel', npp-nam, 'Steel', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bataille, nc-nom, bataille, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(racheter, vinf-ver:infi, racheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(sidérurgiste, nc-nom, sidérurgiste, [n-1]), ex_si('anglo-néerlandais', adj-adj, 'anglo-néerlandais', [dl(0,n,n)-1]), ex_si('Corus', npp-nam, 'Corus', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1064, Result) :-
      prob_parse([ ex_si('Tata', npp-nam, 'Tata', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(racheté, vpp-ver:pper, racheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Corus', npp-nam, 'Corus', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1065, Result) :-
      prob_parse([ ex_si('Frank', npp-nam, 'Frank', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Jong', npp-nam, 'Jong', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(51, det-num, 51, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ontario', npp-nam, 'Ontario', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(partielle, adj-adj, partielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Burlington', npp-nam, 'Burlington', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Ontario', npp-nam, 'Ontario', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1066, Result) :-
      prob_parse([ ex_si('De', p-prp, 'De', [dr(0,pp_de,np)-1]), ex_si('Jong', npp-nam, 'Jong', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ontario', npp-nam, 'Ontario', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1067, Result) :-
      prob_parse([ ex_si('De', p-prp, 'De', [dr(0,dr(0,s,s),np)-1]), ex_si('Jong', npp-nam, 'Jong', [np-1]), ex_si(affronte, v-ver:pres, affronte, [dr(0,s,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('progressiste-conservatrice', nc-nom, 'progressiste-conservatrice', [n-1]), ex_si('Joyce', npp-nam, 'Joyce', [dl(0,n,n)-1]), ex_si('Savoline', npp-nam, 'Savoline', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(libérale, nc-nom, libérale, [n-1]), ex_si(ontarienne, adj-adj, ontarienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(conseillère, nc-nom, conseillère, [n-1]), ex_si(municipale, adj-adj, municipale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,np,np)-1]), ex_si('Burlington', npp-nam, 'Burlington', [dr(0,np,np)-1]), ex_si('Joan', npp-nam, 'Joan', [dr(0,np,np)-1]), ex_si('Lougheed', npp-nam, 'Lougheed', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,np)-1]), ex_si('néo-démocrate', nc-nom, 'néo-démocrate', [np-1]), ex_si('Cory', npp-nam, 'Cory', [np-1]), ex_si('Judson', npp-nam, 'Judson', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1068, Result) :-
      prob_parse([ ex_si('De', p-prp, 'De', [dr(0,pp_de,np)-1]), ex_si('Jong', npp-nam, 'Jong', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(vert, adj-adj, vert, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ontario', npp-nam, 'Ontario', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1069, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Hubble', npp-nam, 'Hubble', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(lumière, nc-nom, lumière, [n-1]), ex_si(visible, adj-adj, visible, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ultraviolet, nc-nom, ultraviolet, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(ayons, v-ver:impf, ayons, [dr(0,dl(0,np,s),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(fonctionnement, nc-nom, fonctionnement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1070, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Hubble', npp-nam, 'Hubble', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1071, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(satellite, nc-nom, satellite, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(orbite, nc-nom, orbite, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(355, det-num, 355, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Terre', npp-nam, 'Terre', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1072, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(navettes, nc-nom, navettes, [n-1]), ex_si(spatiales, adj-adj, spatiales, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(vols, nc-nom, vols, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1073, Result) :-
      prob_parse([ ex_si('Hubble', npp-nam, 'Hubble', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(télescope, nc-nom, télescope, [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1074, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Alan', npp-nam, 'Alan', [dr(0,np,np)-1]), ex_si('Grant', npp-nam, 'Grant', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fiancée, vpp-ver:pper, fiancée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(médecin, nc-nom, médecin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1075, Result) :-
      prob_parse([ ex_si('(', ponct-pun, '(', [let-1]), ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Jurassic', npp-nam, 'Jurassic', [dr(0,np,np)-1]), ex_si('Park', npp-nam, 'Park', [np-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(apprend, v-ver:pres, apprend, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(relation, nc-nom, relation, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(elle, pro-pro:per, elle, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(docteur, nc-nom, docteur, [n-1]), ex_si('Grant', npp-nam, 'Grant', [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fonctionné, vpp-ver:pper, fonctionné, [dl(0,np,s_ppart)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(restent, v-ver:pres, restent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(amis, nc-nom, amis, [n-1]), ex_si(proches, adj-adj, proches, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1076, Result) :-
      prob_parse([ ex_si(')', ponct-pun, ')', [let-1])], Result).
sent(1077, Result) :-
      prob_parse([ ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Crichton', npp-nam, 'Crichton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(livre, nc-nom, livre, [n-1]), ex_si('Jurassic', npp-nam, 'Jurassic', [dl(0,n,n)-1]), ex_si('Park', npp-nam, 'Park', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1078, Result) :-
      prob_parse([ ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Becker', npp-nam, 'Becker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1079, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1985, pro-num, 1985, [np-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si('dix-sept', det-num, 'dix-sept', [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1080, Result) :-
      prob_parse([ ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Becker', npp-nam, 'Becker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(champion, nc-nom, champion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1081, Result) :-
      prob_parse([ ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Becker', npp-nam, 'Becker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(soulevé, vpp-ver:pper, soulevé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(trophée, nc-nom, trophée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1082, Result) :-
      prob_parse([ ex_si('Boris', npp-nam, 'Boris', [dr(0,np,np)-1]), ex_si('Becker', npp-nam, 'Becker', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(champion, nc-nom, champion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wimbledon', npp-nam, 'Wimbledon', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1083, Result) :-
      prob_parse([ ex_si('Mike', npp-nam, 'Mike', [dr(0,np,np)-1]), ex_si('Jittlov', npp-nam, 'Jittlov', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(maître, nc-nom, maître, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(effets, nc-nom, effets, [n-1]), ex_si(spéciaux, adj-adj, spéciaux, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(pavané, vpp-ver:pper, pavané, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(courts, adj-nom, courts, [dr(0,n,n)-1]), ex_si(métrages, nc-nom, métrages, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vedette, nc-nom, vedette, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('The', et-det:art, 'The', [dr(0,np,n)-1]), ex_si('Wizard', npp-nam, 'Wizard', [n-1]), ex_si(of, et-prp, of, [dr(0,dl(0,n,n),np)-1]), ex_si('Speed', npp-nam, 'Speed', [np-1]), ex_si(and, et-kon, and, [dr(0,dl(0,np,np),np)-1]), ex_si('Time', npp-nam, 'Time', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1084, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Speed', npp-nam, 'Speed', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Jan', npp-nam, 'Jan', [np-1]), ex_si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), ex_si('Bont', npp-nam, 'Bont', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1085, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(réalisateur, nc-nom, réalisateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Speed', npp-nam, 'Speed', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Jan', npp-nam, 'Jan', [np-1]), ex_si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), ex_si('Bont', npp-nam, 'Bont', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(retour, nc-nom, retour, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(commandes, nc-nom, commandes, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1086, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Speed', npp-nam, 'Speed', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Jan', npp-nam, 'Jan', [np-1]), ex_si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), ex_si('Bont', npp-nam, 'Bont', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1087, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(actuel, adj-adj, actuel, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Jose', npp-nam, 'Jose', [dr(0,np,np)-1]), ex_si('Luis', npp-nam, 'Luis', [dr(0,np,np)-1]), ex_si('Rodriguez', npp-nam, 'Rodriguez', [dr(0,np,np)-1]), ex_si('Zapatero', npp-nam, 'Zapatero', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('P.S.O.E', npp-abr, 'P.S.O.E', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1088, Result) :-
      prob_parse([ ex_si('(', ponct-pun, '(', [let-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(socialiste, adj-adj, socialiste, [dl(0,n,n)-1]), ex_si(ouvrier, adj-adj, ouvrier, [dl(0,n,n)-1]), ex_si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1089, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(succédé, vpp-ver:pper, succédé, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('José', npp-nam, 'José', [dr(0,np,np)-1]), ex_si('Maria', npp-nam, 'Maria', [dr(0,np,np)-1]), ex_si('Aznar', npp-nam, 'Aznar', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(2004, adj-num, 2004, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(juste, adv-adv, juste, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(attentats, nc-nom, attentats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Madrid', npp-nam, 'Madrid', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1090, Result) :-
      prob_parse([ ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('González', npp-nam, 'González', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1091, Result) :-
      prob_parse([ ex_si('Alvaro', npp-nam, 'Alvaro', [dr(0,np,np)-1]), ex_si('Uribe', npp-nam, 'Uribe', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(personnage, nc-nom, personnage, [n-1]), ex_si(intéressant, adj-adj, intéressant, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(soit, cc-kon, soit, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(passant, vpr-ver:ppre, passant, [dl(0,np,s_ppres)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si(abattu, vpp-ver:pper, abattu, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(milice, nc-nom, milice, [n-1]), ex_si(rebelle, adj-adj, rebelle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1092, Result) :-
      prob_parse([ ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('González', npp-nam, 'González', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1093, Result) :-
      prob_parse([ ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('González', npp-nam, 'González', [dr(0,np,np)-1]), ex_si('Márquez', npp-nam, 'Márquez', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1942, pro-num, 1942, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(espagnol, adj-adj, espagnol, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1094, Result) :-
      prob_parse([ ex_si('Premier', det-num, 'Premier', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('après-guerre', nc-nom, 'après-guerre', [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(longtemps, adv-adv, longtemps, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('González', npp-nam, 'González', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(essentiel, adj-adj, essentiel, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(dictature, nc-nom, dictature, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Francisco', npp-nam, 'Francisco', [dr(0,np,np)-1]), ex_si('Franco', npp-nam, 'Franco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1095, Result) :-
      prob_parse([ ex_si('Felipe', npp-nam, 'Felipe', [dr(0,np,np)-1]), ex_si('González', npp-nam, 'González', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1096, Result) :-
      prob_parse([ ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Alden', npp-nam, 'Alden', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(astronaute, nc-nom, astronaute, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(aviateur, nc-nom, aviateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marine, nc-nom, marine, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(humain, nc-nom, humain, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(poser, vinf-ver:infi, poser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pied, nc-nom, pied, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', nc-nam, 'Lune', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1097, Result) :-
      prob_parse([ ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(posé, vpp-ver:pper, posé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1098, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(commandant, nc-nom, commandant, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si('Apollo', npp-nam, 'Apollo', [np-1]), ex_si(11, adj-num, 11, [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si(habitée, vpp-ver:pper, habitée, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(alunissage, nc-nom, alunissage, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(obtenu, vpp-ver:pper, obtenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(distinction, nc-nom, distinction, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(atterrir, vinf-ver:infi, atterrir, [dl(0,np,s_inf)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(engin, nc-nom, engin, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', nc-nam, 'Lune', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(marcher, vinf-ver:infi, marcher, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(surface, nc-nom, surface, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1099, Result) :-
      prob_parse([ ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(posé, vpp-ver:pper, posé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1100, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(1969, adj-num, 1969, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(être, nc-nom, être, [n-1]), ex_si(humain, adj-adj, humain, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(poser, vinf-ver:infi, poser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pied, nc-nom, pied, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1101, Result) :-
      prob_parse([ ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(aviateur, nc-nom, aviateur, [n-1]), ex_si(chevronné, adj-adj, chevronné, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(78, det-num, 78, [dr(0,np,n)-1]), ex_si(missions, nc-nom, missions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(combat, nc-nom, combat, [n-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Corée', npp-nam, 'Corée', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chasse, nc-nom, chasse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Marine', npp-nam, 'Marine', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejoint, vpp-ver:pper, rejoint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('NASA', npp-abr, 'NASA', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(essai, nc-nom, essai, [n-1]), ex_si(civil, adj-adj, civil, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1102, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(astronautes, nc-nom, astronautes, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1962, pro-num, 1962, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1103, Result) :-
      prob_parse([ ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pilote, nc-nom, pilote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si('Gemini', npp-nam, 'Gemini', [dl(0,n,n)-1]), ex_si(8, adj-num, 8, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(lancée, vpp-ver:pper, lancée, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(1966, adj-num, 1966, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(puis, cc-adv, puis, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(nommé, vpp-ver:pper, nommé, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(commandant, nc-nom, commandant, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mission, nc-nom, mission, [n-1]), ex_si('Apollo', npp-nam, 'Apollo', [dl(0,n,n)-1]), ex_si(11, adj-num, 11, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1104, Result) :-
      prob_parse([ ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(atterri, vpp-ver:pper, atterri, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1105, Result) :-
      prob_parse([ ex_si('Cyrillic', npp-nam, 'Cyrillic', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(portage, nc-nom, portage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(cyrillique, adj-adj, cyrillique, [dl(0,n,n)-1]), ex_si(freeware, nc-nom, freeware, [dl(0,n,n)-1]), ex_si('X', nc-abr, 'X', [dl(0,n,n)-1]), ex_si('Window', npp-nam, 'Window', [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plateforme, nc-nom, plateforme, [n-1]), ex_si('Newton', npp-nam, 'Newton', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si('Unicode', npp-abr, 'Unicode', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1106, Result) :-
      prob_parse([ ex_si('Veuillez', vimp-ver:impe, 'Veuillez', [dr(0,s,dl(0,np,s_inf))-1]), ex_si(respecter, vinf-ver:infi, respecter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(copyright, nc-nom, copyright, [n-1]), ex_si(original, adj-adj, original, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(1,s,s),dl(0,np,s))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('en-tête', nc-nom, 'en-tête', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('BDF', npp-abr, 'BDF', [dl(0,n,n)-1]), ex_si('ci-jointe', adv-adv, 'ci-jointe', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(détails, nc-nom, détails, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1107, Result) :-
      prob_parse([ ex_si('Vous', cls-pro:per, 'Vous', [np-1]), ex_si(trouverez, v-ver:futu, trouverez, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si('ci-joints', nc-nom, 'ci-joints', [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(modules, nc-nom, modules, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(traduction, nc-nom, traduction, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(code, nc-nom, code, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('NTEncoding', npp-nam, 'NTEncoding', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('GNUE', npp-abr, 'GNUE', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(aka, adv-adv, aka, [dr(0,np,np)-1]), ex_si('Makoto', npp-nam, 'Makoto', [dr(0,np,np)-1]), ex_si('Nukui', npp-nam, 'Nukui', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1108, Result) :-
      prob_parse([ ex_si('Vous', cls-pro:per, 'Vous', [np-1]), ex_si(êtes, v-ver:pres, êtes, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(envoyer, vinf-ver:infi, envoyer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si('/', ponct-adv, '/', [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(recevoir, vinf-ver:infi, recevoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fichiers, nc-nom, fichiers, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(logiciels, nc-nom, logiciels, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(supportent, v-ver:pres, supportent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('NTEncoding', npp-nam, 'NTEncoding', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1109, Result) :-
      prob_parse([ ex_si('Cyrillic', npp-nam, 'Cyrillic', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Windows', npp-nam, 'Windows', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1110, Result) :-
      prob_parse([ ex_si('Cyrillic', npp-nam, 'Cyrillic', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(puissant, adj-adj, puissant, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(rassemble, v-ver:pres, rassemble, [dr(0,dl(0,np,s),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(outils, nc-nom, outils, [n-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_de))))-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(avez, v-ver:pres, avez, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(besoin, nc-nom, besoin, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(dessiner, vinf-ver:infi, dessiner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pedigrees, nc-nom, pedigrees, [n-1]), ex_si(familiaux, adj-adj, familiaux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(gérer, vinf-ver:infi, gérer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(analyser, vinf-ver:infi, analyser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(données, nc-nom, données, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pedigree, nc-nom, pedigree, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1111, Result) :-
      prob_parse([ ex_si('Cyrillic', npp-nam, 'Cyrillic', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Windows', npp-nam, 'Windows', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1112, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mausolée, nc-nom, mausolée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), ex_si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), ex_si('Huang', npp-nam, 'Huang', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tombe, nc-nom, tombe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si('Qin', npp-nam, 'Qin', [dl(0,n,n)-1]), ex_si('Shi', npp-nam, 'Shi', [dl(0,n,n)-1]), ex_si('Huang', npp-nam, 'Huang', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynastie, nc-nom, dynastie, [n-1]), ex_si('Qin', npp-nam, 'Qin', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(221, det-num, 221, [dr(0,np,n)-1]), ex_si(av, nc-abr, av, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1113, Result) :-
      prob_parse([ ex_si('J.-C', npp-nam, 'J.-C', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1114, Result) :-
      prob_parse([ ex_si('-', ponct-pun, '-', [let-1]), ex_si(207, det-num, 207, [dr(0,np,n)-1]), ex_si(av, nc-nom, av, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1115, Result) :-
      prob_parse([ ex_si('J.-C', npp-nam, 'J.-C', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1116, Result) :-
      prob_parse([ ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1117, Result) :-
      prob_parse([ ex_si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), ex_si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), ex_si('Huang', npp-nam, 'Huang', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1118, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(unification, nc-nom, unification, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(221, adj-num, 221, [dl(0,n,n)-1]), ex_si(avant, p-prp, avant, [dr(0,dl(0,n,n),np)-1]), ex_si('JC', npp-nam, 'JC', [np-1]), ex_si(sous, p-prp, sous, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-nam, 'Premier', [dr(0,n,n)-1]), ex_si('Empereur', npp-nam, 'Empereur', [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), ex_si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), ex_si('Huangdi', npp-nam, 'Huangdi', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(marqué, vpp-ver:pper, marqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(impériale, adj-adj, impériale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(duré, vpp-ver:pper, duré, [dl(0,np,s_ppart)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chute, nc-nom, chute, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynastie, nc-nom, dynastie, [n-1]), ex_si('Qing', npp-nam, 'Qing', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1119, Result) :-
      prob_parse([ ex_si('Qin', npp-nam, 'Qin', [dr(0,np,np)-1]), ex_si('Shi', npp-nam, 'Shi', [dr(0,np,np)-1]), ex_si('Huang', npp-nam, 'Huang', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(empereur, nc-nom, empereur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1120, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Égypte', npp-nam, 'Égypte', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1978, pro-num, 1978, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(conduit, vpp-ver:pper, conduit, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(négociée, vpp-ver:pper, négociée, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(nations, nc-nom, nations, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(signée, vpp-ver:pper, signée, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si('DC', npp-abr, 'DC', [dl(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(1979, adj-num, 1979, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, nc-num, première, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(voisins, nc-nom, voisins, [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1121, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('israélo-égyptien', adj-adj, 'israélo-égyptien', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signé, vpp-ver:pper, signé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1122, Result) :-
      prob_parse([ ex_si(1979, pro-num, 1979, [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lueur, nc-nom, lueur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,s),s)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Égypte', npp-nam, 'Égypte', [n-1]), ex_si(signent, v-ver:pres, signent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(faisant, vpr-ver:ppre, faisant, [dr(0,dr(0,dl(0,np,s_ppres),np),dl(0,np,s_inf))-1]), ex_si(naître, vinf-ver:infi, naître, [dl(0,np,s_inf)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espoir, nc-nom, espoir, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(large, adj-adj, large, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Proche-Orient', npp-nam, 'Proche-Orient', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1123, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('israélo-égyptien', adj-adj, 'israélo-égyptien', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signé, vpp-ver:pper, signé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1979, pro-num, 1979, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1124, Result) :-
      prob_parse([ ex_si('Elizabeth', npp-nam, 'Elizabeth', [np-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(aînée, adj-adj, aînée, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Albert', npp-nam, 'Albert', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(duc, nc-nom, duc, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(futur, nc-adj, futur, [dr(0,n,n)-1]), ex_si('George', npp-nam, 'George', [n-1]), ex_si('VI', adj-num, 'VI', [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Lady', npp-nam, 'Lady', [dr(0,np,np)-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('Bowes-Lyon', npp-nam, 'Bowes-Lyon', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(née, vpp-ver:pper, née, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(21, adj-num, 21, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1926, adj-num, 1926, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(17, nc-num, 17, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Bruton', npp-nam, 'Bruton', [dr(0,np,np)-1]), ex_si('Street', npp-nam, 'Street', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Mayfair', npp-nam, 'Mayfair', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(résidence, nc-nom, résidence, [n-1]), ex_si(londonienne, adj-adj, londonienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si('grands-parents', nc-nom, 'grands-parents', [n-1]), ex_si(maternels, adj-adj, maternels, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Claud', npp-nam, 'Claud', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(comte, nc-nom, comte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Strathmore', npp-nam, 'Strathmore', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Nina', npp-nam, 'Nina', [dr(0,np,np)-1]), ex_si('Cecilia', npp-nam, 'Cecilia', [dr(0,np,np)-1]), ex_si('Cavendish-Bentinck', npp-nam, 'Cavendish-Bentinck', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1125, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('VI', adj-num, 'VI', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1126, Result) :-
      prob_parse([ ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monarque, nc-nom, monarque, [n-1]), ex_si(régnant, vpr-ver:ppre, régnant, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1952, pro-num, 1952, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1127, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(proclamée, vpp-ver:pper, proclamée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si(reine, nc-nom, reine, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1952, adj-num, 1952, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(décès, nc-nom, décès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('VI', adj-num, 'VI', [dl(0,np,np)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(officiellement, adv-adv, officiellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(couronnée, vpp-ver:pper, couronnée, [dl(0,np,s_pass)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(suivante, adj-adj, suivante, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(2, adj-num, 2, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1953, adj-num, 1953, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1128, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('VI', adj-num, 'VI', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1129, Result) :-
      prob_parse([ ex_si('Sir', nc-nam, 'Sir', [dr(0,np,np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Ramsey', npp-nam, 'Ramsey', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(comte, nc-nom, comte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Holdernesse', npp-nam, 'Holdernesse', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(1580, pro-num, 1580, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1130, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('Ratcliffe', npp-nam, 'Ratcliffe', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Robert', npp-nam, 'Robert', [dr(0,np,np)-1]), ex_si('Ratcliffe', npp-nam, 'Ratcliffe', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('5e', adj-num, '5e', [dr(0,n,n)-1]), ex_si(comte, nc-nom, comte, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Essex', npp-nam, 'Essex', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bridget', npp-nam, 'Bridget', [dr(0,np,np)-1]), ex_si('Morrison', npp-nam, 'Morrison', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(8, adj-num, 8, [dr(0,n,n)-1]), ex_si(février, nc-nom, février, [n-1]), ex_si(1607, adj-num, 1607, [dl(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si(8, pro-num, 8, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1131, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(second, det-num, second, [dr(0,np,n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Martha', npp-nam, 'Martha', [dr(0,np,np)-1]), ex_si('Cokayne', npp-nam, 'Cokayne', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sir', nc-nom, 'Sir', [dr(0,np,np)-1]), ex_si('William', npp-nam, 'William', [dr(0,np,np)-1]), ex_si('Cokayne', npp-nam, 'Cokayne', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(1624, adj-num, 1624, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1132, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Elizabeth', npp-nam, 'Elizabeth', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('VI', adj-num, 'VI', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1133, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(dame, nc-nom, dame, [n-1]), ex_si('Laura', npp-nam, 'Laura', [dl(0,n,n)-1]), ex_si('Bush', npp-nam, 'Bush', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parents, nc-nom, parents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('George', npp-nam, 'George', [dl(0,n,n)-1]), ex_si('H.W', npp-nam, 'H.W', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1134, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cérémonie, nc-nom, cérémonie, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(porche, nc-nom, porche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(maison, nc-nom, maison, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(chambres, nc-nom, chambres, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(ossature, nc-nom, ossature, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bois, nc-nom, bois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1135, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('H.W', npp-abr, 'H.W', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1136, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1137, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rentré, vpp-ver:pper, rentré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(chez, p-prp, chez, [dr(0,pp,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(héros, nc-nom, héros, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1138, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(inscrit, vpp-ver:pper, inscrit, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Yale', npp-nam, 'Yale', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1139, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('H.W', npp-abr, 'H.W', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1140, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Barbara', npp-nam, 'Barbara', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1141, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(romancier, nc-nom, romancier, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(lauréat, nc-nom, lauréat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1142, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', nc-nam, 'Nobel', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(littérature, nc-nom, littérature, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1143, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(célèbre, adj-adj, célèbre, [dr(0,n,n)-1]), ex_si(romancier, nc-nom, romancier, [n-1]), ex_si(colombien, adj-adj, colombien, [dl(0,n,n)-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(tissage, nc-nom, tissage, [n-1]), ex_si(magistral, adj-adj, magistral, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(genre, nc-nom, genre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réalisme, nc-nom, réalisme, [n-1]), ex_si(magique, adj-adj, magique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1928, pro-num, 1928, [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(petite, adj-adj, petite, [dr(0,n,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Aracataca', npp-nam, 'Aracataca', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Colombie', npp-nam, 'Colombie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1144, Result) :-
      prob_parse([ ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élevé, vpp-ver:pper, élevé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si('grands-parents', nc-nom, 'grands-parents', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(racontaient, v-ver:impf, racontaient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(histoires, nc-nom, histoires, [n-1]), ex_si(merveilleuses, adj-adj, merveilleuses, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fables, nc-nom, fables, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(contes, nc-nom, contes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fées, nc-nom, fées, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1145, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(romancier, nc-nom, romancier, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1146, Result) :-
      prob_parse([ ex_si('Dynamite', npp-nam, 'Dynamite', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(formée, vpp-ver:pper, formée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sociétés, nc-nom, sociétés, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(suisse, adj-adj, suisse, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Nobel', npp-nam, 'Nobel', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1147, Result) :-
      prob_parse([ ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1148, Result) :-
      prob_parse([ ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(possédait, v-ver:impf, possédait, [dr(0,dl(0,np,s),np)-1]), ex_si(355, det-num, 355, [dr(0,np,n)-1]), ex_si(brevets, nc-nom, brevets, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1149, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(mentionner, vinf-ver:infi, mentionner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(outre, p-prp, outre, [dr(0,dr(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(figurent, v-ver:pres, figurent, [dr(0,s,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(caoutchouc, nc-nom, caoutchouc, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cuir, nc-nom, cuir, [n-1]), ex_si(synthétiques, adj-adj, synthétiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(soie, nc-nom, soie, [n-1]), ex_si(artificielle, adj-adj, artificielle, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1150, Result) :-
      prob_parse([ ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1151, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1861, pro-num, 1861, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(père, nc-nom, père, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(produisait, v-ver:impf, produisait, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tout, adv-adv, tout, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(nouvel, adj-adj, nouvel, [dr(0,n,n)-1]), ex_si(explosif, nc-nom, explosif, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nitroglycérine, nc-nom, nitroglycérine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1152, Result) :-
      prob_parse([ ex_si('Alfred', npp-nam, 'Alfred', [dr(0,np,np)-1]), ex_si('Nobel', npp-nam, 'Nobel', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(inventeur, nc-nom, inventeur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dynamite, nc-nom, dynamite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1153, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(loisirs, nc-nom, loisirs, [n-1]), ex_si(derrière, p-prp, derrière, [dr(0,dl(0,n,n),np)-1]), ex_si('Euro', npp-nam, 'Euro', [dr(0,np,np)-1]), ex_si('Disney', npp-nam, 'Disney', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(aventure, nc-nom, aventure, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(petits, nc-nom, petits, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1154, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(manèges, nc-nom, manèges, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(spectacles, nc-nom, spectacles, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(attractions, nc-nom, attractions, [n-1]), ex_si(vous, clo-pro:per, vous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(y, clo-pro:per, y, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(attendent, v-ver:pres, attendent, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1155, Result) :-
      prob_parse([ ex_si('Euro-Disney', npp-nam, 'Euro-Disney', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(divertissement, nc-nom, divertissement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1156, Result) :-
      prob_parse([ ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('1890-1970', pro-num, '1890-1970', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nom, 'État', [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si('1959-69', pro-num, '1959-69', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cinquième', adj-num, 'Cinquième', [dr(0,n,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1157, Result) :-
      prob_parse([ ex_si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1158, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(général, nc-nom, général, [n-1]), ex_si('Charles', npp-nam, 'Charles', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décédé, vpp-ver:pper, décédé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1159, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('6.000', det-num, '6.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(assisté, vpp-ver:pper, assisté, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(messe, nc-nom, messe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(requiem, nc-nom, requiem, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cathédrale, nc-nom, cathédrale, [n-1]), ex_si('Notre-Dame', npp-nam, 'Notre-Dame', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Paris', npp-nam, 'Paris', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1160, Result) :-
      prob_parse([ ex_si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1161, Result) :-
      prob_parse([ ex_si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), ex_si('Charles', npp-nam, 'Charles', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(personne, pro-pro:ind, personne, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(assiste, v-ver:subp, assiste, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(funérailles, nc-nom, funérailles, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1162, Result) :-
      prob_parse([ ex_si('Charles', npp-nam, 'Charles', [dr(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si('Gaulle', npp-nam, 'Gaulle', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1970, pro-num, 1970, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1163, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(provient, v-ver:pres, provient, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('cité-état', nc-nom, 'cité-état', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Goorka', npp-nam, 'Goorka', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(étroitement, adv-adv, étroitement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(associés, vpp-ver:pper, associés, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1164, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1165, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(doux, adj-adj, doux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(polis, adj-adj, polis, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(assez, adv-adv, assez, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(timides, adj-adj, timides, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1166, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(villageois, nc-nom, villageois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(montagneuses, adj-adj, montagneuses, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Garhwalis', npp-nam, 'Garhwalis', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Kumounis', npp-nam, 'Kumounis', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Dogras', npp-nam, 'Dogras', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(etc, adv-abr, etc, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1167, Result) :-
      prob_parse([ ex_si(')', ponct-pun, ')', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dr(0,s,np),np)-1]), ex_si(tous, adv-adv, tous, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(assez, adv-adv, assez, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(doux, adj-adj, doux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,dl(0,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(brillante, adj-adj, brillante, [dr(0,n,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1168, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1169, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mondialement, adv-adv, mondialement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(connus, vpp-ver:pper, connus, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(hautes, adj-adj, hautes, [dr(0,n,n)-1]), ex_si(montagnes, nc-nom, montagnes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1170, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Gurkhas', npp-nam, 'Gurkhas', [n-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1171, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Allemands', nc-nam, 'Allemands', [n-1]), ex_si(pensaient, v-ver:impf, pensaient, [dr(0,dl(0,np,s),s_q)-1]), ex_si(déjà, adv-adv, déjà, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(époque, nc-nom, époque, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(alliée, vpp-ver:pper, alliée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pas', nc-nam, 'Pas', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Calais', npp-nam, 'Calais', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Pays-Bas', npp-nam, 'Pays-Bas', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1172, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1173, Result) :-
      prob_parse([ ex_si('Jour', nc-nom, 'Jour', [n-1]), ex_si('J', nc-nom, 'J', [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,n,s),s)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,n,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(aéroportées, vpp-ver:pper, aéroportées, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('J', nc-nom, 'J', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(combiné, vpp-ver:pper, combiné, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(parachutes, nc-nom, parachutes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(planeurs, nc-nom, planeurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(jeter, vinf-ver:infi, jeter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(filet, nc-nom, filet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(autour, p-prp, autour, [dr(0,pp_a,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(plages, nc-nom, plages, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Normandie', npp-nam, 'Normandie', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(invasion, nc-nom, invasion, [n-1]), ex_si(massive, adj-adj, massive, [dl(0,n,n)-1]), ex_si(allait, v-ver:impf, allait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(déferler, vinf-ver:infi, déferler, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(rivage, nc-nom, rivage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(avancer, vinf-ver:infi, avancer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1174, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1175, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(6, adj-num, 6, [dr(0,n,n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(navales, adj-adj, navales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(aériennes, adj-adj, aériennes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(terrestres, adj-adj, terrestres, [dl(0,n,n)-1]), ex_si(alliées, adj-adj, alliées, [dl(0,n,n)-1]), ex_si(opérant, vpr-ver:ppre, opérant, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(assaut, nc-nom, assaut, [n-1]), ex_si(aéroportées, adj-adj, aéroportées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(parachutistes, nc-nom, parachutistes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(submergé, vpp-ver:pper, submergé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(allemandes, adj-adj, allemandes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Mur', nc-nom, 'Mur', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ouest', npp-nam, 'Ouest', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(construites, vpp-ver:pper, construites, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(long, nc-nom, long, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(côtes, nc-nom, côtes, [n-1]), ex_si(françaises, adj-adj, françaises, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Manche', npp-nam, 'Manche', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1176, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(débarquement, nc-nom, débarquement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Normandie', npp-nam, 'Normandie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(1944, adj-num, 1944, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1177, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(chancelier, nc-nom, chancelier, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Helmut', npp-nam, 'Helmut', [dl(0,n,n)-1]), ex_si('Kohl', npp-nam, 'Kohl', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rompra, v-ver:simp, rompra, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(promesses, nc-nom, promesses, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(faites, vpp-ver:pper, faites, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(contributeurs, nc-nom, contributeurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(divulguant, vpr-ver:ppre, divulguant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(publiquement, adv-adv, publiquement, [dl(1,s,s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(noms, nc-nom, noms, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,s,s),dl(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,s,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('chrétien-démocrate', adj-adj, 'chrétien-démocrate', [dl(0,n,n)-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),pp_a)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(révéler, vinf-ver:infi, révéler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(identités, nc-nom, identités, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1178, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), ex_si('Kohl', npp-nam, 'Kohl', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1179, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(architecte, nc-nom, architecte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(monétaire, adj-adj, monétaire, [dl(0,n,n)-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(chancelier, nc-nom, chancelier, [n-1]), ex_si(allemand, adj-adj, allemand, [dl(0,n,n)-1]), ex_si('Helmut', npp-nam, 'Helmut', [dl(0,n,n)-1]), ex_si('Kohl', npp-nam, 'Kohl', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comparaît, v-ver:impf, comparaît, [dr(0,dl(0,np,s),pp)-1]), ex_si(devant, p-prp, devant, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(parlementaire, adj-adj, parlementaire, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(financement, nc-nom, financement, [n-1]), ex_si(illicite, adj-adj, illicite, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('chrétien-démocrate', adj-adj, 'chrétien-démocrate', [dl(0,n,n)-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(vingt, det-num, vingt, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1180, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), ex_si('Kohl', npp-nam, 'Kohl', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1181, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(démissionné, vpp-ver:pper, démissionné, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(principal, adj-adj, principal, [dr(0,n,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('sociaux-démocrates', nc-nom, 'sociaux-démocrates', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(versements, nc-nom, versements, [n-1]), ex_si(illégaux, adj-adj, illégaux, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(caisses, nc-nom, caisses, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1182, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Helmut', npp-nam, 'Helmut', [dr(0,np,np)-1]), ex_si('Kohl', npp-nam, 'Kohl', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si('chrétienne-démocrate', adj-adj, 'chrétienne-démocrate', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1183, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(marqué, vpp-ver:pper, marqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(onze, adj-num, onze, [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(télédiffuseur, nc-nom, télédiffuseur, [n-1]), ex_si('Vladislav', npp-nam, 'Vladislav', [dl(0,n,n)-1]), ex_si('Listyev', npp-nam, 'Listyev', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(tué, vpp-ver:pper, tué, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(balles, nc-nom, balles, [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(seulement, adv-adv, seulement, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(nomination, nc-nom, nomination, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('ORT', npp-abr, 'ORT', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1184, Result) :-
      prob_parse([ ex_si('Son', det-det:pos, 'Son', [dr(0,np,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(toujours, adv-adv, toujours, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(révélé, vpp-ver:pper, révélé, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(assassins, nc-nom, assassins, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(poursuive, vs-ver:subp, poursuive, [dl(0,cl_r,dl(0,np,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1185, Result) :-
      prob_parse([ ex_si('Vladislav', npp-nam, 'Vladislav', [dr(0,np,np)-1]), ex_si('Listyev', npp-nam, 'Listyev', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1186, Result) :-
      prob_parse([ ex_si('Mars', nc-nom, 'Mars', [n-1]), ex_si(1995, adj-num, 1995, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(journaliste, nc-nom, journaliste, [n-1]), ex_si('Vladislav', npp-nam, 'Vladislav', [dl(0,n,n)-1]), ex_si('Listyev', npp-nam, 'Listyev', [dl(0,n,n)-1]), ex_si(abattu, vpp-ver:pper, abattu, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1187, Result) :-
      prob_parse([ ex_si('Vladislav', npp-nam, 'Vladislav', [dr(0,np,np)-1]), ex_si('Listyev', npp-nam, 'Listyev', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1188, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(apprécié, vpp-ver:pper, apprécié, [dr(0,n,n)-1]), ex_si(présentateur, nc-nom, présentateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(télévision, nc-nom, télévision, [n-1]), ex_si('Vladislav', npp-nam, 'Vladislav', [dl(0,n,n)-1]), ex_si('Listyev', npp-nam, 'Listyev', [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(précédente, adj-adj, précédente, [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(établi, vpp-ver:pper, établi, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(célébrité, nc-nom, célébrité, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(protégeait, v-ver:impf, protégeait, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(tueurs, nc-nom, tueurs, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(gages, nc-nom, gages, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1189, Result) :-
      prob_parse([ ex_si('Vladislav', npp-nam, 'Vladislav', [dr(0,np,np)-1]), ex_si('Listyev', npp-nam, 'Listyev', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1190, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('III', adj-num, 'III', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1869-1947', pro-num, '1869-1947', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(roi, nc-nom, roi, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1191, Result) :-
      prob_parse([ ex_si('Sa', det-det:pos, 'Sa', [dr(0,np,n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('Mussolini', npp-nam, 'Mussolini', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(contribué, vpp-ver:pper, contribué, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(monarchie, nc-nom, monarchie, [n-1]), ex_si(italienne, adj-adj, italienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1192, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(roi, nc-nom, roi, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1193, Result) :-
      prob_parse([ ex_si('Humbert', npp-nam, 'Humbert', [np-1]), ex_si(fut, v-ver:simp, fut, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(roi, nc-nom, roi, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(prince, nc-nom, prince, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Naples', npp-nam, 'Naples', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(actuel, adj-adj, actuel, [dr(0,n,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', nc-nam, 'Maison', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Savoie', npp-nam, 'Savoie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1194, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('III', adj-num, 'III', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(roi, nc-nom, roi, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1195, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(règnes, nc-nom, règnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('II', adj-num, 'II', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1861-78', pro-num, '1861-78', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Humbert', npp-nam, 'Humbert', [np-1]), ex_si('Ier', adj-num, 'Ier', [dl(0,np,np)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1878-1900', pro-num, '1878-1900', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(moitié, nc-nom, moitié, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(règne, nc-nom, règne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [np-1]), ex_si('III', adj-num, 'III', [dl(0,np,np)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1900-1946', pro-num, '1900-1946', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(marqués, vpp-ver:pper, marqués, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(sociales, adj-adj, sociales, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(politiques, adj-adj, politiques, [n-1]), ex_si(modérées, vpp-ver:pper, modérées, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(certaine, adj-adj, certaine, [dr(0,n,n)-1]), ex_si(expansion, nc-nom, expansion, [n-1]), ex_si(industrielle, adj-adj, industrielle, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(principalement, adv-adv, principalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('XXe', adj-num, 'XXe', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1196, Result) :-
      prob_parse([ ex_si('Victor', npp-nam, 'Victor', [dr(0,np,np)-1]), ex_si('Emmanuel', npp-nam, 'Emmanuel', [dr(0,np,np)-1]), ex_si('III', adj-num, 'III', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(roi, nc-nom, roi, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1900, pro-num, 1900, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1197, Result) :-
      prob_parse([ ex_si('De', p-prp, 'De', [dr(0,dr(0,s,s),np)-1]), ex_si(1835, pro-num, 1835, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1839, pro-num, 1839, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si(vit, v-ver:pres, vit, [dr(0,dl(0,np,s),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('Marie', npp-nam, 'Marie', [dr(0,np,np)-1]), ex_si('Catherine', npp-nam, 'Catherine', [dr(0,np,np)-1]), ex_si('Sophie', npp-nam, 'Sophie', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Flavigny', npp-nam, 'Flavigny', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('ex-épouse', nc-nom, 'ex-épouse', [dr(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si(comte, nc-nom, comte, [dr(0,dl(0,n,n),n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Agoult', npp-nam, 'Agoult', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1198, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(connue, vpp-ver:pper, connue, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(plume, nc-nom, plume, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Daniel', npp-nam, 'Daniel', [dr(0,np,np)-1]), ex_si('Stern', npp-nam, 'Stern', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1199, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(filles, nc-nom, filles, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Blandina', npp-nam, 'Blandina', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1835-1862', pro-num, '1835-1862', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Cosima', npp-nam, 'Cosima', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1837-1930', pro-num, '1837-1930', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Daniel', npp-nam, 'Daniel', [np-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('1839-1859', pro-num, '1839-1859', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1200, Result) :-
      prob_parse([ ex_si('Franz', npp-nam, 'Franz', [dr(0,np,np)-1]), ex_si('Liszt', npp-nam, 'Liszt', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1811, pro-num, 1811, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(1886, pro-num, 1886, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1201, Result) :-
      prob_parse([ ex_si('Combat', nc-nom, 'Combat', [n-1]), ex_si(naval, adj-adj, naval, [dl(0,n,n)-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si(perses, adj-adj, perses, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [n-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1202, Result) :-
      prob_parse([ ex_si('Eschyle', npp-nam, 'Eschyle', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(servi, vpp-ver:pper, servi, [dl(0,np,s_ppart)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bataille, nc-nom, bataille, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(ancienne, adj-adj, ancienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(survivre, vinf-ver:infi, survivre, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1203, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Eschyle', npp-nam, 'Eschyle', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1204, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(tard, adv-adv, tard, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dr(0,s,s),s)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Cage', npp-nam, 'Cage', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retourné, vpp-ver:pper, retourné, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Pacific', npp-nam, 'Pacific', [dr(0,n,n)-1]), ex_si('Palisades', npp-nam, 'Palisades', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(écrit, vpp-ver:pper, écrit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(chansons, nc-nom, chansons, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(textes, nc-nom, textes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Gertrude', npp-nam, 'Gertrude', [dr(0,np,np)-1]), ex_si('Stein', npp-nam, 'Stein', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(choeurs, nc-nom, choeurs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Eschyle', npp-nam, 'Eschyle', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1205, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Perses', nc-nam, 'Perses', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(écrits, vpp-ver:pper, écrits, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Eschyle', npp-nam, 'Eschyle', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1206, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mahomet', npp-nam, 'Mahomet', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(leadership, nc-nom, leadership, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(revenu, vpp-ver:pper, revenu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si('beau-père', nc-nom, 'beau-père', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Abu', npp-nam, 'Abu', [dr(0,np,np)-1]), ex_si('Bakr', npp-nam, 'Bakr', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(calife, nc-nom, calife, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(khalifa, et-nom, khalifa, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(successeur, nc-nom, successeur, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(position, nc-nom, position, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(combine, v-ver:pres, combine, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si(spirituel, adj-adj, spirituel, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(séculier, adj-adj, séculier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1207, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('beau-père', nc-nom, 'beau-père', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mohammed', npp-nam, 'Mohammed', [dr(0,np,np)-1]), ex_si('Khalifa', npp-nam, 'Khalifa', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Oussama', npp-nam, 'Oussama', [dr(0,np,np)-1]), ex_si('Ben', npp-nam, 'Ben', [dr(0,np,np)-1]), ex_si('Laden', npp-nam, 'Laden', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1208, Result) :-
      prob_parse([ ex_si('Umar', npp-nam, 'Umar', [dr(0,np,np)-1]), ex_si('Al', npp-nam, 'Al', [dr(0,np,np)-1]), ex_si('Khattab', npp-nam, 'Khattab', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('beau-père', nc-nom, 'beau-père', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mahomet', npp-nam, 'Mahomet', [np-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(mariage, nc-nom, mariage, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(fille, nc-nom, fille, [n-1]), ex_si('Hafsa', npp-nam, 'Hafsa', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(khalife, nc-nom, khalife, [n-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(appartenait, v-ver:impf, appartenait, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(famille, nc-nom, famille, [n-1]), ex_si(mecquoise, adj-adj, mecquoise, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Banu', npp-nam, 'Banu', [n-1]), ex_si('Umayya', npp-nam, 'Umayya', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(branche, nc-nom, branche, [n-1]), ex_si(descendait, v-ver:impf, descendait, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si('Abu\'l', npp-nam, 'Abu\'l', [dr(0,np,np)-1]), ex_si('Aasi', npp-nam, 'Aasi', [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),np)-1]), ex_si('grand-père', nc-nom, 'grand-père', [dr(0,np,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si('Umar', npp-nam, 'Umar', [n-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(1209, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('beau-père', nc-nom, 'beau-père', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mahomet', npp-nam, 'Mahomet', [dr(0,np,np)-1]), ex_si('Khalifa', npp-nam, 'Khalifa', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Oussama', npp-nam, 'Oussama', [dr(0,np,np)-1]), ex_si('Ben', npp-nam, 'Ben', [dr(0,np,np)-1]), ex_si('Laden', npp-nam, 'Laden', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1210, Result) :-
      prob_parse([ ex_si('Créé', vpp-ver:pper, 'Créé', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Rob-Vel', npp-nam, 'Rob-Vel', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1938, pro-num, 1938, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si('Spirou', npp-nam, 'Spirou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(dessiné, vpp-ver:pper, dessiné, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Franquin', npp-nam, 'Franquin', [np-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1211, Result) :-
      prob_parse([ ex_si('Spirou', npp-nam, 'Spirou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Rob-Vel', npp-nam, 'Rob-Vel', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1212, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(désastre, nc-nom, désastre, [n-1]), ex_si(ambulant, adj-adj, ambulant, [dl(0,n,n)-1]), ex_si('Gaston', npp-nam, 'Gaston', [dl(0,n,n)-1]), ex_si('Lagaffe', npp-nam, 'Lagaffe', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Franquin', npp-nam, 'Franquin', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pages, nc-nom, pages, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Spirou', npp-nam, 'Spirou', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(donné, vpp-ver:pper, donné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(naissance, nc-nom, naissance, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(courtes, adj-adj, courtes, [dr(0,n,n)-1]), ex_si(bandes, nc-nom, bandes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gags, nc-nom, gags, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1213, Result) :-
      prob_parse([ ex_si('Spirou', npp-nam, 'Spirou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Rob-Vel', npp-nam, 'Rob-Vel', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1214, Result) :-
      prob_parse([ ex_si('Red', npp-nam, 'Red', [dr(0,np,np)-1]), ex_si('Planet', npp-nam, 'Planet', [dr(0,np,np)-1]), ex_si('Consulting', npp-nam, 'Consulting', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Inc', et-nam, 'Inc', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1215, Result) :-
      prob_parse([ ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(fournit, v-ver:pres, fournit, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(logiciels, adj-adj, logiciels, [dl(0,n,n)-1]), ex_si(experts, adj-adj, experts, [dl(0,n,n)-1]), ex_si('Smallworld', npp-nam, 'Smallworld', [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(publics, adj-adj, publics, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1216, Result) :-
      prob_parse([ ex_si('Mars', nc-nom, 'Mars', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(appelée, vpp-ver:pper, appelée, [dr(0,dl(0,np,s_pass),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1217, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cambodge', npp-nam, 'Cambodge', [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Birmanie', npp-nam, 'Birmanie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1218, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(christianisme, nc-nom, christianisme, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(musulmans, nc-nom, musulmans, [n-1]), ex_si(cham, et-nom, cham, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(populaires, adj-adj, populaires, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1219, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(religion, nc-nom, religion, [n-1]), ex_si(officielle, adj-adj, officielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Thaïlande', npp-nam, 'Thaïlande', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bouddhisme, nc-nom, bouddhisme, [n-1]), ex_si('Theravada', npp-nam, 'Theravada', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1220, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(répandu, vpp-ver:pper, répandu, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Canada', npp-nam, 'Canada', [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si('co-officielle', adj-adj, 'co-officielle', [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(anglais, nc-nom, anglais, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1221, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(français, nc-nom, français, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(parlée, vpp-ver:pper, parlée, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si('Québec', npp-nam, 'Québec', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1222, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conditions, nc-nom, conditions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(connaissance, nc-nom, connaissance, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(connaissance, nc-nom, connaissance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(interprété, vpp-ver:pper, interprété, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(compris, vpp-ver:pper, compris, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1223, Result) :-
      prob_parse([ ex_si('Nos', det-det:pos, 'Nos', [dr(0,np,n)-1]), ex_si(prédécesseurs, nc-nom, prédécesseurs, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(apprendre, vinf-ver:infi, apprendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(arabe, nc-nom, arabe, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(raison, nc-nom, raison, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(comme, cs-kon, comme, [dr(0,dr(0,s,s),s)-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,s,dr(0,s,dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('\'', ponct-pun:cit, '\'', [dr(0,np,np)-1]), ex_si('Amr', npp-nam, 'Amr', [dr(0,np,np)-1]), ex_si('Ibn', npp-nam, 'Ibn', [np-1]), ex_si('Khattab', npp-nam, 'Khattab', [dr(0,dl(0,s,s),s)-1]), ex_si(':', ponct-pun, ':', [let-1]), ex_si('"', ponct-pun:cit, '"', [np-1]), ex_si('Je', cls-pro:per, 'Je', [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(préfère, v-ver:pres, préfère, [dl(0,np,s_inf)-1]), ex_si(voyager, vinf-ver:infi, voyager, [dr(0,dl(1,s,s),np)-1]), ex_si(pendant, p-prp, pendant, [dr(0,np,n)-1]), ex_si(quarante, det-num, quarante, [n-1]), ex_si(nuits, nc-nom, nuits, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(interpréter, vinf-ver:infi, interpréter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Ayat', npp-nam, 'Ayat', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Livre', nc-nam, 'Livre', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Allah', npp-nam, 'Allah', [np-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,np,n)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(temps, nc-nom, temps, [dr(0,pp_a,n)-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si('Masjid', npp-nam, 'Masjid', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Prophète', npp-nam, 'Prophète', [n-1]), ex_si('(', ponct-pun, '(', [n-1]), ex_si('PBU', npp-abr, 'PBU', [let-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(jeûnant, vpr-ver:ppre, jeûnant, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(priant, vpr-ver:ppre, priant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nuit, nc-nom, nuit, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1]), ex_si('"', ponct-pun:cit, '"', [dl(0,s,txt)-1])], Result).
sent(1224, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(arabe, nc-nom, arabe, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1225, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(révélations, nc-nom, révélations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Saint', npp-nam, 'Saint', [dr(0,n,n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(apportées, vpp-ver:pper, apportées, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Saint', adj-adj, 'Saint', [dr(0,n,n)-1]), ex_si('Prophète', npp-nam, 'Prophète', [n-1]), ex_si('Muhammad', npp-nam, 'Muhammad', [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ange, nc-nom, ange, [n-1]), ex_si('Gabriel', npp-nam, 'Gabriel', [dl(0,n,n)-1]), ex_si(sous, p-prp, sous, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forme, nc-nom, forme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mots, nc-nom, mots, [n-1]), ex_si(clairs, adj-adj, clairs, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(arabe, adj-adj, arabe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1226, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(arabe, nc-nom, arabe, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Coran', npp-nam, 'Coran', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1227, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(principaux, adj-adj, principaux, [dr(0,n,n)-1]), ex_si(journaux, nc-nom, journaux, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(régionaux, adj-adj, régionaux, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,np,np),np)-1]), ex_si('Aftenposten', npp-nam, 'Aftenposten', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('VG', npp-abr, 'VG', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('DN', npp-abr, 'DN', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Dagbladet', npp-nam, 'Dagbladet', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Adresseavisen', npp-nam, 'Adresseavisen', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Bergens', npp-nam, 'Bergens', [dr(0,np,np)-1]), ex_si('Tidende', npp-nam, 'Tidende', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Nordlys', npp-nam, 'Nordlys', [dr(0,dl(0,np,np),np)-1]), ex_si(ne, adv-adv, ne, [np-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(publiés, vpp-ver:pper, publiés, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,pp_de,np)-1]), ex_si(de, p-prp, de, [np-1]), ex_si(jeudi, nc-nom, jeudi, [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1228, Result) :-
      prob_parse([ ex_si('Dagbladet', npp-nam, 'Dagbladet', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1229, Result) :-
      prob_parse([ ex_si('Grand', adj-adj, 'Grand', [dr(0,np,n)-1]), ex_si(article, nc-nom, article, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dl(0,n,n),np)-1]), ex_si('Osloposten', npp-nam, 'Osloposten', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(scientologie, nc-nom, scientologie, [n-1]), ex_si('U-MAN', npp-abr, 'U-MAN', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1230, Result) :-
      prob_parse([ ex_si('Entretiens', nc-nom, 'Entretiens', [n-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si('Magne', npp-nam, 'Magne', [dr(0,np,np)-1]), ex_si('Berge', npp-nam, 'Berge', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(auteur, nc-nom, auteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opération, nc-nom, opération, [n-1]), ex_si('Clambake', npp-nam, 'Clambake', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1231, Result) :-
      prob_parse([ ex_si('Dagbladet', npp-nam, 'Dagbladet', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(journal, nc-nom, journal, [n-1]), ex_si(norvégien, adj-adj, norvégien, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1232, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('SNCF', npp-abr, 'SNCF', [dl(0,n,n)-1]), ex_si(coopère, v-ver:pres, coopère, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1233, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('SNCF', npp-abr, 'SNCF', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1234, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(14, det-num, 14, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(utilise, v-ver:pres, utilise, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Waldkappeler', npp-nam, 'Waldkappeler', [dr(0,n,n)-1]), ex_si('Bahn', npp-nam, 'Bahn', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(que, adv-adv, que, [dr(0,pp,pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(trafic, nc-nom, trafic, [n-1]), ex_si(de, p-prp, de, [n-1]), ex_si(marchandises, nc-nom, marchandises, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1235, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(compagnie, nc-nom, compagnie, [n-1]), ex_si(ferroviaire, adj-adj, ferroviaire, [dl(0,n,n)-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('SNCF', npp-abr, 'SNCF', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1236, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(effort, nc-nom, effort, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Powell', npp-nam, 'Powell', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(amélioré, vpp-ver:pper, amélioré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(saut, nc-nom, saut, [n-1]), ex_si(miraculeux, adj-adj, miraculeux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(médaille, nc-nom, médaille, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(précédent, adj-adj, précédent, [dr(0,n,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('8,90m', nc-nam, '8,90m', [np-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,np,np),np)-1]), ex_si('29-2,50', pro-num, '29-2,50', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bob', npp-nam, 'Bob', [dr(0,np,np)-1]), ex_si('Beamon', npp-nam, 'Beamon', [np-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,np,np),n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Mexico', npp-nam, 'Mexico', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1237, Result) :-
      prob_parse([ ex_si('2,45m', nc-num, '2,45m', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(saut, nc-nom, saut, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(hauteur, nc-nom, hauteur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1238, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rempli, vpp-ver:pper, rempli, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Taipei', npp-nam, 'Taipei', [np-1]), ex_si(samedi, nc-nom, samedi, [dr(0,dl(1,s,s),n)-1]), ex_si(soir, nc-nom, soir, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(taïwanais, adj-adj, taïwanais, [dl(0,n,n)-1]), ex_si('Chen', npp-nam, 'Chen', [dl(0,n,n)-1]), ex_si('Shui-bian', npp-nam, 'Shui-bian', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(antisécession, nc-nom, antisécession, [dl(0,n,n)-1]), ex_si(adoptée, vpp-ver:pper, adoptée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(continentale, adj-adj, continentale, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1239, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(manifestants, nc-nom, manifestants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(scandé, vpp-ver:pper, scandé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,s_q,s)-1]), ex_si('Opposez', vimp-ver:impe, 'Opposez', [dr(0,s,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(aimez, vimp-ver:impe, aimez, [dr(0,s,np)-1]), ex_si('Taïwan', npp-nam, 'Taïwan', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(qualifié, vpp-ver:pper, qualifié, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(carnaval, nc-nom, carnaval, [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('centre-ville', nc-nom, 'centre-ville', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Taipei', npp-nam, 'Taipei', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1240, Result) :-
      prob_parse([ ex_si('Chen', npp-nam, 'Chen', [dr(0,np,np)-1]), ex_si('Shui-bian', npp-nam, 'Shui-bian', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Taïwan', npp-nam, 'Taïwan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1241, Result) :-
      prob_parse([ ex_si('Lien', nc-nom, 'Lien', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(appelé, vpp-ver:pper, appelé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(taïwanais, adj-adj, taïwanais, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('ROC', npp-abr, 'ROC', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dirigé, vpp-ver:pper, dirigé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(indépendantiste, adj-adj, indépendantiste, [dl(0,n,n)-1]), ex_si('Chen', npp-nam, 'Chen', [dl(0,n,n)-1]), ex_si('Shui-bian', npp-nam, 'Shui-bian', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(donner, vinf-ver:infi, donner, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(suite, nc-nom, suite, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(rencontre, nc-nom, rencontre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(multipliant, vpr-ver:ppre, multipliant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(efforts, nc-nom, efforts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pacification, nc-nom, pacification, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(répression, nc-nom, répression, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(indépendantiste, adj-adj, indépendantiste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1242, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Je', cls-pro:per, 'Je', [np-1]), ex_si(crois, v-ver:pres, crois, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(porte, nc-nom, porte, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(ouverte, vpp-ver:pper, ouverte, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('Lien', nc-nam, 'Lien', [np-1]), ex_si('.', ponct-pun, '.', [let-1]), ex_si('"', ponct-pun:cit, '"', [let-1])], Result).
sent(1243, Result) :-
      prob_parse([ ex_si('Chen', npp-nam, 'Chen', [dr(0,np,np)-1]), ex_si('Shui-bian', npp-nam, 'Shui-bian', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Taïwan', npp-nam, 'Taïwan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1244, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,dr(0,s,dia(1,box(1,pp)))),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(participants, nc-nom, participants, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dr(0,s,np),dl(0,np,s_pass))-1]), ex_si(inclus, vpp-ver:pper, inclus, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si('Ken', npp-nam, 'Ken', [dr(0,np,np)-1]), ex_si('Takeuchi', npp-nam, 'Takeuchi', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jan', npp-nam, 'Jan', [dr(0,np,np)-1]), ex_si('Jan', npp-nam, 'Jan', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Shintaro', npp-nam, 'Shintaro', [dr(0,np,np)-1]), ex_si('Tabata', npp-nam, 'Tabata', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Livedoor', npp-nam, 'Livedoor', [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,np,np),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(professeur, nc-nom, professeur, [n-1]), ex_si('Clyde', npp-nam, 'Clyde', [dl(0,n,n)-1]), ex_si('Bentley', npp-nam, 'Bentley', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(université, nc-nom, université, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Missouri', npp-nam, 'Missouri', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('My', et-det:art, 'My', [dr(0,np,np)-1]), ex_si('Missourian', npp-nam, 'Missourian', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1245, Result) :-
      prob_parse([ ex_si('Chen', npp-nam, 'Chen', [dr(0,np,np)-1]), ex_si('Shui-bian', npp-nam, 'Shui-bian', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Taïwan', npp-nam, 'Taïwan', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1246, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(séisme, nc-nom, séisme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(magnitude, nc-nom, magnitude, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dr(0,np,np),n)-1]), ex_si(moins, adv-adv, moins, [n-1]), ex_si('6,2', pro-num, '6,2', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dl(0,np,s_ppart)-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(large, nc-nom, large, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(côtes, nc-nom, côtes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sumatra', npp-nam, 'Sumatra', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(déclenchant, vpr-ver:ppre, déclenchant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(alerte, nc-nom, alerte, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1247, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(immédiats, adj-adj, immédiats, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(dommages, nc-nom, dommages, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1248, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vagues, nc-nom, vagues, [n-1]), ex_si(créées, vpp-ver:pper, créées, [dl(0,n,n)-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déplace, v-ver:pres, déplace, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(massive, adj-adj, massive, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1249, Result) :-
      prob_parse([ ex_si('Panique', nc-nom, 'Panique', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Sumatra', npp-nam, 'Sumatra', [np-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(séisme, nc-nom, séisme, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,n,txt)-1])], Result).
sent(1250, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(indonésienne, adj-adj, indonésienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sumatra', npp-nam, 'Sumatra', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fui, vpp-ver:pper, fui, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tremblement, nc-nom, tremblement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(magnitude, nc-nom, magnitude, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('6,7', pro-num, '6,7', [np-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(journée, nc-nom, journée, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1251, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tremblement, nc-nom, tremblement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(assez, adv-adv, assez, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(puissant, adj-adj, puissant, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(provoquer, vinf-ver:infi, provoquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(craindre, vinf-ver:infi, craindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(répétition, nc-nom, répétition, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tremblement, nc-nom, tremblement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(magnitude, nc-nom, magnitude, [n-1]), ex_si('9,3', adj-num, '9,3', [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(quelque, det-pro:ind, quelque, [dr(0,np,n)-1]), ex_si('300.000', adj-num, '300.000', [dr(0,n,n)-1]), ex_si(morts, nc-nom, morts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1252, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(secousse, nc-nom, secousse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(frappé, vpp-ver:pper, frappé, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('sud-ouest', nc-nom, 'sud-ouest', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Padang', npp-nam, 'Padang', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouest, nc-nom, ouest, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Sumatra', npp-nam, 'Sumatra', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(dommage, nc-nom, dommage, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signalé, vpp-ver:pper, signalé, [dl(0,np,s_pass)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(présent, nc-nom, présent, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1253, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vagues, nc-nom, vagues, [n-1]), ex_si(créées, vpp-ver:pper, créées, [dl(0,n,n)-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(corps, nc-nom, corps, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eau, nc-nom, eau, [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(déplace, v-ver:pres, déplace, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(massive, adj-adj, massive, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1254, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(récente, adj-adj, récente, [dr(0,n,n)-1]), ex_si(éruption, nc-nom, éruption, [n-1]), ex_si(volcanique, adj-adj, volcanique, [dl(0,n,n)-1]), ex_si('sous-marine', adj-adj, 'sous-marine', [dl(0,n,n)-1]), ex_si(remonte, v-ver:pres, remonte, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(duré, vpp-ver:pper, duré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1255, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Agence', nc-nam, 'Agence', [n-1]), ex_si(météorologique, adj-adj, météorologique, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(danger, nc-nom, danger, [n-1]), ex_si(actuel, adj-adj, actuel, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(souvent, adv-adv, souvent, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(causé, vpp-ver:pper, causé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(activité, nc-nom, activité, [n-1]), ex_si(sismique, adj-adj, sismique, [dl(0,n,n)-1]), ex_si('sous-marine', adj-adj, 'sous-marine', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1256, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tremblements, nc-nom, tremblements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(potentiel, nc-nom, potentiel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1257, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Simeulue', npp-nam, 'Simeulue', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(proche, adj-adj, proche, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épicentre, nc-nom, épicentre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(séisme, nc-nom, séisme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(26, adj-num, 26, [dr(0,n,n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(massif, adj-adj, massif, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1258, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(alerte, nc-nom, alerte, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(tsunamis, nc-nom, tsunamis, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pacifique', npp-nam, 'Pacifique', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Hawaï', npp-nam, 'Hawaï', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(menace, nc-nom, menace, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(côtes, nc-nom, côtes, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pacifique', npp-nam, 'Pacifique', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(séismes, nc-nom, séismes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(parfois, adv-adv, parfois, [dl(1,s,s)-1]), ex_si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tsunamis, nc-nom, tsunamis, [n-1]), ex_si(locaux, adj-adj, locaux, [dl(0,n,n)-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(long, nc-nom, long, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(côtes, nc-nom, côtes, [n-1]), ex_si(proches, adj-adj, proches, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épicentre, nc-nom, épicentre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1259, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tremblements, nc-nom, tremblements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(potentiel, nc-nom, potentiel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1260, Result) :-
      prob_parse([ ex_si('Tremblement', nc-nom, 'Tremblement', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(magnitude, nc-nom, magnitude, [n-1]), ex_si('6,9', pro-num, '6,9', [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(large, nc-nom, large, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(côtes, nc-nom, côtes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Honshu', npp-nam, 'Honshu', [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(14, adj-num, 14, [dr(0,dl(0,n,n),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(2005, adj-num, 2005, [dl(0,n,n)-1]), ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(séisme, nc-nom, séisme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('6,9', pro-num, '6,9', [np-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(échelle, nc-nom, échelle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Richter', npp-nam, 'Richter', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signalé, vpp-ver:pper, signalé, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(large, nc-nom, large, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(côtes, nc-nom, côtes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(île, nc-nom, île, [n-1]), ex_si(principale, adj-adj, principale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si('Honshu', npp-nam, 'Honshu', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1261, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(agisse, vs-ver:subp, agisse, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(séisme, nc-nom, séisme, [n-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épicentre, nc-nom, épicentre, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(éloigné, vpp-ver:pper, éloigné, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(agglomération, nc-nom, agglomération, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(premières, adj-adj, premières, [dr(0,n,n)-1]), ex_si(alertes, nc-nom, alertes, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(prévoyant, vpr-ver:ppre, prévoyant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(déferlantes, nc-nom, déferlantes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('demi-mètre', nc-nom, 'demi-mètre', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retirées, vpp-ver:pper, retirées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1262, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(tremblements, nc-nom, tremblements, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(potentiel, nc-nom, potentiel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(générer, vinf-ver:infi, générer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1263, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(référendum, nc-nom, référendum, [n-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(élire, vinf-ver:infi, élire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(35, adj-num, 35, [dr(0,n,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(européen, adj-adj, européen, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(rejoindra, v-ver:impf, rejoindra, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2007, pro-num, 2007, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1264, Result) :-
      prob_parse([ ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(euro, nc-nom, euro, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(monnaie, nc-nom, monnaie, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1265, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entretien, nc-nom, entretien, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si('Luiz', npp-nam, 'Luiz', [dl(0,n,n)-1]), ex_si('Inácio', npp-nam, 'Inácio', [dl(0,n,n)-1]), ex_si('Lula', npp-nam, 'Lula', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('San', npp-nam, 'San', [dr(0,np,np)-1]), ex_si('Salvador', npp-nam, 'Salvador', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Foro', npp-nam, 'Foro', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('São', npp-nam, 'São', [np-1]), ex_si('Paulo', npp-nam, 'Paulo', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1266, Result) :-
      prob_parse([ ex_si('Lula', npp-nam, 'Lula', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1267, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(2004, pro-num, 2004, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(journalistes, nc-nom, journalistes, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si('Lula', npp-nam, 'Lula', [dl(0,n,n)-1]), ex_si(demandant, vpr-ver:ppre, demandant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(organisme, nc-nom, organisme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(inspection, nc-nom, inspection, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conduite, nc-nom, conduite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(brésilienne, adj-adj, brésilienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1268, Result) :-
      prob_parse([ ex_si('Lula', npp-nam, 'Lula', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1269, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(député, nc-nom, député, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(crédibilité, nc-nom, crédibilité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Jefferson', npp-nam, 'Jefferson', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(traitant, vpr-ver:ppre, traitant, [dr(0,dr(0,dl(0,np,s_ppres),pp_de),np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(menteur, nc-nom, menteur, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(fait, nc-nom, fait, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,dl(0,n,n),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(brésilien, adj-adj, brésilien, [dl(0,n,n)-1]), ex_si('Fernando', npp-nam, 'Fernando', [dl(0,n,n)-1]), ex_si('Collor', npp-nam, 'Collor', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mello', npp-nam, 'Mello', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(subi, vpp-ver:pper, subi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(accusation, nc-nom, accusation, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(corruption, nc-nom, corruption, [n-1]), ex_si(liée, vpp-ver:pper, liée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(trésorier, nc-nom, trésorier, [n-1]), ex_si('Paulo', npp-nam, 'Paulo', [dl(0,n,n)-1]), ex_si('Cesar', npp-nam, 'Cesar', [dl(0,n,n)-1]), ex_si('Farias', npp-nam, 'Farias', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Collor', npp-nam, 'Collor', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1270, Result) :-
      prob_parse([ ex_si('Lula', npp-nam, 'Lula', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1271, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Darfour', npp-nam, 'Darfour', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('70.000', det-num, '70.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(déplacées, vpp-ver:pper, déplacées, [dl(0,np,dl(1,s,s))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1272, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('200.000', det-num, '200.000', [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tuées, vpp-ver:pper, tuées, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attaque, nc-nom, attaque, [n-1]), ex_si(aérienne, adj-adj, aérienne, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Darfour', npp-nam, 'Darfour', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1273, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouragan, nc-nom, ouragan, [n-1]), ex_si('Katrina', npp-nam, 'Katrina', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(risque, v-ver:pres, risque, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(frapper, vinf-ver:infi, frapper, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Nouvelle-Orléans', npp-nam, 'Nouvelle-Orléans', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(maire, nc-nom, maire, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Louisiane', npp-nam, 'Louisiane', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(officiellement, adv-adv, officiellement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(évacuation, nc-nom, évacuation, [n-1]), ex_si(obligatoire, adj-adj, obligatoire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1274, Result) :-
      prob_parse([ ex_si('Tous', adv-adv, 'Tous', [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(citoyens, nc-nom, citoyens, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exception, nc-nom, exception, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(essentielles, adj-adj, essentielles, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(fonctionnement, nc-nom, fonctionnement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(poignée, nc-nom, poignée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si('(', ponct-pun, '(', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(hôtels, nc-nom, hôtels, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(immédiatement, adv-adv, immédiatement, [dl(1,s,s)-1]), ex_si(quitter, vinf-ver:infi, quitter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(rendre, vinf-ver:infi, rendre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(terrains, nc-nom, terrains, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élevés, vpp-ver:pper, élevés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1275, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(maire, nc-nom, maire, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(montantes, adj-adj, montantes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(catégorie, nc-nom, catégorie, [n-1]), ex_si(5, adj-num, 5, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(susceptibles, adj-adj, susceptibles, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(dépasser, vinf-ver:infi, dépasser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(digues, nc-nom, digues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(conçus, vpp-ver:pper, conçus, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prévenir, vinf-ver:infi, prévenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(inondations, nc-nom, inondations, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1276, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(tempête, nc-nom, tempête, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(catégorie, nc-nom, catégorie, [n-1]), ex_si(5, adj-num, 5, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dépassé, vpp-ver:pper, dépassé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(digues, nc-nom, digues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Nouvelle-Orléans', npp-nam, 'Nouvelle-Orléans', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1277, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(transmis, vpp-ver:pper, transmis, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Congrès', npp-nam, 'Congrès', [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intermédiaire, nc-nom, intermédiaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('Condoleezza', npp-nam, 'Condoleezza', [dl(0,n,n)-1]), ex_si('Rice', npp-nam, 'Rice', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1278, Result) :-
      prob_parse([ ex_si('Condoleezza', npp-nam, 'Condoleezza', [dr(0,np,np)-1]), ex_si('Rice', npp-nam, 'Rice', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1279, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('Condoleezza', npp-nam, 'Condoleezza', [dl(0,n,n)-1]), ex_si('Rice', npp-nam, 'Rice', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sentiments, nc-nom, sentiments, [n-1]), ex_si(similaires, adj-adj, similaires, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(accusant, vpr-ver:ppre, accusant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Syrie', npp-nam, 'Syrie', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(contribuer, vinf-ver:infi, contribuer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(instabilité, nc-nom, instabilité, [n-1]), ex_si(au, p+d-prp:det, au, [n-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1280, Result) :-
      prob_parse([ ex_si('Condoleezza', npp-nam, 'Condoleezza', [dr(0,np,np)-1]), ex_si('Rice', npp-nam, 'Rice', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('EU', npp-abr, 'EU', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1281, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(contingent, nc-nom, contingent, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(récents, adj-adj, récents, [dr(0,n,n)-1]), ex_si(retraits, nc-nom, retraits, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si(réductions, nc-nom, réductions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(effectifs, nc-nom, effectifs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1282, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(présent, nc-nom, présent, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(seuls, adj-adj, seuls, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(annoncer, vinf-ver:infi, annoncer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1283, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Roumanie', npp-nam, 'Roumanie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(envoyé, vpp-ver:pper, envoyé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(730, det-num, 730, [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1284, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(échanges, nc-nom, échanges, [n-1]), ex_si(houleux, adj-adj, houleux, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(procureur, nc-nom, procureur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(juré, nc-nom, juré, [n-1]), ex_si(potentiel, adj-adj, potentiel, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(procès, nc-nom, procès, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('O.J', npp-nam, 'O.J', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,dr(0,s,s),txt)-1])], Result).
sent(1285, Result) :-
      prob_parse([ ex_si('Simpson', npp-nam, 'Simpson', [np-1]), ex_si(jeudi, nc-nom, jeudi, [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(avocats, nc-nom, avocats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Simpson', npp-nam, 'Simpson', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(avocats, nc-nom, avocats, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(traiter, vinf-ver:infi, traiter, [dr(0,dr(0,dl(0,np,s_inf),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(noirs, adj-adj, noirs, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(jury, nc-nom, jury, [n-1]), ex_si(différemment, adv-adv, différemment, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1286, Result) :-
      prob_parse([ ex_si('O.J', nc-nom, 'O.J', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1287, Result) :-
      prob_parse([ ex_si('Simpson', npp-nam, 'Simpson', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1288, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(âgés, adj-adj, âgés, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(14, det-num, 14, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(servitude, nc-nom, servitude, [n-1]), ex_si(chronique, adj-adj, chronique, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agriculture, nc-nom, agriculture, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),pp))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),pp)))))-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(briques, nc-nom, briques, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(carrière, nc-nom, carrière, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(centaines, nc-num, centaines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(milliers, nc-nom, milliers, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(industries, nc-nom, industries, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tapis, nc-nom, tapis, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(bijouterie, nc-nom, bijouterie, [n-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si('Kailash', npp-nam, 'Kailash', [dr(0,np,np)-1]), ex_si('Satyarthi', npp-nam, 'Satyarthi', [np-1]), ex_si(président, nc-nom, président, [dl(0,np,np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coalition', nc-nam, 'Coalition', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [dr(0,dl(0,n,n),np)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(servitude, nc-nom, servitude, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1289, Result) :-
      prob_parse([ ex_si('Satyarthi', npp-nam, 'Satyarthi', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(président, nc-nom, président, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coalition', nc-nam, 'Coalition', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Asie', npp-nam, 'Asie', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(servitude, nc-nom, servitude, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1290, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Durant', p-prp, 'Durant', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(occupation, nc-nom, occupation, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1939, pro-num, 1939, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(0,n,n)),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(musicale, adj-adj, musicale, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(interdite, vpp-ver:pper, interdite, [dl(0,np,s_pass)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-t-il', cls-pro:per, '-t-il', [np-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(1,s,dl(0,np,s_ppart)),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Times', npp-nam, 'Times', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1985, pro-num, 1985, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1291, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(déroulée, vpp-ver:pper, déroulée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1939, pro-num, 1939, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,dl(0,n,n)),np)-1]), ex_si(1945, pro-num, 1945, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1292, Result) :-
      prob_parse([ ex_si('Ames', npp-nam, 'Ames', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(rencontré, vpp-ver:pper, rencontré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(épousé, vpp-ver:pper, épousé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('Maria', npp-nam, 'Maria', [np-1]), ex_si(del, et-prp, del, [dr(0,dl(0,np,np),np)-1]), ex_si('Rosario', npp-nam, 'Rosario', [dr(0,np,np)-1]), ex_si('Casas', npp-nam, 'Casas', [dr(0,np,np)-1]), ex_si('Ames', npp-nam, 'Ames', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(diplomate, nc-nom, diplomate, [n-1]), ex_si(colombienne, adj-adj, colombienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bas, adj-adj, bas, [dr(0,n,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(recrutée, vpp-ver:pper, recrutée, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(agent, nc-nom, agent, [n-1]), ex_si(rémunéré, vpp-ver:pper, rémunéré, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIA', npp-abr, 'CIA', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(0,n,n),np)-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(connaissaient, v-ver:impf, connaissaient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(forte, adj-adj, forte, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(esprit, nc-nom, esprit, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(goûts, nc-nom, goûts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(luxe, nc-nom, luxe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1293, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Aldrich', npp-nam, 'Aldrich', [dr(0,np,np)-1]), ex_si('Hazen', npp-nam, 'Hazen', [dr(0,np,np)-1]), ex_si('Ames', npp-nam, 'Ames', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelait, v-ver:impf, appelait, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('Maria', npp-nam, 'Maria', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1294, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Cachemire', npp-nam, 'Cachemire', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dément, v-ver:pres, dément, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(accusations, nc-nom, accusations, [n-1]), ex_si(indiennes, adj-adj, indiennes, [dl(0,n,n)-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(arme, v-ver:pres, arme, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(séparatistes, nc-nom, séparatistes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(vallée, nc-nom, vallée, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1295, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pakistan', npp-nam, 'Pakistan', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possession, nc-nom, possession, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Cachemire', nc-nam, 'Cachemire', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1296, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Laura', npp-nam, 'Laura', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(neveu, nc-nom, neveu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('P.', npp-abr, 'P.', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(auront, v-ver:futu, auront, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(rôles, nc-nom, rôles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(convention, nc-nom, convention, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(républicaine, adj-adj, républicaine, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tiendra, v-ver:futu, tiendra, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(la, det-det:art, la, [dr(0,dl(1,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(prochaine, adj-adj, prochaine, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Philadelphie', npp-nam, 'Philadelphie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1297, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Laura', npp-nam, 'Laura', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1298, Result) :-
      prob_parse([ ex_si('Du', p+d-prp:det, 'Du', [dr(0,dr(0,s,s),n)-1]), ex_si(côté, nc-nom, côté, [n-1]), ex_si(républicain, adj-adj, républicain, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouverneur, nc-nom, gouverneur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Texas', npp-nam, 'Texas', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Laura', npp-nam, 'Laura', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(enregistrement, nc-nom, enregistrement, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si(cassette, nc-nom, cassette, [n-1]), ex_si(incitant, vpr-ver:ppre, incitant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(voter, vinf-ver:infi, voter, [dl(0,np,s_inf)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(appels, nc-nom, appels, [n-1]), ex_si(automatisés, adj-adj, automatisés, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(laissés, vpp-ver:pper, laissés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(répondeurs, nc-nom, répondeurs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(électeurs, nc-nom, électeurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1299, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('George', npp-nam, 'George', [dr(0,np,np)-1]), ex_si('W.', npp-abr, 'W.', [dr(0,np,np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('Laura', npp-nam, 'Laura', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1300, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(également, adv-adv, également, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(laissé, vpp-ver:pper, laissé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(empreinte, nc-nom, empreinte, [n-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Japonaise', nc-nam, 'Japonaise', [dr(0,n,n)-1]), ex_si('Junko', npp-nam, 'Junko', [dl(0,n,n)-1]), ex_si('Tabei', npp-nam, 'Tabei', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pionnière, nc-nom, pionnière, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mai, nc-nom, mai, [n-1]), ex_si(1975, adj-num, 1975, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1301, Result) :-
      prob_parse([ ex_si('Alison', npp-nam, 'Alison', [dr(0,np,np)-1]), ex_si('Hargreaves', npp-nam, 'Hargreaves', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(oxygène, nc-nom, oxygène, [n-1]), ex_si(artificiel, adj-adj, artificiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1302, Result) :-
      prob_parse([ ex_si('Lute', npp-nam, 'Lute', [dr(0,np,np)-1]), ex_si('Jerstad', npp-nam, 'Jerstad', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(61, det-num, 61, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1963, pro-num, 1963, [np-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(premiers, adj-num, premiers, [dr(0,n,n)-1]), ex_si('Américains', nc-nom, 'Américains', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(gravir, vinf-ver:infi, gravir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mort, vpp-ver:pper, mort, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(crise, nc-nom, crise, [n-1]), ex_si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Tukla', npp-nam, 'Tukla', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,np,np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(500, det-num, 500, [dr(0,np,n)-1]), ex_si(pieds, nc-nom, pieds, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si(150, det-num, 150, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('15.000', det-num, '15.000', [dr(0,np,n)-1]), ex_si(pieds, nc-nom, pieds, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('4.545', det-num, '4.545', [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si(mont, nc-nom, mont, [n-1]), ex_si('Kalapatar', npp-nam, 'Kalapatar', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1303, Result) :-
      prob_parse([ ex_si('Alison', npp-nam, 'Alison', [dr(0,np,np)-1]), ex_si('Hargreaves', npp-nam, 'Hargreaves', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Everest', npp-nam, 'Everest', [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(oxygène, nc-nom, oxygène, [n-1]), ex_si(artificiel, adj-adj, artificiel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1304, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Hongrie', npp-nam, 'Hongrie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Zoltan', npp-nam, 'Zoltan', [dr(0,np,np)-1]), ex_si('Illes', npp-nam, 'Illes', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(commission, nc-nom, commission, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déversement, nc-nom, déversement, [n-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(environnementale, adj-adj, environnementale, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(réacteur, nc-nom, réacteur, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1305, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1306, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), ex_si('Richardson', npp-nam, 'Richardson', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(clairement, adv-adv, clairement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(inquiétait, v-ver:impf, inquiétait, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(performances, nc-nom, performances, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(réacteurs, nc-nom, réacteurs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(anciens, adj-adj, anciens, [dr(0,n,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(soviétiques, adj-adj, soviétiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si('Ukraine', npp-nam, 'Ukraine', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1307, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produite, vpp-ver:pper, produite, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1308, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(réacteur, nc-nom, réacteur, [n-1]), ex_si('n°', nc-abr, 'n°', [dr(0,dl(0,n,n),np)-1]), ex_si(4, adj-num, 4, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(ukrainienne, adj-adj, ukrainienne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1986, adj-num, 1986, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pire, adj-adj, pire, [dr(0,n,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(civile, adj-adj, civile, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1309, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchernobyl', npp-nam, 'Tchernobyl', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(produite, vpp-ver:pper, produite, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1310, Result) :-
      prob_parse([ ex_si('Cartoon', npp-nam, 'Cartoon', [dr(0,np,np)-1]), ex_si('News', npp-nam, 'News', [np-1]), ex_si(réédite, v-ver:pres, réédite, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(caricatures, nc-nom, caricatures, [n-1]), ex_si(politiques, adj-adj, politiques, [dl(0,n,n)-1]), ex_si(publiées, vpp-ver:pper, publiées, [dl(0,n,n)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(naufrage, nc-nom, naufrage, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1311, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1312, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(pensent, v-ver:pres, pensent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(véritable, adj-adj, véritable, [dr(0,n,n)-1]), ex_si(catastrophe, nc-nom, catastrophe, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Atlantique', npp-nam, 'Atlantique', [n-1]), ex_si('Nord', npp-nam, 'Nord', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(froide, adj-adj, froide, [dr(0,n,n)-1]), ex_si(matinée, nc-nom, matinée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1998, adj-num, 1998, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(perte, nc-nom, perte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1.500', det-num, '1.500', [dr(0,np,n)-1]), ex_si(vies, nc-nom, vies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1313, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1314, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(naufrage, nc-nom, naufrage, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(heurté, vpp-ver:pper, heurté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(iceberg, nc-nom, iceberg, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(avril, nc-nom, avril, [n-1]), ex_si(1912, adj-num, 1912, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('peut-être', adv-adv, 'peut-être', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(passagers, nc-nom, passagers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(troisième, det-num, troisième, [dr(0,np,n)-1]), ex_si(classe, nc-nom, classe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tragédie, nc-nom, tragédie, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(épargné, vpp-ver:pper, épargné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(classes, nc-nom, classes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1315, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Titanic', npp-nam, 'Titanic', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(coulé, vpp-ver:pper, coulé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1912, pro-num, 1912, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1316, Result) :-
      prob_parse([ ex_si('Lorsque', cs-kon, 'Lorsque', [dr(0,dr(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(botte, nc-nom, botte, [n-1]), ex_si(spatiale, adj-adj, spatiale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(touché, vpp-ver:pper, touché, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(surface, nc-nom, surface, [n-1]), ex_si(chauve, adj-adj, chauve, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Lune', npp-nam, 'Lune', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(1969, adj-num, 1969, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Neil', npp-nam, 'Neil', [dr(0,np,np)-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(célèbre, adj-adj, célèbre, [dl(0,n,n)-1]), ex_si(':', ponct-pun, ':', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('C\'est', v-ver:pres, 'C\'est', [np-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s),np)-1]), ex_si(petit, adj-adj, petit, [dr(0,np,n)-1]), ex_si(pas, nc-nom, pas, [dr(0,n,n)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(homme, nc-nom, homme, [dr(0,np,n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,np),np)-1]), ex_si(pas, nc-nom, pas, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(géant, nc-nom, géant, [dr(0,dl(0,n,n),n)-1]), ex_si(pour, p-prp, pour, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(humanité, nc-nom, humanité, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [n-1]), ex_si('.', ponct-pun, '.', [let-1])], Result).
sent(1317, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(touchée, vpp-ver:pper, touchée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1318, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(2015, adj-num, 2015, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,dl(0,np,s_ppart)),np)-1]), ex_si('-t-il', cls-pro:per, '-t-il', [np-1]), ex_si(prédit, vpp-ver:pper, prédit, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(établir, vinf-ver:infi, établir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(servira, v-ver:simp, servira, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(plateforme, nc-nom, plateforme, [n-1]), ex_si(naturelle, adj-adj, naturelle, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(observation, nc-nom, observation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si('avant-poste', nc-nom, 'avant-poste', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sondes, nc-nom, sondes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(lointain, adj-adj, lointain, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(poste, nc-nom, poste, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transfert, nc-nom, transfert, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(expérimental, adj-adj, expérimental, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1319, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(touchée, vpp-ver:pper, touchée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(humanité, nc-nom, humanité, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1320, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lors, adv-adv, lors, [dr(0,dr(0,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(célébration, nc-nom, célébration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(vendredi, nc-nom, vendredi, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si(16, det-num, 16, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(1999, adj-num, 1999, [dl(0,n,n)-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Armstrong', npp-nam, 'Armstrong', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(phrase, nc-nom, phrase, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Buzz', npp-nam, 'Buzz', [dr(0,np,np)-1]), ex_si('Aldrin', npp-nam, 'Aldrin', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(lui, clo-pro:per, lui, [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(posés, vpp-ver:pper, posés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(20, adj-num, 20, [dr(0,n,n)-1]), ex_si(juillet, nc-nom, juillet, [n-1]), ex_si(1969, adj-num, 1969, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(quatre, det-num, quatre, [dr(0,dl(1,s,s),n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(décollé, vpp-ver:pper, décollé, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Centre', npp-nam, 'Centre', [n-1]), ex_si(spatial, adj-adj, spatial, [dl(0,n,n)-1]), ex_si('Kennedy', npp-nam, 'Kennedy', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1321, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(touchée, vpp-ver:pper, touchée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1969, pro-num, 1969, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1322, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(prisé, vpp-ver:pper, prisé, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(lobby, nc-nom, lobby, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(décennie, nc-nom, décennie, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(abrogation, nc-nom, abrogation, [n-1]), ex_si(générale, adj-adj, générale, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si(fédérales, adj-adj, fédérales, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(feu, nc-nom, feu, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(adoptées, vpp-ver:pper, adoptées, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(meurtres, nc-nom, meurtres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sénateur, nc-nom, sénateur, [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('F.', npp-abr, 'F.', [dl(0,n,n)-1]), ex_si('Kennedy', npp-nam, 'Kennedy', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(révérend, nc-nom, révérend, [n-1]), ex_si('Martin', npp-nam, 'Martin', [dl(0,n,n)-1]), ex_si('Luther', npp-nam, 'Luther', [dl(0,n,n)-1]), ex_si('King', npp-nam, 'King', [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1323, Result) :-
      prob_parse([ ex_si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), ex_si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), ex_si('King', npp-nam, 'King', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1324, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(documents, nc-nom, documents, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(agent, nc-nom, agent, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('FBI', npp-abr, 'FBI', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(pris, vpp-ver:pper, pris, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(voiture, nc-nom, voiture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Earl', npp-nam, 'Earl', [dr(0,np,np)-1]), ex_si('Ray', npp-nam, 'Ray', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(assassinat, nc-nom, assassinat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(révérend, nc-nom, révérend, [n-1]), ex_si('Martin', npp-nam, 'Martin', [dl(0,n,n)-1]), ex_si('Luther', npp-nam, 'Luther', [dl(0,n,n)-1]), ex_si('King', npp-nam, 'King', [dl(0,n,n)-1]), ex_si('Jr', npp-nam, 'Jr', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(test, nc-nom, test, [n-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(destiné, vpp-ver:pper, destiné, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(détecter, vinf-ver:infi, détecter, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si('s\'', cs-kon, 's\'', [dr(0,s_whq,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(faux, adj-adj, faux, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(responsable, nc-nom, responsable, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1325, Result) :-
      prob_parse([ ex_si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), ex_si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), ex_si('King', npp-nam, 'King', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1326, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si(1969, adj-num, 1969, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('James', npp-nam, 'James', [dr(0,np,np)-1]), ex_si('Earl', npp-nam, 'Earl', [dr(0,np,np)-1]), ex_si('Ray', npp-nam, 'Ray', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(99, det-num, 99, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Tennessee', npp-nam, 'Tennessee', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(plaidé, vpp-ver:pper, plaidé, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), ex_si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), ex_si('King', npp-nam, 'King', [np-1]), ex_si('Jr', npp-abr, 'Jr', [dl(0,np,np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(pour, p-prp, pour, [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Noirs', nc-nam, 'Noirs', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(semblait, v-ver:impf, semblait, [dr(0,dl(0,np,s),np)-1]), ex_si(guère, adv-adv, guère, [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(récompense, nc-nom, récompense, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1327, Result) :-
      prob_parse([ ex_si('Martin', npp-nam, 'Martin', [dr(0,np,np)-1]), ex_si('Luther', npp-nam, 'Luther', [dr(0,np,np)-1]), ex_si('King', npp-nam, 'King', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(assassiné, vpp-ver:pper, assassiné, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1968, pro-num, 1968, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1328, Result) :-
      prob_parse([ ex_si('Ce', det-pro:dem, 'Ce', [dr(0,dr(0,s,s),n)-1]), ex_si(mardi, nc-nom, mardi, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(rabbin, nc-nom, rabbin, [n-1]), ex_si(ashkénaze, adj-adj, ashkénaze, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Meir', npp-nam, 'Meir', [dr(0,np,np)-1]), ex_si('Israel', npp-nam, 'Israel', [dr(0,np,np)-1]), ex_si('Lau', npp-nam, 'Lau', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rencontré, vpp-ver:pper, rencontré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(bureau, nc-nom, bureau, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prêtres, nc-nom, prêtres, [n-1]), ex_si(catholiques, adj-adj, catholiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Rome', npp-nam, 'Rome', [np-1]), ex_si('-membres', nc-nom, '-membres', [dl(0,np,np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(paix, nc-nom, paix, [n-1]), ex_si('St', npp-nam, 'St', [dl(0,n,n)-1]), ex_si('Egidio', npp-nam, 'Egidio', [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(leur, clo-pro:per, leur, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(remis, vpp-ver:pper, remis, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(lettre, nc-nom, lettre, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1329, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1330, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entamé, vpp-ver:pper, entamé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(pèlerinage, nc-nom, pèlerinage, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(natal, adj-adj, natal, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(triomphes, nc-nom, triomphes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(papauté, nc-nom, papauté, [n-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(côte, nc-nom, côte, [n-1]), ex_si(baltique, adj-adj, baltique, [dl(0,n,n)-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si('Solidarité', npp-nam, 'Solidarité', [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(renversé, vpp-ver:pper, renversé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(communisme, nc-nom, communisme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1331, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1332, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(arrivé, vpp-ver:pper, arrivé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(berceau, nc-nom, berceau, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si('Solidarité', npp-nam, 'Solidarité', [dl(0,n,n)-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suscité, vpp-ver:pper, suscité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(visite, nc-nom, visite, [n-1]), ex_si(papale, adj-adj, papale, [dl(0,n,n)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,dl(0,n,n),dl(0,n,n)))),np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(offrant, vpr-ver:ppre, offrant, [dr(0,dr(0,dl(0,np,s_ppart),np),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Polonais', nc-nam, 'Polonais', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(salut, nc-nom, salut, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(compatriote, nc-nom, compatriote, [n-1]), ex_si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(vous, pro-pro:per, vous, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(répondre, vinf-ver:infi, répondre, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(besoins, nc-nom, besoins, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1333, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pape, nc-nom, pape, [n-1]), ex_si('Jean-Paul', npp-nam, 'Jean-Paul', [dl(0,n,n)-1]), ex_si('II', adj-num, 'II', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Pologne', npp-nam, 'Pologne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1334, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(segment, nc-nom, segment, [n-1]), ex_si(consacré, vpp-ver:pper, consacré, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Mozart', npp-nam, 'Mozart', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(adopte, v-ver:pres, adopte, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vision, nc-nom, vision, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(sentimentale, adj-adj, sentimentale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(compositeur, nc-nom, compositeur, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(déclin, nc-nom, déclin, [n-1]), ex_si(ultérieur, adj-adj, ultérieur, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(relie, v-ver:pres, relie, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(quelques, det-pro:ind, quelques, [dr(0,np,n)-1]), ex_si(traits, nc-nom, traits, [n-1]), ex_si(rapides, adj-adj, rapides, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(culturelle, adj-adj, culturelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Vienne', npp-nam, 'Vienne', [n-1]), ex_si(impériale, adj-adj, impériale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1335, Result) :-
      prob_parse([ ex_si('Wolfgang', npp-nam, 'Wolfgang', [dr(0,np,np)-1]), ex_si('Amadeus', npp-nam, 'Amadeus', [dr(0,np,np)-1]), ex_si('Mozart', npp-nam, 'Mozart', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Salzbourg', npp-nam, 'Salzbourg', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1336, Result) :-
      prob_parse([ ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Rosetta', npp-nam, 'Rosetta', [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(belge, adj-adj, belge, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(jeune, adj-adj, jeune, [dr(0,n,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(chômage, nc-nom, chômage, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(tente, v-ver:pres, tente, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(désespérément, adv-adv, désespérément, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(tailler, vinf-ver:infi, tailler, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(normale, adj-adj, normale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(remporté, vpp-ver:pper, remporté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(honneurs, nc-nom, honneurs, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('52e', adj-num, '52e', [dr(0,n,n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cannes', npp-nam, 'Cannes', [np-1]), ex_si(dimanche, nc-nom, dimanche, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1337, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Palme', nc-nom, 'Palme', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décernée, vpp-ver:pper, décernée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cannes', npp-nam, 'Cannes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1338, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effondré, vpp-ver:pper, effondré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(actrice, nc-nom, actrice, [n-1]), ex_si(française, adj-adj, française, [dl(0,n,n)-1]), ex_si(torride, adj-adj, torride, [dl(0,n,n)-1]), ex_si('Sophie', npp-nam, 'Sophie', [dl(0,n,n)-1]), ex_si('Marceau', npp-nam, 'Marceau', [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparue, vpp-ver:pper, apparue, [dl(0,np,s_ppart)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(remettre, vinf-ver:infi, remettre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Palme', nc-nom, 'Palme', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),n)-1]), ex_si('Palme', nc-nam, 'Palme', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(belge, adj-adj, belge, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('Rosetta', npp-nam, 'Rosetta', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1339, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Palme', nc-nom, 'Palme', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décernée, vpp-ver:pper, décernée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cannes', npp-nam, 'Cannes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1340, Result) :-
      prob_parse([ ex_si('Lewis', npp-nam, 'Lewis', [np-1]), ex_si(recevra, v-ver:futu, recevra, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Lion', npp-nam, 'Lion', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(carrière, nc-nom, carrière, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(11, adj-num, 11, [dr(0,n,n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(festival, nc-nom, festival, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Venise', npp-nam, 'Venise', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dr(0,s,np),dl(0,np,s_pass))-1]), ex_si(projeté, vpp-ver:pper, projeté, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(film, nc-nom, film, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ouvrier, nc-nom, ouvrier, [n-1]), ex_si(malchanceux, adj-adj, malchanceux, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(hôtel, nc-nom, hôtel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Miami', npp-nam, 'Miami', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(organisateurs, nc-nom, organisateurs, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1341, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Palme', nc-nom, 'Palme', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(or, nc-nom, or, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décernée, vpp-ver:pper, décernée, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Festival', nc-nam, 'Festival', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Cannes', npp-nam, 'Cannes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1342, Result) :-
      prob_parse([ ex_si('Weimar', npp-nam, 'Weimar', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ville, nc-nom, ville, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(culture, nc-nom, culture, [n-1]), ex_si(1999, adj-num, 1999, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(coïncide, v-ver:pres, coïncide, [dr(0,dl(0,np,s),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('250e', adj-num, '250e', [dr(0,n,n)-1]), ex_si(anniversaire, nc-nom, anniversaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(naissance, nc-nom, naissance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(fils, nc-nom, fils, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(célèbres, adj-adj, célèbres, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(poète, nc-nom, poète, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(intellectuel, adj-adj, intellectuel, [dr(0,n,n)-1]), ex_si('Johann', npp-nam, 'Johann', [dl(0,n,n)-1]), ex_si('Wolfgang', npp-nam, 'Wolfgang', [dl(0,n,n)-1]), ex_si(von, npp-nam, von, [dl(0,n,n)-1]), ex_si('Goethe', npp-nam, 'Goethe', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1343, Result) :-
      prob_parse([ ex_si('Johann', nc-nam, 'Johann', [dr(0,np,np)-1]), ex_si('Wolfgang', npp-nam, 'Wolfgang', [dr(0,np,np)-1]), ex_si(von, et-prp, von, [dr(0,np,np)-1]), ex_si('Goethe', npp-nam, 'Goethe', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(né, vpp-ver:pper, né, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1344, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(sondage, nc-nom, sondage, [n-1]), ex_si(réalisé, vpp-ver:pper, réalisé, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Newsweek', npp-nam, 'Newsweek', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(convention, nc-nom, convention, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(républicaine, adj-adj, républicaine, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(montré, vpp-ver:pper, montré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(44, det-num, 44, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-pro:rel, que, [dr(0,s_q,s)-1]), ex_si('Dole', npp-nam, 'Dole', [np-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(42, det-num, 42, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(désigné, vpp-ver:pper, désigné, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Reform', npp-nam, 'Reform', [dr(0,n,n)-1]), ex_si('Party', npp-nam, 'Party', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Perot', npp-nam, 'Perot', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(que, adv-adv, que, [dr(0,np,np)-1]), ex_si(3, det-num, 3, [dr(0,np,n)-1]), ex_si('%.', nc-abr, '%.', [n-1])], Result).
sent(1345, Result) :-
      prob_parse([ ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1346, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('Bill', npp-nam, 'Bill', [dl(0,n,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parlé, vpp-ver:pper, parlé, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(téléphone, nc-nom, téléphone, [n-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(protestants, adj-adj, protestants, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(catholiques, adj-adj, catholiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Irlande', npp-nam, 'Irlande', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(féliciter, vinf-ver:infi, féliciter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si(électorale, adj-adj, électorale, [dl(0,n,n)-1]), ex_si(commune, adj-adj, commune, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1347, Result) :-
      prob_parse([ ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(démocrate, adj-adj, démocrate, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1348, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(revue, nc-nom, revue, [n-1]), ex_si(médicale, adj-adj, médicale, [dl(0,n,n)-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), ex_si('Lancet', npp-nam, 'Lancet', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rapporté, vpp-ver:pper, rapporté, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(mars, nc-nom, mars, [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(hospitalisé, vpp-ver:pper, hospitalisé, [dl(0,np,s_pass)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Éthiopie', npp-nam, 'Éthiopie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(neuf, det-num, neuf, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(unité, nc-nom, unité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(intensifs, adj-adj, intensifs, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(hôpital, nc-nom, hôpital, [n-1]), ex_si('Black', npp-nam, 'Black', [dl(0,n,n)-1]), ex_si('Lion', npp-nam, 'Lion', [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Addis-Abeba', npp-nam, 'Addis-Abeba', [np-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(souffert, vpp-ver:pper, souffert, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(défaillance, nc-nom, défaillance, [n-1]), ex_si(cardiaque, adj-adj, cardiaque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(objet, nc-nom, objet, [dr(0,pp_de,n)-1]), ex_si('d\'', p-prp, 'd\'', [n-1]), ex_si(appels, nc-nom, appels, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Amnesty', npp-nam, 'Amnesty', [dr(0,np,np)-1]), ex_si('International', npp-nam, 'International', [np-1]), ex_si(et, cc-kon, et, [dl(0,np,np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,np,n)-1]), ex_si(organisations, nc-nom, organisations, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(défense, nc-nom, défense, [dr(0,dl(0,n,n),n)-1]), ex_si(des, p+d-prp:det, des, [n-1]), ex_si(droits, nc-nom, droits, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(homme, nc-nom, homme, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1349, Result) :-
      prob_parse([ ex_si('Amnesty', npp-nam, 'Amnesty', [dr(0,np,np)-1]), ex_si('International', npp-nam, 'International', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(occupe, v-ver:pres, occupe, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1350, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(détenues, vpp-ver:pper, détenues, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(prisons, nc-nom, prisons, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(subissent, v-ver:pres, subissent, [dr(0,dl(0,np,s),np)-1]), ex_si(régulièrement, adv-adv, régulièrement, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(viols, nc-nom, viols, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(abus, nc-nom, abus, [n-1]), ex_si(sexuels, adj-adj, sexuels, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gardiens, nc-nom, gardiens, [n-1]), ex_si(masculins, adj-adj, masculins, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(voient, v-ver:pres, voient, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(refuser, vinf-ver:infi, refuser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(soins, nc-nom, soins, [n-1]), ex_si(médicaux, adj-adj, médicaux, [dl(0,n,n)-1]), ex_si(appropriés, adj-adj, appropriés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Amnesty', npp-nam, 'Amnesty', [dr(0,np,np)-1]), ex_si('International', npp-nam, 'International', [dr(0,np,np)-1]), ex_si('USA', npp-nam, 'USA', [dl(0,n,n)-1]), ex_si(publié, vpp-ver:pper, publié, [dl(0,n,n)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,dl(0,n,n),dl(0,n,n))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1351, Result) :-
      prob_parse([ ex_si('Amnesty', npp-nam, 'Amnesty', [dr(0,np,np)-1]), ex_si('International', npp-nam, 'International', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(occupe, v-ver:pres, occupe, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(humains, adj-adj, humains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1352, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(critiqué, vpp-ver:pper, critiqué, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(opposants, nc-nom, opposants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), ex_si('Blair', npp-nam, 'Blair', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(promis, vpp-ver:pper, promis, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(expulser, vinf-ver:infi, expulser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(demandeurs, nc-nom, demandeurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(asile, nc-nom, asile, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(emprisonner, vinf-ver:infi, emprisonner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traitement, nc-nom, traitement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(demandes, nc-nom, demandes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1353, Result) :-
      prob_parse([ ex_si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), ex_si('Blair', npp-nam, 'Blair', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1354, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(conservateur, adj-adj, conservateur, [dl(0,n,n)-1]), ex_si('William', npp-nam, 'William', [dl(0,n,n)-1]), ex_si('Hague', npp-nam, 'Hague', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attaqué, vpp-ver:pper, attaqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(position, nc-nom, position, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), ex_si('Blair', npp-nam, 'Blair', [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(poursuite, nc-nom, poursuite, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intégration, nc-nom, intégration, [n-1]), ex_si(européenne, adj-adj, européenne, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(accusant, vpr-ver:ppre, accusant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(céder, vinf-ver:infi, céder, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(droits, nc-nom, droits, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pouvoirs, nc-nom, pouvoirs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(tranche, v-ver:pres, tranche, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,dl(1,s,s)),n)-1]), ex_si(tranche, nc-nom, tranche, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1355, Result) :-
      prob_parse([ ex_si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), ex_si('Blair', npp-nam, 'Blair', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1356, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Tony', npp-nam, 'Tony', [dl(0,n,n)-1]), ex_si('Blair', npp-nam, 'Blair', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(averti, vpp-ver:pper, averti, [dr(0,dl(0,np,s_pass),s_q)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(perçu, vpp-ver:pper, perçu, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(arrogant, adj-adj, arrogant, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(électeurs, nc-nom, électeurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(préoccupés, vpp-ver:pper, préoccupés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(santé, nc-nom, santé, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(transports, nc-nom, transports, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1357, Result) :-
      prob_parse([ ex_si('Tony', npp-nam, 'Tony', [dr(0,np,np)-1]), ex_si('Blair', npp-nam, 'Blair', [np-1]), ex_si(appartient, v-ver:pres, appartient, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1358, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(modification, nc-nom, modification, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(citoyenneté, nc-nom, citoyenneté, [n-1]), ex_si(nécessite, v-ver:pres, nécessite, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approbation, nc-nom, approbation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chambre, nc-nom, chambre, [n-1]), ex_si(haute, adj-adj, haute, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Parlement', npp-nam, 'Parlement', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Bundesrat', npp-nam, 'Bundesrat', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(fédéraux, adj-adj, fédéraux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1359, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(fédéraux, adj-adj, fédéraux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1360, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(mont, nc-nom, mont, [n-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(sommet, nc-nom, sommet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(hauteur, nc-nom, hauteur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(8568, det-num, 8568, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si(frontalière, adj-adj, frontalière, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Népal', npp-nam, 'Népal', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Inde', npp-nam, 'Inde', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1361, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, nc-nom, haut, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1362, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Expédition', nc-nam, 'Expédition', [n-1]), ex_si(2000, adj-num, 2000, [dl(0,n,n)-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Corée', npp-nam, 'Corée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(vendredi, nc-nom, vendredi, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ascension, nc-nom, ascension, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mont, nc-nom, mont, [n-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(haut, nc-nom, haut, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(face, nc-nom, face, [n-1]), ex_si('sud-ouest', adj-adj, 'sud-ouest', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(népalais, adj-adj, népalais, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Tourisme', npp-nam, 'Tourisme', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1363, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(haut, adj-adj, haut, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1364, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(pic, nc-nom, pic, [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,np,s),np)-1]), ex_si('8.586', det-num, '8.586', [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haut, nc-nom, haut, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1365, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Kanchenjunga', npp-nam, 'Kanchenjunga', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(haut, adj-adj, haut, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(8586, det-num, 8586, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1366, Result) :-
      prob_parse([ ex_si('Près', adv-adv, 'Près', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(hauteur, nc-nom, hauteur, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si('Cassini', npp-nam, 'Cassini', [np-1]), ex_si(transportera, v-ver:futu, transportera, [dr(0,dl(0,np,s),np)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(paquets, nc-nom, paquets, [n-1]), ex_si(distincts, adj-adj, distincts, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(instruments, nc-nom, instruments, [n-1]), ex_si(scientifiques, adj-adj, scientifiques, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ainsi, adv-kon, ainsi, [dr(0,dl(0,np,np),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sonde, nc-nom, sonde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(portant, vpr-ver:ppre, portant, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(paquets, nc-nom, paquets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(capteurs, nc-nom, capteurs, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(larguée, vpp-ver:pper, larguée, [dl(0,np,s_pass)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si('Titan', npp-nam, 'Titan', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Saturne', npp-nam, 'Saturne', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1367, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si('Titan', npp-nam, 'Titan', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(5100, det-num, 5100, [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1368, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(disque, nc-nom, disque, [n-1]), ex_si(lunaire, adj-adj, lunaire, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('2,1', det-num, '2,1', [dr(0,np,n)-1]), ex_si(mètres, nc-nom, mètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1369, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('3.746', det-num, '3.746', [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1370, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1.430', det-num, '1.430', [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Pluton', npp-nam, 'Pluton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moitié, nc-nom, moitié, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(planète, nc-nom, planète, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(tiers, nc-nom, tiers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1371, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('3.746', det-num, '3.746', [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1372, Result) :-
      prob_parse([ ex_si('Avec', p-prp, 'Avec', [dr(0,dr(0,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('5.230', det-num, '5.230', [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Ganymède', npp-nam, 'Ganymède', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(satellite, nc-nom, satellite, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(solaire, adj-adj, solaire, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si('Mercure', npp-nam, 'Mercure', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(quarts, nc-nom, quarts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Mars', npp-nam, 'Mars', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1373, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lune, nc-nom, lune, [n-1]), ex_si(terrestre, adj-adj, terrestre, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(diamètre, nc-nom, diamètre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('3.746', det-num, '3.746', [dr(0,np,n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1374, Result) :-
      prob_parse([ ex_si('Jeudi', nc-nom, 'Jeudi', [dr(0,dr(0,s,s),n)-1]), ex_si(soir, nc-nom, soir, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dîné, vpp-ver:pper, dîné, [dl(0,np,s_ppart)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(écrivain, nc-nom, écrivain, [n-1]), ex_si(colombien, adj-adj, colombien, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(lauréat, nc-nom, lauréat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('Gabriel', npp-nam, 'Gabriel', [dl(0,n,n)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dl(0,n,n)-1]), ex_si('Marquez', npp-nam, 'Marquez', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1375, Result) :-
      prob_parse([ ex_si('Gabriel', npp-nam, 'Gabriel', [dr(0,np,np)-1]), ex_si('Garcia', npp-nam, 'Garcia', [dr(0,np,np)-1]), ex_si('Marquez', npp-nam, 'Marquez', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(lauréat, nc-nom, lauréat, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si('Nobel', npp-nam, 'Nobel', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1376, Result) :-
      prob_parse([ ex_si('Gore', npp-nam, 'Gore', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dl(0,cl_r,dl(0,np,s)),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(assiter, vinf-ver:infi, assiter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(physicien, nc-nom, physicien, [n-1]), ex_si('Stephen', npp-nam, 'Stephen', [dl(0,n,n)-1]), ex_si('Hawking', npp-nam, 'Hawking', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(actrice, nc-nom, actrice, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Star', npp-nam, 'Star', [dr(0,np,np)-1]), ex_si('Trek', npp-nam, 'Trek', [dr(0,np,np)-1]), ex_si('Nichelle', npp-nam, 'Nichelle', [dl(0,n,n)-1]), ex_si('Nichols', npp-nam, 'Nichols', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Gary', npp-nam, 'Gary', [dr(0,np,np)-1]), ex_si('Gygax', npp-nam, 'Gygax', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(créateur, nc-nom, créateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Donjons', npp-nam, 'Donjons', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Dragons', npp-nam, 'Dragons', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1377, Result) :-
      prob_parse([ ex_si('Stephen', npp-nam, 'Stephen', [dr(0,np,np)-1]), ex_si('Hawking', npp-nam, 'Hawking', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(physicien, nc-nom, physicien, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1378, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Yamaguchi-gumi', npp-nam, 'Yamaguchi-gumi', [n-1]), ex_si(revendique, v-ver:pres, revendique, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(effectif, nc-nom, effectif, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('23.000', det-num, '23.000', [dr(0,np,n)-1]), ex_si(gangsters, nc-nom, gangsters, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(yakuza, nc-nom, yakuza, [np-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(comme, cs-kon, comme, [dr(0,dl(0,np,np),np)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),np)-1]), ex_si(appelle, v-ver:pres, appelle, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(livrent, v-ver:pres, livrent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(affaires, nc-nom, affaires, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(légales, adj-adj, légales, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(illégales, adj-adj, illégales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(trafic, nc-nom, trafic, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(drogue, nc-nom, drogue, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(contrebande, nc-nom, contrebande, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prostitution, nc-nom, prostitution, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(extorsion, nc-nom, extorsion, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(escroqueries, nc-nom, escroqueries, [n-1]), ex_si(immobilières, adj-adj, immobilières, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1379, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(yakuza, nc-nom, yakuza, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mafia, nc-nom, mafia, [n-1]), ex_si(japonaise, adj-adj, japonaise, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1380, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Jandl', npp-nam, 'Jandl', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(désigné, vpp-ver:pper, désigné, [dr(0,dr(0,dl(0,np,s_pass),pp_par),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(10, adj-num, 10, [dr(0,n,n)-1]), ex_si(poètes, nc-nom, poètes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(importants, adj-adj, importants, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('20e', adj-num, '20e', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(jury, nc-nom, jury, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(écrivains, nc-nom, écrivains, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si(universitaires, nc-nom, universitaires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(critiques, nc-nom, critiques, [n-1]), ex_si(établi, vpp-ver:pper, établi, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(revue, nc-nom, revue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(langue, nc-nom, langue, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si('Das', npp-nam, 'Das', [dl(0,n,n)-1]), ex_si('Gedicht', npp-nam, 'Gedicht', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Poème', npp-nam, 'Poème', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1381, Result) :-
      prob_parse([ ex_si('Gotthold', npp-nam, 'Gotthold', [dr(0,np,np)-1]), ex_si('Ephraim', npp-nam, 'Ephraim', [dr(0,np,np)-1]), ex_si('Lessing', npp-nam, 'Lessing', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vécu, vpp-ver:pper, vécu, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(1729, pro-num, 1729, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(1781, pro-num, 1781, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1382, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('USOC', npp-abr, 'USOC', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(candidature, nc-nom, candidature, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(estimant, vpr-ver:ppre, estimant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),np)-1]), ex_si(peu, adv-adv, peu, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(chances, nc-nom, chances, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(emporter, vinf-ver:infi, emporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(si, adv-kon, si, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(peu, adv-adv, peu, [dr(0,dr(0,dl(1,s,s),dl(1,s,s)),n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeux, nc-nom, jeux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Atlanta', npp-nam, 'Atlanta', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeux, nc-nom, jeux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1383, Result) :-
      prob_parse([ ex_si('Avant', p-prp, 'Avant', [dr(0,dr(0,s,s),np)-1]), ex_si('Salt', npp-nam, 'Salt', [dr(0,np,np)-1]), ex_si('Lake', npp-nam, 'Lake', [dr(0,np,np)-1]), ex_si('City', npp-nam, 'City', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Jeux', nc-nam, 'Jeux', [n-1]), ex_si(olympiques, adj-adj, olympiques, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hiver, nc-nom, hiver, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Nagano', npp-nam, 'Nagano', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1384, Result) :-
      prob_parse([ ex_si('Parmi', p-prp, 'Parmi', [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(réalisations, nc-nom, réalisations, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(physique, nc-nom, physique, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('j\'', cls-pro:per, 'j\'', [np-1]), ex_si(ai, v-ver:pres, ai, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(privilège, nc-nom, privilège, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rapporter, vinf-ver:infi, rapporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(quark, et-nom, quark, [n-1]), ex_si(top, adj-adj, top, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Fermilab', npp-nam, 'Fermilab', [n-1]), ex_si('-le', cls-pro:per, '-le', [dr(0,dl(0,n,n),n)-1]), ex_si(dernier, adj-adj, dernier, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(six, adj-num, six, [dr(0,n,n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(prédits, vpp-ver:pper, prédits, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Modèle', nc-nam, 'Modèle', [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(insaisissable, adj-adj, insaisissable, [dr(0,n,n)-1]), ex_si(particule, nc-nom, particule, [n-1]), ex_si(neutrino, nc-nom, neutrino, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(probablement, adv-adv, probablement, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(certaine, adj-adj, certaine, [dr(0,n,n)-1]), ex_si(masse, nc-nom, masse, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(profondes, adj-adj, profondes, [dr(0,n,n)-1]), ex_si(implications, nc-nom, implications, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(destin, nc-nom, destin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1385, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(quark, et-nom, quark, [n-1]), ex_si(top, adj-adj, top, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(quark, nc-nom, quark, [n-1]), ex_si(prédit, vpp-ver:pper, prédit, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1386, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(réalisation, nc-nom, réalisation, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(voyante, adj-adj, voyante, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Tevatron', nc-nam, 'Tevatron', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(découverte, nc-nom, découverte, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(du, p+d-prp:det, du, [let-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,n,n)-1]), ex_si(quark, et-nom, quark, [n-1]), ex_si(top, nc-nom, top, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rempli, vpp-ver:pper, rempli, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(espace, nc-nom, espace, [n-1]), ex_si(vide, adj-adj, vide, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(quarks, nc-nom, quarks, [n-1]), ex_si(alloué, vpp-ver:pper, alloué, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tableau, nc-nom, tableau, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(particules, nc-nom, particules, [n-1]), ex_si(fondamentales, adj-adj, fondamentales, [dl(0,n,n)-1]), ex_si(connu, vpp-ver:pper, connu, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1387, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(quark, et-nom, quark, [n-1]), ex_si(top, adj-adj, top, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(dernier, adj-adj, dernier, [dr(0,n,n)-1]), ex_si(quark, nc-nom, quark, [n-1]), ex_si(prévu, vpp-ver:pper, prévu, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(théorie, nc-nom, théorie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(modèle, nc-nom, modèle, [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1388, Result) :-
      prob_parse([ ex_si('Nous', cls-pro:per, 'Nous', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avons, v-ver:pres, avons, [dr(0,dl(0,np,s),np)-1]), ex_si(aucune, det-pro:ind, aucune, [dr(0,np,n)-1]), ex_si(idée, nc-nom, idée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(comprise, vpp-ver:pper, comprise, [dr(0,dl(0,n,n),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si('300.000', det-num, '300.000', [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(1, det-num, 1, [dr(0,np,n)-1]), ex_si(milliard, nc-nom, milliard, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Big', npp-nam, 'Big', [dr(0,n,n)-1]), ex_si('Bang', npp-nam, 'Bang', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(flou, adj-adj, flou, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1389, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Big', npp-nam, 'Big', [dr(0,n,n)-1]), ex_si('Bang', npp-nam, 'Bang', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(explosion, nc-nom, explosion, [n-1]), ex_si(primordiale, adj-adj, primordiale, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,dia(0,box(0,n))),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(univers, nc-nom, univers, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1390, Result) :-
      prob_parse([ ex_si('Garry', npp-nam, 'Garry', [dr(0,np,np)-1]), ex_si('Norris', npp-nam, 'Norris', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(directeur, nc-nom, directeur, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(logiciels, nc-nom, logiciels, [n-1]), ex_si(chez, p-prp, chez, [dr(0,dl(0,n,n),np)-1]), ex_si('IBM', npp-abr, 'IBM', [dr(0,np,np)-1]), ex_si('Corp', npp-nam, 'Corp', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(devait, v-ver:impf, devait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(interrogé, vpp-ver:pper, interrogé, [dl(0,np,s_pass)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Raleigh', npp-nam, 'Raleigh', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Caroline', npp-nam, 'Caroline', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Nord', npp-nam, 'Nord', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1391, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(négocié, vpp-ver:pper, négocié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(importants, adj-adj, importants, [dr(0,n,n)-1]), ex_si(contrats, nc-nom, contrats, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('Windows', npp-nam, 'Windows', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1995, pro-num, 1995, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(1996, pro-num, 1996, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1392, Result) :-
      prob_parse([ ex_si('Windows', npp-nam, 'Windows', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1393, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Bahreïn', npp-nam, 'Bahreïn', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(membres, nc-nom, membres, [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,np,np),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('CCG', npp-abr, 'CCG', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(organisation, nc-nom, organisation, [n-1]), ex_si(régionale, adj-adj, régionale, [dl(0,n,n)-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(regroupe, v-ver:pres, regroupe, [dr(0,dl(0,np,s),np)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [n-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Émirats', nc-nam, 'Émirats', [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(unis, adj-adj, unis, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Oman', npp-nam, 'Oman', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1394, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),n)-1]), ex_si('Arabie', npp-nam, 'Arabie', [np-1]), ex_si(saoudite, adj-adj, saoudite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Koweït', npp-nam, 'Koweït', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Émirats', nc-nam, 'Émirats', [n-1]), ex_si(arabes, adj-adj, arabes, [dl(0,n,n)-1]), ex_si(unis, adj-adj, unis, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Qatar', npp-nam, 'Qatar', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Oman', npp-nam, 'Oman', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,n,n),n)-1]), ex_si('Bahreïn', npp-nam, 'Bahreïn', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1395, Result) :-
      prob_parse([ ex_si('Et', cc-kon, 'Et', [dr(0,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cinéastes, nc-nom, cinéastes, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(tenu, vpp-ver:pper, tenu, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(compte, nc-nom, compte, [np-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(certains, pro-pro:ind, certains, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(consultants, nc-nom, consultants, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(payés, vpp-ver:pper, payés, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conseiller, nc-nom, conseiller, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(notamment, adv-adv, notamment, [dr(0,np,np)-1]), ex_si(le, det-det:art, le, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(respecté, vpp-ver:pper, respecté, [dr(0,n,n)-1]), ex_si(couple, nc-nom, couple, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(spécialistes, nc-nom, spécialistes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(comètes, nc-nom, comètes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(astéroïdes, nc-nom, astéroïdes, [n-1]), ex_si('Carolyn', npp-nam, 'Carolyn', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,dia(0,box(0,n)),n),dl(0,n,n)),dl(0,dia(0,box(0,n)),n))-1]), ex_si(feu, nc-nom, feu, [dr(0,np,np)-1]), ex_si('Eugene', npp-nam, 'Eugene', [dr(0,np,np)-1]), ex_si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1396, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(comète, nc-nom, comète, [n-1]), ex_si('Shoemaker-Levy', npp-nam, 'Shoemaker-Levy', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Carolyn', npp-nam, 'Carolyn', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(astronome, nc-nom, astronome, [n-1]), ex_si('David', npp-nam, 'David', [dl(0,n,n)-1]), ex_si('H.', npp-abr, 'H.', [dl(0,n,n)-1]), ex_si('Levy', npp-nam, 'Levy', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1397, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(engin, nc-nom, engin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('1.700', det-num, '1.700', [dr(0,np,n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(renommé, vpp-ver:pper, renommé, [dr(0,dl(0,np,s_pass),np)-1]), ex_si('NEAR', npp-nam, 'NEAR', [dr(0,np,np)-1]), ex_si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(honneur, nc-nom, honneur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(défunt, nc-nom, défunt, [dr(0,n,n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Eugene', npp-nam, 'Eugene', [dl(0,n,n)-1]), ex_si('M.', nc-abr, 'M.', [dl(0,n,n)-1]), ex_si('Shoemaker', npp-nam, 'Shoemaker', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(pionnier, nc-nom, pionnier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étude, nc-nom, étude, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(impacts, nc-nom, impacts, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(astéroïdes, nc-nom, astéroïdes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(comètes, nc-nom, comètes, [dr(0,dl(0,n,n),n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(planètes, nc-nom, planètes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1398, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(comète, nc-nom, comète, [n-1]), ex_si('Shoemaker-Levy', npp-nam, 'Shoemaker-Levy', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(découverte, vpp-ver:pper, découverte, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Shoemaker', npp-nam, 'Shoemaker', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(femme, nc-nom, femme, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Carolyn', npp-nam, 'Carolyn', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(astronome, nc-nom, astronome, [n-1]), ex_si('David', npp-nam, 'David', [dl(0,n,n)-1]), ex_si('H.', npp-abr, 'H.', [dl(0,n,n)-1]), ex_si('Levy', npp-nam, 'Levy', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1399, Result) :-
      prob_parse([ ex_si('EVERGLADES', nc-nom, 'EVERGLADES', [dr(0,np,np)-1]), ex_si('NATIONAL', adj-adj, 'NATIONAL', [dl(0,n,n)-1]), ex_si('PARK', npp-nam, 'PARK', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('Par', p-prp, 'Par', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(journée, nc-nom, journée, [n-1]), ex_si(claire, adj-adj, claire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(chaude, adj-adj, chaude, [dl(0,n,n)-1]), ex_si(récemment, adv-adv, récemment, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Dr', nc-abr, 'Dr', [n-1]), ex_si('Thomas', npp-nam, 'Thomas', [dl(0,n,n)-1]), ex_si('Armentano', npp-nam, 'Armentano', [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(frayé, vpp-ver:pper, frayé, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chemin, nc-nom, chemin, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(travers, nc-nom, travers, [n-1]), ex_si(un, det-det:art, un, [n-1]), ex_si(peuplement, nc-nom, peuplement, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(mangroves, nc-nom, mangroves, [dr(0,dl(0,n,n),n)-1]), ex_si(rouges, adj-adj, rouges, [n-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(bord, nc-nom, bord, [n-1]), ex_si(sud, adj-adj, sud, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(péninsule, nc-nom, péninsule, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pied, nc-nom, pied, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(étendue, nc-nom, étendue, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prairie, nc-nom, prairie, [n-1]), ex_si(marneuse, adj-adj, marneuse, [dl(0,n,n)-1]), ex_si(sèche, adj-adj, sèche, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,np,n)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(os, nc-nom, os, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(jonchée, vpp-ver:pper, jonchée, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(dizaines, nc-num, dizaines, [dr(0,pp_de,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(platanes, nc-nom, platanes, [dr(0,dl(0,n,n),n)-1]), ex_si(déracinés, vpp-ver:pper, déracinés, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(décolorés, vpp-ver:pper, décolorés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soleil, nc-nom, soleil, [dr(0,np,n)-1]), ex_si('.', ponct-pun, '.', [n-1])], Result).
sent(1400, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1401, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(comptait, v-ver:impf, comptait, [dr(0,dl(0,np,s),np)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('demi-million', nc-nom, 'demi-million', [dr(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(créé, vpp-ver:pper, créé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1947, pro-num, 1947, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(6, det-num, 6, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(compter, vinf-ver:infi, compter, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(ou, cc-kon, ou, [n-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si('d\'', p-prp, 'd\'', [np-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(2050, adj-num, 2050, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1402, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1403, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(administration, nc-nom, administration, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('South', npp-nam, 'South', [dr(0,n,n)-1]), ex_si('Florida', npp-nam, 'Florida', [dr(0,n,n)-1]), ex_si('Water', npp-nam, 'Water', [dr(0,n,n)-1]), ex_si('Management', npp-nam, 'Management', [dr(0,n,n)-1]), ex_si('District', npp-nam, 'District', [n-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(devoir, vinf-ver:infi, devoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(décider, vinf-ver:infi, décider, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(prochain, adj-adj, prochain, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(procéder, vinf-ver:infi, procéder, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(non, adv-adv, non, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(achat, nc-nom, achat, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(communauté, nc-nom, communauté, [n-1]), ex_si(connue, vpp-ver:pper, connue, [dr(0,dl(0,n,n),pp)-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nom, nc-nom, nom, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(8, pro-num, 8, [dr(0,np,n)-1]), ex_si(1, adj-num, 1, [dr(0,n,n)-1]), ex_si('/', ponct-sym, '/', [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si('2-Square-Mile', npp-nam, '2-Square-Mile', [dr(0,n,n)-1]), ex_si('Area', npp-nam, 'Area', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(juste, adv-adv, juste, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1404, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parc, nc-nom, parc, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Everglades', npp-nam, 'Everglades', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(situé, vpp-ver:pper, situé, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1405, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(12, det-num, 12, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(initiaux, adj-adj, initiaux, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(fondation, nc-nom, fondation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1406, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1407, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(16, adj-num, 16, [dr(0,n,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(formaient, v-ver:impf, formaient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Pacte', nc-nam, 'Pacte', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Varsovie', npp-nam, 'Varsovie', [np-1]), ex_si(rival, nc-nom, rival, [dl(0,np,np)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(convenu, vpp-ver:pper, convenu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,np,pp_de)-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(équipements, nc-nom, équipements, [n-1]), ex_si(autorisés, vpp-ver:pper, autorisés, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(application, nc-nom, application, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(traité, nc-nom, traité, [n-1]), ex_si(initial, adj-adj, initial, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1408, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1409, Result) :-
      prob_parse([ ex_si('Allusion', nc-nom, 'Allusion', [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(proposition, nc-nom, proposition, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grèce', npp-nam, 'Grèce', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(différences, nc-nom, différences, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(alliance, nc-nom, alliance, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Mme', nc-abr, 'Mme', [dr(0,np,np)-1]), ex_si('Albright', npp-nam, 'Albright', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(variété, nc-nom, variété, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(idées, nc-nom, idées, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(divers, adj-adj, divers, [dr(0,n,n)-1]), ex_si(19, adj-num, 19, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(membres, nc-nom, membres, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1410, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('OTAN', npp-abr, 'OTAN', [n-1]), ex_si(compte, v-ver:pres, compte, [dr(0,dl(0,np,s),np)-1]), ex_si(16, det-num, 16, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1411, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(principales, adj-adj, principales, [dr(0,n,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(enchères, nc-nom, enchères, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sotheby\'s', npp-nam, 'Sotheby\'s', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(empêtrées, vpp-ver:pper, empêtrées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(scandale, nc-nom, scandale, [n-1]), ex_si(embarrassant, adj-adj, embarrassant, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si(fixation, nc-nom, fixation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [dr(0,dl(0,n,n),n)-1]), ex_si(',', ponct-pun, ',', [n-1]), ex_si('Phillips', npp-nam, 'Phillips', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Londres', npp-nam, 'Londres', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(provoque, v-ver:pres, provoque, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(émoi, nc-nom, émoi, [n-1]), ex_si(considérable, adj-adj, considérable, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(effort, nc-nom, effort, [n-1]), ex_si(ostensible, adj-adj, ostensible, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(coûteux, adj-adj, coûteux, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réinventer, vinf-ver:infi, réinventer, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(acteur, nc-nom, acteur, [n-1]), ex_si(important, adj-adj, important, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1412, Result) :-
      prob_parse([ ex_si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(enchères, nc-nom, enchères, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1413, Result) :-
      prob_parse([ ex_si('NUCOR', npp-abr, 'NUCOR', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pionnier, nc-nom, pionnier, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si(géante, adj-adj, géante, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(laquelle, prorel-pro:rel, laquelle, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(versé, vpp-ver:pper, versé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coulée, nc-nom, coulée, [n-1]), ex_si(continue, adj-adj, continue, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1414, Result) :-
      prob_parse([ ex_si('Nucor', npp-nam, 'Nucor', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pionnier, nc-nom, pionnier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1415, Result) :-
      prob_parse([ ex_si('NUCOR', npp-abr, 'NUCOR', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(point, nc-nom, point, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si(géante, adj-adj, géante, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(lequel, prorel-pro:rel, lequel, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),dr(0,s,dia(1,box(1,pp))))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(versé, vpp-ver:pper, versé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coulée, nc-nom, coulée, [n-1]), ex_si(continue, adj-adj, continue, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1416, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(procédé, nc-nom, procédé, [n-1]), ex_si('NUCOR', npp-nam, 'NUCOR', [dl(0,n,n)-1]), ex_si(coule, v-ver:pres, coule, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(brames, nc-nom, brames, [n-1]), ex_si(minces, adj-adj, minces, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1417, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(technologie, nc-nom, technologie, [n-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(courante, adj-adj, courante, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('mini-aciéries', nc-nom, 'mini-aciéries', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(coulée, nc-nom, coulée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(brames, nc-nom, brames, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(minces, adj-adj, minces, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(développée, vpp-ver:pper, développée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('SMS', npp-abr, 'SMS', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dr(0,dl(0,n,n),pp_par),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('NUCOR', npp-nam, 'NUCOR', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1418, Result) :-
      prob_parse([ ex_si('SMS', npp-abr, 'SMS', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(procédé, nc-nom, procédé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coulée, nc-nom, coulée, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1419, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(procédé, nc-nom, procédé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si(géante, adj-adj, géante, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('NUCOR', npp-nam, 'NUCOR', [np-1]), ex_si(permettrait, v-ver:cond, permettrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si('10%.', pro-num, '10%.', [dr(0,np,n)-1])], Result).
sent(1420, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(procédé, nc-nom, procédé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si(géante, adj-adj, géante, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('NUCOR', npp-nam, 'NUCOR', [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(réduire, vinf-ver:infi, réduire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si('%.', nc-abr, '%.', [n-1])], Result).
sent(1421, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(fours, nc-nom, fours, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(arc, nc-nom, arc, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(brûlent, v-ver:pres, brûlent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ferraille, nc-nom, ferraille, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(formé, vpp-ver:pper, formé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(brames, nc-nom, brames, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(pouces, nc-nom, pouces, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(épaisseur, nc-nom, épaisseur, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(comprimées, vpp-ver:pper, comprimées, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(fini, vpp-ver:pper, fini, [dl(0,n,n)-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mince, adj-adj, mince, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1422, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(ferraille, nc-nom, ferraille, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(liquéfiée, vpp-ver:pper, liquéfiée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fours, nc-nom, fours, [n-1]), ex_si(électriques, adj-adj, électriques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1423, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(fours, nc-nom, fours, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(arc, nc-nom, arc, [n-1]), ex_si(électrique, adj-adj, électrique, [dl(0,n,n)-1]), ex_si(brûlent, v-ver:pres, brûlent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(ferraille, nc-nom, ferraille, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(fusion, nc-nom, fusion, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(formé, vpp-ver:pper, formé, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(brames, nc-nom, brames, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(seulement, adv-adv, seulement, [dr(0,np,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(pouces, nc-nom, pouces, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(épaisseur, nc-nom, épaisseur, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(immédiatement, adv-adv, immédiatement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(comprimées, vpp-ver:pper, comprimées, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(fini, vpp-ver:pper, fini, [dl(0,n,n)-1]), ex_si(encore, adv-adv, encore, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mince, adj-adj, mince, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1424, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(fini, vpp-ver:pper, fini, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(produit, vpp-ver:pper, produit, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,n)-1]), ex_si(compression, nc-nom, compression, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1425, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(processus, nc-nom, processus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(tirage, nc-nom, tirage, [n-1]), ex_si(unique, adj-adj, unique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),dr(0,dl(0,n,n),dl(0,n,n)))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1426, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(tirage, nc-nom, tirage, [n-1]), ex_si(unique, adj-adj, unique, [dl(0,n,n)-1]), ex_si(réduit, v-ver:pres, réduit, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1427, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(procédé, nc-nom, procédé, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(gourmand, adj-adj, gourmand, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(capitaux, nc-nom, capitaux, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si(traditionnelle, adj-adj, traditionnelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(dépend, v-ver:pres, dépend, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(approvisionnement, nc-nom, approvisionnement, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(coûteux, adj-adj, coûteux, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(ferraille, nc-nom, ferraille, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1428, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(technologie, nc-nom, technologie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(gourmande, adj-adj, gourmande, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(capitaux, nc-nom, capitaux, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1429, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(beaucoup, adv-adv, beaucoup, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(moins, adv-adv, moins, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(gourmande, vpr-ver:ppre, gourmande, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(capitaux, nc-nom, capitaux, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si(traditionnelle, adj-adj, traditionnelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(dépend, v-ver:pres, dépend, [dr(0,dl(0,np,s),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(approvisionnement, nc-nom, approvisionnement, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(coûteux, adj-adj, coûteux, [dr(0,dl(0,n,n),pp)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(ferraille, nc-nom, ferraille, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(électricité, nc-nom, électricité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1430, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si(nécessite, v-ver:pres, nécessite, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(énergie, nc-nom, énergie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ferraille, nc-nom, ferraille, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1431, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(envisagent, v-ver:pres, envisagent, [dr(0,dl(0,np,s),np)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(planifient, v-ver:pres, planifient, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(telles, adj-adj, telles, [dr(0,n,n)-1]), ex_si(usines, nc-nom, usines, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),np)-1]), ex_si(':', ponct-pun, ':', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(consortium, nc-nom, consortium, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('TRICO', npp-nam, 'TRICO', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('British', npp-nam, 'British', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sumitomo', npp-nam, 'Sumitomo', [dr(0,np,np)-1]), ex_si('Metal', npp-nam, 'Metal', [dr(0,np,np)-1]), ex_si('Industries', npp-nam, 'Industries', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1432, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(aura, v-ver:futu, aura, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(coentreprise, nc-nom, coentreprise, [n-1]), ex_si('américano-britannique-japonaise', adj-adj, 'américano-britannique-japonaise', [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),np)-1]), ex_si('Trico', npp-nam, 'Trico', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1433, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(démographique, adj-adj, démographique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('3,9', det-num, '3,9', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(1980, adj-num, 1980, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(parmi, p-prp, parmi, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(élevés, vpp-ver:pper, élevés, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1434, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(autrefois, adv-adv, autrefois, [dl(1,s,s)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('3,9', det-num, '3,9', [dr(0,np,n)-1]), ex_si('%.', nc-abr, '%.', [n-1])], Result).
sent(1435, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(planification, nc-nom, planification, [n-1]), ex_si(familiale, adj-adj, familiale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(réussite, nc-nom, réussite, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(engagement, nc-nom, engagement, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1436, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(gouvernemental, adj-adj, gouvernemental, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1437, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(garde, nc-nom, garde, [n-1]), ex_si(forestier, adj-adj, forestier, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(24, det-num, 24, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(balle, nc-nom, balle, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(tête, nc-nom, tête, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(visage, nc-nom, visage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épaule, nc-nom, épaule, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1438, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(tirer, vinf-ver:infi, tirer, [dl(0,np,s_inf)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(tuer, vinf-ver:infi, tuer, [dl(0,np,s_inf)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(instituée, vpp-ver:pper, instituée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(africains, adj-adj, africains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1439, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1989, pro-num, 1989, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CITES', npp-abr, 'CITES', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Convention', npp-nam, 'Convention', [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(espèces, nc-nom, espèces, [n-1]), ex_si(menacées, vpp-ver:pper, menacées, [dr(0,dl(0,n,n),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(extinction, nc-nom, extinction, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(interdit, vpp-ver:pper, interdit, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivoire, nc-nom, ivoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1440, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivoire, nc-nom, ivoire, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(interdit, vpp-ver:pper, interdit, [dl(0,np,s_pass)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,s,s),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(convention, nc-nom, convention, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1989, pro-num, 1989, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1441, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chiffre, nc-nom, chiffre, [n-1]), ex_si(stupéfiant, adj-adj, stupéfiant, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(milieu, nc-nom, milieu, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('21e', adj-num, '21e', [dr(0,n,n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si('5,7', det-num, '5,7', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(actuellement, adv-adv, actuellement, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1442, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(atteindra, v-ver:futu, atteindra, [dr(0,dl(0,np,s),np)-1]), ex_si(probablement, adv-adv, probablement, [dl(1,s,s)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2050, pro-num, 2050, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1443, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chiffre, nc-nom, chiffre, [n-1]), ex_si(stupéfiant, adj-adj, stupéfiant, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(milieu, nc-nom, milieu, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(siècle, nc-nom, siècle, [n-1]), ex_si(prochain, adj-adj, prochain, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,s,s),np)-1]), ex_si('5,7', det-num, '5,7', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(actuellement, adv-adv, actuellement, [dl(0,np,np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1444, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(actuelle, adj-adj, actuelle, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('5,7', det-num, '5,7', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1445, Result) :-
      prob_parse([ ex_si('Quatorze', det-num, 'Quatorze', [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(européens, adj-adj, européens, [dl(0,n,n)-1]), ex_si(représentant, vpr-ver:ppre, représentant, [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(démographique, adj-adj, démographique, [dl(0,n,n)-1]), ex_si(zéro, adj-num, zéro, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Finlande', npp-nam, 'Finlande', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dirigent, v-ver:pres, dirigent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(autres, pro-pro:ind, autres, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(direction, nc-nom, direction, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1446, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(dirige, v-ver:pres, dirige, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(démographique, adj-adj, démographique, [dl(0,n,n)-1]), ex_si(zéro, adj-num, zéro, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1447, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(chaotique, adj-adj, chaotique, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(engloutit, v-ver:pres, engloutit, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(amazonienne, adj-adj, amazonienne, [dl(0,n,n)-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(enfin, adv-adv, enfin, [dl(1,s,s)-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(freiné, vpp-ver:pper, freiné, [dl(0,np,s_pass)-1]), ex_si(grâce, nc-nom, grâce, [dr(0,dl(1,s,s),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(élaboré, vpp-ver:pper, élaboré, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(amazoniens, adj-adj, amazoniens, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(éminents, adj-adj, éminents, [dr(0,n,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1448, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(élaboré, vpp-ver:pper, élaboré, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(freiner, vinf-ver:infi, freiner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(chaotique, adj-adj, chaotique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(amazonienne, adj-adj, amazonienne, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1449, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(caractéristiques, nc-nom, caractéristiques, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(comprennent, v-ver:pres, comprennent, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(protection, nc-nom, protection, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(environnement, nc-nom, environnement, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suspension, nc-nom, suspension, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(subventions, nc-nom, subventions, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(éleveurs, nc-nom, éleveurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bétail, nc-nom, bétail, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bassin, nc-nom, bassin, [n-1]), ex_si(amazonien, adj-adj, amazonien, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(contrôles, nc-nom, contrôles, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pesticides, nc-nom, pesticides, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1450, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(affectés, vpp-ver:pper, affectés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(pesticides, nc-nom, pesticides, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1451, Result) :-
      prob_parse([ ex_si('Nucor', npp-nam, 'Nucor', [np-1]), ex_si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(procédé, nc-nom, procédé, [n-1]), ex_si('SMS', nc-abr, 'SMS', [dl(0,n,n)-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(donne, v-ver:pres, donne, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avantage, nc-nom, avantage, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(tonne, nc-nom, tonne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Big', npp-nam, 'Big', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1452, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(procédé, nc-nom, procédé, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Nucor', npp-nam, 'Nucor', [np-1]), ex_si(présente, v-ver:pres, présente, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(avantages, nc-nom, avantages, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(termes, nc-nom, termes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1453, Result) :-
      prob_parse([ ex_si('US', npp-abr, 'US', [dr(0,np,np)-1]), ex_si('STEEL', npp-nam, 'STEEL', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(fabricant, nc-nom, fabricant, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(intégré, vpp-ver:pper, intégré, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(envisage, v-ver:pres, envisage, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(construire, vinf-ver:infi, construire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(aciérie, nc-nom, aciérie, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(combattre, vinf-ver:infi, combattre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(propre, adj-adj, propre, [dr(0,n,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(les, det-det:art, les, [dr(0,n,n)-1]), ex_si('mini-aciéries', nc-nom, 'mini-aciéries', [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(connaissent, v-ver:pres, connaissent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1454, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('mini-aciérie', nc-nom, 'mini-aciérie', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('US', npp-abr, 'US', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ohio', npp-nam, 'Ohio', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1455, Result) :-
      prob_parse([ ex_si('US', npp-abr, 'US', [dr(0,np,np)-1]), ex_si('Steel', npp-nam, 'Steel', [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avantage, nc-nom, avantage, [n-1]), ex_si(technique, adj-adj, technique, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('Nucor', npp-nam, 'Nucor', [np-1]), ex_si('puisqu\'une', det-det:art, 'puisqu\'une', [dr(0,dl(0,s,s),s)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,np,n)-1]), ex_si(méthode, nc-nom, méthode, [dr(0,n,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(fabrication, nc-nom, fabrication, [dr(0,dl(0,n,n),n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),np)-1]), ex_si(acier, nc-nom, acier, [dr(0,np,n)-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [n-1]), ex_si(elle, cls-pro:per, elle, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(envisage, v-ver:pres, envisage, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,np),np)-1]), ex_si(coulée, nc-nom, coulée, [dr(0,np,n)-1]), ex_si(en, p-prp, en, [n-1]), ex_si(bande, nc-nom, bande, [dr(0,dl(0,n,n),n)-1]), ex_si(mince, adj-adj, mince, [n-1]), ex_si(',', ponct-pun, ',', [dl(0,n,n)-1]), ex_si(pourrait, v-ver:cond, pourrait, [let-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(un, det-det:art, un, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(acier, nc-nom, acier, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,dl(0,n,n),n)-1]), ex_si(qualité, nc-nom, qualité, [dr(0,dr(0,n,s_q),n)-1]), ex_si(que, cs-kon, que, [n-1]), ex_si(la, det-det:art, la, [dr(0,s_q,np)-1]), ex_si(technique, nc-nom, technique, [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si(brames, nc-nom, brames, [dr(0,dl(0,n,n),n)-1]), ex_si(minces, adj-adj, minces, [n-1]), ex_si(de, p-prp, de, [dl(0,n,n)-1]), ex_si('Nucor', npp-nam, 'Nucor', [dr(0,dl(0,n,n),np)-1]), ex_si('.', ponct-pun, '.', [np-1])], Result).
sent(1456, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(coulée, nc-nom, coulée, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(acier, nc-nom, acier, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(qualité, nc-nom, qualité, [n-1]), ex_si(supérieure, adj-adj, supérieure, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1457, Result) :-
      prob_parse([ ex_si('Frog', npp-nam, 'Frog', [np-1]), ex_si(deviendra, v-ver:futu, deviendra, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(légendaire, adj-adj, légendaire, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(premiers, adj-num, premiers, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,n,n),dia(0,box(0,n))),dr(0,dl(0,n,n),n)),dr(0,dl(0,n,n),dia(0,box(0,n))))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(efficaces, adj-adj, efficaces, [dr(0,n,n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(renifleurs, adj-adj, renifleurs, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(narcotiques, nc-nom, narcotiques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nation, nc-nom, nation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1458, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(renifler, vinf-ver:infi, renifler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(narcotiques, nc-nom, narcotiques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1459, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(dernière, adj-adj, dernière, [dr(0,n,n)-1]), ex_si(décennie, nc-nom, décennie, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(emploi, nc-nom, emploi, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouveauté, nc-nom, nouveauté, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,pp_de,pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nécessité, nc-nom, nécessité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1460, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordre, nc-nom, ordre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1461, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(principalement, adv-adv, principalement, [dr(0,pp,pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(patrouilles, nc-nom, patrouilles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(renifleurs, nc-nom, renifleurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(narcotiques, nc-nom, narcotiques, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acceptée, vpp-ver:pper, acceptée, [dl(0,np,s_pass)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(1980, pro-num, 1980, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1462, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(renifler, vinf-ver:infi, renifler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(narcotiques, nc-nom, narcotiques, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(courante, adj-adj, courante, [dl(0,n,n)-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(1980, pro-num, 1980, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1463, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(principalement, adv-adv, principalement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patrouilles, nc-nom, patrouilles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(renifleurs, nc-nom, renifleurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(narcotiques, nc-nom, narcotiques, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acceptée, vpp-ver:pper, acceptée, [dl(0,np,s_pass)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1464, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(renifler, vinf-ver:infi, renifler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(narcotiques, nc-nom, narcotiques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1465, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(principalement, adv-adv, principalement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(patrouilles, nc-nom, patrouilles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(renifleurs, nc-nom, renifleurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(narcotiques, nc-nom, narcotiques, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(acceptée, vpp-ver:pper, acceptée, [dl(0,np,s_pass)-1]), ex_si('qu\'', adv-adv, 'qu\'', [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1466, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(chiens, nc-nom, chiens, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1467, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêt, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(autoriser, vinf-ver:infi, autoriser, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(argentines, adj-adj, argentines, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gisements, nc-nom, gisements, [n-1]), ex_si(pétrolifères, adj-adj, pétrolifères, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(territoriales, adj-adj, territoriales, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Malouines', adj-nam, 'Malouines', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1468, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(gisements, nc-nom, gisements, [n-1]), ex_si(pétrolifères, adj-adj, pétrolifères, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Malouines', npp-nam, 'Malouines', [dl(0,n,n)-1]), ex_si(nécessite, v-ver:pres, nécessite, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1469, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(apparu, vpp-ver:pper, apparu, [dl(0,n,n)-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fourniture, nc-nom, fourniture, [n-1]), ex_si(limitée, vpp-ver:pper, limitée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pièces, nc-nom, pièces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rechange, nc-nom, rechange, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marine, nc-nom, marine, [n-1]), ex_si(argentine, adj-adj, argentine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(commencée, vpp-ver:pper, commencée, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1470, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nom, 'Défense', [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fournitures, nc-nom, fournitures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1471, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(jeudi, nc-nom, jeudi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rétablir, vinf-ver:infi, rétablir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(diplomatiques, adj-adj, diplomatiques, [dl(0,n,n)-1]), ex_si(complètes, adj-adj, complètes, [dl(0,n,n)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(huit, det-num, huit, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(mené, vpp-ver:pper, mené, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(74, det-num, 74, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Malouines', npp-nam, 'Malouines', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(archipel, nc-nom, archipel, [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(peuplé, vpp-ver:pper, peuplé, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(large, nc-nom, large, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(côtes, nc-nom, côtes, [n-1]), ex_si(argentines, adj-adj, argentines, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(océan, nc-nom, océan, [n-1]), ex_si('Atlantique', npp-nam, 'Atlantique', [dl(0,n,n)-1]), ex_si(sud, adj-adj, sud, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1472, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(relations, nc-nom, relations, [n-1]), ex_si(diplomatiques, adj-adj, diplomatiques, [dl(0,n,n)-1]), ex_si(complètes, adj-adj, complètes, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(rétablies, vpp-ver:pper, rétablies, [dl(0,np,s_pass)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(74, det-num, 74, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1473, Result) :-
      prob_parse([ ex_si('Aujourd\'hui', adv-adv, 'Aujourd\'hui', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(déroule, v-ver:pres, déroule, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tapis, nc-nom, tapis, [n-1]), ex_si(rouge, adj-adj, rouge, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(duc, nc-nom, duc, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(premier, det-num, premier, [dr(0,np,n)-1]), ex_si(visiteur, nc-nom, visiteur, [n-1]), ex_si(royal, adj-adj, royal, [dl(0,n,n)-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si('anglo-argentine', adj-adj, 'anglo-argentine', [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1474, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(duc, nc-nom, duc, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(visiteur, nc-nom, visiteur, [n-1]), ex_si(royal, adj-adj, royal, [dl(0,n,n)-1]), ex_si(officiel, adj-adj, officiel, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1475, Result) :-
      prob_parse([ ex_si('Cependant', adv-adv, 'Cependant', [dr(0,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pourparlers, nc-nom, pourparlers, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(prévus, vpp-ver:pper, prévus, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(courant, nc-nom, courant, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(reprendre, vinf-ver:infi, reprendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(formation, nc-nom, formation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(officiers, nc-nom, officiers, [n-1]), ex_si(argentins, adj-adj, argentins, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(académies, nc-nom, académies, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1476, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(officiers, nc-nom, officiers, [n-1]), ex_si(argentins, adj-adj, argentins, [dl(0,n,n)-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(formés, vpp-ver:pper, formés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(académies, nc-nom, académies, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1477, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(attiré, vpp-ver:pper, attiré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,np,np),n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(800, adj-num, 800, [dr(0,n,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(investissements, nc-nom, investissements, [n-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si(estimés, vpp-ver:pper, estimés, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(afflué, vpp-ver:pper, afflué, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(dernières, adj-adj, dernières, [dr(0,n,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1478, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(attiré, vpp-ver:pper, attiré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(importants, adj-adj, importants, [dr(0,n,n)-1]), ex_si(investissements, nc-nom, investissements, [n-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1479, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(tchèques, adj-adj, tchèques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaques, adj-adj, slovaques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(annoncé, vpp-ver:pper, annoncé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(0,dl(1,s,s),dl(1,s,s))-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(préparer, vinf-ver:infi, préparer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(scission, nc-nom, scission, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(distincts, adj-adj, distincts, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1480, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Tchèques', nc-nam, 'Tchèques', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Slovaques', nc-nam, 'Slovaques', [n-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(scindés, vpp-ver:pper, scindés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si(distincts, adj-adj, distincts, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1481, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(tchèques, adj-adj, tchèques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaques, adj-adj, slovaques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parlements, nc-nom, parlements, [n-1]), ex_si(régionaux, adj-adj, régionaux, [dl(0,n,n)-1]), ex_si(décideraient, v-ver:impf, décideraient, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,n,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(diviser, vinf-ver:infi, diviser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1482, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(parlements, nc-nom, parlements, [n-1]), ex_si(régionaux, adj-adj, régionaux, [dl(0,n,n)-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(décideront, v-ver:futu, décideront, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,n,n)-1]), ex_si(façon, nc-nom, façon, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(diviser, vinf-ver:infi, diviser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si('États', nc-nam, 'États', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1483, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(séparation, nc-nom, séparation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(rares, adj-adj, rares, [dr(0,n,n)-1]), ex_si(points, nc-nom, points, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(consensus, nc-nom, consensus, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(vainqueurs, nc-nom, vainqueurs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(générales, adj-adj, générales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(juin, nc-nom, juin, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [np-1]), ex_si('-le', clo-pro:per, '-le', [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si(civique, adj-adj, civique, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Mouvement', nc-nam, 'Mouvement', [n-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1484, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(tchèques, adj-adj, tchèques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaques, adj-adj, slovaques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(approuvé, vpp-ver:pper, approuvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(assure, v-ver:pres, assure, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(séparation, nc-nom, séparation, [n-1]), ex_si(légale, adj-adj, légale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fédération, nc-nom, fédération, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1485, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(estime, v-ver:pres, estime, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('100.000', det-num, '100.000', [dr(0,np,n)-1]), ex_si('Slovaques', nc-nom, 'Slovaques', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(souche, nc-nom, souche, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [n-1]), ex_si(vivent, v-ver:pres, vivent, [dl(0,np,s)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(renoncer, vinf-ver:infi, renoncer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(citoyenneté, nc-nom, citoyenneté, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(éclaté, vpp-ver:pper, éclaté, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('États', nc-nom, 'États', [n-1]), ex_si(séparés, vpp-ver:pper, séparés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1486, Result) :-
      prob_parse([ ex_si('100.000', det-num, '100.000', [dr(0,np,n)-1]), ex_si('Slovaques', nc-nam, 'Slovaques', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(changer, vinf-ver:infi, changer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(citoyenneté, nc-nom, citoyenneté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1487, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Nouvel', npp-nam, 'Nouvel', [dr(0,n,n)-1]), ex_si('An', nc-nom, 'An', [n-1]), ex_si(1993, adj-num, 1993, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Slovaques', nc-nam, 'Slovaques', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(fin, nc-nom, fin, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(mille, det-num, mille, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(asservissement, nc-nom, asservissement, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Hongrie', npp-nam, 'Hongrie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(sept, det-num, sept, [dr(0,np,n)-1]), ex_si(décennies, nc-nom, décennies, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(tant, adv-adv, tant, [dr(0,n,s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,n)-1]), ex_si(partenaire, nc-nom, partenaire, [n-1]), ex_si(junior, adj-adj, junior, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(célébré, vpp-ver:pper, célébré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(naissance, nc-nom, naissance, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(république, nc-nom, république, [n-1]), ex_si(souveraine, adj-adj, souveraine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(internationalement, adv-adv, internationalement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(reconnue, vpp-ver:pper, reconnue, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1488, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si('1er', adj-num, '1er', [dr(0,n,n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(1993, adj-num, 1993, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(république, nc-nom, république, [n-1]), ex_si(indépendante, adj-adj, indépendante, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1489, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réorganiser, vinf-ver:infi, réorganiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Ecosse', npp-nam, 'Ecosse', [n-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(retiré, vpp-ver:pper, retiré, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1490, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(intention, nc-nom, intention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réorganiser, vinf-ver:infi, réorganiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1491, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(appartements, nc-nom, appartements, [n-1]), ex_si(autonomes, adj-adj, autonomes, [dl(0,n,n)-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fournis, vpp-ver:pper, fournis, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(auberges, nc-nom, auberges, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(emménager, vinf-ver:infi, emménager, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(logement, nc-nom, logement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bénévoles, nc-nom, bénévoles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(formés, vpp-ver:pper, formés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(proximité, nc-nom, proximité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(contact, nc-nom, contact, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('sans-abri', nc-nom, 'sans-abri', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1492, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(efforce, v-ver:pres, efforce, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(contact, nc-nom, contact, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('sans-abri', nc-nom, 'sans-abri', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1493, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(appartements, nc-nom, appartements, [n-1]), ex_si(autonomes, adj-adj, autonomes, [dl(0,n,n)-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fournis, vpp-ver:pper, fournis, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(auberges, nc-nom, auberges, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(emménager, vinf-ver:infi, emménager, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(logement, nc-nom, logement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bénévoles, nc-nom, bénévoles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(formés, vpp-ver:pper, formés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(proximité, nc-nom, proximité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(contact, nc-nom, contact, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('sans-abri', nc-nom, 'sans-abri', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(rues, nc-nom, rues, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1494, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(fournit, v-ver:pres, fournit, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(appartements, nc-nom, appartements, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),n)-1]), ex_si(logement, nc-nom, logement, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(résidents, nc-nom, résidents, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(auberges, nc-nom, auberges, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(besoin, nc-nom, besoin, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1495, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(revenus, nc-nom, revenus, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(friperie, nc-nom, friperie, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(financé, vpp-ver:pper, financé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réinsertion, nc-nom, réinsertion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(toxicomanes, nc-nom, toxicomanes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(alcooliques, nc-nom, alcooliques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1496, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(recettes, nc-nom, recettes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(friperies, nc-nom, friperies, [n-1]), ex_si(financent, v-ver:pres, financent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réinsertion, nc-nom, réinsertion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(toxicomanes, nc-nom, toxicomanes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(alcooliques, nc-nom, alcooliques, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1497, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(rêve, nc-nom, rêve, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Tories', nc-nam, 'Tories', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(contester, vinf-ver:infi, contester, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(supériorité, nc-nom, supériorité, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(travaillistes, nc-nom, travaillistes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(coeur, nc-nom, coeur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(sud, nc-nom, sud, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pays', npp-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effondré, vpp-ver:pper, effondré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Plaid', npp-nam, 'Plaid', [dr(0,np,np)-1]), ex_si('Cymru', npp-nam, 'Cymru', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(nationaliste, adj-adj, nationaliste, [dl(0,n,n)-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(réjouissait, v-ver:impf, réjouissait, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(désormais, adv-adv, désormais, [dr(0,dr(0,np,s_q),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(députés, nc-nom, députés, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vue, nc-nom, vue, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1498, Result) :-
      prob_parse([ ex_si('Plaid', npp-nam, 'Plaid', [dr(0,np,np)-1]), ex_si('Cymru', npp-nam, 'Cymru', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(nationaliste, adj-adj, nationaliste, [dl(0,n,n)-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1499, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(retarder, vinf-ver:infi, retarder, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(embarras, nc-nom, embarras, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Redwood', npp-nam, 'Redwood', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1500, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retardé, vpp-ver:pper, retardé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1501, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étain, nc-nom, étain, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Indonésie', npp-nam, 'Indonésie', [n-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(renouer, vinf-ver:infi, renouer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(principale, adj-adj, principale, [dr(0,n,n)-1]), ex_si(mine, nc-nom, mine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étain, nc-nom, étain, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Tambang', npp-nam, 'Tambang', [dr(0,np,np)-1]), ex_si('Timah', npp-nam, 'Timah', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ayant, vpr-ver:ppre, ayant, [dr(0,dl(0,np,s_ppres),dl(0,np,s_ppart))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(25, det-num, 25, [dr(0,np,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),n)-1]), ex_si(cent, pro-num, cent, [np-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(0,np,np),np)-1]), ex_si(1990, pro-num, 1990, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1502, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Indonésie', npp-nam, 'Indonésie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(réduit, vpp-ver:pper, réduit, [dr(0,dr(0,dl(0,np,s_ppart),pp_de),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(coûts, nc-nom, coûts, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étain, nc-nom, étain, [n-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('25%.', pro-num, '25%.', [dr(0,np,n)-1])], Result).
sent(1503, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Indonésie', npp-nam, 'Indonésie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(troisième, adj-num, troisième, [dr(0,n,n)-1]), ex_si(producteur, nc-nom, producteur, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étain, nc-nom, étain, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Malaisie', npp-nam, 'Malaisie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(disposait, v-ver:impf, disposait, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quota, nc-nom, quota, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exportation, nc-nom, exportation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('28.376', det-num, '28.376', [dr(0,np,n)-1]), ex_si(tonnes, nc-nom, tonnes, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1504, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Indonésie', npp-nam, 'Indonésie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grands, adj-adj, grands, [dr(0,n,n)-1]), ex_si(producteurs, nc-nom, producteurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étain, nc-nom, étain, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1505, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(étain, nc-nom, étain, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Malaisie', npp-nam, 'Malaisie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(subit, v-ver:pres, subit, [dr(0,dl(0,np,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(pire, adj-adj, pire, [dr(0,n,n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(production, nc-nom, production, [n-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(coup, nc-nom, coup, [n-1]), ex_si(dur, adj-adj, dur, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(annonce, nc-nom, annonce, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(retrait, nc-nom, retrait, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Malaysia', npp-nam, 'Malaysia', [dr(0,n,n)-1]), ex_si(mining, et-nam, mining, [dr(0,n,n)-1]), ex_si(corporation, nc-nom, corporation, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dr(0,n,n)-1]), ex_si(producteurs, nc-nom, producteurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étain, nc-nom, étain, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1506, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Malaysia', npp-nam, 'Malaysia', [dr(0,n,n)-1]), ex_si('Mining', npp-nam, 'Mining', [dr(0,n,n)-1]), ex_si('Corp', npp-nam, 'Corp', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1507, Result) :-
      prob_parse([ ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(gros, adj-adj, gros, [dr(0,n,n)-1]), ex_si(producteurs, nc-nom, producteurs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étain, nc-nom, étain, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1508, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(procédures, nc-nom, procédures, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autorisation, nc-nom, autorisation, [n-1]), ex_si(coûteuses, adj-adj, coûteuses, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(différents, adj-adj, différents, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(même, adj-adj, même, [dr(0,n,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1509, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(doivent, v-ver:pres, doivent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(procédures, nc-nom, procédures, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(autorisation, nc-nom, autorisation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1510, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(sentiment, nc-nom, sentiment, [n-1]), ex_si(croissant, adj-adj, croissant, [dl(0,n,n)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(juges, nc-nom, juges, [n-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(criminels, nc-nom, criminels, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(col, nc-nom, col, [n-1]), ex_si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(traités, vpp-ver:pper, traités, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1511, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(criminels, nc-nom, criminels, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(col, nc-nom, col, [n-1]), ex_si(blanc, adj-adj, blanc, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(traités, vpp-ver:pper, traités, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(même, adj-adj, même, [dr(0,dr(0,n,s_q),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1512, Result) :-
      prob_parse([ ex_si('Ces', det-pro:dem, 'Ces', [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(méthodes, nc-nom, méthodes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conception, nc-nom, conception, [n-1]), ex_si(moléculaire, adj-adj, moléculaire, [dl(0,n,n)-1]), ex_si(deviendront, v-ver:pres, deviendront, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(plus, adv-adv, plus, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,pp_de,dl(0,n,n)),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(importantes, adj-adj, importantes, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dr(0,s,s),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(30, det-num, 30, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(représenteront, v-ver:futu, représenteront, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(nouveaux, adj-adj, nouveaux, [dr(0,n,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1513, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(méthodes, nc-nom, méthodes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(conception, nc-nom, conception, [n-1]), ex_si(moléculaire, adj-adj, moléculaire, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisées, vpp-ver:pper, utilisées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1514, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Michael', npp-nam, 'Michael', [n-1]), ex_si('Milken', npp-nam, 'Milken', [dl(0,n,n)-1]), ex_si(apparemment, adv-adv, apparemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(abasourdi, vpp-ver:pper, abasourdi, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(mercredi, nc-nom, mercredi, [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(jugé, vpp-ver:pper, jugé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(plaidé, vpp-ver:pper, plaidé, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mineurs, nc-nom, mineurs, [dl(0,n,n)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(isolés, vpp-ver:pper, isolés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1515, Result) :-
      prob_parse([ ex_si('Milken', npp-nam, 'Milken', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1516, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('Michael', npp-nam, 'Michael', [n-1]), ex_si('Milken', npp-nam, 'Milken', [dl(0,n,n)-1]), ex_si(apparemment, adv-adv, apparemment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(abasourdi, vpp-ver:pper, abasourdi, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(jugé, vpp-ver:pper, jugé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(lesquels, prorel-pro:rel, lesquels, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(plaidé, vpp-ver:pper, plaidé, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mineurs, nc-nom, mineurs, [dl(0,n,n)-1]), ex_si(ni, cc-kon, ni, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(isolés, vpp-ver:pper, isolés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1517, Result) :-
      prob_parse([ ex_si('Milken', npp-nam, 'Milken', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(mineurs, adj-adj, mineurs, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1518, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si(prévu, vpp-ver:pper, prévu, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(normalement, adv-adv, normalement, [dl(1,s,s)-1]), ex_si(utilisé, vpp-ver:pper, utilisé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marine, nc-nom, marine, [n-1]), ex_si(argentine, adj-adj, argentine, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(transporter, vinf-ver:infi, transporter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(matériel, nc-nom, matériel, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(aurait, v-ver:cond, aurait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(presque, adv-adv, presque, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(certainement, adv-adv, certainement, [dl(1,s,s)-1]), ex_si(alimenté, vpp-ver:pper, alimenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Malouines', npp-nam, 'Malouines', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1519, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(habitants, nc-nom, habitants, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Malouines', npp-nam, 'Malouines', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(bloqué, vpp-ver:pper, bloqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marine, nc-nom, marine, [n-1]), ex_si(argentine, adj-adj, argentine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1520, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(lie, v-ver:pres, lie, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(long, adj-adj, long, [dr(0,n,n)-1]), ex_si(terme, nc-nom, terme, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(concessions, nc-nom, concessions, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(partager, vinf-ver:infi, partager, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(pétrolière, adj-adj, pétrolière, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(lever, vinf-ver:infi, lever, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(embargo, nc-nom, embargo, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1521, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(lève, v-ver:pres, lève, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(embargo, nc-nom, embargo, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1522, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('ECGD', npp-abr, 'ECGD', [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(suite, nc-nom, suite, [np-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(offre, nc-nom, offre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('Babcock', npp-nam, 'Babcock', [dl(0,n,n)-1]), ex_si('International', npp-nam, 'International', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fourniture, nc-nom, fourniture, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(équipements, nc-nom, équipements, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(inspection, nc-nom, inspection, [n-1]), ex_si(contrôlés, vpp-ver:pper, contrôlés, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(centrale, nc-nom, centrale, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Atucha', npp-nam, 'Atucha', [np-1]), ex_si('II', adj-num, 'II', [dl(0,np,np)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(construction, nc-nom, construction, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('nord-ouest', nc-nom, 'nord-ouest', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Buenos', npp-nam, 'Buenos', [np-1]), ex_si('Aires', npp-nam, 'Aires', [dl(0,s,txt)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1523, Result) :-
      prob_parse([ ex_si('Babcock', npp-nam, 'Babcock', [dr(0,np,np)-1]), ex_si('International', npp-nam, 'International', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fourni, vpp-ver:pper, fourni, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(expertise, nc-nom, expertise, [n-1]), ex_si(nucléaire, adj-adj, nucléaire, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1524, Result) :-
      prob_parse([ ex_si('Sur', p-prp, 'Sur', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(front, nc-nom, front, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(domestique, adj-adj, domestique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(revenu, nc-nom, revenu, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(12, det-num, 12, [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),n)-1]), ex_si(cent, pro-num, cent, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(914, det-num, 914, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(volume, nc-nom, volume, [n-1]), ex_si(unitaire, adj-adj, unitaire, [dl(0,n,n)-1]), ex_si(légèrement, adv-adv, légèrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1525, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(revenu, nc-nom, revenu, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1526, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(termes, nc-nom, termes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(progression, nc-nom, progression, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(observée, vpp-ver:pper, observée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1527, Result) :-
      prob_parse([ ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(progresse, v-ver:pres, progresse, [dl(0,np,s)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1528, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(particulièrement, adv-adv, particulièrement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(gênant, adj-adj, gênant, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(éleveurs, nc-nom, éleveurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bétail, nc-nom, bétail, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Amazonie', nc-nom, 'Amazonie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(coupent, v-ver:pres, coupent, [dr(0,dl(0,np,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(blanc, nc-nom, blanc, [n-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(vastes, adj-adj, vastes, [dr(0,n,n)-1]), ex_si(étendues, nc-nom, étendues, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(arbres, nc-nom, arbres, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(paître, vinf-ver:infi, paître, [dl(0,np,s_inf)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bétail, nc-nom, bétail, [n-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(boeuf, nc-nom, boeuf, [n-1]), ex_si(destiné, vpp-ver:pper, destiné, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(exporté, vpp-ver:pper, exporté, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(principalement, adv-adv, principalement, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(vers, p-prp, vers, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(développés, vpp-ver:pper, développés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1529, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(éleveurs, nc-nom, éleveurs, [n-1]), ex_si(coupent, v-ver:pres, coupent, [dr(0,dl(0,np,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(blanc, nc-nom, blanc, [n-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(vastes, adj-adj, vastes, [dr(0,n,n)-1]), ex_si(étendues, nc-nom, étendues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(amazonienne, adj-adj, amazonienne, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),np),dl(0,np,s_inf))-1]), ex_si(paître, vinf-ver:infi, paître, [dl(0,np,s_inf)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bétail, nc-nom, bétail, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1530, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(prochaine, adj-adj, prochaine, [dr(0,n,n)-1]), ex_si(étape, nc-nom, étape, [n-1]), ex_si(utile, adj-adj, utile, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(braconnage, nc-nom, braconnage, [n-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pression, nc-nom, pression, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gouvernements, nc-nom, gouvernements, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(présent, nc-nom, présent, [n-1]), ex_si(adopté, vpp-ver:pper, adopté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(attitude, nc-nom, attitude, [n-1]), ex_si(détendue, adj-adj, détendue, [dl(0,n,n)-1]), ex_si(envers, p-prp, envers, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(importation, nc-nom, importation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(interdits, vpp-ver:pper, interdits, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1531, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(lutte, nc-nom, lutte, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(braconnage, nc-nom, braconnage, [n-1]), ex_si(passe, v-ver:pres, passe, [dr(0,dl(0,np,s),pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pressions, nc-nom, pressions, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(gouvernements, nc-nom, gouvernements, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(autorisent, v-ver:pres, autorisent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(importation, nc-nom, importation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(produits, nc-nom, produits, [n-1]), ex_si(interdits, vpp-ver:pper, interdits, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1532, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(variété, nc-nom, variété, [n-1]), ex_si(courante, adj-adj, courante, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(euthanasie, nc-nom, euthanasie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(atteint, v-ver:pres, atteint, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(incapacité, nc-nom, incapacité, [n-1]), ex_si(permanente, adj-adj, permanente, [dl(0,n,n)-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(maladie, nc-nom, maladie, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(phase, nc-nom, phase, [n-1]), ex_si(terminale, adj-adj, terminale, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(retiré, vpp-ver:pper, retiré, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(conjoint, nc-nom, conjoint, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(proche, adj-adj, proche, [dr(0,n,n)-1]), ex_si(parent, nc-nom, parent, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(tuteur, nc-nom, tuteur, [n-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(simplement, adv-adv, simplement, [dr(0,pp,pp)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(médicales, adj-adj, médicales, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(approbation, nc-nom, approbation, [n-1]), ex_si(légale, adj-adj, légale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1533, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(variété, nc-nom, variété, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(euthanasie, nc-nom, euthanasie, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),pp)-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(patient, nc-nom, patient, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(retiré, vpp-ver:pper, retiré, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(maintien, nc-nom, maintien, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(vie, nc-nom, vie, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(approbation, nc-nom, approbation, [n-1]), ex_si(légale, adj-adj, légale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1534, Result) :-
      prob_parse([ ex_si('Leakey', npp-nam, 'Leakey', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(estimé, vpp-ver:pper, estimé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si(sauvage, adj-adj, sauvage, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Kenya', npp-nam, 'Kenya', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si('sous-tend', v-ver:pres, 'sous-tend', [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(touristique, adj-adj, touristique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(450, det-num, 450, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(gérée, vpp-ver:pper, gérée, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(rentable, adj-adj, rentable, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(durable, adj-adj, durable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1535, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si(sauvage, adj-adj, sauvage, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Kenya', npp-nam, 'Kenya', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(gérée, vpp-ver:pper, gérée, [dl(0,np,s_pass)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),n)-1]), ex_si(manière, nc-nom, manière, [n-1]), ex_si(rentable, adj-adj, rentable, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1536, Result) :-
      prob_parse([ ex_si('Chassés', vpp-ver:pper, 'Chassés', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),pp),dr(0,dl(0,np,s),pp)),dr(0,dl(0,np,s),pp))-1]), ex_si(dépouillés, vpp-ver:pper, dépouillés, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(défenses, nc-nom, défenses, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(peau, nc-nom, peau, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(éléphants, nc-nom, éléphants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effondré, vpp-ver:pper, effondré, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si('1,2', det-num, '1,2', [dr(0,np,n)-1]), ex_si(million, nc-nom, million, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('600.000', pro-num, '600.000', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(décennie, nc-nom, décennie, [n-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,np,np),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cites', npp-nam, 'Cites', [n-1]), ex_si(interdise, vs-ver:subp, interdise, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(commerce, nc-nom, commerce, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ivoire, nc-nom, ivoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1537, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(éléphants, nc-nom, éléphants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si('Afrique', npp-nam, 'Afrique', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(décimée, vpp-ver:pper, décimée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1538, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(citent, v-ver:pres, citent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(recherches, nc-nom, recherches, [n-1]), ex_si(savantes, adj-adj, savantes, [dl(0,n,n)-1]), ex_si(montrant, vpr-ver:ppre, montrant, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(jeunes, adj-adj, jeunes, [dr(0,n,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(mixtes, adj-adj, mixtes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(tendance, nc-nom, tendance, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(remettre, vinf-ver:infi, remettre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(débats, nc-nom, débats, [n-1]), ex_si(intellectuels, adj-adj, intellectuels, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1539, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(jeunes, adj-adj, jeunes, [dr(0,n,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(collèges, nc-nom, collèges, [n-1]), ex_si(mixtes, adj-adj, mixtes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(tendance, nc-nom, tendance, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s)))-1]), ex_si(remettre, vinf-ver:infi, remettre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1540, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(collèges, nc-nom, collèges, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mixtes, adj-adj, mixtes, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(susceptibles, adj-adj, susceptibles, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(diplômées, vpp-ver:pper, diplômées, [dl(0,np,s_pass)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(diplômes, nc-nom, diplômes, [n-1]), ex_si(avancés, vpp-ver:pper, avancés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1541, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(susceptibles, adj-adj, susceptibles, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(diplômes, nc-nom, diplômes, [n-1]), ex_si(avancés, vpp-ver:pper, avancés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1542, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(classement, nc-nom, classement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(résultats, nc-nom, résultats, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(baccalauréat, nc-nom, baccalauréat, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(indépendantes, adj-adj, indépendantes, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(analysé, vpp-ver:pper, analysé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Financial', npp-nam, 'Financial', [dr(0,n,n)-1]), ex_si('Times', npp-nam, 'Times', [n-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1543, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Financial', npp-nam, 'Financial', [dr(0,n,n)-1]), ex_si('Times', npp-nam, 'Times', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(analysé, vpp-ver:pper, analysé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(classements, nc-nom, classements, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1544, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(garçons, nc-nom, garçons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(filles, nc-nom, filles, [n-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(séparés, vpp-ver:pper, séparés, [dl(0,np,s_pass)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(éducation, nc-nom, éducation, [n-1]), ex_si(sexuelle, adj-adj, sexuelle, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(collège, nc-nom, collège, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1545, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(garçons, nc-nom, garçons, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(filles, nc-nom, filles, [n-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(séparés, vpp-ver:pper, séparés, [dl(0,np,s_pass)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(collège, nc-nom, collège, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1546, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(infirmière, nc-nom, infirmière, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Michaela', npp-nam, 'Michaela', [dr(0,np,np)-1]), ex_si('Roeder', npp-nam, 'Roeder', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(31, det-num, 31, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(reconnue, vpp-ver:pper, reconnue, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(six, det-num, six, [dr(0,np,n)-1]), ex_si(chefs, nc-nom, chefs, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(accusation, nc-nom, accusation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(homicide, nc-nom, homicide, [n-1]), ex_si(involontaire, adj-adj, involontaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(compassion, nc-nom, compassion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1547, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(infirmière, nc-nom, infirmière, [n-1]), ex_si(allemande, adj-adj, allemande, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(reconnue, vpp-ver:pper, reconnue, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(homicide, nc-nom, homicide, [n-1]), ex_si(involontaire, adj-adj, involontaire, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(compassion, nc-nom, compassion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1548, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(sondage, nc-nom, sondage, [n-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(segments, nc-nom, segments, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si(soutiennent, v-ver:pres, soutiennent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(politiques, nc-nom, politiques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1549, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(public, nc-nom, public, [n-1]), ex_si(soutient, v-ver:pres, soutient, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1550, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(chrétiens, nc-nom, chrétiens, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(nés, vpp-ver:pper, nés, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(nouveau, nc-nom, nouveau, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(religieuses, adj-adj, religieuses, [dl(0,n,n)-1]), ex_si(pensent, v-ver:pres, pensent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(actes, nc-nom, actes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dr(0,dl(0,np,s),np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(compassion, nc-nom, compassion, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conjoints, nc-nom, conjoints, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(parfois, adv-adv, parfois, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(justifiés, vpp-ver:pper, justifiés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1551, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(chrétiens, nc-nom, chrétiens, [n-1]), ex_si(justifient, v-ver:pres, justifient, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(meurtre, nc-nom, meurtre, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(compassion, nc-nom, compassion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1552, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tenté, vpp-ver:pper, tenté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(racheter, vinf-ver:infi, racheter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(biscuits, nc-nom, biscuits, [n-1]), ex_si(berlinoise, adj-adj, berlinoise, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('RJR', npp-abr, 'RJR', [dr(0,np,np)-1]), ex_si('Nabisco', npp-nam, 'Nabisco', [np-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(surenchéri, vpp-ver:pper, surenchéri, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(géant, nc-nom, géant, [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agroalimentaire, nc-nom, agroalimentaire, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('BSN', npp-abr, 'BSN', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1553, Result) :-
      prob_parse([ ex_si('BSN', npp-abr, 'BSN', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(acheté, vpp-ver:pper, acheté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('RJR', npp-abr, 'RJR', [dr(0,np,np)-1]), ex_si('Nabisco', npp-nam, 'Nabisco', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1554, Result) :-
      prob_parse([ ex_si('BAT', npp-nam, 'BAT', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(voulu, vpp-ver:pper, voulu, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(confirmer, vinf-ver:infi, confirmer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(confirmé, vpp-ver:pper, confirmé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(majors, nc-nom, majors, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si('BAT', npp-abr, 'BAT', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('RJ', npp-abr, 'RJ', [dr(0,np,np)-1]), ex_si('Reynolds', npp-nam, 'Reynolds', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(coude, nc-nom, coude, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(coude, nc-nom, coude, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(termes, nc-nom, termes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(investissement, nc-nom, investissement, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1555, Result) :-
      prob_parse([ ex_si('Trois', det-num, 'Trois', [dr(0,np,n)-1]), ex_si(majors, nc-nom, majors, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tabac, nc-nom, tabac, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entrées, vpp-ver:pper, entrées, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancienne, adj-adj, ancienne, [dr(0,n,n)-1]), ex_si('Union', npp-nam, 'Union', [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1556, Result) :-
      prob_parse([ ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(cité, vpp-ver:pper, cité, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(forts, adj-adj, forts, [dr(0,n,n)-1]), ex_si(gains, nc-nom, gains, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(volume, nc-nom, volume, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Allemagne', npp-nam, 'Allemagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Italie', npp-nam, 'Italie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('France', npp-nam, 'France', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Espagne', npp-nam, 'Espagne', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si(centrale, adj-adj, centrale, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(orientale, adj-adj, orientale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Extrême-Orient', npp-nam, 'Extrême-Orient', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Japon', npp-nam, 'Japon', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Corée', npp-nam, 'Corée', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1557, Result) :-
      prob_parse([ ex_si('Philip', npp-nam, 'Philip', [dr(0,np,np)-1]), ex_si('Morris', npp-nam, 'Morris', [np-1]), ex_si(réalise, v-ver:pres, réalise, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(forts, adj-adj, forts, [dr(0,n,n)-1]), ex_si(bénéfices, nc-nom, bénéfices, [n-1]), ex_si(également, adv-adv, également, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Europe', npp-nam, 'Europe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1558, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,dr(0,dr(0,s,s),dr(0,s,s)),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(après, p-prp, après, [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(capture, nc-nom, capture, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Noriega', npp-nam, 'Noriega', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(entendait, v-ver:impf, entendait, [dr(0,dl(0,np,s),np)-1]), ex_si(encore, adv-adv, encore, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(arguments, nc-nom, arguments, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(question, nc-nom, question, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(savoir, vinf-ver:infi, savoir, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(pouvait, v-ver:impf, pouvait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(cité, vpp-ver:pper, cité, [dr(0,dl(0,np,s_pass),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(comparaître, vinf-ver:infi, comparaître, [dl(0,np,s_inf)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(tribunal, nc-nom, tribunal, [n-1]), ex_si(mondial, adj-adj, mondial, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(audience, nc-nom, audience, [n-1]), ex_si(préliminaire, adj-adj, préliminaire, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plainte, nc-nom, plainte, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Panama', npp-nam, 'Panama', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1559, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(cité, vpp-ver:pper, cité, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(comparaître, vinf-ver:infi, comparaître, [dl(0,np,s_inf)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1560, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(condamner, vinf-ver:infi, condamner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(alors, adv-adv, alors, [dr(0,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Soviétiques', nc-nam, 'Soviétiques', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(défier, vinf-ver:infi, défier, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(cet, det-pro:dem, cet, [dr(0,np,n)-1]), ex_si(organisme, nc-nom, organisme, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(défié, vpp-ver:pper, défié, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(condamnation, nc-nom, condamnation, [n-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(embargo, nc-nom, embargo, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Nicaragua', npp-nam, 'Nicaragua', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1561, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(embargo, nc-nom, embargo, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Nicaragua', npp-nam, 'Nicaragua', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1562, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(colonel, nc-nom, colonel, [n-1]), ex_si('Kadhafi', npp-nam, 'Kadhafi', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ouvert, vpp-ver:pper, ouvert, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(séparément, adv-adv, séparément, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(devant, p-prp, devant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(accusant, vpr-ver:ppre, accusant, [dr(0,dr(0,dl(0,np,s_ppres),dl(0,np,s_inf)),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(violé, vpp-ver:pper, violé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1563, Result) :-
      prob_parse([ ex_si('Kadhafi', npp-nam, 'Kadhafi', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accusé, vpp-ver:pper, accusé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(violé, vpp-ver:pper, violé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1564, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cible, nc-nom, cible, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(raids, nc-nom, raids, [n-1]), ex_si(aériens, adj-adj, aériens, [dl(0,n,n)-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1986, pro-num, 1986, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(lié, vpp-ver:pper, lié, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(bombardement, nc-nom, bombardement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(discothèque, nc-nom, discothèque, [n-1]), ex_si(berlinoise, adj-adj, berlinoise, [dl(0,n,n)-1]), ex_si(fréquentée, vpp-ver:pper, fréquentée, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(militaires, nc-nom, militaires, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1565, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(raids, nc-nom, raids, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1566, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(interdire, vinf-ver:infi, interdire, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(punitives, adj-adj, punitives, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(obliger, vinf-ver:infi, obliger, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si('Tripoli', npp-nam, 'Tripoli', [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(livrer, vinf-ver:infi, livrer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(soupçonnés, vpp-ver:pper, soupçonnés, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(exploser, vinf-ver:infi, exploser, [dl(0,np,s_inf)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1988, pro-num, 1988, [np-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(avion, nc-nom, avion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(ligne, nc-nom, ligne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Pan', npp-nam, 'Pan', [dr(0,n,n)-1]), ex_si('Am', npp-nam, 'Am', [n-1]), ex_si('au-dessus', p-prp, 'au-dessus', [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('Lockerbie', npp-nam, 'Lockerbie', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Ecosse', npp-nam, 'Ecosse', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1567, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(injonction, nc-nom, injonction, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1568, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(revendications, nc-nom, revendications, [n-1]), ex_si(bosniaques, adj-adj, bosniaques, [dl(0,n,n)-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(tentatives, nc-nom, tentatives, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(annexion, nc-nom, annexion, [n-1]), ex_si(serbes, adj-adj, serbes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1993, pro-num, 1993, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(portées, vpp-ver:pper, portées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(devant, p-prp, devant, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1569, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entendu, vpp-ver:pper, entendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bosnie', npp-nam, 'Bosnie', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Serbie', npp-nam, 'Serbie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1570, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tranché, vpp-ver:pper, tranché, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Tchad', npp-nam, 'Tchad', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(frontalier, adj-adj, frontalier, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(provoqué, vpp-ver:pper, provoqué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1571, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(frontalier, adj-adj, frontalier, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Tchad', npp-nam, 'Tchad', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Libye', npp-nam, 'Libye', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(tranché, vpp-ver:pper, tranché, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Tchad', npp-nam, 'Tchad', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1572, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(comparaître, vinf-ver:infi, comparaître, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(devant, p-prp, devant, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(otages, nc-nom, otages, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Téhéran', npp-nam, 'Téhéran', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1573, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(otages, nc-nom, otages, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(libérés, vpp-ver:pper, libérés, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Téhéran', npp-nam, 'Téhéran', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1574, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(comparaître, vinf-ver:infi, comparaître, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(devant, p-prp, devant, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,dl(1,s,s))),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(otages, nc-nom, otages, [n-1]), ex_si(américains, adj-adj, américains, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Téhéran', npp-nam, 'Téhéran', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1575, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entendu, vpp-ver:pper, entendu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(appels, nc-nom, appels, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(libération, nc-nom, libération, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(otages, nc-nom, otages, [n-1]), ex_si(détenus, vpp-ver:pper, détenus, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Iran', npp-nam, 'Iran', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1576, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Haye', npp-nam, 'Haye', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composée, vpp-ver:pper, composée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(quinze, det-num, quinze, [dr(0,np,n)-1]), ex_si(juges, nc-nom, juges, [n-1]), ex_si(permanents, adj-adj, permanents, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,np),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(juges, nc-nom, juges, [n-1]), ex_si(désignés, vpp-ver:pper, désignés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(impliquées, vpp-ver:pper, impliquées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(litige, nc-nom, litige, [n-1]), ex_si(considéré, vpp-ver:pper, considéré, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1577, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,cl_y,dl(0,np,s_inf)),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(juges, nc-nom, juges, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1578, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,n,n),n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(internationale, adj-adj, internationale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(justice, nc-nom, justice, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Haye', npp-nam, 'Haye', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composée, vpp-ver:pper, composée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(quinze, det-num, quinze, [dr(0,np,n)-1]), ex_si(juges, nc-nom, juges, [n-1]), ex_si(permanents, adj-adj, permanents, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,np,np),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(juges, nc-nom, juges, [n-1]), ex_si(désignés, vpp-ver:pper, désignés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(impliquées, vpp-ver:pper, impliquées, [dr(0,dl(0,n,n),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(litige, nc-nom, litige, [n-1]), ex_si(considéré, vpp-ver:pper, considéré, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1579, Result) :-
      prob_parse([ ex_si('Deux', det-num, 'Deux', [dr(0,np,n)-1]), ex_si(juges, nc-nom, juges, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(nommés, vpp-ver:pper, nommés, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si(concernées, vpp-ver:pper, concernées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1580, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pouvoir, nc-nom, pouvoir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(appliquer, vinf-ver:infi, appliquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(ordonnances, nc-nom, ordonnances, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,s,s),s)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(décisions, nc-nom, décisions, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(traditionnellement, adv-adv, traditionnellement, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(certain, adj-adj, certain, [dr(0,n,n)-1]), ex_si(poids, nc-nom, poids, [n-1]), ex_si(diplomatique, adj-adj, diplomatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1581, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(décisions, nc-nom, décisions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cour', npp-nam, 'Cour', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(poids, nc-nom, poids, [n-1]), ex_si(diplomatique, adj-adj, diplomatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1582, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(premières, adj-num, premières, [dr(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,n,n),dia(0,box(0,n))),dr(0,dl(0,n,n),n)),dr(0,dl(0,n,n),dia(0,box(0,n))))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(anciennes, adj-adj, anciennes, [dr(0,n,n)-1]), ex_si(décisions, nc-nom, décisions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(concerne, v-ver:pres, concerne, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(incident, nc-nom, incident, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(canal, nc-nom, canal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corfou', npp-nam, 'Corfou', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1946, pro-num, 1946, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(lorsque, cs-kon, lorsque, [dr(0,dl(1,s,s),s)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(destroyers, nc-nom, destroyers, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(heurté, vpp-ver:pper, heurté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mines, nc-nom, mines, [n-1]), ex_si(posées, vpp-ver:pper, posées, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Albanais', nc-nam, 'Albanais', [n-1]), ex_si(alors, adv-kon, alors, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(exerçaient, v-ver:impf, exerçaient, [dr(0,dl(0,np,s),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(passage, nc-nom, passage, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(canal, nc-nom, canal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corfou', npp-nam, 'Corfou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1583, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Albanie', npp-nam, 'Albanie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(incident, nc-nom, incident, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Corfou', npp-nam, 'Corfou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(duré, vpp-ver:pper, duré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(longtemps, adv-adv, longtemps, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1584, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jugé, vpp-ver:pper, jugé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1948, pro-num, 1948, [np-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Albanie', npp-nam, 'Albanie', [n-1]), ex_si(devait, v-ver:impf, devait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si('843.947', det-num, '843.947', [dr(0,np,n)-1]), ex_si(livres, nc-nom, livres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1585, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si(1948, pro-num, 1948, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(statué, vpp-ver:pper, statué, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(faveur, nc-nom, faveur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Albanie', npp-nam, 'Albanie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1586, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Honduras', npp-nam, 'Honduras', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Salvador', npp-nam, 'Salvador', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sujet, nc-nom, sujet, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réglé, vpp-ver:pper, réglé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(compromis, nc-nom, compromis, [n-1]), ex_si(élaboré, vpp-ver:pper, élaboré, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('CIJ', npp-abr, 'CIJ', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1587, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Honduras', npp-nam, 'Honduras', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Salvador', npp-nam, 'Salvador', [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(sujet, nc-nom, sujet, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(frontières, nc-nom, frontières, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1588, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(experts, nc-nom, experts, [n-1]), ex_si(estiment, v-ver:pres, estiment, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(seuls, adv-adv, seuls, [dr(0,np,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(volées, vpp-ver:pper, volées, [dl(0,n,n)-1]), ex_si(retrouvent, v-ver:pres, retrouvent, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,dl(1,s,s),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1589, Result) :-
      prob_parse([ ex_si('Seulement', adv-adv, 'Seulement', [dr(0,np,np)-1]), ex_si(5, det-num, 5, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(oeuvres, nc-nom, oeuvres, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(art, nc-nom, art, [n-1]), ex_si(volées, vpp-ver:pper, volées, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(restituées, vpp-ver:pper, restituées, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(propriétaires, nc-nom, propriétaires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1590, Result) :-
      prob_parse([ ex_si('Vingt-huit', det-num, 'Vingt-huit', [dr(0,np,n)-1]), ex_si('chefs-d\'oeuvre', nc-nom, 'chefs-d\'oeuvre', [n-1]), ex_si(français, adj-adj, français, [dl(0,n,n)-1]), ex_si(saisis, vpp-ver:pper, saisis, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nazis, nc-nom, nazis, [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Seconde', adj-num, 'Seconde', [dr(0,n,n)-1]), ex_si('Guerre', nc-nam, 'Guerre', [n-1]), ex_si(mondiale, adj-adj, mondiale, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(tableaux, nc-nom, tableaux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Monet', npp-nam, 'Monet', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Renoir', npp-nam, 'Renoir', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Gauguin', npp-nam, 'Gauguin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(armoire, nc-nom, armoire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(musée, nc-nom, musée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(rapporte, v-ver:pres, rapporte, [dr(0,dl(1,s,s),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(magazine, nc-nom, magazine, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(information, nc-nom, information, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1591, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si('chefs-d\'oeuvre', nc-nom, 'chefs-d\'oeuvre', [n-1]), ex_si(saisis, vpp-ver:pper, saisis, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nazis, nc-nom, nazis, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(retrouvés, vpp-ver:pper, retrouvés, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1592, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ALR', npp-abr, 'ALR', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(fondée, vpp-ver:pper, fondée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(consortium, nc-nom, consortium, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(maisons, nc-nom, maisons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(vente, nc-nom, vente, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,dl(0,n,n),n)-1]), ex_si(enchères, nc-nom, enchères, [n-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,np,np),np)-1]), ex_si('Sotheby\'s', npp-nam, 'Sotheby\'s', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Phillips', npp-nam, 'Phillips', [np-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1593, Result) :-
      prob_parse([ ex_si('Sotheby\'s', npp-nam, 'Sotheby\'s', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Christie\'s', npp-nam, 'Christie\'s', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Phillips', npp-nam, 'Phillips', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fondé, vpp-ver:pper, fondé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('ALR', npp-abr, 'ALR', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1594, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si(municipal, adj-adj, municipal, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(récemment, adv-adv, récemment, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(inscrit, vpp-ver:pper, inscrit, [dr(0,dr(0,dl(0,np,s_ppart),np),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(budget, nc-nom, budget, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(somme, nc-nom, somme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('7.300', det-num, '7.300', [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(payer, vinf-ver:infi, payer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(formation, nc-nom, formation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(agent, nc-nom, agent, [n-1]), ex_si('Ron', npp-nam, 'Ron', [dl(0,n,n)-1]), ex_si('Inman', npp-nam, 'Inman', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(chien, nc-nom, chien, [n-1]), ex_si('Waldo', npp-nam, 'Waldo', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1595, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(conseil, nc-nom, conseil, [n-1]), ex_si(municipal, adj-adj, municipal, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(payé, vpp-ver:pper, payé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('7.300', det-num, '7.300', [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(entraîner, vinf-ver:infi, entraîner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(chien, nc-nom, chien, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1596, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(international, adj-adj, international, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Génome', npp-nam, 'Génome', [n-1]), ex_si('Humain', npp-nam, 'Humain', [dl(0,n,n)-1]), ex_si(stimule, v-ver:pres, stimule, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(progrès, nc-nom, progrès, [n-1]), ex_si(rapides, adj-adj, rapides, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(automatisation, nc-nom, automatisation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1597, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Génome', npp-nam, 'Génome', [n-1]), ex_si('Humain', npp-nam, 'Humain', [dl(0,n,n)-1]), ex_si(bénéficie, v-ver:pres, bénéficie, [dr(0,dl(0,np,s),pp)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(progrès, nc-nom, progrès, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(automatisation, nc-nom, automatisation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(laboratoires, nc-nom, laboratoires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1598, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(trois, adj-num, trois, [dr(0,n,n)-1]), ex_si(partenaires, nc-nom, partenaires, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(développé, vpp-ver:pper, développé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(robotique, adj-adj, robotique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(aider, vinf-ver:infi, aider, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(produire, vinf-ver:infi, produire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cellules, nc-nom, cellules, [n-1]), ex_si(clonées, adj-adj, clonées, [dl(0,n,n)-1]), ex_si(nécessaires, adj-adj, nécessaires, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(recherche, nc-nom, recherche, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(génétique, nc-nom, génétique, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1599, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(aident, v-ver:pres, aident, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(scientifiques, nc-nom, scientifiques, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(cloner, vinf-ver:infi, cloner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cellules, nc-nom, cellules, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1600, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('ICRF', npp-abr, 'ICRF', [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(prélève, v-ver:pres, prélève, [dr(0,dl(0,np,s),np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ensuite, adv-adv, ensuite, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(colonies, nc-nom, colonies, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(apparence, nc-nom, apparence, [n-1]), ex_si(saine, adj-adj, saine, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(bloc, nc-nom, bloc, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(96, det-num, 96, [dr(0,np,n)-1]), ex_si(broches, nc-nom, broches, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(ressort, nc-nom, ressort, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(déplace, v-ver:pres, déplace, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cellules, nc-nom, cellules, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(plats, nc-nom, plats, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(analyse, nc-nom, analyse, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(poussées, vpp-ver:pper, poussées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1601, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('ICRF', npp-abr, 'ICRF', [dl(0,n,n)-1]), ex_si(prélève, v-ver:pres, prélève, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(cellules, nc-nom, cellules, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(analyse, nc-nom, analyse, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(poussées, vpp-ver:pper, poussées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1602, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(utilisateur, nc-nom, utilisateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(technologie, nc-nom, technologie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(automatisation, nc-nom, automatisation, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(industrie, nc-nom, industrie, [n-1]), ex_si(électronique, adj-adj, électronique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(notamment, adv-adv, notamment, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si(portables, adj-adj, portables, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(usine, nc-nom, usine, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1603, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(technologie, nc-nom, technologie, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(automatisation, nc-nom, automatisation, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fabrication, nc-nom, fabrication, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(ordinateurs, nc-nom, ordinateurs, [n-1]), ex_si(portables, adj-adj, portables, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1604, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(existe, v-ver:pres, existe, [dr(0,dl(0,np,s),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(charger, vinf-ver:infi, charger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(décharger, vinf-ver:infi, décharger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bandes, nc-nom, bandes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mémoire, nc-nom, mémoire, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(ordonnanceurs, nc-nom, ordonnanceurs, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si('pré-organiser', vinf-ver:infi, 'pré-organiser', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(flux, nc-nom, flux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(donnée, vpp-ver:pper, donnée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1605, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(informatiques, adj-adj, informatiques, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(charger, vinf-ver:infi, charger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(décharger, vinf-ver:infi, décharger, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bandes, nc-nom, bandes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mémoire, nc-nom, mémoire, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1606, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(assemblage, nc-nom, assemblage, [n-1]), ex_si(final, adj-adj, final, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(automobiles, nc-nom, automobiles, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pulvérisation, nc-nom, pulvérisation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(peinture, nc-nom, peinture, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fournisseurs, nc-nom, fournisseurs, [n-1]), ex_si(espèrent, v-ver:pres, espèrent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pouvoir, vinf-ver:infi, pouvoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(développer, vinf-ver:infi, développer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(maintenant, adv-adv, maintenant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(technologie, nc-nom, technologie, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(preuves, nc-nom, preuves, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1607, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(travaux, nc-nom, travaux, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(assemblage, nc-nom, assemblage, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1608, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(caractéristiques, nc-nom, caractéristiques, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(innovantes, adj-adj, innovantes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Thamesport', npp-nam, 'Thamesport', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contrôle, nc-nom, contrôle, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(périphériques, nc-nom, périphériques, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(distance, nc-nom, distance, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1609, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Thamesport', npp-nam, 'Thamesport', [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(contrôler, vinf-ver:infi, contrôler, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(périphériques, nc-nom, périphériques, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(distance, nc-nom, distance, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1610, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(supervise, v-ver:pres, supervise, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(mouvement, nc-nom, mouvement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(toutes, adv-adv, toutes, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(machines, nc-nom, machines, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(port, nc-nom, port, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(compris, vpp-ver:pper, compris, [dr(0,dl(0,cl_y,dl(1,s,s)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(grues, nc-nom, grues, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si('"', ponct-pun:cit, '"', [dr(0,dl(0,n,n),n)-1]), ex_si(monstres, nc-nom, monstres, [n-1]), ex_si('navire-terre', nc-nom, 'navire-terre', [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(14, adj-num, 14, [dr(0,n,n)-1]), ex_si(grues, nc-nom, grues, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(portique, nc-nom, portique, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(déchargent, v-ver:pres, déchargent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conteneurs, nc-nom, conteneurs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(navires, nc-nom, navires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1611, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(robots, nc-nom, robots, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(utilisés, vpp-ver:pper, utilisés, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(terminaux, nc-nom, terminaux, [n-1]), ex_si(maritimes, adj-adj, maritimes, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(déplacer, vinf-ver:infi, déplacer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(conteneurs, nc-nom, conteneurs, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(navires, nc-nom, navires, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1612, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(retarder, vinf-ver:infi, retarder, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mise, nc-nom, mise, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(oeuvre, nc-nom, oeuvre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(embarras, nc-nom, embarras, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('John', npp-nam, 'John', [dr(0,np,np)-1]), ex_si('Redwood', npp-nam, 'Redwood', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1613, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retardé, vpp-ver:pper, retardé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(législation, nc-nom, législation, [n-1]), ex_si(concernant, vpr-ver:ppre, concernant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(changements, nc-nom, changements, [n-1]), ex_si(proposés, vpp-ver:pper, proposés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1614, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(profiter, vinf-ver:infi, profiter, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(interview, nc-nom, interview, [n-1]), ex_si(prévue, vpp-ver:pper, prévue, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(date, nc-nom, date, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(radio, nc-nom, radio, [n-1]), ex_si('BBC', npp-abr, 'BBC', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(défendre, vinf-ver:infi, défendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(création, nc-nom, création, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(écossais, adj-adj, écossais, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(assemblée, nc-nom, assemblée, [n-1]), ex_si(galloise, adj-adj, galloise, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1615, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(longtemps, adv-adv, longtemps, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(soutenu, vpp-ver:pper, soutenu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(demandes, nc-nom, demandes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Ecosse', npp-nam, 'Ecosse', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(assemblées, nc-nom, assemblées, [n-1]), ex_si(indépendantes, adj-adj, indépendantes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1616, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(poursuit, v-ver:pres, poursuit, [dr(0,dl(0,np,s),np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si(projets, nc-nom, projets, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(structure, nc-nom, structure, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(local, adj-adj, local, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(organisant, vpr-ver:ppre, organisant, [dr(0,dl(0,np,s_ppres),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(fictives, adj-adj, fictives, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(unitaires, adj-adj, unitaires, [dl(0,n,n)-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(prochaine, adj-adj, prochaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1617, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(fictives, adj-adj, fictives, [dl(0,n,n)-1]), ex_si(seront, v-ver:futu, seront, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(organisées, vpp-ver:pper, organisées, [dl(0,np,s_pass)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(prochaine, adj-adj, prochaine, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1618, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(prévu, vpp-ver:pper, prévu, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(dès, p-prp, dès, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(travailliste, adj-adj, travailliste, [dl(0,n,n)-1]), ex_si(entrant, vpr-ver:ppre, entrant, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1619, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(mis, vpp-ver:pper, mis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(délai, nc-nom, délai, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1620, Result) :-
      prob_parse([ ex_si('Plusieurs', det-pro:ind, 'Plusieurs', [dr(0,np,n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expérimenté, vpp-ver:pper, expérimenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(coéducation, nc-nom, coéducation, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(revenues, vpp-ver:pper, revenues, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(statut, nc-nom, statut, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(école, nc-nom, école, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(garçons, nc-nom, garçons, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1621, Result) :-
      prob_parse([ ex_si('Certaines', det-pro:ind, 'Certaines', [dr(0,np,n)-1]), ex_si(écoles, nc-nom, écoles, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(expérimenté, vpp-ver:pper, expérimenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(enseignement, nc-nom, enseignement, [n-1]), ex_si(non, adv-adv, non, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(mixte, adj-adj, mixte, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1622, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(gère, v-ver:pres, gère, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(refuge, nc-nom, refuge, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(contrat, nc-nom, contrat, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1623, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(collabore, v-ver:pres, collabore, [dr(0,dl(0,np,s),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comté, nc-nom, comté, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1624, Result) :-
      prob_parse([ ex_si('Chaque', det-pro:ind, 'Chaque', [dr(0,dr(0,s,s),n)-1]), ex_si(nuit, nc-nom, nuit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(minimum, nc-nom, minimum, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(140, det-num, 140, [dr(0,np,n)-1]), ex_si(hommes, nc-nom, hommes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),pp)-1]), ex_si(autrement, adv-adv, autrement, [dl(1,s,s)-1]), ex_si(sans, p-prp, sans, [dr(0,pp,n)-1]), ex_si(abri, nc-nom, abri, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(sans, p-prp, sans, [dr(0,pp,n)-1]), ex_si(abri, nc-nom, abri, [n-1]), ex_si('lorsqu\'', cs-kon, 'lorsqu\'', [dr(0,dl(1,s,s),s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(viennent, v-ver:pres, viennent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(nous, clo-pro:per, nous, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(voir, vinf-ver:infi, voir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dorment, v-ver:pres, dorment, [dl(0,np,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lits, nc-nom, lits, [n-1]), ex_si(propres, adj-adj, propres, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réhabilitation, nc-nom, réhabilitation, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),n)-1]), ex_si(adultes, nc-nom, adultes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', npp-nam, 'Salut', [n-1]), ex_si(ici, adv-adv, ici, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Vallée', npp-nam, 'Vallée', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1625, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('sans-abri', nc-nom, 'sans-abri', [n-1]), ex_si(peuvent, v-ver:pres, peuvent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(dormir, vinf-ver:infi, dormir, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(centres, nc-nom, centres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réhabilitation, nc-nom, réhabilitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Vallée', npp-nam, 'Vallée', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1626, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si('Angleterre', npp-nam, 'Angleterre', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(bénévoles, nc-nom, bénévoles, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(formés, vpp-ver:pper, formés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(travail, nc-nom, travail, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(proximité, nc-nom, proximité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(contact, nc-nom, contact, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(rue, nc-nom, rue, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1627, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(formé, vpp-ver:pper, formé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, p+d-prp:det, des, [dr(0,np,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,n,n),n)-1]), ex_si(domicile, nc-nom, domicile, [n-1]), ex_si(fixe, adj-adj, fixe, [dl(0,n,n)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(travailleurs, nc-nom, travailleurs, [n-1]), ex_si(sociaux, adj-adj, sociaux, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1628, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(recettes, nc-nom, recettes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(friperie, nc-nom, friperie, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(financé, vpp-ver:pper, financé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réinsertion, nc-nom, réinsertion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(toxicomanes, nc-nom, toxicomanes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(alcooliques, nc-nom, alcooliques, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1629, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(friperies, nc-nom, friperies, [n-1]), ex_si(financent, v-ver:pres, financent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(réinsertion, nc-nom, réinsertion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1630, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(alimentaires, adj-adj, alimentaires, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(gérés, vpp-ver:pper, gérés, [dl(0,np,s_pass)-1]), ex_si(directement, adv-adv, directement, [dl(1,s,s)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(diverses, adj-adj, diverses, [dr(0,np,n)-1]), ex_si(villes, nc-nom, villes, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1631, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(gère, v-ver:pres, gère, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(banques, nc-nom, banques, [n-1]), ex_si(alimentaires, adj-adj, alimentaires, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1632, Result) :-
      prob_parse([ ex_si('Aux', p+d-prp:det, 'Aux', [dr(0,dr(0,s,s),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(propose, v-ver:pres, propose, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(abris, nc-nom, abris, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('SDF', nc-abr, 'SDF', [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(plupart, nc-nom, plupart, [dr(0,n,pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(régions, nc-nom, régions, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1633, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(propose, v-ver:pres, propose, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(abris, nc-nom, abris, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('SDF', nc-abr, 'SDF', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1634, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(payé, vpp-ver:pper, payé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(fournit, v-ver:pres, fournit, [dr(0,dl(0,np,s),np)-1]), ex_si(souvent, adv-adv, souvent, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(contribution, nc-nom, contribution, [n-1]), ex_si(incitative, adj-adj, incitative, [dl(0,n,n)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(collectes, nc-nom, collectes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(caritatives, adj-adj, caritatives, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(inciter, vinf-ver:infi, inciter, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(objectif, nc-nom, objectif, [n-1]), ex_si(fixé, vpp-ver:pper, fixé, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1635, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(organise, v-ver:pres, organise, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(transport, nc-nom, transport, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(matériaux, nc-nom, matériaux, [n-1]), ex_si(donnés, vpp-ver:pper, donnés, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1636, Result) :-
      prob_parse([ ex_si('Lors', adv-adv, 'Lors', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(ouragans, nc-nom, ouragans, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Floride', npp-nam, 'Floride', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', npp-nam, 'Salut', [n-1]), ex_si(collecte, v-ver:pres, collecte, [dr(0,dl(0,np,s),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,dl(0,np,s),np),dr(0,dl(0,np,s),np)),dr(0,dl(0,np,s),np))-1]), ex_si(transmet, v-ver:pres, transmet, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('d\'', det-prp, 'd\'', [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(organismes, nc-nom, organismes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(secours, nc-nom, secours, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tout, adv-adv, tout, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,dl(0,np,s),dl(0,np,s)))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(fournissant, vpr-ver:ppre, fournissant, [dr(0,dr(0,dl(0,np,s_ppres),pp_a),np)-1]), ex_si('elle-même', pro-pro:per, 'elle-même', [dl(1,s,s)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(vêtements, nc-nom, vêtements, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(couvertures, nc-nom, couvertures, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(nourriture, nc-nom, nourriture, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(affligés, nc-nom, affligés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1637, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Salut', nc-nam, 'Salut', [n-1]), ex_si(apporte, v-ver:pres, apporte, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(aide, nc-nom, aide, [n-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(ouragans, nc-nom, ouragans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1638, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(deuxième, adj-num, deuxième, [dr(0,n,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(tchèques, adj-adj, tchèques, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaques, adj-adj, slovaques, [dl(0,n,n)-1]), ex_si(nouvellement, adv-adv, nouvellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élus, vpp-ver:pper, élus, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fédération, nc-nom, fédération, [n-1]), ex_si(tchécoslovaque, adj-adj, tchécoslovaque, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(terminée, vpp-ver:pper, terminée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(impasse, nc-nom, impasse, [n-1]), ex_si(hier, adv-adv, hier, [dr(0,dl(1,s,s),n)-1]), ex_si(soir, nc-nom, soir, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1639, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(série, nc-nom, série, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Tchèques', nc-nam, 'Tchèques', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Slovaques', nc-nam, 'Slovaques', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(abouti, vpp-ver:pper, abouti, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1640, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(neuf, det-num, neuf, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Vaclav', npp-nam, 'Vaclav', [dr(0,np,np)-1]), ex_si('Klaus', npp-nam, 'Klaus', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reconnu, vpp-ver:pper, reconnu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dl(0,np,s_pass)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Meciar', npp-nam, 'Meciar', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1641, Result) :-
      prob_parse([ ex_si('Vaclav', npp-nam, 'Vaclav', [dr(0,np,np)-1]), ex_si('Klaus', npp-nam, 'Klaus', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Meciar', npp-nam, 'Meciar', [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parvenus, vpp-ver:pper, parvenus, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1642, Result) :-
      prob_parse([ ex_si('Déjà', adv-adv, 'Déjà', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(durement, adv-adv, durement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(touchée, vpp-ver:pper, touchée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(effondrement, nc-nom, effondrement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Comecon', npp-nam, 'Comecon', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fin, nc-nom, fin, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(froide, adj-adj, froide, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(désintégration, nc-nom, désintégration, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(tchécoslovaque, adj-adj, tchécoslovaque, [dl(0,n,n)-1]), ex_si(fortement, adv-adv, fortement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(intégrée, vpp-ver:pper, intégrée, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(entraîné, vpp-ver:pper, entraîné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(échanges, nc-nom, échanges, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1643, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(marchés, nc-nom, marchés, [n-1]), ex_si(tchèques, adj-adj, tchèques, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(effondrés, vpp-ver:pper, effondrés, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1644, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(républiques, nc-nom, républiques, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(réussi, vpp-ver:pper, réussi, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dl(0,cl_r,dl(0,np,s_inf)),pp)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(base, nc-nom, base, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(coexistence, nc-nom, coexistence, [n-1]), ex_si(future, adj-adj, future, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1645, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(républiques, nc-nom, républiques, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(coexister, vinf-ver:infi, coexister, [dl(0,np,s_inf)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1646, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(intérimaire, adj-adj, intérimaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composé, vpp-ver:pper, composé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Tchèques', nc-nam, 'Tchèques', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Slovaques', nc-nom, 'Slovaques', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(parts, nc-nom, parts, [n-1]), ex_si(égales, adj-adj, égales, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(supervisera, v-ver:futu, supervisera, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(séparation, nc-nom, séparation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1647, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(intérimaire, adj-adj, intérimaire, [dl(0,n,n)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(composé, vpp-ver:pper, composé, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(parts, nc-nom, parts, [n-1]), ex_si(égales, adj-adj, égales, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Tchèques', nc-nam, 'Tchèques', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si('Slovaques', nc-nam, 'Slovaques', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1648, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(nouvellement, adv-adv, nouvellement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élus, vpp-ver:pper, élus, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(républiques, nc-nom, républiques, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(essayer, vinf-ver:infi, essayer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(former, vinf-ver:infi, former, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(rapidement, adv-adv, rapidement, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(intérimaire, adj-adj, intérimaire, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(profondes, adj-adj, profondes, [dr(0,n,n)-1]), ex_si(divergences, nc-nom, divergences, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(futur, adj-adj, futur, [dr(0,n,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(révélées, vpp-ver:pper, révélées, [dl(0,n,n)-1]), ex_si(lors, adv-adv, lors, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(première, adj-num, première, [dr(0,n,n)-1]), ex_si(réunion, nc-nom, réunion, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1649, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(républiques, nc-nom, républiques, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(former, vinf-ver:infi, former, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(intérimaire, adj-adj, intérimaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1650, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),np)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Meciar', npp-nam, 'Meciar', [np-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dr(0,dl(0,n,n),dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Mouvement', npp-nam, 'Mouvement', [n-1]), ex_si(nationaliste, adj-adj, nationaliste, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si('(', ponct-pun, '(', [dr(0,dl(0,n,n),n)-1]), ex_si('HZDS', npp-abr, 'HZDS', [n-1]), ex_si(')', ponct-pun, ')', [let-1]), ex_si(vient, v-ver:pres, vient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(échouer, vinf-ver:infi, échouer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(majorité, nc-nom, majorité, [n-1]), ex_si(globale, adj-adj, globale, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(national, adj-adj, national, [dl(0,n,n)-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(choisir, vinf-ver:infi, choisir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Jozef', npp-nam, 'Jozef', [dr(0,np,np)-1]), ex_si('Prokes', npp-nam, 'Prokes', [np-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gauche, nc-nom, gauche, [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1651, Result) :-
      prob_parse([ ex_si('Vladimir', npp-nam, 'Vladimir', [dr(0,np,np)-1]), ex_si('Meciar', npp-nam, 'Meciar', [np-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(choisir, vinf-ver:infi, choisir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si('Prokes', npp-nam, 'Prokes', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Parti', nc-nam, 'Parti', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(gauche, nc-nom, gauche, [n-1]), ex_si(démocratique, adj-adj, démocratique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1652, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(difficultés, nc-nom, difficultés, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réformes, nc-nom, réformes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(alimenté, vpp-ver:pper, alimenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nationalisme, nc-nom, nationalisme, [n-1]), ex_si(naissant, adj-adj, naissant, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1653, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nationalisme, nc-nom, nationalisme, [n-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(alimenté, vpp-ver:pper, alimenté, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(difficultés, nc-nom, difficultés, [n-1]), ex_si(économiques, adj-adj, économiques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1654, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(automne, nc-nom, automne, [n-1]), ex_si(1992, adj-num, 1992, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1655, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(loi, nc-nom, loi, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(division, nc-nom, division, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Tchécoslovaquie', npp-nam, 'Tchécoslovaquie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(discutée, vpp-ver:pper, discutée, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1656, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(novembre, nc-nom, novembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parlements, nc-nom, parlements, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(voté, vpp-ver:pper, voté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(scission, nc-nom, scission, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(républiques, nc-nom, républiques, [n-1]), ex_si(indépendantes, adj-adj, indépendantes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(1993, adj-num, 1993, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1657, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(parlements, nc-nom, parlements, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(slovaque, adj-adj, slovaque, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(devenir, vinf-ver:infi, devenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(républiques, nc-nom, républiques, [n-1]), ex_si(indépendantes, adj-adj, indépendantes, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(janvier, nc-nom, janvier, [n-1]), ex_si(1993, adj-num, 1993, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1658, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(scission, nc-nom, scission, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(laissé, vpp-ver:pper, laissé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(libre, adj-adj, libre, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(poursuivre, vinf-ver:infi, poursuivre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(élan, nc-nom, élan, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(libre, adj-adj, libre, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1659, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(poursuit, v-ver:pres, poursuit, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(libre, adj-adj, libre, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1660, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(grevée, vpp-ver:pper, grevée, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(forte, adj-adj, forte, [dr(0,n,n)-1]), ex_si(concentration, nc-nom, concentration, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(industries, nc-nom, industries, [n-1]), ex_si(lourdes, adj-adj, lourdes, [dl(0,n,n)-1]), ex_si(orientées, vpp-ver:pper, orientées, [dr(0,dl(0,n,n),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1661, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(industries, nc-nom, industries, [n-1]), ex_si(lourdes, adj-adj, lourdes, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Slovaquie', npp-nam, 'Slovaquie', [n-1]), ex_si(étaient, v-ver:impf, étaient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(orientées, vpp-ver:pper, orientées, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(vers, p-prp, vers, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(marché, nc-nom, marché, [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1662, Result) :-
      prob_parse([ ex_si('Après', p-prp, 'Après', [dr(0,dr(0,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(bataille, nc-nom, bataille, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(compagnies, nc-nom, compagnies, [n-1]), ex_si(pétrolières, adj-adj, pétrolières, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(équatorien, adj-adj, équatorien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(collaborer, vinf-ver:infi, collaborer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si(indigènes, adj-adj, indigènes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1663, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(équatorien, adj-adj, équatorien, [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(collaboré, vpp-ver:pper, collaboré, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(groupes, nc-nom, groupes, [n-1]), ex_si(indigènes, adj-adj, indigènes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1664, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(bassin, nc-nom, bassin, [n-1]), ex_si(amazonien, adj-adj, amazonien, [dl(0,n,n)-1]), ex_si(couvre, v-ver:pres, couvre, [dr(0,dl(0,np,s),np)-1]), ex_si(2, det-num, 2, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(kilomètres, nc-nom, kilomètres, [n-1]), ex_si(carrés, adj-adj, carrés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(région, nc-nom, région, [n-1]), ex_si(12, det-num, 12, [dr(0,dr(0,dl(0,n,n),dl(0,n,n)),n)-1]), ex_si(fois, nc-nom, fois, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(grande, adj-adj, grande, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1665, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(bassin, nc-nom, bassin, [n-1]), ex_si(amazonien, adj-adj, amazonien, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(aussi, adv-adv, aussi, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Californie', npp-nam, 'Californie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1666, Result) :-
      prob_parse([ ex_si('Planter', vinf-ver:infi, 'Planter', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(manioc, nc-nom, manioc, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(combinaison, nc-nom, combinaison, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(légumineuses, nc-nom, légumineuses, [n-1]), ex_si(fixatrices, adj-adj, fixatrices, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(azote, nc-nom, azote, [n-1]), ex_si(protégera, v-ver:pres, protégera, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sols, nc-nom, sols, [n-1]), ex_si(faibles, adj-adj, faibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1667, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(technologies, nc-nom, technologies, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(reconstitution, nc-nom, reconstitution, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(sols, nc-nom, sols, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(développées, vpp-ver:pper, développées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1668, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(agroforesterie, nc-nom, agroforesterie, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(avérée, vpp-ver:pper, avérée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(utilisations, nc-nom, utilisations, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(productives, adj-adj, productives, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(amazoniennes, adj-adj, amazoniennes, [dl(0,n,n)-1]), ex_si(défrichées, vpp-ver:pper, défrichées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1669, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(agroforesterie, nc-nom, agroforesterie, [n-1]), ex_si(représente, v-ver:pres, représente, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(utilisation, nc-nom, utilisation, [n-1]), ex_si(productive, adj-adj, productive, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(amazoniennes, adj-adj, amazoniennes, [dl(0,n,n)-1]), ex_si(défrichées, vpp-ver:pper, défrichées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1670, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,dr(0,s,dl(0,np,s)),np),dl(0,np,s_ppres))-1]), ex_si(donnant, vpr-ver:ppre, donnant, [dr(0,dr(0,dl(0,np,s_ppres),np),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(terres, nc-nom, terres, [n-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(nous, cls-pro:per, nous, [np-1]), ex_si(empêchons, v-ver:pres, empêchons, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(incursions, nc-nom, incursions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Amazonie', nc-nam, 'Amazonie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1671, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(incursions, nc-nom, incursions, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Amazonie', nc-nom, 'Amazonie', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fonction, nc-nom, fonction, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1672, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(annuelles, adj-adj, annuelles, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Brésil', npp-nam, 'Brésil', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(situent, v-ver:pres, situent, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(entre, p-prp, entre, [dr(0,pp,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,np,n),dr(0,np,n)),dr(0,np,n))-1]), ex_si(20, det-num, 20, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(acres, nc-nom, acres, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amazonie', nc-nom, 'Amazonie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('2,5', det-num, '2,5', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),n)-1]), ex_si(acres, nc-nom, acres, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),n)-1]), ex_si(dehors, nc-nom, dehors, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amazonie', nc-nom, 'Amazonie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1673, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(acres, nc-nom, acres, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(sein, nc-nom, sein, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Amazonie', nc-nom, 'Amazonie', [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(détruits, vpp-ver:pper, détruits, [dl(0,np,s_pass)-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1674, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(bûcherons, nc-nom, bûcherons, [n-1]), ex_si(coupent, v-ver:pres, coupent, [dr(0,dl(0,np,s),np)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(blanc, nc-nom, blanc, [n-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(grandes, adj-adj, grandes, [dr(0,n,n)-1]), ex_si(étendues, nc-nom, étendues, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(vendre, vinf-ver:infi, vendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(du, det-prp:det, du, [dr(0,np,n)-1]), ex_si(bois, nc-nom, bois, [n-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(remplacer, vinf-ver:infi, remplacer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(arbres, nc-nom, arbres, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1675, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(arbres, nc-nom, arbres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(forêt, nc-nom, forêt, [n-1]), ex_si(tropicale, adj-adj, tropicale, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(coupés, vpp-ver:pper, coupés, [dl(0,np,s_pass)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(remplacés, vpp-ver:pper, remplacés, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1676, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(expériences, nc-nom, expériences, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(établissement, nc-nom, établissement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fermes, nc-nom, fermes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(eucalyptus, nc-nom, eucalyptus, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pâte, nc-nom, pâte, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(bois, nc-nom, bois, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(développées, vpp-ver:pper, développées, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1677, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(eucalyptus, nc-nom, eucalyptus, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(plantés, vpp-ver:pper, plantés, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(fournir, vinf-ver:infi, fournir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pâte, nc-nom, pâte, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si(bois, nc-nom, bois, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1678, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Digital', npp-nam, 'Digital', [dr(0,np,np)-1]), ex_si('Equipment', npp-nam, 'Equipment', [dr(0,np,np)-1]), ex_si('Corp', npp-nam, 'Corp', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1679, Result) :-
      prob_parse([ ex_si(et, cc-kon, et, [dr(0,s,s)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(autres, adj-adj, autres, [dr(0,n,n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(plaidé, vpp-ver:pper, plaidé, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(coupable, adj-adj, coupable, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(mardi, nc-nom, mardi, [dl(1,s,s)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(siphonné, vpp-ver:pper, siphonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('300.000', det-num, '300.000', [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(informatique, adj-adj, informatique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1680, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Digital', npp-nam, 'Digital', [dr(0,np,np)-1]), ex_si('Equipment', npp-nam, 'Equipment', [dr(0,np,np)-1]), ex_si('Corp', npp-nam, 'Corp', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,np,txt)-1])], Result).
sent(1681, Result) :-
      prob_parse([ ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(siphonné, vpp-ver:pper, siphonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('300.000', det-num, '300.000', [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(entreprise, nc-nom, entreprise, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1682, Result) :-
      prob_parse([ ex_si('Leona', npp-nam, 'Leona', [dr(0,np,np)-1]), ex_si('Helmsley', npp-nam, 'Helmsley', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reine, nc-nom, reine, [n-1]), ex_si(autoproclamée, vpp-ver:pper, autoproclamée, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hôtels, nc-nom, hôtels, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(luxe, nc-nom, luxe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamnée, vpp-ver:pper, condamnée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(mardi, nc-nom, mardi, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1683, Result) :-
      prob_parse([ ex_si('Leona', npp-nam, 'Leona', [dr(0,np,np)-1]), ex_si('Helmsley', npp-nam, 'Helmsley', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamnée, vpp-ver:pper, condamnée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1684, Result) :-
      prob_parse([ ex_si('Leona', npp-nam, 'Leona', [dr(0,np,np)-1]), ex_si('Helmsley', npp-nam, 'Helmsley', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(reine, nc-nom, reine, [n-1]), ex_si(autoproclamée, vpp-ver:pper, autoproclamée, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hôtels, nc-nom, hôtels, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(luxe, nc-nom, luxe, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamnée, vpp-ver:pper, condamnée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(mardi, nc-nom, mardi, [dr(0,pp,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(quatre, det-num, quatre, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1685, Result) :-
      prob_parse([ ex_si('Leona', npp-nam, 'Leona', [dr(0,np,np)-1]), ex_si('Helmsley', npp-nam, 'Helmsley', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(propriétaire, nc-nom, propriétaire, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(hôtels, nc-nom, hôtels, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(luxe, nc-nom, luxe, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1686, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fraude, nc-nom, fraude, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Milken', npp-nam, 'Milken', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamné, vpp-ver:pper, condamné, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1687, Result) :-
      prob_parse([ ex_si('Milken', npp-nam, 'Milken', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(emprisonné, vpp-ver:pper, emprisonné, [dl(0,np,s_pass)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(fraude, nc-nom, fraude, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1688, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(poursuites, nc-nom, poursuites, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(tendance, nc-nom, tendance, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(agressives, adj-adj, agressives, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,n,n))))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),dl(0,n,n)))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,n,n))))))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(peines, nc-nom, peines, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(longues, adj-adj, longues, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(financiers, adj-adj, financiers, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(massives, adj-adj, massives, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('Minkow', npp-nam, 'Minkow', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1689, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(peines, nc-nom, peines, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(financiers, adj-adj, financiers, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(tendance, nc-nom, tendance, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(longues, adj-adj, longues, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1690, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(poursuites, nc-nom, poursuites, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(tendance, nc-nom, tendance, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(agressives, adj-adj, agressives, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,n,n))))),dr(0,s,box(1,dia(1,dr(0,dl(0,np,s),dl(0,n,n)))))),dr(0,s,dia(1,box(1,dr(0,dl(0,np,s),dl(0,n,n))))))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(peines, nc-nom, peines, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(longues, adj-adj, longues, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(financiers, adj-adj, financiers, [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreuses, adj-adj, nombreuses, [dr(0,n,n)-1]), ex_si(victimes, nc-nom, victimes, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(massives, adj-adj, massives, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('Minkow', npp-nam, 'Minkow', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1691, Result) :-
      prob_parse([ ex_si('Faire', vinf-ver:infi, 'Faire', [dr(0,dr(0,dl(0,np,s_inf),pp),dl(0,np,s_inf))-1]), ex_si(perdre, vinf-ver:infi, perdre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(millions, nc-nom, millions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,dl(0,np,s_inf),s),dl(0,np,s_inf))-1]), ex_si(conduire, vinf-ver:infi, conduire, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(peines, nc-nom, peines, [n-1]), ex_si(variant, vpr-ver:ppre, variant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(dix, det-num, dix, [dr(0,np,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dr(0,np,n),dl(0,dr(0,pp_de,np),dr(0,pp_a,n))),dr(0,np,n))-1]), ex_si(vingt, det-num, vingt, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1692, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(affaire, nc-nom, affaire, [n-1]), ex_si('Milken', npp-nam, 'Milken', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(infligée, vpp-ver:pper, infligée, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Milken', npp-nam, 'Milken', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1693, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(infligée, vpp-ver:pper, infligée, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Michael', npp-nam, 'Michael', [dr(0,np,np)-1]), ex_si('Milken', npp-nam, 'Milken', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,n)-1]), ex_si(but, nc-nom, but, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(en, clo-pro:per, en, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_de))))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(exemple, nc-nom, exemple, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1694, Result) :-
      prob_parse([ ex_si('Seule', adv-adv, 'Seule', [dr(0,np,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(preuve, nc-nom, preuve, [n-1]), ex_si(ferme, v-ver:pres, ferme, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lien, nc-nom, lien, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conservation, nc-nom, conservation, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(développement, nc-nom, développement, [n-1]), ex_si(économique, adj-adj, économique, [dl(0,n,n)-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(maintenir, vinf-ver:infi, maintenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(engagement, nc-nom, engagement, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(gens, nc-nom, gens, [n-1]), ex_si(envers, p-prp, envers, [dr(0,dl(0,n,n),np)-1]), ex_si('Campfire', npp-nam, 'Campfire', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(dit, v-ver:pres, dit, [dr(0,dl(1,s,s),np)-1]), ex_si('Cherry', npp-nam, 'Cherry', [dr(0,np,np)-1]), ex_si('Bird', npp-nam, 'Bird', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(coordinateur, nc-nom, coordinateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(faune, nc-nom, faune, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(district, nc-nom, district, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Hurungwe', npp-nam, 'Hurungwe', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1695, Result) :-
      prob_parse([ ex_si('Campfire', npp-nam, 'Campfire', [np-1]), ex_si(aide, v-ver:pres, aide, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(communautés, nc-nom, communautés, [n-1]), ex_si(rurales, adj-adj, rurales, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(argent, nc-nom, argent, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(braconnés, vpp-ver:pper, braconnés, [dl(0,np,s_pass)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),dl(0,n,n))-1]), ex_si(nuisibles, adj-adj, nuisibles, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1696, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(villageois, nc-nom, villageois, [n-1]), ex_si(concernés, vpp-ver:pper, concernés, [dl(0,n,n)-1]), ex_si(découragent, v-ver:pres, découragent, [dr(0,dl(0,np,s),np)-1]), ex_si(activement, adv-adv, activement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(braconnage, nc-nom, braconnage, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(sauvages, adj-adj, sauvages, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(confisquent, v-ver:pres, confisquent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(collets, nc-nom, collets, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(signalent, v-ver:pres, signalent, [dr(0,dl(0,np,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(incidents, nc-nom, incidents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(braconnage, nc-nom, braconnage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(prémunissent, v-ver:pres, prémunissent, [dl(0,cl_r,dl(0,np,s))-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(feux, nc-nom, feux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(brousse, nc-nom, brousse, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(servent, v-ver:pres, servent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(débusquer, vinf-ver:infi, débusquer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(animaux, nc-nom, animaux, [n-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(détruisent, v-ver:pres, détruisent, [dr(0,dl(0,np,s),np)-1]), ex_si(aussi, adv-adv, aussi, [dl(1,s,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(végétation, nc-nom, végétation, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1697, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(villageois, nc-nom, villageois, [n-1]), ex_si(zambiens, adj-adj, zambiens, [dl(0,n,n)-1]), ex_si(mettent, v-ver:pres, mettent, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(place, nc-nom, place, [n-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(comités, nc-nom, comités, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(empêcher, vinf-ver:infi, empêcher, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(braconniers, nc-nom, braconniers, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(pénétrer, vinf-ver:infi, pénétrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(zone, nc-nom, zone, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1698, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(projet, nc-nom, projet, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(réorganiser, vinf-ver:infi, réorganiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(collectivités, nc-nom, collectivités, [n-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Ecosse', npp-nam, 'Ecosse', [n-1]), ex_si(devrait, v-ver:cond, devrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(retiré, vpp-ver:pper, retiré, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Assemblée', nc-nam, 'Assemblée', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(comtés, nc-nom, comtés, [n-1]), ex_si(gallois, adj-adj, gallois, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Convention', nc-nam, 'Convention', [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(locales, adj-adj, locales, [dl(0,n,n)-1]), ex_si(écossaises, adj-adj, écossaises, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1699, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(associations, nc-nom, associations, [n-1]), ex_si(galloises, adj-adj, galloises, [dl(0,n,n)-1]), ex_si(veulent, v-ver:pres, veulent, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(assemblée, nc-nom, assemblée, [n-1]), ex_si(galloise, adj-adj, galloise, [dl(0,n,n)-1]), ex_si(directement, adv-adv, directement, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(élue, vpp-ver:pper, élue, [dl(0,n,n)-1]), ex_si(plutôt, adv-adv, plutôt, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(réorganisation, nc-nom, réorganisation, [n-1]), ex_si(unitaire, adj-adj, unitaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1700, Result) :-
      prob_parse([ ex_si('Même', adv-adv, 'Même', [dr(0,dr(0,s,s),dr(0,s,s))-1]), ex_si(si, cs-kon, si, [dr(0,dr(0,s,s),s)-1]), ex_si(certains, det-pro:ind, certains, [dr(0,np,n)-1]), ex_si(éléments, nc-nom, éléments, [n-1]), ex_si(indiquent, v-ver:pres, indiquent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(assemblée, nc-nom, assemblée, [n-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),n)-1]), ex_si(pièce, nc-nom, pièce, [n-1]), ex_si(maîtresse, nc-nom, maîtresse, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(revendications, nc-nom, revendications, [n-1]), ex_si(nationalistes, adj-adj, nationalistes, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(gagne, v-ver:pres, gagne, [dr(0,dl(0,np,s),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,np,n)-1]), ex_si(terrain, nc-nom, terrain, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(douteux, adj-adj, douteux, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(même, adv-adv, même, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moitié, nc-nom, moitié, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si(le, clo-pro:per, le, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(veuille, vs-ver:subp, veuille, [dr(0,dl(0,np,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1701, Result) :-
      prob_parse([ ex_si('On', cls-pro:per, 'On', [np-1]), ex_si(prévoit, v-ver:pres, prévoit, [dr(0,dl(0,np,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(à, p-prp, à, [dr(0,dr(0,s,s),dl(0,np,s_inf))-1]), ex_si(partir, vinf-ver:infi, partir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(référendum, nc-nom, référendum, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(indépendance, nc-nom, indépendance, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Pays', nc-nam, 'Pays', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Galles', npp-nam, 'Galles', [np-1]), ex_si(recevrait, v-ver:impf, recevrait, [dr(0,dl(0,np,s),np)-1]), ex_si(probablement, adv-adv, probablement, [dr(0,np,np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(part, nc-nom, part, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(population, nc-nom, population, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1702, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(spécialisée, vpp-ver:pper, spécialisée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bourse', nc-nam, 'Bourse', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(condamnée, vpp-ver:pper, condamnée, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(amende, nc-nom, amende, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('480.350', det-num, '480.350', [dr(0,np,n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),n)-1]), ex_si(fraude, nc-nom, fraude, [n-1]), ex_si(boursière, adj-adj, boursière, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(cette, det-pro:dem, cette, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(dissuasif, adj-adj, dissuasif, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1703, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(amende, nc-nom, amende, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(près, adv-adv, près, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('demi-million', nc-nom, 'demi-million', [dr(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(infligée, vpp-ver:pper, infligée, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(société, nc-nom, société, [n-1]), ex_si(spécialisée, vpp-ver:pper, spécialisée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Bourse', nc-nam, 'Bourse', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('New', npp-nam, 'New', [dr(0,np,np)-1]), ex_si('York', npp-nam, 'York', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(faite, vpp-ver:pper, faite, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dl(0,np,s_pass)-1]), ex_si(titre, nc-nom, titre, [n-1]), ex_si(dissuasif, adj-adj, dissuasif, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1704, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(cour, nc-nom, cour, [n-1]), ex_si(fédérale, adj-adj, fédérale, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('A.', npp-abr, 'A.', [dr(0,np,np)-1]), ex_si('Feldman', npp-nam, 'Feldman', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('Palos', npp-nam, 'Palos', [dr(0,np,np)-1]), ex_si('Verdes', npp-nam, 'Verdes', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1705, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(juge, nc-nom, juge, [n-1]), ex_si(fédéral, adj-adj, fédéral, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Los', npp-nam, 'Los', [dr(0,np,np)-1]), ex_si('Angeles', npp-nam, 'Angeles', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,dr(0,dl(0,np,s_ppart),pp_a),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(peine, nc-nom, peine, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(15, det-num, 15, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(prison, nc-nom, prison, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('David', npp-nam, 'David', [dr(0,np,np)-1]), ex_si('A.', npp-abr, 'A.', [dr(0,np,np)-1]), ex_si('Feldman', npp-nam, 'Feldman', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1706, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(apparu, vpp-ver:pper, apparu, [dl(0,n,n)-1]), ex_si(hier, adv-adv, hier, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(ministère, nc-nom, ministère, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rejeté, vpp-ver:pper, rejeté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(visant, vpr-ver:ppre, visant, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(autoriser, vinf-ver:infi, autoriser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fourniture, nc-nom, fourniture, [n-1]), ex_si(limitée, vpp-ver:pper, limitée, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pièces, nc-nom, pièces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(rechange, nc-nom, rechange, [n-1]), ex_si(fabriquées, vpp-ver:pper, fabriquées, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(marine, nc-nom, marine, [n-1]), ex_si(argentine, adj-adj, argentine, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(commencée, vpp-ver:pper, commencée, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1707, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(coopération, nc-nom, coopération, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Golfe', npp-nam, 'Golfe', [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(arrêtée, vpp-ver:pper, arrêtée, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1708, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(militaires, adj-adj, militaires, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(régis, vpp-ver:pper, régis, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(officiellement, adv-adv, officiellement, [dl(1,s,s)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(embargo, nc-nom, embargo, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,dr(0,dl(0,n,n),pp_a),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Grande-Bretagne', npp-nam, 'Grande-Bretagne', [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(déclenchement, nc-nom, déclenchement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1709, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(embargo, nc-nom, embargo, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(armes, nc-nom, armes, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(commencé, vpp-ver:pper, commencé, [dl(0,np,s_ppart)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(poursuivi, vpp-ver:pper, poursuivi, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,dl(1,s,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,np)-1]), ex_si(1994, pro-num, 1994, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1710, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si(argentin, adj-adj, argentin, [dl(0,n,n)-1]), ex_si('Carlos', npp-nam, 'Carlos', [dl(0,n,n)-1]), ex_si('Menem', npp-nam, 'Menem', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ordonné, vpp-ver:pper, ordonné, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(immédiate, adj-adj, immédiate, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(auraient, v-ver:cond, auraient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(commis, vpp-ver:pper, commis, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(troupes, nc-nom, troupes, [n-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(1982, pro-num, 1982, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1711, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Argentine', npp-nam, 'Argentine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(exigé, vpp-ver:pper, exigé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(enquête, nc-nom, enquête, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(crimes, nc-nom, crimes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(présumés, vpp-ver:pper, présumés, [dl(0,n,n)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Malouines', npp-nam, 'Malouines', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1712, Result) :-
      prob_parse([ ex_si('Monsieur', nc-abr, 'Monsieur', [dr(0,np,np)-1]), ex_si('Guido', npp-nam, 'Guido', [dr(0,np,np)-1]), ex_si(di, et-prp, di, [dr(0,dl(0,np,np),np)-1]), ex_si('Tella', npp-nam, 'Tella', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(argentin, adj-adj, argentin, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(rencontré, vpp-ver:pper, rencontré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(représentants, nc-nom, représentants, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(institutions, nc-nom, institutions, [n-1]), ex_si(financières, adj-adj, financières, [dl(0,n,n)-1]), ex_si(britanniques, adj-adj, britanniques, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1713, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('Affaires', nc-nom, 'Affaires', [n-1]), ex_si(étrangères, adj-adj, étrangères, [dl(0,n,n)-1]), ex_si('Guido', npp-nam, 'Guido', [dl(0,n,n)-1]), ex_si('De', p-prp, 'De', [dr(0,dl(0,np,np),np)-1]), ex_si('Tella', npp-nam, 'Tella', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si('Royaume-Uni', npp-nam, 'Royaume-Uni', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1714, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,n,n))-1]), ex_si(prêt, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(argentines, adj-adj, argentines, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(prendre, vinf-ver:infi, prendre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(part, nc-nom, part, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(champs, nc-nom, champs, [n-1]), ex_si(pétroliféres, adj-adj, pétroliféres, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(eaux, nc-nom, eaux, [n-1]), ex_si(territoriales, adj-adj, territoriales, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(îles, nc-nom, îles, [n-1]), ex_si('Malouines', adj-nam, 'Malouines', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1715, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(gouvernement, nc-nom, gouvernement, [n-1]), ex_si(britannique, adj-adj, britannique, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêt, adj-adj, prêt, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(entreprises, nc-nom, entreprises, [n-1]), ex_si(argentines, adj-adj, argentines, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(participer, vinf-ver:infi, participer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(champs, nc-nom, champs, [n-1]), ex_si(pétrolifères, adj-adj, pétrolifères, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1716, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(présentés, vpp-ver:pper, présentés, [dl(0,cl_r,dl(0,np,s_ppart))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(un, nc-num, un, [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(autre, pro-pro:ind, autre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(1992, pro-num, 1992, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(travaillé, vpp-ver:pper, travaillé, [dl(0,np,s_ppart)-1]), ex_si(ensemble, adv-adv, ensemble, [dl(1,s,s)-1]), ex_si(depuis, p-prp, depuis, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(quitté, vpp-ver:pper, quitté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(fonctions, nc-nom, fonctions, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1717, Result) :-
      prob_parse([ ex_si('Ils', cls-pro:per, 'Ils', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(lever, vinf-ver:infi, lever, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(récupération, nc-nom, récupération, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(tsunami, nc-nom, tsunami, [n-1]), ex_si(asiatique, adj-adj, asiatique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2004, pro-num, 2004, [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouragan, nc-nom, ouragan, [n-1]), ex_si('Katrina', npp-nam, 'Katrina', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2005, pro-num, 2005, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1718, Result) :-
      prob_parse([ ex_si('Bush', npp-nam, 'Bush', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(tous, adv-adv, tous, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, pro-num, deux, [np-1]), ex_si(aidé, vpp-ver:pper, aidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(lever, vinf-ver:infi, lever, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(récupération, nc-nom, récupération, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ouragan, nc-nom, ouragan, [n-1]), ex_si('Katrina', npp-nam, 'Katrina', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1719, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(déballage, nc-nom, déballage, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(version, nc-nom, version, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si('Windows', npp-nam, 'Windows', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(désormais, adv-adv, désormais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(généralement, adv-adv, généralement, [dl(1,s,s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(événement, nc-nom, événement, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(ampleur, nc-nom, ampleur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1720, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(nouvelle, adj-adj, nouvelle, [dr(0,n,n)-1]), ex_si(version, nc-nom, version, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si('Windows', npp-nam, 'Windows', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(désormais, adv-adv, désormais, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(déballée, vpp-ver:pper, déballée, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1721, Result) :-
      prob_parse([ ex_si('Voici', vimp-ver:impe, 'Voici', [dr(0,s,np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,np,np),dr(0,s,dia(1,box(1,np))))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(pourquoi, advwh-adv, pourquoi, [dr(0,s_whq,s)-1]), ex_si(vous, cls-pro:per, vous, [np-1]), ex_si(voudrez, v-ver:pres, voudrez, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('peut-être', adv-adv, 'peut-être', [dl(1,s,s)-1]), ex_si(attendre, vinf-ver:infi, attendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('Flip', npp-nam, 'Flip', [dr(0,np,np)-1]), ex_si(screens, nc-nom, screens, [np-1]), ex_si(':', ponct-pun, ':', [dr(0,dl(0,s,s),s)-1]), ex_si(parmi, p-prp, parmi, [dr(0,dr(0,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ajouts, nc-nom, ajouts, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Windows', npp-nam, 'Windows', [dr(0,np,np)-1]), ex_si('Vista', npp-nam, 'Vista', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,np,s),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(façons, nc-nom, façons, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(regarder, vinf-ver:infi, regarder, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(quelles, detwh-pro:rel, quelles, [dr(0,dr(0,s_whq,dr(0,s,dia(1,box(1,np)))),n)-1]), ex_si(fenêtres, nc-nom, fenêtres, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(ouvertes, vpp-ver:pper, ouvertes, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1722, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nouveau, adj-adj, nouveau, [dr(0,n,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(exploitation, nc-nom, exploitation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(appelle, v-ver:pres, appelle, [dr(0,dl(0,cl_r,dl(0,np,s)),np)-1]), ex_si('Windows', npp-nam, 'Windows', [dr(0,np,np)-1]), ex_si('Vista', npp-nam, 'Vista', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1723, Result) :-
      prob_parse([ ex_si('Vista', npp-nam, 'Vista', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(seulement, adv-adv, seulement, [dl(1,s,s)-1]), ex_si(accompagné, vpp-ver:pper, accompagné, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(améliorée, vpp-ver:pper, améliorée, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(aussi, adv-adv, aussi, [dr(0,pp,pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(moyens, nc-nom, moyens, [n-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(faciles, adj-adj, faciles, [dr(0,dl(0,n,n),pp)-1]), ex_si(pour, p-prp, pour, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(parents, nc-nom, parents, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(décider, vinf-ver:infi, décider, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(comment, advwh-adv, comment, [dr(0,s_whq,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(veulent, v-ver:pres, veulent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(enfants, nc-nom, enfants, [n-1]), ex_si(utilisent, v-ver:pres, utilisent, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ordinateur, nc-nom, ordinateur, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1724, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(personnes, nc-nom, personnes, [n-1]), ex_si(utilisant, vpr-ver:ppre, utilisant, [dr(0,dl(0,n,n),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(appareils, nc-nom, appareils, [n-1]), ex_si(photo, nc-nom, photo, [dl(0,n,n)-1]), ex_si(numériques, adj-adj, numériques, [dl(0,n,n)-1]), ex_si(étant, vpr-ver:ppre, étant, [dr(0,dl(0,np,s_ppres),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,dl(1,s,s))-1]), ex_si(jamais, adv-adv, jamais, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),s)-1]), ex_si('Microsoft', npp-nam, 'Microsoft', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(intégré, vpp-ver:pper, intégré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(logiciel, nc-nom, logiciel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gestion, nc-nom, gestion, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Vista', npp-nam, 'Vista', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,s,s),np)-1]), ex_si(ce, pro-pro:dem, ce, [np-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,np,np),dl(0,np,s))-1]), ex_si(facilite, v-ver:pres, facilite, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(partage, nc-nom, partage, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fixation, nc-nom, fixation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(gravure, nc-nom, gravure, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),n)-1]), ex_si('CD', nc-abr, 'CD', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(attribution, nc-nom, attribution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(balises, nc-nom, balises, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(ou, cc-kon, ou, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(étiquettes, nc-nom, étiquettes, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(permettent, v-ver:pres, permettent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(les, clo-pro:per, les, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(retrouver, vinf-ver:infi, retrouver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(facilement, adv-adv, facilement, [dl(1,s,s)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(suite, nc-nom, suite, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1725, Result) :-
      prob_parse([ ex_si('Vista', npp-nam, 'Vista', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(fourni, vpp-ver:pper, fourni, [dl(0,np,s_pass)-1]), ex_si(avec, p-prp, avec, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(logiciel, nc-nom, logiciel, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gestion, nc-nom, gestion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(photos, nc-nom, photos, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1726, Result) :-
      prob_parse([ ex_si('Si', cs-kon, 'Si', [dr(0,dr(0,s,s),s)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(devait, v-ver:impf, devait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(développer, vinf-ver:infi, développer, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(force, nc-nom, force, [n-1]), ex_si(puisse, vs-ver:subp, puisse, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(renforcée, vpp-ver:pper, renforcée, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(prendrait, v-ver:cond, prendrait, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(combattre, vinf-ver:infi, combattre, [dl(0,np,s_inf)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(coûterait, v-ver:cond, coûterait, [dr(0,dl(0,np,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,np,s_q),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,np)-1]), ex_si(on, cls-pro:per, on, [np-1]), ex_si(pourrait, v-ver:cond, pourrait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(attendre, vinf-ver:infi, attendre, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(autrement, adv-adv, autrement, [dl(1,s,s)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1727, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(mise, vpp-ver:pper, mise, [dr(0,dr(0,dl(0,np,s_pass),pp_par),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,n)-1]), ex_si(rude, adj-adj, rude, [dr(0,n,n)-1]), ex_si(épreuve, nc-nom, épreuve, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(guerres, nc-nom, guerres, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1728, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si('Robert', npp-nam, 'Robert', [dl(0,n,n)-1]), ex_si('Gates', npp-nam, 'Gates', [dl(0,n,n)-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(recommandé, vpp-ver:pper, recommandé, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(début, nc-nom, début, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(effectifs, nc-nom, effectifs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(augmentés, vpp-ver:pper, augmentés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('65.000', det-num, '65.000', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(total, nc-nom, total, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('547.000', pro-num, '547.000', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(entier, adj-adj, entier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si('Marines', npp-nam, 'Marines', [n-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(augmentés, vpp-ver:pper, augmentés, [dr(0,dl(0,np,s_pass),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('27.000', pro-num, '27.000', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('202.000', pro-num, '202.000', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1729, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(secrétaire, nc-nom, secrétaire, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Défense', nc-nam, 'Défense', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(suggéré, vpp-ver:pper, suggéré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(effectifs, nc-nom, effectifs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(soient, vs-ver:subp, soient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(portés, vpp-ver:pper, portés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('547.000', det-num, '547.000', [dr(0,np,n)-1]), ex_si(soldats, nc-nom, soldats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1730, Result) :-
      prob_parse([ ex_si('Près', adv-adv, 'Près', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(moitié, nc-nom, moitié, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Armée', nc-nam, 'Armée', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déjà, adv-adv, déjà, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(réalisée, vpp-ver:pper, réalisée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(programme, nc-nom, programme, [n-1]), ex_si(temporaire, adj-adj, temporaire, [dl(0,n,n)-1]), ex_si(dont, prorel-pro:rel, dont, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,pp_de))))-1]), ex_si('Gates', npp-nam, 'Gates', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(rendu, vpp-ver:pper, rendu, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(permanent, adj-adj, permanent, [dl(0,n,n)-1]), ex_si(';', ponct-pun, ';', [dr(0,dl(0,s,s),s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(complète, adj-adj, complète, [dl(0,n,n)-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(réalisée, vpp-ver:pper, réalisée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(cinq, adj-num, cinq, [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1731, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(réalisée, vpp-ver:pper, réalisée, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(5, adj-num, 5, [dr(0,n,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1732, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(estimation, nc-nom, estimation, [n-1]), ex_si(préliminaire, adj-adj, préliminaire, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(terre, nc-nom, terre, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(taille, nc-nom, taille, [n-1]), ex_si(coûterait, v-ver:cond, coûterait, [dr(0,dl(0,np,s),np)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(seraient, v-ver:cond, seraient, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(répartis, vpp-ver:pper, répartis, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(années, nc-nom, années, [n-1]), ex_si(budgétaires, adj-adj, budgétaires, [dl(0,n,n)-1]), ex_si(2009, adj-num, 2009, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(2013, pro-num, 2013, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1733, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(armée, nc-nom, armée, [n-1]), ex_si(coûtera, v-ver:futu, coûtera, [dr(0,dl(0,np,s),np)-1]), ex_si(probablement, adv-adv, probablement, [dl(1,s,s)-1]), ex_si(70, det-num, 70, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1734, Result) :-
      prob_parse([ ex_si('Combattre', vinf-ver:infi, 'Combattre', [dr(0,dl(0,np,s_inf),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(laissé, vpp-ver:pper, laissé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(forces, nc-nom, forces, [n-1]), ex_si(terrestres, adj-adj, terrestres, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(état, nc-nom, état, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(préparation, nc-nom, préparation, [n-1]), ex_si(affaibli, vpp-ver:pper, affaibli, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1735, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si('est-à-dire', v-ver:pres, 'est-à-dire', [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(certaines, det-pro:ind, certaines, [dr(0,np,n)-1]), ex_si(unités, nc-nom, unités, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(dessous, nc-nom, dessous, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mesure, nc-nom, mesure, [n-1]), ex_si(standard, adj-adj, standard, [dl(0,n,n)-1]), ex_si(utilisée, vpp-ver:pper, utilisée, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déterminer, vinf-ver:infi, déterminer, [dr(0,dl(0,np,s_inf),s_whq)-1]), ex_si(si, cs-kon, si, [dr(0,s_whq,s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(prêtes, adj-adj, prêtes, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(combattre, vinf-ver:infi, combattre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(conventionnelle, adj-adj, conventionnelle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haute, adj-adj, haute, [dr(0,n,n)-1]), ex_si(intensité, nc-nom, intensité, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1736, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(guerre, nc-nom, guerre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(haute, adj-adj, haute, [dr(0,n,n)-1]), ex_si(intensité, nc-nom, intensité, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Afghanistan', npp-nam, 'Afghanistan', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1737, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), ex_si(paiera, v-ver:futu, paiera, [dr(0,dl(0,np,s),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si(53, pro-num, 53, [np-1]), ex_si(la, det-det:art, la, [dr(0,dl(0,np,np),n)-1]), ex_si(tonne, nc-nom, tonne, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(importe, v-ver:pres, importe, [dr(0,dl(0,np,s),np)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(lieu, nc-nom, lieu, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(180, nc-num, 180, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(exigeait, v-ver:impf, exigeait, [dr(0,dl(0,np,s),np)-1]), ex_si(auparavant, adv-adv, auparavant, [dl(1,s,s)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Premier', adj-num, 'Premier', [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('Mikhaïl', npp-nam, 'Mikhaïl', [dl(0,n,n)-1]), ex_si('Fradkov', npp-nam, 'Fradkov', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1738, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), ex_si(importe, v-ver:pres, importe, [dr(0,dl(0,np,s),np)-1]), ex_si(53, det-num, 53, [dr(0,np,n)-1]), ex_si(tonnes, nc-nom, tonnes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1739, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(intervenu, vpp-ver:pper, intervenu, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Fradkov', npp-nam, 'Fradkov', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(homologue, nc-nom, homologue, [n-1]), ex_si(bélarussien, adj-adj, bélarussien, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Sergei', npp-nam, 'Sergei', [dr(0,np,np)-1]), ex_si('Sidorsky', npp-nam, 'Sidorsky', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1740, Result) :-
      prob_parse([ ex_si('Monsieur', nc-nom, 'Monsieur', [dr(0,np,np)-1]), ex_si('Fradkov', npp-nam, 'Fradkov', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('Sergei', npp-nam, 'Sergei', [dr(0,np,np)-1]), ex_si('Sidorsky', npp-nam, 'Sidorsky', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(accord, nc-nom, accord, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(10, det-num, 10, [dr(0,np,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1741, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(responsables, nc-nom, responsables, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parvenus, vpp-ver:pper, parvenus, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(équilibrée, adj-adj, équilibrée, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(correspondant, vpr-ver:ppre, correspondant, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(intérêts, nc-nom, intérêts, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Fradkov', npp-nam, 'Fradkov', [np-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(commentaires, nc-nom, commentaires, [n-1]), ex_si(télévisés, vpp-ver:pper, télévisés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ajoutant, vpr-ver:ppre, ajoutant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(avaient, v-ver:impf, avaient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si(difficiles, adj-adj, difficiles, [dl(0,n,n)-1]), ex_si('"', ponct-pun:cit, '"', [let-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1742, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Fradkov', npp-nam, 'Fradkov', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(parvenu, vpp-ver:pper, parvenu, [dr(0,dl(0,np,s_ppart),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(solution, nc-nom, solution, [n-1]), ex_si(équilibrée, vpp-ver:pper, équilibrée, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1743, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(approvisionnements, nc-nom, approvisionnements, [n-1]), ex_si(envoyés, vpp-ver:pper, envoyés, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(oléoduc, nc-nom, oléoduc, [n-1]), ex_si('Druzhba', npp-nam, 'Druzhba', [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(interrompus, vpp-ver:pper, interrompus, [dl(0,np,s_pass)-1]), ex_si(pendant, p-prp, pendant, [dr(0,dl(1,s,s),np)-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(jours, nc-nom, jours, [n-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(taxe, nc-nom, taxe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transit, nc-nom, transit, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(passé, vpp-ver:pper, passé, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1744, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(taxe, nc-nom, taxe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transit, nc-nom, transit, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(augmentée, vpp-ver:pper, augmentée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('Minsk', npp-nam, 'Minsk', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1745, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(différend, nc-nom, différend, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(anciens, adj-adj, anciens, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(soviétiques, adj-adj, soviétiques, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(survenu, vpp-ver:pper, survenu, [dl(0,np,s_ppart)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(forcé, vpp-ver:pper, forcé, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(accepter, vinf-ver:infi, accepter, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(importante, adj-adj, importante, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(fournitures, nc-nom, fournitures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(fin, nc-nom, fin, [dr(0,dl(0,n,n),n)-1]), ex_si(décembre, nc-nom, décembre, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1746, Result) :-
      prob_parse([ ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(fournitures, nc-nom, fournitures, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(gaz, nc-nom, gaz, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1747, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(ensuite, adv-adv, ensuite, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(douane, nc-nom, douane, [n-1]), ex_si(élevé, vpp-ver:pper, élevé, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(exportations, nc-nom, exportations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(affirmant, vpr-ver:ppre, affirmant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(voisin, nc-nom, voisin, [n-1]), ex_si(lui, clo-pro:per, lui, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,pp_a))))-1]), ex_si(coûtait, v-ver:impf, coûtait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si('jusqu\'', p-prp, 'jusqu\'', [dr(0,np,pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(4, det-num, 4, [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(pertes, nc-nom, pertes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(revenus, nc-nom, revenus, [n-1]), ex_si(chaque, det-pro:ind, chaque, [dr(0,dl(1,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1748, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(diminué, vpp-ver:pper, diminué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(coût, nc-nom, coût, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(exportations, nc-nom, exportations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(vers, p-prp, vers, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1749, Result) :-
      prob_parse([ ex_si('En', p-prp, 'En', [dr(0,dr(0,s,s),n)-1]), ex_si(représailles, nc-nom, représailles, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(imposé, vpp-ver:pper, imposé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(taxe, nc-nom, taxe, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(transit, nc-nom, transit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(45, pro-num, 45, [np-1]), ex_si(par, p-prp, par, [dr(0,dl(0,np,np),n)-1]), ex_si(tonne, nc-nom, tonne, [n-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(expéditions, nc-nom, expéditions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(provenance, nc-nom, provenance, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si('l\'', clo-pro:per, 'l\'', [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(retirée, vpp-ver:pper, retirée, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(tôt, adv-adv, tôt, [dl(1,s,s)-1]), ex_si(mercredi, nc-nom, mercredi, [dl(1,s,s)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(gouvernementales, adj-adj, gouvernementales, [dl(0,n,n)-1]), ex_si(tendues, vpp-ver:pper, tendues, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(haut, adj-adj, haut, [dr(0,n,n)-1]), ex_si(niveau, nc-nom, niveau, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(deux, adj-num, deux, [dr(0,n,n)-1]), ex_si(parties, nc-nom, parties, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1750, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(gouvernementales, adj-adj, gouvernementales, [dl(0,n,n)-1]), ex_si(tendues, vpp-ver:pper, tendues, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(entre, p-prp, entre, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Biélorussie', npp-nam, 'Biélorussie', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1751, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(émis, vpp-ver:pper, émis, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(hypothèses, nc-nom, hypothèses, [n-1]), ex_si(selon, p-prp, selon, [dr(0,pp,np)-1]), ex_si(lesquelles, prorel-pro:rel, lesquelles, [dr(0,dl(0,dr(0,pp,np),dl(0,n,n)),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ennemis, nc-nom, ennemis, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(pourraient, v-ver:cond, pourraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(joué, vpp-ver:pper, joué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rôle, nc-nom, rôle, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(mort, nc-nom, mort, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Litvinenko', npp-nam, 'Litvinenko', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(afin, adv-adv, afin, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(présenter, vinf-ver:infi, présenter, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Kremlin', npp-nam, 'Kremlin', [n-1]), ex_si(sous, p-prp, sous, [dr(0,pp,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(mauvais, adj-adj, mauvais, [dr(0,n,n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1752, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Litvinenko', npp-nam, 'Litvinenko', [np-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(critique, nc-nom, critique, [n-1]), ex_si(véhément, adv-adv, véhément, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1753, Result) :-
      prob_parse([ ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(critique, nc-nom, critique, [n-1]), ex_si(véhément, adv-adv, véhément, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Litvinenko', npp-nam, 'Litvinenko', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1754, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(vaste, adj-adj, vaste, [dr(0,n,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(marathon, nc-nom, marathon, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),np)-1]), ex_si(désormais, adv-adv, désormais, [dl(1,s,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(économies, nc-nom, économies, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(puissantes, adj-adj, puissantes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(taux, nc-nom, taux, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(croissance, nc-nom, croissance, [n-1]), ex_si(rapide, adj-adj, rapide, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,np,np),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si('6,9', pro-num, '6,9', [np-1]), ex_si(en, p-prp, en, [dr(0,dl(0,np,np),np)-1]), ex_si(2006, pro-num, 2006, [np-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(inflation, nc-nom, inflation, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(baisse, nc-nom, baisse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1755, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(une, nc-num, une, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,np,np),n)-1]), ex_si(économies, nc-nom, économies, [n-1]), ex_si(les, det-det:art, les, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),pp_de),dl(0,n,n))-1]), ex_si(puissantes, adj-adj, puissantes, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1756, Result) :-
      prob_parse([ ex_si('Selon', p-prp, 'Selon', [dr(0,dr(0,s,s),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(constitution, nc-nom, constitution, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('M.', nc-abr, 'M.', [dr(0,np,np)-1]), ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(retirer, vinf-ver:infi, retirer, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(après, p-prp, après, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(effectué, vpp-ver:pper, effectué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(mandats, nc-nom, mandats, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1757, Result) :-
      prob_parse([ ex_si('Mais', cc-kon, 'Mais', [dr(0,s,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(maintenant, adv-adv, maintenant, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(devenu, vpp-ver:pper, devenu, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(si, adv-adv, si, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(puissant, adj-adj, puissant, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(populaire, adj-adj, populaire, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),s_q),dl(0,n,n))-1]), ex_si(largement, adv-adv, largement, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(admis, vpp-ver:pper, admis, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(personne, nc-nom, personne, [n-1]), ex_si('qu\'', prorel-pro:rel, 'qu\'', [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(désigne, v-ver:pres, désigne, [dr(0,dl(0,np,s),np)-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),n)-1]), ex_si(candidat, nc-nom, candidat, [n-1]), ex_si(préféré, vpp-ver:pper, préféré, [dl(0,n,n)-1]), ex_si(gagnera, v-ver:futu, gagnera, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(rapporte, v-ver:pres, rapporte, [dr(0,dl(1,s,s),np)-1]), ex_si('Richard', npp-nam, 'Richard', [dr(0,np,np)-1]), ex_si('Galpin', npp-nam, 'Galpin', [np-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(de, p-prp, de, [n-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1758, Result) :-
      prob_parse([ ex_si('Poutine', npp-nam, 'Poutine', [np-1]), ex_si(va, v-ver:pres, va, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(gagner, vinf-ver:infi, gagner, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1759, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1000, det-num, 1000, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(médias, nc-nom, médias, [n-1]), ex_si(russes, adj-adj, russes, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(étrangers, adj-adj, étrangers, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(inscrits, vpp-ver:pper, inscrits, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(devenue, vpp-ver:pper, devenue, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(événement, nc-nom, événement, [n-1]), ex_si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1760, Result) :-
      prob_parse([ ex_si('Plus', adv-adv, 'Plus', [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(1000, det-num, 1000, [dr(0,np,n)-1]), ex_si(membres, nc-nom, membres, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(inscrits, vpp-ver:pper, inscrits, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(conférence, nc-nom, conférence, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(presse, nc-nom, presse, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1761, Result) :-
      prob_parse([ ex_si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(détaillant, nc-nom, détaillant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(revenu, vpp-ver:pper, revenu, [dr(0,dl(0,np,s_ppart),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pilule, nc-nom, pilule, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lendemain, nc-nom, lendemain, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(accepté, vpp-ver:pper, accepté, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(la, clo-pro:per, la, [dr(0,dl(0,np,s),dr(0,dl(0,np,s),dia(1,box(1,np))))-1]), ex_si(vendre, vinf-ver:infi, vendre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(3700, det-num, 3700, [dr(0,np,n)-1]), ex_si(pharmacies, nc-nom, pharmacies, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1762, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(fait, v-ver:pres, fait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(suite, nc-nom, suite, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(réussie, vpp-ver:pper, réussie, [dl(0,n,n)-1]), ex_si(contre, p-prp, contre, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(détaillant, nc-nom, détaillant, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Illinois', npp-nam, 'Illinois', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(promulgué, vpp-ver:pper, promulgué, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lois, nc-nom, lois, [n-1]), ex_si(obligeant, vpr-ver:ppre, obligeant, [dr(0,dr(0,dl(0,n,n),dl(0,np,s_inf)),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pharmaciens, nc-nom, pharmaciens, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(remplir, vinf-ver:infi, remplir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ordonnances, nc-nom, ordonnances, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(contraceptif, nc-nom, contraceptif, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(urgence, nc-nom, urgence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1763, Result) :-
      prob_parse([ ex_si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(détaillant, nc-nom, détaillant, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1764, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,dr(0,s,s),n)-1]), ex_si(semaine, nc-nom, semaine, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(procureur, nc-nom, procureur, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Connecticut', npp-nam, 'Connecticut', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Richard', npp-nam, 'Richard', [dr(0,np,np)-1]), ex_si('Blumenthal', npp-nam, 'Blumenthal', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dr(0,dl(0,np,s_ppart),np),dl(0,np,s_inf))-1]), ex_si(monter, vinf-ver:infi, monter, [dl(0,np,s_inf)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(pression, nc-nom, pression, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_ppres))-1]), ex_si(déclarant, vpr-ver:ppre, déclarant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(étendrait, v-ver:impf, étendrait, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(plus, adv-adv, plus, [dl(1,s,s)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(régime, nc-nom, régime, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(assurance, nc-nom, assurance, [n-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ses, det-det:pos, ses, [dr(0,np,n)-1]), ex_si('188.000', adj-num, '188.000', [dr(0,n,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(couvrir, vinf-ver:infi, couvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(ordonnances, nc-nom, ordonnances, [n-1]), ex_si(remplies, vpp-ver:pper, remplies, [dl(0,n,n)-1]), ex_si(chez, p-prp, chez, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),s_q)-1]), ex_si(moins, adv-adv, moins, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(chaîne, nc-nom, chaîne, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(accepte, v-ver:pres, accepte, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(stocker, vinf-ver:infi, stocker, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pilules, nc-nom, pilules, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1765, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(procureur, nc-nom, procureur, [n-1]), ex_si(général, adj-adj, général, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Connecticut', npp-nam, 'Connecticut', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('Richard', npp-nam, 'Richard', [dr(0,np,np)-1]), ex_si('Blumenthal', npp-nam, 'Blumenthal', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si('188.000', det-num, '188.000', [dr(0,np,n)-1]), ex_si(employés, nc-nom, employés, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1766, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(pilule, nc-nom, pilule, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lendemain, nc-nom, lendemain, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(doit, v-ver:pres, doit, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(prise, vpp-ver:pper, prise, [dl(0,np,s_pass)-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(72, adj-num, 72, [dr(0,n,n)-1]), ex_si(heures, nc-nom, heures, [n-1]), ex_si(suivant, vpr-ver:ppre, suivant, [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(rapport, nc-nom, rapport, [n-1]), ex_si(sexuel, adj-adj, sexuel, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(toujours, adv-adv, toujours, [dl(1,s,s)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(disponible, adj-adj, disponible, [dl(0,n,n)-1]), ex_si(sans, p-prp, sans, [dr(0,dl(1,s,s),n)-1]), ex_si(ordonnance, nc-nom, ordonnance, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si('Amérique', npp-nam, 'Amérique', [n-1]), ex_si(malgré, p-prp, malgré, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(recommandations, nc-nom, recommandations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(groupe, nc-nom, groupe, [n-1]), ex_si(consultatif, adj-adj, consultatif, [dl(0,n,n)-1]), ex_si(scientifique, adj-adj, scientifique, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Food', npp-nam, 'Food', [dr(0,n,n)-1]), ex_si(and, et-kon, and, [dr(0,dl(0,dr(0,n,n),dr(0,n,n)),dr(0,n,n))-1]), ex_si('Drug', npp-nam, 'Drug', [dr(0,n,n)-1]), ex_si('Administration', npp-nam, 'Administration', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(raison, nc-nom, raison, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(militants, nc-nom, militants, [n-1]), ex_si('anti-avortement', adj-adj, 'anti-avortement', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1767, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(pilule, nc-nom, pilule, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(lendemain, nc-nom, lendemain, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(être, vinf-ver:infi, être, [dr(0,dl(0,np,s_inf),dl(0,np,s_pass))-1]), ex_si(obtenue, vpp-ver:pper, obtenue, [dl(0,np,s_pass)-1]), ex_si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(sur, p-prp, sur, [dr(0,dl(1,s,s),n)-1]), ex_si(ordonnance, nc-nom, ordonnance, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1768, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Massachusetts', npp-nam, 'Massachusetts', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(trois, det-num, trois, [dr(0,np,n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Boston', npp-nam, 'Boston', [np-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(poursuivi, vpp-ver:pper, poursuivi, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),n)-1]), ex_si(succès, nc-nom, succès, [n-1]), ex_si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), ex_si(le, det-det:art, le, [dr(0,dl(1,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(violé, vpp-ver:pper, violé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réglementations, nc-nom, réglementations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(exigent, v-ver:pres, exigent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(pharmacies, nc-nom, pharmacies, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dr(0,dl(0,np,s),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(stock, nc-nom, stock, [n-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(médicaments, nc-nom, médicaments, [n-1]), ex_si(couramment, adv-adv, couramment, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(prescrits, vpp-ver:pper, prescrits, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1769, Result) :-
      prob_parse([ ex_si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(violé, vpp-ver:pper, violé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(réglementations, nc-nom, réglementations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('Etat', nc-nam, 'Etat', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1770, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(décision, nc-nom, décision, [n-1]), ex_si(tardive, adj-adj, tardive, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Wal-Mart', npp-nam, 'Wal-Mart', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(considérée, vpp-ver:pper, considérée, [dr(0,dl(0,np,s_pass),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(victoire, nc-nom, victoire, [n-1]), ex_si(importante, adj-adj, importante, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(où, prorel-pro:rel, où, [dr(0,dl(0,n,n),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(craignent, v-ver:pres, craignent, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avortement, nc-nom, avortement, [n-1]), ex_si(soit, vs-ver:subp, soit, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(menacé, vpp-ver:pper, menacé, [dl(0,np,s_pass)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1771, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(organisations, nc-nom, organisations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(femmes, nc-nom, femmes, [n-1]), ex_si(luttent, v-ver:pres, luttent, [dr(0,dl(0,np,s),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avortement, nc-nom, avortement, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1772, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,dr(0,s,s),n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Dakota', npp-nam, 'Dakota', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(décidé, vpp-ver:pper, décidé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(interdire, vinf-ver:infi, interdire, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(tout, det-pro:ind, tout, [dr(0,np,n)-1]), ex_si(avortement, nc-nom, avortement, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si('État', nc-nam, 'État', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(viol, nc-nom, viol, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(inceste, nc-nom, inceste, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1773, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si('Mississippi', npp-nam, 'Mississippi', [n-1]), ex_si(envisage, v-ver:pres, envisage, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(législation, nc-nom, législation, [n-1]), ex_si(similaire, adj-adj, similaire, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1774, Result) :-
      prob_parse([ ex_si('Dans', p-prp, 'Dans', [dr(0,dr(0,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Dakota', npp-nam, 'Dakota', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Sud', npp-nam, 'Sud', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avortement, nc-nom, avortement, [n-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(autorisé, vpp-ver:pper, autorisé, [dl(0,np,s_pass)-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),n)-1]), ex_si(cas, nc-nom, cas, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(viol, nc-nom, viol, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(inceste, nc-nom, inceste, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1775, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(rapports, nc-nom, rapports, [n-1]), ex_si(immédiats, adj-adj, immédiats, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(blessures, nc-nom, blessures, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(autorités, nc-nom, autorités, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elles, cls-pro:per, elles, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dr(0,dl(0,np,s_ppart),pp),np)-1]), ex_si(aucun, det-pro:ind, aucun, [dr(0,np,n)-1]), ex_si(signe, nc-nom, signe, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Greenville', npp-nam, 'Greenville', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Raleigh', npp-nam, 'Raleigh', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1776, Result) :-
      prob_parse([ ex_si('Greenville', npp-nam, 'Greenville', [np-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(trouve, v-ver:pres, trouve, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(75, det-num, 75, [dr(0,np,n)-1]), ex_si(miles, nc-nom, miles, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(est, nc-nom, est, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Raleigh', npp-nam, 'Raleigh', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1777, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(pompiers, nc-nom, pompiers, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(appelés, vpp-ver:pper, appelés, [dr(0,dl(0,np,s_pass),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), ex_si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), ex_si('Memorial', npp-nam, 'Memorial', [n-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si('23h', nc-nom, '23h', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(trouvé, vpp-ver:pper, trouvé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(de, det-prp, de, [dr(0,np,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fumée, nc-nom, fumée, [n-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(échappant, vpr-ver:ppre, échappant, [dr(0,dl(0,cl_r,dl(0,np,s_ppres)),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(aile, nc-nom, aile, [n-1]), ex_si(éducative, adj-adj, éducative, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1778, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signalé, vpp-ver:pper, signalé, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), ex_si('The', et-det:art, 'The', [dr(0,dl(0,n,n),n)-1]), ex_si('Memorial', npp-nam, 'Memorial', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1779, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(répartiteurs, nc-nom, répartiteurs, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(reçu, vpp-ver:pper, reçu, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(signalement, nc-nom, signalement, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), ex_si('Unity', npp-nam, 'Unity', [dl(0,n,n)-1]), ex_si('Free', npp-nam, 'Free', [dl(0,n,n)-1]), ex_si('Will', npp-nam, 'Will', [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(environ, adv-adv, environ, [dr(0,np,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('demi-mile', nc-nom, 'demi-mile', [dr(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [n-1]), ex_si('Memorial', npp-nam, 'Memorial', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(peu, adv-adv, peu, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(avant, p-prp, avant, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si('23h30', nc-nom, '23h30', [dr(0,dl(1,s,s),np)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1780, Result) :-
      prob_parse([ ex_si('Un', det-det:art, 'Un', [dr(0,np,n)-1]), ex_si(incendie, nc-nom, incendie, [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(signalé, vpp-ver:pper, signalé, [dl(0,np,s_pass)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), ex_si('Unity', npp-nam, 'Unity', [dl(0,n,n)-1]), ex_si('Free', npp-nam, 'Free', [dl(0,n,n)-1]), ex_si('Will', npp-nam, 'Will', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1781, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si(enquêtait, v-ver:impf, enquêtait, [dr(0,dl(0,np,s),pp)-1]), ex_si(également, adv-adv, également, [dl(1,s,s)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(effraction, nc-nom, effraction, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Oakmont', npp-nam, 'Oakmont', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(située, vpp-ver:pper, située, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(moins, adv-adv, moins, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(quart, nc-nom, quart, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(mile, nc-nom, mile, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Memorial', npp-nam, 'Memorial', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(caporal, nc-nom, caporal, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(police, nc-nom, police, [n-1]), ex_si('Kip', npp-nam, 'Kip', [dl(0,n,n)-1]), ex_si('Gaskins', npp-nam, 'Gaskins', [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1782, Result) :-
      prob_parse([ ex_si('Kip', npp-nam, 'Kip', [dr(0,np,np)-1]), ex_si('Gaskins', npp-nam, 'Gaskins', [np-1]), ex_si(voulait, v-ver:impf, voulait, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(entrer, vinf-ver:infi, entrer, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(par, p-prp, par, [dr(0,dl(1,s,s),n)-1]), ex_si(effraction, nc-nom, effraction, [n-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(église, nc-nom, église, [n-1]), ex_si(baptiste, adj-adj, baptiste, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si('Oakmont', npp-nam, 'Oakmont', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1783, Result) :-
      prob_parse([ ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(arrive, v-ver:pres, arrive, [dr(0,dl(0,np,s),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(tête, nc-nom, tête, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(tous, adv-adv, tous, [dr(0,np,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(sondages, nc-nom, sondages, [n-1]), ex_si(nationaux, adj-adj, nationaux, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(candidats, nc-nom, candidats, [n-1]), ex_si(démocrates, adj-adj, démocrates, [dl(0,n,n)-1]), ex_si(probables, adj-adj, probables, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidentielle, nc-nom, présidentielle, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(critiquée, vpp-ver:pper, critiquée, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(de, det-prp, de, [dr(0,np,n)-1]), ex_si(nombreux, adj-adj, nombreux, [dr(0,n,n)-1]), ex_si(militants, nc-nom, militants, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parti, nc-nom, parti, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s_inf))-1]), ex_si(avoir, vinf-ver:infi, avoir, [dr(0,dl(0,np,s_inf),dl(0,np,s_ppart))-1]), ex_si(refusé, vpp-ver:pper, refusé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(revenir, vinf-ver:infi, revenir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(vote, nc-nom, vote, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2002, pro-num, 2002, [np-1]), ex_si(autorisant, vpr-ver:ppre, autorisant, [dr(0,dl(0,n,n),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(action, nc-nom, action, [n-1]), ex_si(militaire, adj-adj, militaire, [dl(0,n,n)-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1784, Result) :-
      prob_parse([ ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(reçoit, v-ver:pres, reçoit, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(critiques, nc-nom, critiques, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(autorisation, nc-nom, autorisation, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(intervenir, vinf-ver:infi, intervenir, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Irak', npp-nam, 'Irak', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1785, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(dit, vpp-ver:pper, dit, [dr(0,dr(0,dl(0,np,s_ppart),s_q),pp_a)-1]), ex_si(aux, p+d-prp:det, aux, [dr(0,pp_a,n)-1]), ex_si(dirigeants, nc-nom, dirigeants, [n-1]), ex_si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(voulaient, v-ver:impf, voulaient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(ouvrir, vinf-ver:infi, ouvrir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(négociations, nc-nom, négociations, [n-1]), ex_si(formelles, adj-adj, formelles, [dl(0,n,n)-1]), ex_si(sur, p-prp, sur, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(possibilité, nc-nom, possibilité, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(localiser, vinf-ver:infi, localiser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(interception, nc-nom, interception, [n-1]), ex_si(basés, vpp-ver:pper, basés, [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(sol, nc-nom, sol, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,dl(0,n,n),dl(0,n,n)),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cadre, nc-nom, cadre, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(antimissile, adj-adj, antimissile, [dl(0,n,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(large, adj-adj, large, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(lundi, nc-nom, lundi, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si('porte-parole', nc-nom, 'porte-parole', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ambassade, nc-nom, ambassade, [n-1]), ex_si(américaine, adj-adj, américaine, [dl(0,n,n)-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Varsovie', npp-nam, 'Varsovie', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1786, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(veulent, v-ver:pres, veulent, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(élargir, vinf-ver:infi, élargir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(antimissile, adj-adj, antimissile, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1787, Result) :-
      prob_parse([ ex_si('Cette', det-pro:dem, 'Cette', [dr(0,np,n)-1]), ex_si(demande, nc-nom, demande, [n-1]), ex_si(intervient, v-ver:pres, intervient, [dl(0,np,s)-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),np)-1]), ex_si(deux, det-num, deux, [dr(0,np,n)-1]), ex_si(ans, nc-nom, ans, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(discussions, nc-nom, discussions, [n-1]), ex_si(exploratoires, adj-adj, exploratoires, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(1,s,s),dl(1,s,s)),dl(1,s,s))-1]), ex_si(après, p-prp, après, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('République', npp-nam, 'République', [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(voisine, adj-adj, voisine, [dl(0,n,n)-1]), ex_si(ait, vs-ver:subp, ait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(déclaré, vpp-ver:pper, déclaré, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(samedi, nc-nom, samedi, [dl(1,s,s)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(demandé, vpp-ver:pper, demandé, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(baser, vinf-ver:infi, baser, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(radar, adj-adj, radar, [dl(0,n,n)-1]), ex_si(dans, p-prp, dans, [dr(0,pp,np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(autre, adj-adj, autre, [dr(0,n,n)-1]), ex_si(partie, nc-nom, partie, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1788, Result) :-
      prob_parse([ ex_si('Une', det-det:art, 'Une', [dr(0,np,n)-1]), ex_si(station, nc-nom, station, [n-1]), ex_si(radar, nc-nom, radar, [dl(0,n,n)-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(basée, vpp-ver:pper, basée, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1789, Result) :-
      prob_parse([ ex_si('Washington', npp-nam, 'Washington', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(cherché, vpp-ver:pper, cherché, [dr(0,dl(0,np,s_ppart),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si(plusieurs, det-pro:ind, plusieurs, [dr(0,np,n)-1]), ex_si(reprises, nc-nom, reprises, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(rassurer, vinf-ver:infi, rassurer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(rien, pro-pro:ind, rien, [np-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,np),dr(0,dl(0,np,s_inf),dia(1,box(1,np))))-1]), ex_si(craindre, vinf-ver:infi, craindre, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1790, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Russie', npp-nam, 'Russie', [n-1]), ex_si(craint, v-ver:pres, craint, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1791, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(parlements, nc-nom, parlements, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), ex_si(devraient, v-ver:cond, devraient, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(1,s,s),n)-1]), ex_si(abord, nc-nom, abord, [n-1]), ex_si(approuver, vinf-ver:infi, approuver, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1792, Result) :-
      prob_parse([ ex_si('Bien', adv-adv, 'Bien', [dr(0,dr(0,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(gouvernements, nc-nom, gouvernements, [n-1]), ex_si(aient, vs-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(exprimé, vpp-ver:pper, exprimé, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(soutien, nc-nom, soutien, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(ils, cls-pro:per, ils, [np-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(faibles, adj-adj, faibles, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(font, v-ver:pres, font, [dr(0,dr(0,dl(0,np,s),pp),np)-1]), ex_si(face, nc-nom, face, [np-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(large, adj-adj, large, [dr(0,n,n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(publique, adj-adj, publique, [dl(0,n,n)-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1793, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(parlements, nc-nom, parlements, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si(polonais, adj-adj, polonais, [dl(0,n,n)-1]), ex_si(approuvent, v-ver:pres, approuvent, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1794, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(tchèques, adj-adj, tchèques, [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(prononcés, vpp-ver:pper, prononcés, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,s,s),s)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(coalition, nc-nom, coalition, [n-1]), ex_si(gouvernementale, adj-adj, gouvernementale, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(premier, adj-num, premier, [dr(0,n,n)-1]), ex_si(ministre, nc-nom, ministre, [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,np)-1]), ex_si(assez, adv-adv, assez, [dr(0,np,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(voix, nc-nom, voix, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(faire, vinf-ver:infi, faire, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(passer, vinf-ver:infi, passer, [dr(0,dr(0,dl(0,np,s_inf),pp),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(mesures, nc-nom, mesures, [n-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('elle-même', pro-pro:per, 'elle-même', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1795, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(partis, nc-nom, partis, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(opposition, nc-nom, opposition, [n-1]), ex_si(tchèques, adj-adj, tchèques, [dl(0,n,n)-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),pp)-1]), ex_si(contre, p-prp, contre, [dr(0,pp,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(système, nc-nom, système, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1796, Result) :-
      prob_parse([ ex_si('À', p-prp, 'À', [dr(0,dr(0,s,s),np)-1]), ex_si('Moscou', npp-nam, 'Moscou', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Andreï', npp-nam, 'Andreï', [dr(0,np,np)-1]), ex_si('Kokochine', npp-nam, 'Kokochine', [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(dirige, v-ver:pres, dirige, [dr(0,dl(0,np,s),np)-1]), ex_si('aujourd\'hui', adv-adv, 'aujourd\'hui', [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(comité, nc-nom, comité, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(parlement, nc-nom, parlement, [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(liens, nc-nom, liens, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(anciennes, adj-adj, anciennes, [dr(0,n,n)-1]), ex_si(nations, nc-nom, nations, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(bloc, nc-nom, bloc, [n-1]), ex_si(soviétique, adj-adj, soviétique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(prévenu, vpp-ver:pper, prévenu, [dr(0,dl(0,np,s_ppart),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(approbation, nc-nom, approbation, [n-1]), ex_si(tchèque, adj-adj, tchèque, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(plan, nc-nom, plan, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(passerait, v-ver:cond, passerait, [dr(0,dl(0,np,s),pp)-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(sans, p-prp, sans, [dr(0,pp,n)-1]), ex_si(conséquences, nc-nom, conséquences, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1797, Result) :-
      prob_parse([ ex_si('Andrei', npp-nam, 'Andrei', [dr(0,np,np)-1]), ex_si('Kokoshin', npp-nam, 'Kokoshin', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(ancien, adj-adj, ancien, [dr(0,n,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Conseil', npp-nam, 'Conseil', [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(sécurité, nc-nom, sécurité, [n-1]), ex_si(russe, adj-adj, russe, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1798, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(chercheront, v-ver:pres, chercheront, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(mettre, vinf-ver:infi, mettre, [dr(0,dr(0,dl(0,np,s_inf),np),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(nombre, nc-nom, nombre, [n-1]), ex_si(limité, vpp-ver:pper, limité, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(lanceurs, nc-nom, lanceurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(silos, nc-nom, silos, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(antimissiles, adj-adj, antimissiles, [dl(0,n,n)-1]), ex_si(basés, vpp-ver:pper, basés, [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(sol, nc-nom, sol, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(intercepteurs, nc-nom, intercepteurs, [n-1]), ex_si(associés, adj-adj, associés, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(semblables, adj-adj, semblables, [dr(0,dl(0,n,n),pp_a)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(ceux, pro-pro:dem, ceux, [np-1]), ex_si(actuellement, adv-adv, actuellement, [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(service, nc-nom, service, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Fort', npp-nam, 'Fort', [dr(0,np,np)-1]), ex_si('Greely', npp-nam, 'Greely', [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si('Alaska', npp-nam, 'Alaska', [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déployer, vinf-ver:infi, déployer, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(radar, nc-nom, radar, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(bande, nc-nom, bande, [n-1]), ex_si('X', npp-nam, 'X', [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(suivi, nc-nom, suivi, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),n)-1]), ex_si('mi-parcours', nc-nom, 'mi-parcours', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(discrimination, nc-nom, discrimination, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(menaces, nc-nom, menaces, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(missiles, nc-nom, missiles, [n-1]), ex_si(balistiques, adj-adj, balistiques, [dl(0,n,n)-1]), ex_si(provenant, vpr-ver:ppre, provenant, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si('Moyen-Orient', npp-nam, 'Moyen-Orient', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1799, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(achètent, v-ver:pres, achètent, [dr(0,dl(0,np,s),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(lanceurs, nc-nom, lanceurs, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(silos, nc-nom, silos, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(défense, nc-nom, défense, [n-1]), ex_si(basés, vpp-ver:pper, basés, [dr(0,dl(0,n,n),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(sol, nc-nom, sol, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1800, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si('ex-président', nc-nom, 'ex-président', [n-1]), ex_si(peut, v-ver:pres, peut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(devenir, vinf-ver:infi, devenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(superstar, nc-nom, superstar, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(politique, nc-nom, politique, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1801, Result) :-
      prob_parse([ ex_si('C\'', cls-pro:dem, 'C\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(stratège, nc-nom, stratège, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si(affûté, vpp-ver:pper, affûté, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1802, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(connaît, v-ver:pres, connaît, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(institution, nc-nom, institution, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(présidence, nc-nom, présidence, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1803, Result) :-
      prob_parse([ ex_si('Ses', det-det:pos, 'Ses', [dr(0,np,n)-1]), ex_si(compétences, nc-nom, compétences, [n-1]), ex_si(en, p-prp, en, [dr(0,dl(0,n,n),n)-1]), ex_si(matière, nc-nom, matière, [dr(0,n,pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,n)-1]), ex_si(collecte, nc-nom, collecte, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(fonds, nc-nom, fonds, [n-1]), ex_si(sont, v-ver:pres, sont, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(inégalées, adj-adj, inégalées, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1804, Result) :-
      prob_parse([ ex_si('Tout', adv-adv, 'Tout', [dr(0,np,np)-1]), ex_si(cela, pro-pro:dem, cela, [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(bon, adj-adj, bon, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [dr(0,dl(0,dl(0,n,n),dl(0,n,n)),dl(0,n,n))-1]), ex_si('peut-être', adv-adv, 'peut-être', [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(trop, adv-adv, trop, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(bon, adj-adj, bon, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(selon, p-prp, selon, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(sondage, nc-nom, sondage, [n-1]), ex_si('CNN', npp-abr, 'CNN', [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(septembre, nc-nom, septembre, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(montre, v-ver:pres, montre, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(sa, det-det:pos, sa, [dr(0,np,n)-1]), ex_si(cote, nc-nom, cote, [n-1]), ex_si(favorable, adj-adj, favorable, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,dl(0,n,n),s_q),dl(0,n,n))-1]), ex_si(élevée, vpp-ver:pper, élevée, [dl(0,n,n)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(celle, pro-pro:dem, celle, [np-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,np),np)-1]), ex_si(elle, pro-pro:per, elle, [np-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(60, det-num, 60, [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(contre, p-prp, contre, [dr(0,dl(0,np,np),np)-1]), ex_si(50, det-num, 50, [dr(0,np,n)-1]), ex_si('%.', nc-abr, '%.', [n-1])], Result).
sent(1805, Result) :-
      prob_parse([ ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(stratège, nc-nom, stratège, [n-1]), ex_si(politique, adj-adj, politique, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1806, Result) :-
      prob_parse([ ex_si('D\'', p-prp, 'D\'', [dr(0,dr(0,s,s),n)-1]), ex_si(ici, adv-adv, ici, [n-1]), ex_si(le, det-det:art, le, [dr(0,dl(0,n,n),n)-1]), ex_si(jour, nc-nom, jour, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(élection, nc-nom, élection, [n-1]), ex_si(présidentielle, adj-adj, présidentielle, [dl(0,n,n)-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(fascination, nc-nom, fascination, [n-1]), ex_si(nationale, adj-adj, nationale, [dl(0,n,n)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(0,n,n),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(mariage, nc-nom, mariage, [n-1]), ex_si(sera, v-ver:futu, sera, [dr(0,dl(0,np,s),pp)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(centre, nc-nom, centre, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(course, nc-nom, course, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1807, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(complexe, nc-nom, complexe, [n-1]), ex_si('médiatico-industriel', adj-adj, 'médiatico-industriel', [dl(0,n,n)-1]), ex_si(se, clr-pro:per, se, [cl_r-1]), ex_si(nourrira, v-ver:futu, nourrira, [dr(0,dl(0,cl_r,dl(0,np,s)),pp)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),n)-1]), ex_si(nouveau, adj-adj, nouveau, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si('Clinton', npp-nam, 'Clinton', [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(passé, nc-nom, passé, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(leur, det-det:pos, leur, [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1808, Result) :-
      prob_parse([ ex_si('De', det-prp, 'De', [dr(0,np,n)-1]), ex_si(nouvelles, adj-adj, nouvelles, [dr(0,n,n)-1]), ex_si(élections, nc-nom, élections, [n-1]), ex_si(auront, v-ver:futu, auront, [dr(0,dl(0,np,s),np)-1]), ex_si(lieu, nc-nom, lieu, [np-1]), ex_si(en, p-prp, en, [dr(0,dl(1,s,s),np)-1]), ex_si(2008, pro-num, 2008, [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1809, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(delà, adv-adv, delà, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(questions, nc-nom, questions, [n-1]), ex_si(sexuelles, adj-adj, sexuelles, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(il, cls-pro:per, il, [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(besoin, nc-nom, besoin, [n-1]), ex_si(perçu, vpp-ver:pper, perçu, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(attention, nc-nom, attention, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),n)-1]), ex_si(adulation, nc-nom, adulation, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(même, adv-adv, même, [dl(0,n,n)-1]), ex_si('-', ponct-pun, '-', [let-1]), ex_si(illustré, vpp-ver:pper, illustré, [dr(0,dl(0,n,n),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(histoire, nc-nom, histoire, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coupe', nc-nam, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si(cette, det-pro:dem, cette, [dr(0,dl(0,n,n),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1810, Result) :-
      prob_parse([ ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(fait, vpp-ver:pper, fait, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(voyage, nc-nom, voyage, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Coupe', nc-nam, 'Coupe', [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('Berlin', npp-nam, 'Berlin', [np-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1811, Result) :-
      prob_parse([ ex_si('Au', p+d-prp:det, 'Au', [dr(0,dr(0,s,s),n)-1]), ex_si(cours, nc-nom, cours, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(derniers, adj-adj, derniers, [dr(0,n,n)-1]), ex_si(mois, nc-nom, mois, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('Bill', npp-nam, 'Bill', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(apparu, vpp-ver:pper, apparu, [dr(0,dl(0,np,s_ppart),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(chef, nc-nom, chef, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(campagne, nc-nom, campagne, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(son, det-det:pos, son, [dr(0,np,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(affirmant, vpr-ver:ppre, affirmant, [dr(0,dl(0,np,s_ppres),s_q)-1]), ex_si(publiquement, adv-adv, publiquement, [dl(1,s,s)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(grande, adj-adj, grande, [dr(0,n,n)-1]), ex_si(présidente, nc-nom, présidente, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),dl(0,n,n))-1]), ex_si(même, adv-adv, même, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(meilleure, adj-adj, meilleure, [dr(0,dl(0,n,n),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,np)-1]), ex_si(lui, pro-pro:per, lui, [np-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(entrerait, v-ver:impf, entrerait, [dr(0,dl(0,np,s),pp)-1]), ex_si(à, p-prp, à, [dr(0,pp_a,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Maison', npp-nam, 'Maison', [n-1]), ex_si('Blanche', npp-nam, 'Blanche', [dl(0,n,n)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(plus, adv-adv, plus, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(expérience, nc-nom, expérience, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1812, Result) :-
      prob_parse([ ex_si('Hillary', npp-nam, 'Hillary', [dr(0,np,np)-1]), ex_si('Clinton', npp-nam, 'Clinton', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(épouse, nc-nom, épouse, [n-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,n,n),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(président, nc-nom, président, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1813, Result) :-
      prob_parse([ ex_si('Alimenté', vpp-ver:pper, 'Alimenté', [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si(hausse, nc-nom, hausse, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(mondiaux, adj-adj, mondiaux, [dl(0,n,n)-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,n,n),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(augmentation, nc-nom, augmentation, [n-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(chinoises, adj-adj, chinoises, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),np),np)-1]), ex_si(ce, det-pro:dem, ce, [dr(0,np,n)-1]), ex_si(déficit, nc-nom, déficit, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cinquième, adj-num, cinquième, [dr(0,n,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), ex_si(consécutif, adj-adj, consécutif, [dl(0,n,n)-1]), ex_si(des, p+d-prp:det, des, [dr(0,dl(0,n,n),n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1814, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(chinoises, adj-adj, chinoises, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(cinquième, adj-num, cinquième, [dr(0,n,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(annuel, adj-adj, annuel, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1815, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,np,n)-1]), ex_si(écart, nc-nom, écart, [n-1]), ex_si(avec, p-prp, avec, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(seule, adj-adj, seule, [dl(0,n,n)-1]), ex_si(était, v-ver:impf, était, [dr(0,dl(0,np,s),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('232,5', det-num, '232,5', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(0,np,np),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(déséquilibre, nc-nom, déséquilibre, [n-1]), ex_si(que, prorel-pro:rel, que, [dr(0,dl(0,n,n),dr(0,s,dia(1,box(1,np))))-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(aient, v-ver:subp, aient, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(jamais, adv-adv, jamais, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(enregistré, vpp-ver:pper, enregistré, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(avec, p-prp, avec, [dr(0,dl(1,s,s),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(seul, adj-adj, seul, [dr(0,n,n)-1]), ex_si(pays, nc-nom, pays, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1816, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),np)-1]), ex_si(pas, adv-adv, pas, [dr(0,np,pp_de)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,pp_de,n)-1]), ex_si(écart, nc-nom, écart, [n-1]), ex_si(commercial, adj-adj, commercial, [dl(0,n,n)-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('Etats-Unis', npp-nam, 'Etats-Unis', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1817, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(dément, v-ver:pres, dément, [dr(0,dl(0,np,s),np)-1]), ex_si(ces, det-pro:dem, ces, [dr(0,np,n)-1]), ex_si(allégations, nc-nom, allégations, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(bien, adv-adv, bien, [dr(0,dl(1,s,s),s_q)-1]), ex_si('qu\'', cs-kon, 'qu\'', [dr(0,s_q,s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(autorise, v-ver:pres, autorise, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(actuellement, adv-adv, actuellement, [dl(1,s,s)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(yuan, nc-nom, yuan, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(échanger, vinf-ver:infi, échanger, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fourchette, nc-nom, fourchette, [n-1]), ex_si(étroite, adj-adj, étroite, [dl(0,n,n)-1]), ex_si(par, p-prp, par, [dr(0,dl(0,n,n),n)-1]), ex_si(rapport, nc-nom, rapport, [dr(0,n,pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(dollar, nc-nom, dollar, [n-1]), ex_si(américain, adj-adj, américain, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1818, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si('n\'', adv-adv, 'n\'', [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(autorise, v-ver:pres, autorise, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(yuan, nc-abr, yuan, [n-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(échanger, vinf-ver:infi, échanger, [dl(0,cl_r,dl(0,np,s_inf))-1]), ex_si(que, adv-adv, que, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(dans, p-prp, dans, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(fourchette, nc-nom, fourchette, [n-1]), ex_si(étroite, adj-adj, étroite, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1819, Result) :-
      prob_parse([ ex_si('Elle', cls-pro:per, 'Elle', [np-1]), ex_si('s\'', clr-pro:per, 's\'', [cl_r-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,cl_r,dl(0,np,s)),dl(0,cl_r,dl(0,np,s_ppart)))-1]), ex_si(engagée, vpp-ver:pper, engagée, [dr(0,dl(0,cl_r,dl(0,np,s_ppart)),dl(0,np,s_inf))-1]), ex_si(à, p-prp, à, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(permettre, vinf-ver:infi, permettre, [dr(0,dr(0,dl(0,np,s_inf),dl(0,np,s_inf)),pp_a)-1]), ex_si(au, p+d-prp:det, au, [dr(0,pp_a,n)-1]), ex_si(yuan, nc-nom, yuan, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(circuler, vinf-ver:infi, circuler, [dl(0,np,s_inf)-1]), ex_si(plus, adv-adv, plus, [dr(0,dl(1,s,s),dl(1,s,s))-1]), ex_si(librement, adv-adv, librement, [dl(1,s,s)-1]), ex_si(à, p-prp, à, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(avenir, nc-nom, avenir, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(mais, cc-kon, mais, [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(affirme, v-ver:pres, affirme, [dr(0,dl(0,np,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(toute, det-pro:ind, toute, [dr(0,np,n)-1]), ex_si(réforme, nc-nom, réforme, [n-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(serait, v-ver:cond, serait, [dr(0,dl(0,np,s),dl(0,np,s_pass))-1]), ex_si(pas, adv-adv, pas, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(précipitée, vpp-ver:pper, précipitée, [dl(0,np,s_pass)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(car, cc-kon, car, [dr(0,dl(0,s,s),s)-1]), ex_si(elle, cls-pro:per, elle, [np-1]), ex_si(ne, adv-adv, ne, [dr(0,dl(0,np,s),dl(0,np,s))-1]), ex_si(veut, v-ver:pres, veut, [dr(0,dl(0,np,s),dl(0,np,s_inf))-1]), ex_si(pas, adv-adv, pas, [dl(1,s,s)-1]), ex_si(risquer, vinf-ver:infi, risquer, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(déstabiliser, vinf-ver:infi, déstabiliser, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(chinoise, adj-adj, chinoise, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(repose, v-ver:pres, repose, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('exportations..', nc-nom, 'exportations..', [n-1])], Result).
sent(1820, Result) :-
      prob_parse([ ex_si('La', det-det:art, 'La', [dr(0,np,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(économie, nc-nom, économie, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(repose, v-ver:pres, repose, [dr(0,dl(0,np,s),pp)-1]), ex_si(sur, p-prp, sur, [dr(0,pp,np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('exportations..', nc-nom, 'exportations..', [n-1])], Result).
sent(1821, Result) :-
      prob_parse([ ex_si('L\'', det-det:art, 'L\'', [dr(0,dr(0,s,s),n)-1]), ex_si(année, nc-nom, année, [n-1]), ex_si(dernière, adj-adj, dernière, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si('États-Unis', npp-nam, 'États-Unis', [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(vu, vpp-ver:pper, vu, [dr(0,dr(0,dl(0,np,s_ppart),dl(0,np,s_inf)),np)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(exportations, nc-nom, exportations, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(biens, nc-nom, biens, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,n,n),n)-1]), ex_si(services, nc-nom, services, [n-1]), ex_si(augmenter, vinf-ver:infi, augmenter, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('12,8', det-num, '12,8', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('1,44', det-num, '1,44', [dr(0,np,n)-1]), ex_si(trillion, nc-nom, trillion, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(tandis, cs-kon, tandis, [dr(0,dl(1,s,s),s_q)-1]), ex_si(que, cs-kon, que, [dr(0,s_q,s)-1]), ex_si(leurs, det-det:pos, leurs, [dr(0,np,n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(progressé, vpp-ver:pper, progressé, [dl(0,np,s_ppart)-1]), ex_si(de, p-prp, de, [dr(0,dl(1,s,s),np)-1]), ex_si('10,5', det-num, '10,5', [dr(0,np,n)-1]), ex_si('%', nc-sym, '%', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),dl(0,np,s_inf))-1]), ex_si(atteindre, vinf-ver:infi, atteindre, [dr(0,dl(0,np,s_inf),np)-1]), ex_si('2,2', det-num, '2,2', [dr(0,np,n)-1]), ex_si(trillions, nc-nom, trillions, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(a, v-ver:pres, a, [dr(0,dr(0,s,np),dl(0,np,s_ppart))-1]), ex_si(indiqué, vpp-ver:pper, indiqué, [dl(1,s,dl(0,np,s_ppart))-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(département, nc-nom, département, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si('Commerce', nc-nam, 'Commerce', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1822, Result) :-
      prob_parse([ ex_si('Les', det-det:art, 'Les', [dr(0,np,n)-1]), ex_si(exportations, nc-nom, exportations, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(augmenté, vpp-ver:pper, augmenté, [dr(0,dl(0,np,s_ppart),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si('10,5%.', pro-num, '10,5%.', [dr(0,np,n)-1])], Result).
sent(1823, Result) :-
      prob_parse([ ex_si('Le', det-det:art, 'Le', [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(grand, adj-adj, grand, [dr(0,n,n)-1]), ex_si(consommateur, nc-nom, consommateur, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(pétrole, nc-nom, pétrole, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si(monde, nc-nom, monde, [n-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,np,np),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(importations, nc-nom, importations, [n-1]), ex_si(américaines, adj-adj, américaines, [dl(0,n,n)-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(record, nc-nom, record, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si('302,5', det-num, '302,5', [dr(0,np,n)-1]), ex_si(milliards, nc-nom, milliards, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,np,np),n)-1]), ex_si(dollars, nc-nom, dollars, [n-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,dl(1,s,s),n)-1]), ex_si(an, nc-nom, an, [n-1]), ex_si(dernier, adj-adj, dernier, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [dr(0,dl(0,dl(0,np,s),dl(0,np,s)),dl(0,np,s))-1]), ex_si(alimentées, vpp-ver:pper, alimentées, [dr(0,dl(0,np,s_pass),pp_par)-1]), ex_si(par, p-prp, par, [dr(0,pp_par,np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(prix, nc-nom, prix, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(brut, nc-nom, brut, [n-1]), ex_si(qui, prorel-pro:rel, qui, [dr(0,dl(0,n,n),dl(0,np,s))-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(atteint, vpp-ver:pper, atteint, [dr(0,dl(0,np,s_ppart),np)-1]), ex_si(des, det-prp:det, des, [dr(0,np,n)-1]), ex_si(sommets, nc-nom, sommets, [n-1]), ex_si(durant, p-prp, durant, [dr(0,dl(1,s,s),np)-1]), ex_si('l\'', det-det:art, 'l\'', [dr(0,np,n)-1]), ex_si(été, nc-nom, été, [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(1,s,s),n)-1]), ex_si(moment, nc-nom, moment, [n-1]), ex_si(du, p+d-prp:det, du, [dr(0,dl(0,n,n),n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Hezbollah', npp-nam, 'Hezbollah', [n-1]), ex_si(au, p+d-prp:det, au, [dr(0,dl(0,n,n),n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1824, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(y, clo-pro:per, y, [cl_y-1]), ex_si(a, v-ver:pres, a, [dr(0,dl(0,cl_y,dl(0,np,s)),dl(0,cl_y,dl(0,np,s_ppart)))-1]), ex_si(eu, vpp-ver:pper, eu, [dr(0,dl(0,cl_y,dl(0,np,s_ppart)),np)-1]), ex_si(un, det-det:art, un, [dr(0,np,n)-1]), ex_si(conflit, nc-nom, conflit, [n-1]), ex_si(entre, p-prp, entre, [dr(0,dl(0,n,n),np)-1]), ex_si('Israël', npp-nam, 'Israël', [np-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,np,np),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si('Liban', npp-nam, 'Liban', [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1825, Result) :-
      prob_parse([ ex_si('Loin', adv-adv, 'Loin', [dr(0,dr(0,s,s),pp_de)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(site, nc-nom, site, [n-1]), ex_si(olympique, adj-adj, olympique, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si(près, adv-adv, près, [dr(0,dl(0,n,n),pp_de)-1]), ex_si(des, p+d-prp:det, des, [dr(0,pp_de,n)-1]), ex_si(briques, nc-nom, briques, [n-1]), ex_si(et, cc-kon, et, [dr(0,dl(0,pp,pp),pp)-1]), ex_si(du, p+d-prp:det, du, [dr(0,pp_de,n)-1]), ex_si(bois, nc-nom, bois, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cité', npp-nam, 'Cité', [n-1]), ex_si(interdite, vpp-ver:pper, interdite, [dl(0,n,n)-1]), ex_si(',', ponct-pun, ',', [let-1]), ex_si('c\'', cls-pro:dem, 'c\'', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dl(0,np,s),dl(0,n,n))-1]), ex_si(comme, adv-adv, comme, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(si, cs-kon, si, [dr(0,dl(0,n,n),s)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(présence, nc-nom, présence, [n-1]), ex_si(extraterrestre, adj-adj, extraterrestre, [dl(0,n,n)-1]), ex_si(avait, v-ver:impf, avait, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(débarqué, vpp-ver:pper, débarqué, [dl(0,np,s_ppart)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1826, Result) :-
      prob_parse([ ex_si('Des', det-prp:det, 'Des', [dr(0,np,n)-1]), ex_si(extraterrestres, nc-nom, extraterrestres, [n-1]), ex_si(ont, v-ver:pres, ont, [dr(0,dl(0,np,s),dl(0,np,s_ppart))-1]), ex_si(été, vpp-ver:pper, été, [dr(0,dl(0,np,s_ppart),dl(0,np,s_pass))-1]), ex_si(vus, vpp-ver:pper, vus, [dr(0,dl(0,np,s_pass),pp)-1]), ex_si(près, adv-adv, près, [dr(0,dl(1,s,s),pp_de)-1]), ex_si(de, p-prp, de, [dr(0,pp_de,np)-1]), ex_si(la, det-det:art, la, [dr(0,np,n)-1]), ex_si('Cité', nc-nam, 'Cité', [n-1]), ex_si(interdite, vpp-ver:pper, interdite, [dl(0,n,n)-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1827, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(très, adv-adv, très, [dr(0,dl(0,n,n),dl(0,n,n))-1]), ex_si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(les, det-det:art, les, [dr(0,np,n)-1]), ex_si(équipes, nc-nom, équipes, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rester, vinf-ver:infi, rester, [dl(0,np,s_inf)-1]), ex_si(ici, adv-adv, ici, [dl(1,dl(0,np,s),dl(0,np,s))-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(plus, adv-adv, plus, [dr(0,dr(0,n,n),dr(0,n,n))-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
sent(1828, Result) :-
      prob_parse([ ex_si('Il', cls-pro:per, 'Il', [np-1]), ex_si(est, v-ver:pres, est, [dr(0,dr(0,dl(0,np,s),dl(0,np,s_inf)),dl(0,n,n))-1]), ex_si(difficile, adj-adj, difficile, [dl(0,n,n)-1]), ex_si('d\'', p-prp, 'd\'', [dr(0,dl(0,np,s_inf),dl(0,np,s_inf))-1]), ex_si(obtenir, vinf-ver:infi, obtenir, [dr(0,dl(0,np,s_inf),np)-1]), ex_si(le, det-det:art, le, [dr(0,np,n)-1]), ex_si(droit, nc-nom, droit, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),dl(0,np,s_inf))-1]), ex_si(rester, vinf-ver:infi, rester, [dr(0,dl(0,np,s_inf),pp)-1]), ex_si(en, p-prp, en, [dr(0,pp,n)-1]), ex_si('Chine', npp-nam, 'Chine', [n-1]), ex_si(pour, p-prp, pour, [dr(0,dl(1,s,s),np)-1]), ex_si(une, det-det:art, une, [dr(0,np,n)-1]), ex_si(longue, adj-adj, longue, [dr(0,n,n)-1]), ex_si(période, nc-nom, période, [n-1]), ex_si(de, p-prp, de, [dr(0,dl(0,n,n),n)-1]), ex_si(temps, nc-nom, temps, [n-1]), ex_si('.', ponct-pun, '.', [dl(0,s,txt)-1])], Result).
